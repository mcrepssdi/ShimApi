Option Program Tag "$Id: truckscale.bas,v 8.245 2022/10/24 19:53:24 merl.creps Exp $"
! truckscale (TRK1) - Graphical Truck Scale
!
! Last Modified:
!  01-18-05 (JPT) New code
!
! Scrap Codes File Uses:
! 110A_USED= C
! 110A_USED= E
! 110A_USED= F
! 110A_USED= H
! 110A_USED= L
! 110A_USED= N (RW)
! 110A_USED= S
! 110A_USED= U
! 110A_USED= Y
! 110A_USED= e
! 110A_USED= s
! 110A_USED= t
!
! 070A_USED= F
!
! 010A_USED= S
!
! Start of Code----------------------------------------------------------------
Declare Intrinsic Function DateUsing$,FindChannel,FmtOf,Replace$,ReplaceCI$,Trim$
Declare Intrinsic Function SQLN$,SQLV$,SQLNV$,SQLD$,SQLNull$,SQLNull
Declare Intrinsic Sub CheckDigits,DrawImage,Env,ProgramDump,Time
Declare External Function CalcVehPrefixLen,OTMBranch
Declare Sub CertificationInfo,ConfigFileInfo,AdvancedIdentityInfo,ScaleCamera
Declare Sub EndOfDayAdjust,ConfigFile,InitializeScreen,LoginScreen,MainScreen
Declare Sub Purchase,Sale,RetrieveInYardItems
Declare Sub InYardList,ListNotices,ListSalesReleases,InBoundTransfer,ListCarriers
Declare Sub RetrieveSupplier,RetrieveCustomer,RetrievePO,ListPOs,RetrieveSO,ListSOs
Declare Sub ChangeWeighMaster,ProgramFunction,RePrintTicket,GreeterList
Declare Sub DisplaySupplierComments,GetTaxRates
! saitouch.lib
Declare External Function SAITouchYesNo,SAITouchConfirm,SAITouchGeneric$
Declare External Sub SAIKeyBoardGen,SAIKeyBoard,SAIDrawKeyboard,SAIKeyBoardInput,SAIKeyPad
Declare External Sub SAITouchMessage,SAITouchWarning,SAITouchError,SAITouchCalendar,SAITouchButtonList,SAITouchListSelect
! saigui.lib
Declare External Function SAIOpenWindow,SAIQuery$,SAIQueryInput$,SAIQueryRadio$,SAIDateInput$,SAIColorRGB,SAIColorWord
Declare External Function SAIArialFont$,SAIMonoFont$
Declare External Sub SAIScreenInit,SAIScreenReset,SAIButtons,SAIWindowTitle,SAILineSeparator,SAIHelpWindow,SAISetRadio,SAIQueryMultString
! saiutil.lib
Declare External Function SAIDateDisplay$,SAISafeDateUsing$,SAIConvertYear$,SAIConvertDate$,SAIConvertDate#,SAICurrentDate#,SAIDateOrder$
Declare External Function SAIGetUser$,SAIDivide,SAIFill$,SAISpaceFill$
Declare External Sub GetCommandLine,SAIRemoveCRLF,SAISplit,SAICopyArray,SAIGetNumbers,SAIAppendLog
! saiobjects.lib
Declare External Function SAIGlobalSetting$,SAIGlobalWord$,SAICodesFileDesc$,SAIUMConvFactor,SAIGetSystemProp$
Declare External Sub SAIVersion,SAICalcPriceExt,SAICalcAveCost
! saifile.lib
Declare External Function SAIGetKey$,SAIGetPortRec$,SAITableExists,SAICodesTableDesc$,SAICodesTableCodeExists,SAICheckInUse
Declare External Sub SAIOpenFile,SAIAddRecord,SAIDeleteRecord,SAIGetRecord,SAIReadRecord,SAIWriteRecord,SAIChannelDisplay
Declare External Sub SAIOpenDatabase
! saiscale.lib
Declare External Function SAIRoundPayment,SAIGetClientIPAddr$
Declare External Sub SAIATMEncode,SAIReadScale,SAIReadScaleBG,SAIReadRFID,SAIReadLicense2,SAIReadScaleScanner,SAICreateEFTFile
Declare External Sub SAIJPeggerCommand,SAIGetCameraHost,SAIViewPhotos,SAILicView,SAICameraCapture,SAICapturePhoto,SAICaptureSignature
Declare External Sub SAIPhotoViewerTrigger,SAIValidateContainerNo,SAIValidateWeighMaster,SAIReadDAQDevice,SAICopyPhotos
! saientity.lib
Declare External Function SAIValidSupplier,SAIValidTaxID,SAIGetEntityName$
Declare External Sub SAISelectSupplier,SAISelectCustomer
! saisupplierid8.lib
Declare External Function SAISelectCardReader$
Declare External Sub SAIFormatName,SAISetTicketIdentity,SAIRetrieveSupplierID,SAIAdvancedIdentityInfo,SAICreateIdentity,SAIVinDetail,SAICheckDoNotBuyList
Declare External Sub SAIAdvancedVehicleInfo,SAIPeddlerVolumeQuery,SAICheckOhioDoNotBuy
! sailasercheck.lib
Declare External Function SAICheckFormExists,SAICheckFormConfigExists,SAIFormatMICRText$,SAIPrefixBankCode$
Declare External Sub SAIPrintLaserCheck7,SAIFormatTransitNo
! saimaterial.lib
Declare External Function SAIInventoryDesc$,SAICreateInventoryKey$,SAICreateMaterialKey$,SAIAltPriceClassMaterial
! saimulticurrency.lib
Declare External Function SAIGetFXRate2
Declare External Sub SAIGetBranchFundsType
! saiemail.lib
Declare External Function SAIEmailAlertStatus
Declare External Sub SAIInitEmailAlert,SAIGetEmailAlertAddresses
! saihttp.lib
Declare External Sub SAIFormatJSON,SAIGetWebServiceParams,SAISubmitHTTPRequest,SAIDecodeJSONResponse
! saisecurity.lib
Declare External Function SAISecurityEnabled,SAIValidProgram
External Lib "saitouch.lib","saigui.lib","saiutil.lib","saifile.lib","saiobjects.lib","saiscale.lib","saientity.lib","saisupplierid8.lib"
External Lib "sailasercheck.lib","saimaterial.lib","saimulticurrency.lib","saiemail.lib","saihttp.lib","saisecurity.lib"
Sub WriteLogFile(Message$)
  Call SAIAppendLog("log/truckscale_" + Str$(Tim(16)) + Tim(9) Using "&&" + ".log",user$ + " " + Branch$ + " " + ConfigFile$ + " " + Version$ + "\15\" + Message$,"Y")
End Sub 
! Initial Setup
Dim ident$[100] \ ident$ = "$Id: truckscale.bas,v 8.245 2022/10/24 19:53:24 merl.creps Exp $"
Dim Version$[10] \ Version$ = ident$[Pos(ident$, = ".bas,v") + 7] To " "
Escdis 
Close 
If Err 0 Goto error0
! Check if number of rows set to at least 29
Print 'XX';
If Msc(34) < 29
  Print 
  Print "Your dl4Term settings are incorrect!"
  Print "The number of rows must be at least 29."
  Print 
  Input "Hit <CR> to exit: "ident$
  Print 
  Chain ""
End If 
Call SAIScreenInit(status)
If status
  Print 'XX';
  Chain "scm.menu0"
End If 
! Determine how program was executed (command line or chained to from menu)
Dim path$[100],arglist$[5,50],ConfigFile$[50]
Dim PortRec$[409],Branch$[2],Station$[20]
Call GetCommandLine(path$,arglist$[],nargs)
If LCase$(arglist$[0]) = "truckscale"
  chained = 0
  For i = 1 To nargs
    Select Case LCase$(arglist$[i])
      Case Is = "-b","-branch"
        i = i + 1
        Branch$ = arglist$[i]
      Case Is = "-s","-station","-scale"
        i = i + 1
        Station$ = arglist$[i]
    End Select 
  Next i
Else 
  chained = 1
  PortRec$ = SAIGetPortRec$()
  Branch$ = PortRec$[9,10]
  Station$ = Spc(6) Using "&&&&" ! If chained from MENU let Station = Port No
End If 
! Define global variables
Dim DateOrder$[5],dateformat$[8],DateFormat1$[10],DateformatText$[12] \ DateOrder$ = SAIDateOrder$()
Dim 2%,RunDate#,SaveDate#,RunDate$[6],rundatetext$[12]
If DateOrder$ = "DMY"
  dateformat$ = "DD/MM/YY"
  DateFormat1$ = "DD/MM/YYYY"
  DateformatText$ = "DD-Mon-YYYY"
Else 
  dateformat$ = "MM/DD/YY"
  DateFormat1$ = "MM/DD/YYYY"
  DateformatText$ = "Mon DD, YYYY"
End If 
RunDate# = SAICurrentDate#() ! Use this function instead of Tim#(0) so not affected by TZ
RunDate$ = SAIConvertDate$(RunDate#)
rundatetext$ = DateUsing$(RunDate#,DateformatText$)
Dim user$[20] \ user$ = SAIGetUser$()
Dim 1%,gbl_st,gbl_stlen,gbl_um$[2],gbl_descum$[10],gbl_scale$[5],gbl_check$[6],gbl_WeighMaster$[20],LevyWord$[6]
Dim 3%
Dim DisplayUM$[5],NTEPCert$[20]
gbl_st = SAIGlobalSetting$("STATE_OFFSET")
gbl_stlen = SAIGlobalSetting$("STATE_LENGTH")
gbl_um$ = SAIGlobalSetting$("UM")
gbl_descum$ = SAIGlobalWord$("DESCUM")
If UCase$(gbl_um$) = "KG" Let gbl_descum$ = "Kilogram"
gbl_scale$ = SAIGlobalWord$("SCALE")
gbl_check$ = SAIGlobalWord$("CHECK")
gbl_WeighMaster$ = SAIGlobalWord$("Weighmaster")
LevyWord$ = SAIGlobalWord$("LEVIES")
DisplayUM$ = LCase$(gbl_um$)
NTEPCert$ = "NTEP CC No. 06-071"
! Get Client IP Address
Dim ClientIPAddr$[50]
ClientIPAddr$ = SAIGetClientIPAddr$()
! Declare Structure Variables
!  include "str.recorddef"
Def Struct RecordDef
  Member FileCode$[4] ! 4-digit SAI File Code
  Member FileType$[1] ! File Type (I=Indexed, D=Directory only)
  Member 1%,RecLen ! Record Length in bytes (0 if Directory only file)
  Member 1%,StrDim ! String Variable Dimension
  Member 1%,MatNum[4] ! Number of array elements for precision i (Dimension of array will be one less than this #)
  Member 1%,MatOffset[4] ! Matrix Offset for precision i
  Member 1%,NumDirs ! Number of Dirctories
  Member 1%,DirLen[16] ! Length of Directory i
  Member 1%,DirParts[16] ! Number of parts to Directory i
  Member 1%,DirStart[16,20] ! Starting string position of Directory i, Part p
  Member 1%,DirEnd[16,20] ! Ending string position of Directory i, Part p
End Def 
! Globals Variables
Def Struct Globals
  Member CorporateCo$[2]
  Member CustomerID$[3]
  Member CustomerGroupID$[3]
  Member MultiCurrency$[1]
  Member BaseCurrency$[3]
  Member BaseFundsType$[2]
  Member BranchCurrency$[3]
  Member BranchFundsType$[2]
  Member LevyMode$[1]
  Member DefaultPaperSize$[10]
  Member 2%,A4Offset
  Member 4%,PeddlerLimit
  Member SystemEmailFrom$[200]
End Def 
Dim gbl. As Globals
! Currency Structure (Partial Structure, FundsType first for searching)
Def Struct Codes_Currency
  Member FundsType$[2] : Item "FundsType"
  Member CurrencyCode$[3] : Item "CurrencyCode"
  Member Description$[30] : Item "Description"
End Def 
Dim CodesCurrency.[0] As Codes_Currency
Def Struct KeyBoardParams
  Member 1%,alphacase ! Current AlphaCase (0=Lower,1=Upper)
  Member 1%,StartX ! Upper left x position
  Member 1%,StartY ! Upper left y position
  Member 1%,ButtonHeight ! Button Height
  Member 1%,ButtonWidth ! Button Width
  Member 1%,FontSize1 ! FontSize of Character Buttons
  Member 1%,FontSize2 ! FontSize of Control Keys
  Member 1%,InputElement ! Element Number of Input Element
  Member 1%,IEType ! Input Element Type (1=Password)
  Member 1%,IELength ! Length of Input Element
  Member 1%,IEMaxChar ! Maximum characters to allow for input element
  Member IELabel$[30] ! Label of Input Element (="" for no label)
  Member 1%,FuncBtnLen ! Length of Function Button (0 for no Function Buton)
  Member FunctionBtn$[15] ! Function Button Label
  Member Rows$[5,20] ! Button Descriptions
End Def 
Dim KBParams. As KeyBoardParams
! Ticket Header (InYard_Hdr)
Def Struct Ticket_Header
  Member TicketNo$[6] : Item "TicketNo"
  Member Branch$[2] : Item "Branch"
  Member InYardID$[11] : Item "InYardID"
  Member YardZone$[2] : Item "YardZone"
  Member 4%,ControlNo : Item "ControlNo"
  Member TktType$[1] : Item "TktType" ! "P"urchase, "S"ale, "R"etail
  Member TktMode$[1] : Item "TktMode" ! "D"irt, "T"ransfer
  Member 3%,StartTime# : Item "StartTime" ! DateTime
  Member 2%,EntryDate# : Item "EntryDate"
  Member 2%,ShipmentDate# : Item "ShipmentDate"
  Member 1%,Noticed : Item "Noticed"
  Member 1%,SplitLoad : Item "SplitLoad"
  Member EntityNo$[6] : Item "EntityNo"
  Member Name$[30] : Item "Name"
  Member Address1$[25] : Item "Address1"
  Member Address2$[25] : Item "Address2"
  Member City$[25] : Item "City"
  Member State$[3] : Item "State"
  Member PostCode$[10] : Item "PostCode"
  Member PhoneNo$[20] : Item "PhoneNo"
  Member TaxID$[20] : Item "TaxID"
  Member TaxID2$[20] : Item "TaxID2"
  Member IDNumber$[25] : Item "IDNumber"
  Member 4%,supplier_id_rowid : Item "Supplier_ID_rowid"
  Member RFID$[24] : Item "RFID"
  Member 1%,RFID_InBound : Item "RFID_InBound"
  Member 1%,RFID_OutBound : Item "RFID_OutBound"
  Member VehType$[1] : Item "VehType"
  Member VehSize$[2] : Item "VehSize"
  Member VehNo$[11] : Item "VehNo"
  Member PUBarcode$[20] : Item "PUBarcode"
  Member TrailerBarcode$[20] : Item "TrailerBarcode"
  Member 1%,AxleCount : Item "AxleCount"
  Member 3%,ContainerTareWt : Item "ContainerTareWt"
  Member 4%,ReleaseNo : Item "ReleaseNo"
  Member OrderNo$[10] : Item "OrderNo"
  Member OrderLine$[2] : Item "OrderLine"
  Member FundsType$[2] : Item "FundsType"
  Member ShipmentNo$[6] : Item "ShipmentNo"
  Member ShipFromTo$[4] : Item "ShipFromTo"
  Member MatReqNo$[10] : Item "MatReqNo"
  Member MatReqLine$[2] : Item "MatReqLine"
  Member CarrierNo$[6] : Item "CarrierNo"
  Member CarrierRefNo$[20] : Item "CarrierRefNo"
  Member TripTicketNo$[6] : Item "TripTicketNo"
  Member ShipOrdNo$[20] : Item "ShipOrdNo"
  Member SuppShipNo$[10] : Item "CustBOL" ! NEEDS CHANGED
  Member SuppInvNo$[10] : Item "SuppInvNo"
  Member Trader$[3] : Item "Trader"
  Member SrcBranch$[2] : Item "SrcBranch"
  Member SrcYard$[1] : Item "SrcYard"
  Member SrcInvCode$[8] : Item "SrcInvCode"
  Member SrcTicketNo$[6] : Item "SrcTicketNo"
  Member 3%,OriginGrossWt : Item "OriginGrossWt"
  Member 3%,OriginTareWt : Item "OriginTareWt"
  Member 3%,OriginNetWt : Item "OriginNetWt"
  Member OriginWtSrc$[10] : Item "OriginWtSrc"
  Member BOLNo$[10] : Item "BOLNo"
  Member RouteNo$[20] : Item "RouteNo"
  Member DeliveryAddr$[20] : Item "DeliveryAddr"
  Member DeliveringCarrier$[20] : Item "DeliveringCarrier"
  Member CarInitials$[10] : Item "CarInitials"
  Member CarNo$[11] : Item "CarNo"
  Member CustReleaseNo$[20] : Item "CustReleaseNo"
  Member SealNo$[10] : Item "SealNo"
  Member Seal2No$[20] : Item "Seal2No"
  Member Seal3No$[20] : Item "Seal3No"
  Member ContainerNo$[12] : Item "ContainerNo"
  Member BookingNo$[16] : Item "BookingNo"
  Member LAInfo_DriversName$[15] : Item "LAInfo_DriversName"
  Member LAInfo_District$[2] : Item "LAInfo_District"
  Member LAInfo_Route$[5] : Item "LAInfo_Route"
  Member LAInfo_Section$[1] : Item "LAInfo_Section"
  Member CurbSideCity$[2] : Item "CurbsideCity"
  Member 2%,BargeConstPlmntDate# : Item "BargeConstPlmntDate"
  Member 2%,BargeReleaseDate# : Item "BargeReleaseDate"
  Member 1%,OccupantCount : Item "OccupantCount"
  Member 3%,FreightHrs : Item "FreightHrs"
  Member 3%,AlloyContainedPct : Item "AlloyContainedPct"
  Member 1%,Photo : Item "Photo"
  Member WMaster$[3] : Item "WMaster"
  Member PaymentCode$[1] : Item "PaymentCode"
  Member PaymentType$[10] : Item "PaymentType"
  Member BankCode$[2] : Item "BankCode"
  Member PaymentNo$[6] : Item "PaymentNo"
  Member CDUReceiptNo$[10] : Item "CDUReceiptNo"
  Member ShippingInst$[30] : Item "ShippingInst"
  Member TktComment$[50] : Item "TktComment"
  Member InspectionComment$[50] : Item "InspectionComment"
  Member InspectionStatus$[1] : Item "InspectionStatus"
  Member InspectionState$[1] : Item "InspectionState"
  Member InspectionInUseBy$[3] : Item "InspectionInUseBy"
  Member 1%,InUse : Item "InUse"
  Member InUseBy$[20] : Item "InUseBy"
  Member InUsePort$[4] : Item "InUsePort"
End Def 
Dim TicketHeader. As Ticket_Header
! Ticket Detail (InYard_Dtl)
Def Struct Ticket_Detail
  Member TicketNo$[6] : Item "TicketNo"
  Member 1%,ItemNo : Item "ItemNo"
  Member MaterialCode$[8] : Item "MaterialCode"
  Member InventoryCode$[8] : Item "InventoryCode"
  Member YardCode$[1] : Item "YardCode"
  Member 1%,StkPileReq : Item "StkPileReq"
  Member StockPile$[3] : Item "StockPile"
  Member MaterialDesc$[30] : Item "MaterialDesc"
  Member MaterialCmt1$[30] : Item "MaterialCmt1"
  Member MaterialCmt2$[30] : Item "MaterialCmt2"
  Member 1%,CFCFlag : Item "CFCFlag"
  Member 1%,DirtFlag : Item "DirtFlag"
  Member DetailOrderLine$[2] : Item "DetailOrderLine"
  Member ShipmentNo$[6] : Item "ShipmentNo"
  Member 1%,RedFlag : Item "RedFlag" ! **CHANGED** added
  Member RedType$[2] : Item "RedType"
  Member RedMat$[15] : Item "RedMat"
  Member 3%,Price : Item "Price"
  Member PriceUM$[2] : Item "PriceUM"
  Member 1%,UnPriced : Item "Unpriced"
  Member 3%,GrossWt : Item "GrossWt"
  Member 3%,GrossWtTime# : Item "GrossWtTime"
  Member GrossWtScale$[1] : Item "GrossWtScale"
  Member GrossWtWM$[3] : Item "GrossWtWM"
  Member 3%,GrossWt_BGRead : Item "GrossWt_BGRead"
  Member 1%,GrossWt_BGStatus : Item "GrossWt_BGStatus"
  Member 3%,TareWt : Item "TareWt"
  Member 3%,TareWtTime# : Item "TareWtTime"
  Member TareWtScale$[1] : Item "TareWtScale"
  Member TareWtWM$[3] : Item "TareWtWM"
  Member 3%,TareWt_BGRead : Item "TareWt_BGRead"
  Member 1%,TareWt_BGStatus : Item "TareWt_BGStatus"
  Member 3%,NetWt : Item "NetWt"
  Member 3%,AdjWt : Item "AdjWt"
  Member 3%,AdjPercent : Item "AdjPercent"
  Member AdjCode$[1] : Item "AdjCode"
  Member InspectedBy$[3] : Item "InspectedBy"
  Member 3%,CarBodies : Item "CarBodies"
  Member 3%,Bales : Item "Bales"
  Member OrigMaterialCode$[8] : Item "OrigMaterialCode"
  Member ManReason$[1] : Item "ManReason"
  Member 1%,MatCodeChg : Item "MatCodeChg"
  Member 1%,MatDescChg : Item "MatDescChg"
  Member 1%,PriceChg : Item "PriceChg"
  Member 3%,RedCount : Item "RedCount"
  Member 3%,RedNetWt : Item "RedNetWt"
  Member 3%,RedRate : Item "RedRate"
  Member 3%,RedExt : Item "RedExt"
  Member 4%,MatExt : Item "MatExt"
  Member 4%,MatGST : Item "MatGST"
  Member 4%,MatPST : Item "MatPST"
  Member 4%,FrtExt : Item "FrtExt"
  Member 4%,FrtGST : Item "FrtGST"
  Member 4%,FrtPST : Item "FrtPST"
  Member 4%,FrtCbk : Item "FrtCbk"
  Member 4%,CbkGST : Item "CbkGST"
  Member 4%,CbkPST : Item "CbkPST"
  Member 4%,AmtPaid : Item "AmtPaid"
End Def 
Dim TicketDetail. As Ticket_Detail
Dim TicketDetailTmp. As Ticket_Detail
Dim Items.[99] As Ticket_Detail
Def Struct Ticket_Totals
  Member 4%,TotalGross
  Member 4%,TotalTare
  Member 4%,TotalAdj
  Member 4%,TotalNet
  Member 3%,TotalCars
  Member 4%,TotalMatGST
  Member 4%,TotalMatPST
  Member 4%,TotalRedCount
  Member 4%,TotalRedNetWt
  Member 4%,TotalRedExt
  Member 4%,TotalCbkFrt
  Member 4%,TotalPrice
  Member 4%,TotalPaid
End Def 
Dim TicketTotals. As Ticket_Totals
Def Struct InYard_Dtl_Item
  Member 3%,NetWt : Item "NetWt"
  Member 3%,AdjWt : Item "AdjWt"
  Member 4%,Price : Item "Price"
  Member PriceUM$[2] : Item "PriceUM"
End Def 
Dim InYardDtlItem. As InYard_Dtl_Item
Def Struct InYard_List
  Member TicketNo$[6] : Item "TicketNo"
  Member Branch$[2] : Item "Branch"
  Member InYardID$[11] : Item "InYardID"
  Member 3%,ItemNo : Item "ItemNo"
  Member TktType$[1] : Item "TktType" ! "P"urchase, "S"ale, "R"etail
  Member TktMode$[1] : Item "TktMode" ! "D"irt, "T"ransfer
  Member 2%,ShipmentDate# : Item "ShipmentDate"
  Member Name$[30] : Item "Name"
  Member 1%,Photo : Item "Photo"
  Member 1%,InUse : Item "InUse"
  Member InUseBy$[20] : Item "InUseBy"
  Member InUsePort$[4] : Item "InUsePort"
  Member MaterialDesc$[30] : Item "MaterialDesc"
  Member 3%,GrossWt : Item "GrossWt"
  Member 3%,TareWt : Item "TareWt"
  Member InspectionStatus$[1] : Item "InspectionStatus"
End Def 
maxinyard = 200
Dim InYardList.[maxinyard] As InYard_List
Def Struct Pur_Notice
  Member 4%,NoticeNo : Item "NoticeNo"
  Member Branch$[2] : Item "Branch"
  Member 2%,ShipmentDate# : Item "ShipmentDate"
  Member 2%,EstReceiveDate# : Item "EstReceiveDate"
  Member NoticeType$[10] : Item "NoticeType"
  Member Status$[1] : Item "Status"
  Member TicketNo$[6] : Item "TicketNo"
  Member ShipmentNo$[6] : Item "ShipmentNo"
  Member SupplierNo$[6] : Item "SupplierNo"
  Member ShipFrom$[4] : Item "ShipFrom"
  Member PONo$[10] : Item "PONo"
  Member POLine$[2] : Item "POLine"
  Member CarrierNo$[6] : Item "CarrierNo"
  Member CarrierRefNo$[20] : Item "CarrierRefNo"
  Member TripTicketNo$[6] : Item "TripTicketNo"
  Member SuppShipNo$[10] : Item "SuppShipNo"
  Member VehType$[1] : Item "VehType"
  Member VehSize$[2] : Item "VehSize"
  Member VehNo$[11] : Item "VehNo"
  Member SealNo$[10] : Item "SealNo"
  Member Comments$[200] : Item "Comments"
  Member 3%,GrossWt : Item "GrossWt"
  Member 3%,TareWt : Item "TareWt"
  Member 3%,NetWt : Item "NetWt"
End Def 
maxnotice = 200
Dim PurNotices.[maxnotice] As Pur_Notice
Dim PurNotice. As Pur_Notice
! Supplier Master (Partial Structure)
Def Struct Supplier_Master
  Member SupplierNo$[6] : Item "SupplierNo"
  Member SupplierAlpha$[10] : Item "SupplierAlpha"
  Member Name$[30] : Item "Name"
  Member Address1$[25] : Item "Address1"
  Member Address2$[25] : Item "Address2"
  Member City$[25] : Item "City"
  Member State$[3] : Item "State"
  Member PostCode$[10] : Item "PostCode"
  !    Member Contact$[25]     : ITEM "Contact"
  Member PhoneNo$[12] : Item "PhoneNo"
  !    Member PhoneExtension$[4]   : ITEM "PhoneExtension"
  !    Member FAXNo$[12]     : ITEM "FAXNo"
  Member SPLC_Code$[6] : Item "SPLC_Code"
  !    Member 2%,CreateDate#     : ITEM "CreateDate"
  Member 2%,CancelDate# : Item "CancelDate"
  !    Member 2%,DateofLastPurchase#   : ITEM "DateofLastPurchase"
  Member AccountType$[1] : Item "AccountType"
  Member MiscSupplierType$[1] : Item "MiscSupplierType"
  Member Branch$[2] : Item "Branch"
  Member BranchGroup$[3] : Item "BranchGroup"
  Member PriceClass$[1] : Item "PriceClass"
  Member AltPriceClass$[1] : Item "AltPriceClass"
  Member TraderCode$[3] : Item "TraderCode"
  Member FeTraderCode$[3] : Item "FeTraderCode"
  Member NFTraderCode$[3] : Item "NFTraderCode"
  Member IntercompanyCode$[1] : Item "IntercompanyCode"
  Member IntercompanyType$[1] : Item "IntercompanyType"
  !    Member PaymentTermsCode$[2]   : ITEM "PaymentTermsCode"
  !    Member SummaryCheck$[1]     : ITEM "SummaryCheck"
  !    Member SummaryCheckFlag$[1]   : ITEM "SummaryCheckFlag"
  !    Member Tax1099_UPD$[1]      : ITEM "Tax1099_UPD"
  !    Member Tax1099$[1]      : ITEM "Tax1099"
  Member TaxID$[20] : Item "TaxID"
  Member TaxID2$[20] : Item "TaxID2"
  Member SettlementCode$[1] : Item "SettlementCode"
  Member SignatureOnFile$[1] : Item "SignatureOnFile"
  Member 2%,CFCFormDate# : Item "CFCFormDate"
  Member MercuryFlag$[1] : Item "MercuryFlag"
  Member HazMatDocOnFile$[1] : Item "HazMatDocOnFile"
  Member 2%,HazMatDocExpDate# : Item "HazMatDocExpDate"
  Member DoNotPay$[1] : Item "DoNotPay"
  !    Member PrintPriceForm$[1]   : ITEM "PrintPriceForm"
  Member PrintPriceAtScale$[1] : Item "PrintPriceAtScale"
  Member SupplierInvoiceReqd$[1] : Item "SupplierInvoiceReqd"
  !    Member DispatchSupplier$[1]   : ITEM "DispatchSupplier"
  Member UseAutoTare$[1] : Item "UseAutoTare"
  Member HandInspect$[1] : Item "HandInspect"
  Member SuppShipNoHandling$[1] : Item "SuppShipNoHandling"
  !    Member NYC_DOS_Flag$[1]     : ITEM "NYC_DOS_Flag"
  !    Member Notice$[1]     : ITEM "Notice"
  !    Member ShipToFrom$[1]     : ITEM "ShipToFrom"
  !    Member ContraCustomer$[6]   : ITEM "ContraCustomer"
  !    Member PayToSupplier$[6]    : ITEM "PayToSupplier"
  !    Member BankCodeOverride$[2]   : ITEM "BankCodeOverride"
  !    Member EFTBankCode$[2]      : ITEM "EFTBankCode"
  !    Member EFTBankID$[10]     : ITEM "EFTBankID"
  Member EFTBankAccount$[25] : Item "EFTBankAccount"
  Member 1%,EFTOverLimit : Item "EFTOverLimit"
  Member FundsType$[2] : Item "FundsType"
  Member HaveTaxID$[1] : Item "HaveTaxID"
  Member TaxableFlag$[1] : Item "TaxableFlag"
  Member TaxJurisdiction$[1] : Item "TaxJurisdiction"
  !    More...
  Member 1%,PORequired : Item "PORequired"
  !    More...
End Def 
Dim Supplier. As Supplier_Master
Dim Vendor. As Supplier_Master
Def Struct Supplier_List
  Member SupplierNo$[6] : Item "SupplierNo"
  Member SupplierAlpha$[10] : Item "SupplierAlpha"
  Member Name$[30] : Item "Name"
  Member City$[25] : Item "City"
End Def 
Dim SupplierList. As Supplier_List
! Customer Master (Partial Structure)
Def Struct Customer_Master
  Member CustomerNo$[6] : Item "CustomerNo"
  Member CustomerAlpha$[10] : Item "CustomerAlpha"
  Member Name$[30] : Item "Name"
  Member Address1$[25] : Item "Address1"
  Member Address2$[25] : Item "Address2"
  Member City$[20] : Item "City"
  Member State$[3] : Item "State"
  Member PostCode$[10] : Item "PostCode"
  !    Member County$[2]     : ITEM "County"
  !    Member Contact$[25]     : ITEM "Contact"
  Member PhoneNo$[12] : Item "PhoneNo"
  !    Member PhoneExtension$[4]   : ITEM "PhoneExtension"
  !    Member FAXNo$[12]     : ITEM "FAXNo"
  !    Member SPLC_Code$[6]      : ITEM "SPLC_Code"
  !    Member 2%,CreateDate#     : ITEM "CreateDate"
  Member 2%,CancelDate# : Item "CancelDate"
  Member AccountType$[1] : Item "AccountType"
  !    Member IntercompanyCode$[1]   : ITEM "IntercompanyCode"
  Member IntercompanyType$[1] : Item "IntercompanyType"
  Member Branch$[2] : Item "Branch"
  Member BranchGroup$[3] : Item "BranchGroup"
  !    Member PriceClass$[1]     : ITEM "PriceClass"
  Member TraderCode$[3] : Item "TraderCode"
  Member BrokerInvoiceWgtCode$[1] : Item "BrokerInvoiceWgtCode"
  !    Member WgtsToInvoiceOnTrk$[1]   : ITEM "WgtsToInvoiceOnTrk"
  !    Member WgtsToInvoiceOnCar$[1]   : ITEM "WgtsToInvoiceOnCar"
  !    Member TermsCode$[2]      : ITEM "TermsCode"
  Member FundsType$[2] : Item "FundsType"
  Member TaxableFlag$[1] : Item "TaxableFlag"
  Member TaxCode$[1] : Item "TaxCode"
  Member HaveTaxID$[1] : Item "HaveTaxID"
  Member TaxID$[20] : Item "TaxID"
  Member TaxID2$[20] : Item "TaxID2"
  !    Member LockBoxNo$[2]      : ITEM "LockBoxNo"
  !    Member 2%,CreditEstabDate#    : ITEM "CreditEstabDate"
  !    Member 2%,CreditExpireDate#   : ITEM "CreditExpireDate"
  Member 3%,CreditLimit : Item "CreditLimit"
  Member CreditStatus$[1] : Item "CreditStatus"
  Member 3%,CreditCheckPercent : Item "CreditCheckPercent"
  !    Member MultiLineInvoice$[1]   : ITEM "MultiLineInvoice"
  !    Member NumExtraInvoices$[2]   : ITEM "NumExtraInvoices"
  !    Member DoNotPrintInvoice$[1]    : ITEM "DoNotPrintInvoice"
  !    Member DoNotMailInvoice$[1]   : ITEM "DoNotMailInvoice"
  !    Member SummInvoiceAR$[1]    : ITEM "SummInvoiceAR"
  !    Member CustPORequired$[1]   : ITEM "CustPORequired"
  !    Member PrelimInvoice$[1]    : ITEM "PrelimInvoice"
  !    Member CRSortKey$[1]      : ITEM "CRSortKey"
  Member HomeOffice$[1] : Item "HomeOffice"
  Member HomeOfficeXRef$[6] : Item "HomeOfficeXRef"
  Member ApptmntReqd$[1] : Item "ApptmntReqd"
  Member ShipRefNoFooter$[1] : Item "ShipRefNoFooter"
  !    More...
  Member 3%,CurrentBalance : Item "CurrentBalance"
  !    Member 3%,CurrentAccrual    : ITEM "CurrentAccrual"
  Member 3%,FutureAccrual : Item "FutureAccrual"
  !    More...
End Def 
Dim Customer. As Customer_Master
Dim CustomerTemp. As Customer_Master
Def Struct Customer_List
  Member CustomerNo$[6] : Item "CustomerNo"
  Member CustomerAlpha$[10] : Item "CustomerAlpha"
  Member Name$[30] : Item "Name"
  Member City$[25] : Item "City"
End Def 
Dim CustomerList. As Customer_List
Def Struct Alt_Address
  Member AddressType$[1] : Item "AddressType"
  Member EntityNo$[6] : Item "EntityNo"
  Member SeqNo$[4] : Item "SeqNo"
  Member Name$[30] : Item "Name"
  Member Address1$[25] : Item "Address1"
  Member Address2$[25] : Item "Address2"
  Member City$[20] : Item "City"
  Member State$[3] : Item "State"
  Member PostCode$[10] : Item "PostCode"
  !    Member Contact$[20]     : ITEM "Contact"
  !    Member PhoneNo$[12]     : ITEM "PhoneNo"
  !    Member PhoneExtension$[4]   : ITEM "PhoneExtension"
  !    Member FaxNo$[12]     : ITEM "FaxNo"
  !    Member SPLC_Code$[6]      : ITEM "SPLC_Code"
  !    Member 2%,DateLastChange#   : ITEM "DateLastChange"
  Member ExportAddress1$[50] : Item "ExportAddress1"
  Member ExportAddress2$[50] : Item "ExportAddress2"
  Member ExportAddress3$[50] : Item "ExportAddress3"
  Member ExportAddress4$[50] : Item "ExportAddress4"
  Member ExportAddress5$[50] : Item "ExportAddress5"
  !    More...
End Def 
Dim AltAddress. As Alt_Address
Dim ExportAddress. As Alt_Address
Def Struct Purchase_Material_Price
  Member SupplierNo$[6] : Item "SupplierNo"
  Member MaterialCode$[8] : Item "MaterialCode"
  Member Branch$[2] : Item "Branch"
  Member InventoryCode$[8] : Item "InventoryCode"
  Member YardCode$[1] : Item "YardCode"
  Member 2%,ExpirationDate# : Item "ExpirationDate"
  Member MaterialDesc$[30] : Item "MaterialDesc"
  Member Comment1$[30] : Item "Comment1"
  Member Comment2$[30] : Item "Comment2"
  Member Dirt_CFC_Levy$[1] : Item "Dirt_CFC_Levy"
  Member CarBody$[1] : Item "CarBody"
  !    Member MaterialGroup$[6]    : ITEM "MaterialGroup"
  !    Member AllowBlanketUpd$[1]    : ITEM "AllowBlanketUpd"
  !    Member BlanketUpdType$[3]   : ITEM "BlanketUpdType"
  Member Inactive$[1] : Item "Inactive"
  !    Member PrintPriceOnForm$[1]   : ITEM "PrintPriceOnForm"
  !    Member 3%,MinimumPrice      : ITEM "MinimumPrice"
  !    Member PriceAs$[8]      : ITEM "PriceAs"
  !    Member 3%,Shrinkage     : ITEM "Shrinkage"
  Member 3%,PriceTolerance : Item "PriceTolerance"
  Member PriceToleranceType$[1] : Item "PriceToleranceType"
  !    Member PriceVarianceType$[1]    : ITEM "PriceVarianceType"
  !    Member 3%,PriceVariance     : ITEM "PriceVariance"
  !    Member 3%,PriceVariance2    : ITEM "PriceVariance2"
  Member RedType$[2] : Item "RedType"
  Member RedMaterial$[15] : Item "RedMaterial"
  Member FundsType$[2] : Item "FundsType"
  !    Member FormPricePub$[2]     : ITEM "FormPricePub"
  !    Member FormPriceSection$[3]   : ITEM "FormPriceSection"
  !    Member FormPriceGroup$[2]   : ITEM "FormPriceGroup"
  !    Member FormPriceDistrict$[3]    : ITEM "FormPriceDistrict"
  !    Member FormPriceCategory$[3]    : ITEM "FormPriceCategory"
  !    Member FormPriceDateType$[1]    : ITEM "FormPriceDateType"
  !    Member PriceFormula$[3]     : ITEM "PriceFormula"
  !    Member 3%,WgtVariance     : ITEM "WgtVariance"
  Member 2%,CurrentPriceEffDate# : Item "CurrentPriceEffDate"
  Member 3%,CurrentPrice : Item "CurrentPrice"
  Member CurrentPriceUM$[2] : Item "CurrentPriceUM"
  Member 2%,Price1EffDate# : Item "Price1EffDate"
  Member 3%,Price1 : Item "Price1"
  Member Price1UM$[2] : Item "Price1UM"
  Member 2%,Price2EffDate# : Item "Price2EffDate"
  Member 3%,Price2 : Item "Price2"
  Member Price2UM$[2] : Item "Price2UM"
  Member 2%,Price3EffDate# : Item "Price3EffDate"
  Member 3%,Price3 : Item "Price3"
  Member Price3UM$[2] : Item "Price3UM"
  Member 2%,Price4EffDate# : Item "Price4EffDate"
  Member 3%,Price4 : Item "Price4"
  Member Price4UM$[2] : Item "Price4UM"
  Member 2%,Price5EffDate# : Item "Price5EffDate"
  Member 3%,Price5 : Item "Price5"
  Member Price5UM$[2] : Item "Price5UM"
  Member 2%,Price6EffDate# : Item "Price6EffDate"
  Member 3%,Price6 : Item "Price6"
  Member Price6UM$[2] : Item "Price6UM"
  Member 2%,Price7EffDate# : Item "Price7EffDate"
  Member 3%,Price7 : Item "Price7"
  Member Price7UM$[2] : Item "Price7UM"
  Member 2%,Price8EffDate# : Item "Price8EffDate"
  Member 3%,Price8 : Item "Price8"
  Member Price8UM$[2] : Item "Price8UM"
  Member 2%,Price9EffDate# : Item "Price9EffDate"
  Member 3%,Price9 : Item "Price9"
  Member Price9UM$[2] : Item "Price9UM"
  Member 2%,Price10EffDate# : Item "Price10EffDate"
  Member 3%,Price10 : Item "Price10"
  Member Price10UM$[2] : Item "Price10UM"
  Member 2%,Price11EffDate# : Item "Price11EffDate"
  Member 3%,Price11 : Item "Price11"
  Member Price11UM$[2] : Item "Price11UM"
  Member 2%,Price12EffDate# : Item "Price12EffDate"
  Member 3%,Price12 : Item "Price12"
  Member Price12UM$[2] : Item "Price12UM"
  Member 2%,Price13EffDate# : Item "Price13EffDate"
  Member 3%,Price13 : Item "Price13"
  Member Price13UM$[2] : Item "Price13UM"
  Member 2%,Price14EffDate# : Item "Price14EffDate"
  Member 3%,Price14 : Item "Price14"
  Member Price14UM$[2] : Item "Price14UM"
End Def 
Dim PMatPrice. As Purchase_Material_Price
Def Struct Mult_Price
  Member SupplierNo$[6] : Item "SupplierNo"
  Member MaterialCode$[8] : Item "MaterialCode"
  Member Branch$[2] : Item "Branch"
  Member InventoryCode$[8] : Item "InventoryCode"
  Member YardCode$[1] : Item "YardCode"
  Member MaterialDesc$[30] : Item "MaterialDesc"
End Def 
Dim MultPrice. As Mult_Price
Def Struct Sales_Material_Price
  Member CustomerNo$[6] : Item "CustomerNo"
  Member MaterialCode$[8] : Item "MaterialCode"
  Member Branch$[2] : Item "Branch"
  Member InventoryCode$[8] : Item "InventoryCode"
  Member YardCode$[1] : Item "YardCode"
  Member 2%,ExpirationDate# : Item "ExpirationDate"
  Member MaterialDesc$[30] : Item "MaterialDesc"
  Member Comment1$[30] : Item "Comment1"
  Member Comment2$[30] : Item "Comment2"
  !    Member MaterialGroup$[6]    : ITEM "MaterialGroup"
  !    Member AllowBlanketUpd$[1]    : ITEM "AllowBlanketUpd"
  !    Member BlanketUpdType$[3]   : ITEM "BlanketUpdType"
  Member Inactive$[1] : Item "Inactive"
  !    Member PrintPriceOnForm$[1]   : ITEM "PrintPriceOnForm"
  !    Member 3%,MinimumPrice      : ITEM "MinimumPrice"
  !    Member PriceAs$[8]      : ITEM "PriceAs"
  !    Member PriceVarianceType$[1]    : ITEM "PriceVarianceType"
  !    Member 3%,PriceVariance     : ITEM "PriceVariance"
  !    Member 3%,PriceVariance2    : ITEM "PriceVariance2"
  Member FundsType$[2] : Item "FundsType"
  !    Member FormPricePub$[2]     : ITEM "FormPricePub"
  !    Member FormPriceSection$[3]   : ITEM "FormPriceSection"
  !    Member FormPriceGroup$[2]   : ITEM "FormPriceGroup"
  !    Member FormPriceDistrict$[3]    : ITEM "FormPriceDistrict"
  !    Member FormPriceCategory$[3]    : ITEM "FormPriceCategory"
  !    Member FormPriceDateType$[1]    : ITEM "FormPriceDateType"
  !    Member PriceFormula$[3]     : ITEM "PriceFormula"
  !    Member 3%,WgtVariance     : ITEM "WgtVariance"
  Member 2%,CurrentPriceEffDate# : Item "CurrentPriceEffDate"
  Member 3%,CurrentPrice : Item "CurrentPrice"
  Member CurrentPriceUM$[2] : Item "CurrentPriceUM"
  Member 2%,Price1EffDate# : Item "Price1EffDate"
  Member 3%,Price1 : Item "Price1"
  Member Price1UM$[2] : Item "Price1UM"
  Member 2%,Price2EffDate# : Item "Price2EffDate"
  Member 3%,Price2 : Item "Price2"
  Member Price2UM$[2] : Item "Price2UM"
  Member 2%,Price3EffDate# : Item "Price3EffDate"
  Member 3%,Price3 : Item "Price3"
  Member Price3UM$[2] : Item "Price3UM"
  Member 2%,Price4EffDate# : Item "Price4EffDate"
  Member 3%,Price4 : Item "Price4"
  Member Price4UM$[2] : Item "Price4UM"
  Member 2%,Price5EffDate# : Item "Price5EffDate"
  Member 3%,Price5 : Item "Price5"
  Member Price5UM$[2] : Item "Price5UM"
  Member 2%,Price6EffDate# : Item "Price6EffDate"
  Member 3%,Price6 : Item "Price6"
  Member Price6UM$[2] : Item "Price6UM"
  Member 2%,Price7EffDate# : Item "Price7EffDate"
  Member 3%,Price7 : Item "Price7"
  Member Price7UM$[2] : Item "Price7UM"
  Member 2%,Price8EffDate# : Item "Price8EffDate"
  Member 3%,Price8 : Item "Price8"
  Member Price8UM$[2] : Item "Price8UM"
  Member 2%,Price9EffDate# : Item "Price9EffDate"
  Member 3%,Price9 : Item "Price9"
  Member Price9UM$[2] : Item "Price9UM"
  Member 2%,Price10EffDate# : Item "Price10EffDate"
  Member 3%,Price10 : Item "Price10"
  Member Price10UM$[2] : Item "Price10UM"
  Member 2%,Price11EffDate# : Item "Price11EffDate"
  Member 3%,Price11 : Item "Price11"
  Member Price11UM$[2] : Item "Price11UM"
  Member 2%,Price12EffDate# : Item "Price12EffDate"
  Member 3%,Price12 : Item "Price12"
  Member Price12UM$[2] : Item "Price12UM"
  Member 2%,Price13EffDate# : Item "Price13EffDate"
  Member 3%,Price13 : Item "Price13"
  Member Price13UM$[2] : Item "Price13UM"
  Member 2%,Price14EffDate# : Item "Price14EffDate"
  Member 3%,Price14 : Item "Price14"
  Member Price14UM$[2] : Item "Price14UM"
End Def 
Dim SMatPrice. As Sales_Material_Price
Def Struct Material
  Member MaterialCode$[8]
  Member InventoryCode$[8]
  Member MaterialDesc$[30]
  Member MaterialCmt1$[30]
  Member MaterialCmt2$[30]
  Member YardCode$[1]
  Member 1%,StockPileFlag
  Member StockPile$[3]
  Member 1%,CFCFlag
  Member 1%,DirtFlag
  Member CarBody$[1]
  Member 1%,RedFlag
  Member RedType$[2]
  Member RedMat$[15]
  Member 3%,RedRate
  Member 3%,Price
  Member PriceUM$[2]
  Member 3%,PriceTolerance
  Member PriceToleranceType$[1]
End Def 
Dim Material. As Material
Def Struct Levy_Detail
  Member LevyMaterialCode$[8]
  Member LevyMaterialDesc$[30]
  Member InventoryCode$[8]
  Member YardCode$[1]
  Member PriceUM$[2]
  Member 3%,Price
  Member 3%,NetWt
  Member 4%,MatExt
  Member 4%,MatGST
End Def 
Dim LevyItems.[20] As Levy_Detail
! Retail Ticket Header table
Def Struct Retail_Ticket_Hdr
  Member TicketNo$[6] : Item "TicketNo"
  Member 2%,ShipmentDate# : Item "ShipmentDate"
  Member Branch$[2] : Item "Branch"
  Member 4%,ControlNo : Item "ControlNo"
  Member TktStatus$[1] : Item "TktStatus"
  Member SupplierNo$[6] : Item "SupplierNo"
  Member SupplierName$[35] : Item "SupplierName"
  Member Address1$[35] : Item "Address1"
  Member Address2$[35] : Item "Address2"
  Member City$[25] : Item "City"
  Member State$[3] : Item "State"
  Member PostCode$[15] : Item "PostCode"
  Member PhoneNo$[20] : Item "PhoneNo"
  Member InYardID$[16] : Item "InYardID"
  Member IDNumber$[25] : Item "IDNumber"
  Member TaxID$[20] : Item "TaxID"
  Member TaxID2$[20] : Item "TaxID2"
  Member Trader$[3] : Item "Trader"
  Member VehNo$[11] : Item "VehNo"
  Member PaymentCode$[1] : Item "PaymentCode"
  Member BankCode$[2] : Item "BankCode"
  Member PaymentNo$[10] : Item "PaymentNo"
  Member 4%,PaymentAmt : Item "PaymentAmt"
  Member Barcode$[10] : Item "Barcode" ! Remove
  Member CompletingWM$[3] : Item "CompletingWM"
  Member 1%,PhotoTaken : Item "PhotoTaken"
  Member 3%,StartTime# : Item "StartTime" ! DateTime
  Member 3%,EndTime# : Item "EndTime" ! DateTime
  Member TktComment$[50] : Item "TktComment"
  Member 1%,InUse : Item "InUse"
  Member InUseBy$[20] : Item "InUseBy"
  Member InUsePort$[4] : Item "InUsePort"
End Def 
Dim RTicketHdr. As Retail_Ticket_Hdr
MaxTickets = 100
Dim TicketListing.[MaxTickets] As Retail_Ticket_Hdr
Def Struct Retail_Ticket_Dtl
  Member TicketNo$[6] : Item "TicketNo"
  Member 1%,ItemNo : Item "ItemNo"
  Member 1%,Qty : Item "Qty"
  Member Container$[10] : Item "Container"
  Member Branch$[2] : Item "Branch"
  Member YardCode$[1] : Item "YardCode"
  Member MaterialCode$[8] : Item "MaterialCode"
  Member MaterialDesc$[30] : Item "MaterialDesc"
  Member InventoryCode$[8] : Item "InventoryCode"
  Member StockPile$[3] : Item "StockPile"
  Member 1%,CFCFlag : Item "CFCFlag"
  Member 1%,DirtFlag : Item "DirtFlag"
  Member RedType$[2] : Item "RedType"
  Member RedMat$[15] : Item "RedMat"
  Member 1%,UnPriced : Item "Unpriced"
  Member 3%,Price : Item "Price"
  Member Price_UM$[2] : Item "Price_UM"
  Member 3%,GrossWt : Item "GrossWt"
  Member 3%,GrossWtTime# : Item "GrossWtTime"
  Member GrossWtScale$[1] : Item "GrossWtScale"
  Member GrossWtWM$[3] : Item "GrossWtWM"
  Member 3%,GrossWt_BGRead : Item "GrossWt_BGRead"
  Member 1%,GrossWt_BGStatus : Item "GrossWt_BGStatus"
  Member 3%,TareWt : Item "TareWt"
  Member 3%,TareWtTime# : Item "TareWtTime"
  Member TareWtScale$[1] : Item "TareWtScale"
  Member TareWtWM$[3] : Item "TareWtWM"
  Member 3%,TareWt_BGRead : Item "TareWt_BGRead"
  Member 1%,TareWt_BGStatus : Item "TareWt_BGStatus"
  Member 1%,TareContainerUsed : Item "TareContainerUsed"
  Member TareContainerName$[25] : Item "TareContainerName"
  Member 3%,NetWt : Item "NetWt"
  Member 3%,AdjWt : Item "AdjWt"
  Member 3%,AdjPercent : Item "AdjPercent"
  Member AdjCode$[1] : Item "AdjCode"
  Member ManReason$[1] : Item "ManReason"
  Member 1%,MatCodeChg : Item "MatCodeChg"
  Member 1%,MatDescChg : Item "MatDescChg"
  Member 1%,PriceChg : Item "PriceChg"
  Member 3%,RedCount : Item "RedCount"
  Member 3%,RedNetWt : Item "RedNetWt"
  Member 3%,RedRate : Item "RedRate"
  Member 3%,RedExt : Item "RedExt"
  Member 4%,MatGST : Item "MatGST"
  Member 4%,MatPST : Item "MatPST"
  Member 4%,MatExt : Item "MatExt"
End Def 
Dim RTicketDtl. As Retail_Ticket_Dtl
Dim RItems.[99] As Retail_Ticket_Dtl
Dim Sum1.[99] As Retail_Ticket_Dtl
Dim Sum2.[99] As Retail_Ticket_Dtl
Def Struct Retail_Ticket_Totals
  Member 4%,TotalGrossWt
  Member 4%,TotalTareWt
  Member 4%,TotalNetWt
  Member 4%,TotalAdjWt
  Member 4%,TotalMatExt
  Member 4%,TotalMatGST
  Member 4%,TotalMatPST
  Member 3%,TotalRedCount
End Def 
Dim RetailTicketTotals. As Retail_Ticket_Totals
! Ticket Database Structures
Def Struct Pur_Ticket_Hdr
  Member TicketNo$[6] : Item "TicketNo"
  Member 2%,ShipmentDate# : Item "ShipmentDate"
  Member Branch$[2] : Item "Branch"
  Member 4%,ControlNo : Item "ControlNo"
  Member TktType$[1] : Item "TktType"
  Member TktStatus$[1] : Item "TktStatus"
  Member SupplierNo$[6] : Item "SupplierNo"
  Member SupplierName$[35] : Item "SupplierName"
  Member Address1$[35] : Item "Address1"
  Member Address2$[35] : Item "Address2"
  Member City$[25] : Item "City"
  Member State$[3] : Item "State"
  Member PostCode$[15] : Item "PostCode"
  Member PhoneNo$[20] : Item "PhoneNo"
  Member InYardID$[16] : Item "InYardID"
  Member IDNumber$[25] : Item "IDNumber"
  Member RFID$[24] : Item "RFID"
  Member TaxID$[20] : Item "TaxID"
  Member TaxID2$[20] : Item "TaxID2"
  Member 1%,TaxRegistered : Item "TaxRegistered"
  Member Trader$[3] : Item "Trader"
  Member VehType$[1] : Item "VehType"
  Member VehSize$[2] : Item "VehSize"
  Member VehNo$[11] : Item "VehNo"
  Member PUBarcode$[20] : Item "PUBarcode"
  Member TrailerBarcode$[20] : Item "TrailerBarcode"
  Member 1%,AxleCount : Item "AxleCount"
  Member PONo$[10] : Item "PONo"
  Member POLine$[2] : Item "POLine"
  Member ShipmentNo$[6] : Item "ShipmentNo"
  Member ShipFrom$[4] : Item "ShipFrom"
  Member FundsType$[2] : Item "FundsType"
  Member 4%,ExchangeRate : Item "ExchangeRate"
  Member CarrierNo$[6] : Item "CarrierNo"
  Member CarrierRefNo$[20] : Item "CarrierRefNo"
  Member TripTicketNo$[6] : Item "TripTicketNo"
  Member SuppShipNo$[10] : Item "BOL" ! NEEDS CHANGED
  Member SuppInvNo$[10] : Item "SuppInvNo"
  Member SuppRefNo$[20] : Item "SuppRefNo" ! ShipOrdNo
  Member SrcBranch$[2] : Item "SrcBranch"
  Member SrcYard$[1] : Item "SrcYard"
  Member SrcInvCode$[8] : Item "SrcInvCode"
  Member SrcTicketNo$[6] : Item "SrcTicketNo"
  Member 3%,AlloyContainedPct : Item "AlloyContainedPct"
  Member 1%,RFID_InBound : Item "RFID_InBound"
  Member 1%,RFID_OutBound : Item "RFID_OutBound"
  Member 1%,Photo : Item "Photo"
  Member 1%,WeightType : Item "WeightType" ! 0=No Veh Wt, 1=Single Wt, 2=Multi-Weigh, 3=Mixed Load
  Member 3%,FreightHrs : Item "FreightHrs"
  Member 3%,VehGrossWt : Item "VehGrossWt"
  Member 3%,VehGrossWtTime# : Item "VehGrossWtTime"
  Member VehGrossWtScale$[1] : Item "VehGrossWtScale"
  Member VehGrossWtWM$[3] : Item "VehGrossWtWM"
  Member 3%,VehTareWt : Item "VehTareWt"
  Member 3%,VehTareWtTime# : Item "VehTareWtTime"
  Member VehTareWtScale$[1] : Item "VehTareWtScale"
  Member VehTareWtWM$[3] : Item "VehTareWtWM"
  Member 3%,VehNetWt : Item "VehNetWt"
  Member 3%,VehAdjWt : Item "VehAdjWt"
  Member VehAdjCode$[1] : Item "VehAdjCode"
  Member 3%,VehDiffWt : Item "VehDiffWt"
  Member 3%,StartTime# : Item "StartTime" ! DateTime
  Member 3%,EndTime# : Item "EndTime" ! DateTime
  Member TktComment$[50] : Item "TktComment"
  Member InspectionComment$[50] : Item "InspectionComment"
  Member InspectionState$[1] : Item "InspectionState"
End Def 
Dim PurTicketHdr. As Pur_Ticket_Hdr
Def Struct Pur_Ticket_Dtl
  Member TicketNo$[6] : Item "TicketNo"
  Member 2%,ShipmentDate# : Item "ShipmentDate"
  Member 1%,ItemNo : Item "ItemNo"
  Member 1%,Qty : Item "Qty"
  Member Container$[10] : Item "Container"
  Member Branch$[2] : Item "Branch"
  Member YardCode$[1] : Item "YardCode"
  Member MaterialCode$[8] : Item "MaterialCode"
  Member MaterialDesc$[30] : Item "MaterialDesc"
  Member InventoryCode$[8] : Item "InventoryCode"
  Member StockPile$[3] : Item "StockPile"
  Member POLine$[2] : Item "POLine"
  Member ShipmentNo$[6] : Item "ShipmentNo"
  Member 1%,CFCFlag : Item "CFCFlag"
  Member 1%,DirtFlag : Item "DirtFlag"
  Member RedType$[2] : Item "RedType"
  Member RedMat$[15] : Item "RedMat"
  Member 3%,Price : Item "Price"
  Member Price_UM$[2] : Item "Price_UM"
  Member 3%,GrossWt : Item "GrossWt"
  Member 3%,GrossWtTime# : Item "GrossWtTime"
  Member GrossWtScale$[1] : Item "GrossWtScale"
  Member GrossWtWM$[3] : Item "GrossWtWM"
  Member 3%,GrossWt_BGRead : Item "GrossWt_BGRead"
  Member 1%,GrossWt_BGStatus : Item "GrossWt_BGStatus"
  Member 3%,TareWt : Item "TareWt"
  Member 3%,TareWtTime# : Item "TareWtTime"
  Member TareWtScale$[1] : Item "TareWtScale"
  Member TareWtWM$[3] : Item "TareWtWM"
  Member 3%,TareWt_BGRead : Item "TareWt_BGRead"
  Member 1%,TareWt_BGStatus : Item "TareWt_BGStatus"
  Member 3%,NetWt : Item "NetWt"
  Member 3%,AdjWt : Item "AdjWt"
  Member 3%,AdjPercent : Item "AdjPercent"
  Member AdjCode$[1] : Item "AdjCode"
  Member InspectedBy$[3] : Item "InspectedBy"
  Member 1%,CarBodies : Item "CarBodies"
  Member 1%,Bales : Item "Bales"
  Member ManReason$[1] : Item "ManReason"
  Member OrigMaterialCode$[8] : Item "OrigMaterialCode"
  Member 1%,MatCodeChg : Item "MatCodeChg"
  Member 1%,MatDescChg : Item "MatDescChg"
  Member 1%,PriceChg : Item "PriceChg"
  Member 3%,RedCount : Item "RedCount"
  Member 3%,RedNetWt : Item "RedNetWt"
  Member 3%,RedRate : Item "RedRate"
  Member 3%,RedExt : Item "RedExt"
  Member 4%,MatGST : Item "MatGST"
  Member 4%,MatPST : Item "MatPST"
  Member 4%,FrtGST : Item "FrtGST"
  Member 4%,FrtPST : Item "FrtPST"
  Member 4%,CbkGST : Item "CbkGST"
  Member 4%,CbkPST : Item "CbkPST"
  Member 4%,FrtExt : Item "FrtExt"
  Member 4%,FrtCbk : Item "FrtCbk"
  Member 4%,MatExt : Item "MatExt"
End Def 
Dim PurTicketDtl. As Pur_Ticket_Dtl
Def Struct Pur_Ticket_VoidInfo
  Member TicketNo$[6] : Item "TicketNo"
  Member 2%,ShipmentDate# : Item "ShipmentDate"
  Member VoidReasonCode$[2] : Item "VoidReasonCode"
  Member VoidComment$[50] : Item "VoidComment"
  Member ProgramNo$[4] : Item "ProgramNo"
  Member UserName$[20] : Item "Username"
  Member WeighMaster$[3] : Item "WeighMaster"
  Member 3%,VoidDateTime# : Item "VoidDateTime"
End Def 
Dim PurTicketVoidInfo. As Pur_Ticket_VoidInfo
Def Struct Pur_Ticket_Identity
  Member TicketNo$[6] : Item "TicketNo"
  Member 2%,ShipmentDate# : Item "ShipmentDate"
  Member Branch$[2] : Item "Branch"
  Member IDNumber$[25] : Item "IDNumber"
  Member IDType$[2] : Item "IDType"
  Member IDIssuer$[12] : Item "IDIssuer"
  Member 2%,IDExpirationDate# : Item "IDExpirationDate"
  Member 2%,IDIssueDate# : Item "IDIssueDate"
  Member 2%,DateOfBirth# : Item "DateOfBirth"
  Member LastName$[40] : Item "LastName"
  Member FirstName$[25] : Item "FirstName"
  Member MiddleName$[25] : Item "MiddleName"
  Member FullName$[50] : Item "FullName"
  Member Address1$[35] : Item "Address1"
  Member Address2$[35] : Item "Address2"
  Member City$[25] : Item "City"
  Member State$[3] : Item "State"
  Member PostCode$[15] : Item "PostCode"
  Member County$[30] : Item "County"
  Member PhoneNo$[20] : Item "PhoneNo"
  Member PhoneNo2$[20] : Item "PhoneNo2"
  Member EmailAddress$[100] : Item "EmailAddress"
  Member Emp_Name$[35] : Item "Emp_Name"
  Member Emp_Address1$[35] : Item "Emp_Address1"
  Member Emp_Address2$[35] : Item "Emp_Address2"
  Member Emp_City$[25] : Item "Emp_City"
  Member Emp_State$[3] : Item "Emp_State"
  Member Emp_PostCode$[15] : Item "Emp_PostCode"
  Member Emp_PhoneNo$[20] : Item "Emp_PhoneNo"
  Member Height$[12] : Item "Height"
  Member Weight$[12] : Item "Weight"
  Member EyeColor$[12] : Item "EyeColor"
  Member HairColor$[12] : Item "HairColor"
  Member Race$[12] : Item "Race"
  Member Gender$[1] : Item "Gender"
  Member IdentMarks$[50] : Item "IdentifyingMarks"
  Member CountryID$[3] : Item "CountryID"
  Member VehicleTagState$[3] : Item "VehicleTagState"
  Member VehicleTagNo$[15] : Item "VehicleTagNo"
  Member VehicleDesc$[30] : Item "VehicleDesc"
  Member VehicleMake$[15] : Item "VehicleMake"
  Member VehicleModel$[15] : Item "VehicleModel"
  Member VehicleColor$[15] : Item "VehicleColor"
  Member TrailerTagState$[3] : Item "TrailerTagState"
  Member TrailerTagNo$[15] : Item "TrailerTagNo"
  Member TrailerDesc$[30] : Item "TrailerDesc"
  Member ScrapLicenseNo$[25] : Item "ScrapLicenseNo"
  Member 2%,ScrapLicExpDate# : Item "ScrapLicExpDate"
  Member 2%,CFCExpirationDate# : Item "CFCExpirationDate"
  Member TaxID$[20] : Item "TaxID"
  Member TaxID2$[20] : Item "TaxID2"
  Member 1%,TaxRegistered : Item "TaxRegistered"
  Member IDComment$[100] : Item "IDComment"
  Member 1%,IDVerified : Item "IDVerified"
  Member 1%,Photo : Item "Photo"
  Member 1%,IDPhoto : Item "IDPhoto"
  Member 1%,FingerPrint : Item "FingerPrint"
  Member 1%,NFCompliant : Item "NFCompliant"
  Member 1%,FeCompliant : Item "FeCompliant"
End Def 
Dim TicketIdentity. As Pur_Ticket_Identity
! VIN table (Partial structure)
Def Struct Pur_Ticket_VIN
  Member VIN$[30] : Item "VIN"
  Member Make$[25] : Item "Make"
  Member Model$[25] : Item "Model"
  Member ModelYear$[4] : Item "ModelYear"
End Def 
Dim PurTicketVIN. As Pur_Ticket_VIN
Def Struct Sales_Ticket_Hdr : Item "Sales_Ticket_Hdr"
  Member TicketNo$[6] : Item "TicketNo"
  Member 2%,ShipmentDate# : Item "ShipmentDate"
  Member 1%,Leg : Item "Leg"
  Member Branch$[2] : Item "Branch"
  Member 4%,ControlNo : Item "ControlNo"
  Member TktType$[1] : Item "TktType"
  Member TktStatus$[1] : Item "TktStatus"
  Member 1%,MultiLeg : Item "MultiLeg"
  Member LegDestinationBranch$[2] : Item "LegDestinationBranch"
  Member CustomerNo$[6] : Item "CustomerNo"
  Member CustomerName$[35] : Item "CustomerName"
  Member Address1$[35] : Item "Address1"
  Member Address2$[35] : Item "Address2"
  Member City$[25] : Item "City"
  Member State$[3] : Item "State"
  Member PostCode$[15] : Item "PostCode"
  Member InYardID$[16] : Item "InYardID"
  Member RFID$[24] : Item "RFID"
  Member TaxID$[20] : Item "TaxID"
  Member TaxID2$[20] : Item "TaxID2"
  Member Trader$[3] : Item "Trader"
  Member VehType$[1] : Item "VehType"
  Member VehSize$[2] : Item "VehSize"
  Member VehNo$[11] : Item "VehNo"
  Member PUBarcode$[20] : Item "PUBarcode"
  Member TrailerBarcode$[20] : Item "TrailerBarcode"
  Member 1%,AxleCount : Item "AxleCount"
  Member 3%,ContainerTareWt : Item "ContainerTareWt"
  Member 4%,ReleaseNo : Item "ReleaseNo"
  Member SONo$[10] : Item "SONo"
  Member SOLine$[2] : Item "SOLine"
  Member FundsType$[2] : Item "FundsType"
  Member 4%,ExchangeRate : Item "ExchangeRate"
  Member MatReqNo$[10] : Item "MatReqNo"
  Member MatReqLine$[2] : Item "MatReqLine"
  Member ShipmentNo$[6] : Item "ShipmentNo"
  Member CarrierNo$[6] : Item "CarrierNo"
  Member CarrierRefNo$[20] : Item "CarrierRefNo"
  Member TripTicketNo$[6] : Item "TripTicketNo"
  Member TransferTicketNo$[6] : Item "TransferTicketNo"
  Member CustRefNo$[20] : Item "CustRefNo" ! ShipOrdNo
  Member BOLNo$[10] : Item "BOLNo"
  Member RouteNo$[20] : Item "RouteNo"
  Member DeliveryAddr$[20] : Item "DeliveryAddr"
  Member DeliveringCarrier$[20] : Item "DeliveringCarrier"
  Member CarInitials$[10] : Item "CarInitials"
  Member CarNo$[11] : Item "CarNo"
  Member CustReleaseNo$[20] : Item "CustReleaseNo"
  Member SealNo$[10] : Item "SealNo"
  Member Seal2No$[20] : Item "Seal2No"
  Member Seal3No$[20] : Item "Seal3No"
  Member ContainerNo$[12] : Item "ContainerNo"
  Member BookingNo$[16] : Item "BookingNo"
  Member 2%,BargeConstPlmntDate# : Item "BargeConstPlmntDate"
  Member 2%,BargeReleaseDate# : Item "BargeReleaseDate"
  Member 1%,RFID_InBound : Item "RFID_InBound"
  Member 1%,RFID_OutBound : Item "RFID_OutBound"
  Member 1%,Photo : Item "Photo"
  Member 1%,WeightType : Item "WeightType" ! 0=No Veh Wt, 1=Single Wt, 2=Multi-Weigh, 3=Mixed Load
  Member 3%,FreightHrs : Item "FreightHrs"
  Member 3%,VehGrossWt : Item "VehGrossWt"
  Member 3%,VehGrossWtTime# : Item "VehGrossWtTime"
  Member VehGrossWtScale$[1] : Item "VehGrossWtScale"
  Member VehGrossWtWM$[3] : Item "VehGrossWtWM"
  Member 3%,VehTareWt : Item "VehTareWt"
  Member 3%,VehTareWtTime# : Item "VehTareWtTime"
  Member VehTareWtScale$[1] : Item "VehTareWtScale"
  Member VehTareWtWM$[3] : Item "VehTareWtWM"
  Member 3%,VehNetWt : Item "VehNetWt"
  Member 3%,VehAdjWt : Item "VehAdjWt"
  Member VehAdjCode$[1] : Item "VehAdjCode"
  Member 3%,VehDiffWt : Item "VehDiffWt"
  Member 3%,StartTime# : Item "StartTime" ! DateTime
  Member 3%,EndTime# : Item "EndTime" ! DateTime
  Member 2%,EntryDate# : Item "EntryDate"
  Member TktComment$[50] : Item "TktComment"
  Member OriginalTicketNo$[6] : Item "OriginalTicketNo"
  Member ReverseTicketNo$[6] : Item "ReverseTicketNo"
  Member ReplacementTicketNo$[6] : Item "ReplacementTicketNo"
End Def 
Dim SalesTicketHdr. As Sales_Ticket_Hdr
Def Struct Sales_Ticket_Dtl : Item "Sales_Ticket_Dtl"
  Member TicketNo$[6] : Item "TicketNo"
  Member 2%,ShipmentDate# : Item "ShipmentDate"
  Member 1%,Leg : Item "Leg"
  Member 1%,ItemNo : Item "ItemNo"
  Member 1%,ContainerQty : Item "ContainerQty"
  Member Container$[10] : Item "Container"
  Member ScannedTagNo$[13] : Item "ScannedTagNo"
  Member TagNo$[10] : Item "TagNo"
  Member Branch$[2] : Item "Branch"
  Member YardCode$[1] : Item "YardCode"
  Member MaterialCode$[8] : Item "MaterialCode"
  Member 1%,MaterialSeqNo : Item "MaterialSeqNo"
  Member MaterialDesc$[30] : Item "MaterialDesc"
  Member InventoryCode$[8] : Item "InventoryCode"
  Member StockPile$[3] : Item "StockPile"
  Member SOLine$[2] : Item "SOLine"
  Member MatReqLine$[2] : Item "MatReqLine"
  Member ShipmentNo$[6] : Item "ShipmentNo"
  Member 3%,Price : Item "Price"
  Member Price_UM$[2] : Item "Price_UM"
  Member 3%,GrossWt : Item "GrossWt"
  Member 3%,GrossWtTime# : Item "GrossWtTime"
  Member GrossWtScale$[1] : Item "GrossWtScale"
  Member GrossWtWM$[3] : Item "GrossWtWM"
  Member 3%,GrossWt_BGRead : Item "GrossWt_BGRead"
  Member 1%,GrossWt_BGStatus : Item "GrossWt_BGStatus"
  Member 3%,TareWt : Item "TareWt"
  Member 3%,TareWtTime# : Item "TareWtTime"
  Member TareWtScale$[1] : Item "TareWtScale"
  Member TareWtWM$[3] : Item "TareWtWM"
  Member 3%,TareWt_BGRead : Item "TareWt_BGRead"
  Member 1%,TareWt_BGStatus : Item "TareWt_BGStatus"
  Member 3%,NetWt : Item "NetWt"
  Member 3%,AdjWt : Item "AdjWt"
  Member 3%,AdjPercent : Item "AdjPercent"
  Member AdjCode$[1] : Item "AdjCode"
  Member 1%,CarBodies : Item "CarBodies"
  Member 1%,Bales : Item "Bales"
  Member ManReason$[1] : Item "ManReason"
  Member OrigMaterialCode$[8] : Item "OrigMaterialCode"
  Member 1%,MatCodeChg : Item "MatCodeChg"
  Member 1%,MatDescChg : Item "MatDescChg"
  Member 1%,PriceChg : Item "PriceChg"
  Member 4%,MatExt : Item "MatExt"
End Def 
Dim SalesTicketDtl. As Sales_Ticket_Dtl
Def Struct Sales_Ticket_VoidInfo
  Member TicketNo$[6] : Item "TicketNo"
  Member 2%,ShipmentDate# : Item "ShipmentDate"
  Member VoidReasonCode$[2] : Item "VoidReasonCode"
  Member VoidComment$[50] : Item "VoidComment"
  Member ProgramNo$[4] : Item "ProgramNo"
  Member UserName$[20] : Item "Username"
  Member WeighMaster$[3] : Item "WeighMaster"
  Member 3%,VoidDateTime# : Item "VoidDateTime"
End Def 
Dim SalesTicketVoidInfo. As Sales_Ticket_VoidInfo
Def Struct Sales_Ticket_List
  Member TicketNo$[6] : Item "TicketNo"
  Member 2%,ShipmentDate# : Item "ShipmentDate"
  Member CustomerNo$[6] : Item "CustomerNo"
  Member CustomerName$[35] : Item "CustomerName"
End Def 
Dim SalesTicketList. As Sales_Ticket_List
! InYard_ID_Default Table
Def Struct InYard_ID_Default
  Member InYardID$[11] : Item "InYardID"
  Member Branch$[2] : Item "Branch"
  Member TktType$[1] : Item "TktType"
  Member EntityNo$[6] : Item "EntityNo"
End Def 
Dim InYardIDDefault. As InYard_ID_Default
! Scale Audit Table
Def Struct Ticket_Audit
  Member 4%,TicketAuditID : Item "TicketAuditID"
  Member Branch$[2] : Item "Branch"
  Member TicketNo$[6] : Item "TicketNo"
  Member 1%,ItemNo : Item "ItemNo"
  Member 3%,EventDateTime# : Item "EventDateTime"
  Member ProgramNo$[4] : Item "ProgramNo"
  Member Event$[50] : Item "Event"
  Member TktType$[1] : Item "TktType"
  Member InYardID$[16] : Item "InYardID"
  Member EntityNo$[6] : Item "EntityNo"
  Member MaterialCode$[8] : Item "MaterialCode"
  Member 1%,MatCodeChg : Item "MatCodeChg"
  Member 3%,Price : Item "Price"
  Member Price_UM$[2] : Item "Price_UM"
  Member 1%,PriceChg : Item "PriceChg"
  Member 3%,GrossWt : Item "GrossWt"
  Member GrossWtScale$[1] : Item "GrossWtScale"
  Member 3%,TareWt : Item "TareWt"
  Member TareWtScale$[1] : Item "TareWtScale"
  Member ManReason$[1] : Item "ManReason"
  Member 3%,NetWt : Item "NetWt"
  Member 3%,AdjWt : Item "AdjWt"
  Member 3%,AdjPercent : Item "AdjPercent"
  Member AdjCode$[1] : Item "AdjCode"
  Member 3%,PaidWt : Item "PaidWt"
  Member PaymentType$[10] : Item "PaymentType"
  Member BankCode$[2] : Item "BankCode"
  Member PaymentNo$[10] : Item "PaymentNo"
  Member WeighMaster$[3] : Item "WeighMaster"
  Member UserName$[20] : Item "UserName"
  Member ConfigFile$[30] : Item "ConfigFile"
End Def 
Dim TicketAudit. As Ticket_Audit
! Supplier ID table
Def Struct Supplier_ID : Item "Supplier_ID"
  Member 4%,rowid : Item "rowid"
  Member IDNumber$[25] : Item "IDNumber"
  Member IDType$[2] : Item "IDType"
  Member IDIssuer$[12] : Item "IDIssuer"
  Member 2%,IDExpirationDate# : Item "IDExpirationDate"
  Member 2%,IDIssueDate# : Item "IDIssueDate"
  Member 2%,DateOfBirth# : Item "DateOfBirth"
  Member LastName$[40] : Item "LastName"
  Member FirstName$[25] : Item "FirstName"
  Member MiddleName$[25] : Item "MiddleName"
  Member FullName$[50] : Item "FullName"
  Member Address1$[35] : Item "Address1"
  Member Address2$[35] : Item "Address2"
  Member City$[25] : Item "City"
  Member State$[3] : Item "State"
  Member PostCode$[15] : Item "PostCode"
  Member County$[30] : Item "County"
  Member PhoneNo$[20] : Item "PhoneNo"
  Member PhoneNo2$[20] : Item "PhoneNo2"
  Member EmailAddress$[100] : Item "EmailAddress"
  Member Emp_Name$[35] : Item "Emp_Name"
  Member Emp_Address1$[35] : Item "Emp_Address1"
  Member Emp_Address2$[35] : Item "Emp_Address2"
  Member Emp_City$[25] : Item "Emp_City"
  Member Emp_State$[3] : Item "Emp_State"
  Member Emp_PostCode$[15] : Item "Emp_PostCode"
  Member Emp_PhoneNo$[20] : Item "Emp_PhoneNo"
  Member Height$[12] : Item "Height"
  Member Weight$[12] : Item "Weight"
  Member EyeColor$[12] : Item "EyeColor"
  Member HairColor$[12] : Item "HairColor"
  Member Race$[12] : Item "Race"
  Member Gender$[1] : Item "Gender"
  Member IdentMarks$[50] : Item "IdentifyingMarks"
  Member CountryID$[3] : Item "CountryID"
  Member ScrapLicenseNo$[25] : Item "ScrapLicenseNo"
  Member 2%,ScrapLicExpDate# : Item "ScrapLicExpDate"
  Member 2%,CFCExpirationDate# : Item "CFCExpirationDate"
  Member TaxID$[20] : Item "TaxID"
  Member TaxID2$[20] : Item "TaxID2"
  Member 1%,TaxRegistered : Item "TaxRegistered"
  Member SupplierNo$[6] : Item "SupplierNo"
  Member 1%,Photo : Item "Photo"
  Member 1%,IDPhoto : Item "IDPhoto"
  Member 1%,FingerPrint : Item "FingerPrint"
  Member 1%,NFCompliant : Item "NFCompliant"
  Member 1%,FeCompliant : Item "FeCompliant"
  Member 1%,OnHold : Item "OnHold"
  Member 2%,OnHoldDate# : Item "OnHoldDate"
  Member OnHoldBy$[20] : Item "OnHoldBy"
  Member BarcodeLookup$[100] : Item "BarcodeLookup"
  Member 2%,DateCreated# : Item "DateCreated"
  Member BranchCreated$[2] : Item "BranchCreated"
  Member 2%,DateLastUsed# : Item "DateLastUsed"
  Member BranchLastUsed$[2] : Item "BranchLastUsed"
End Def 
Dim SupplierID. As Supplier_ID
Def Struct RFID_Master
  Member RFID$[24] : Item "RFID"
  Member InYardID$[11] : Item "InYardID"
  Member VehicleTagState$[3] : Item "VehicleTagState"
  Member VehicleTagNo$[15] : Item "VehicleTagNo"
  Member VehicleDesc$[30] : Item "VehicleDesc"
  Member 4%,SupplierID : Item "SupplierID"
  Member SupplierType$[1] : Item "SupplierType"
  Member SupplierNo$[6] : Item "SupplierNo"
  Member Comment$[50] : Item "Comment"
  Member 2%,DateCreated# : Item "DateCreated"
  Member BranchCreated$[2] : Item "BranchCreated"
  Member 2%,DateLastUsed# : Item "DateLastUsed"
  Member BranchLastUsed$[2] : Item "BranchLastUsed"
End Def 
Dim RFIDMaster. As RFID_Master
! Scale Sensor Log (DJJ)
Def Struct Scale_Sensor_Log
  !    Member 4%,ScaleSensorLogID  : ITEM "ScaleSensorLogID" ! This item will mess up UPDATE statement if it is in the structure
  Member TicketNo$[6] : Item "TicketNo"
  Member 1%,ItemNo : Item "ItemNo"
  Member 3%,EventDateTime# : Item "EventDateTime"
  Member ScaleID$[1] : Item "ScaleID"
  Member WeightType$[1] : Item "WeightType"
  Member 1%,IsScaleSensorOn : Item "IsScaleSensorOn"
  Member 1%,IsScaleSensorBroken : Item "IsScaleSensorBroken"
  Member 1%,WasScaleSensorIgnored : Item "WasScaleSensorIgnored"
  Member ScaleSenorIPAddress$[30] : Item "ScaleSenorIPAddress"
  Member WeighMaster$[3] : Item "WeighMaster"
End Def 
Dim ScaleSensorLog. As Scale_Sensor_Log
! Sales Release Table
Def Struct Sales_Release
  Member 4%,ReleaseNo : Item "ReleaseNo"
  Member CustomerReleaseNo$[20] : Item "CustomerReleaseNo"
  Member 3%,CreateDate# : Item "CreateDate"
  Member Status$[1] : Item "Status"
  Member 1%,TMS_Flag : Item "TMS_Flag"
  Member Branch$[2] : Item "Branch"
  Member CustomerNo$[6] : Item "CustomerNo"
  Member SONo$[10] : Item "SONo"
  Member SOLine$[2] : Item "SOLine"
  Member YardSupplierNo$[6] : Item "YardSupplierNo"
  Member MatReqNo$[10] : Item "MatReqNo"
  Member MatReqLine$[2] : Item "MatReqLine"
  Member BookingNo$[16] : Item "BookingNo"
  Member CarrierNo$[6] : Item "CarrierNo"
  Member 2%,CarrierNotifcationDate# : Item "CarrierNotifcationDate"
  Member CarrierNotifcationMethod$[10] : Item "CarrierNotifcationMethod"
  Member VehType$[1] : Item "VehType"
  Member ContainerSize$[10] : Item "ContainerSize"
  Member ContainerLocation_Address1$[50] : Item "ContainerLocation_Address1"
  Member ContainerLocation_Address2$[50] : Item "ContainerLocation_Address2"
  Member ContainerLocation_Address3$[50] : Item "ContainerLocation_Address3"
  Member ContainerLocation_Address4$[50] : Item "ContainerLocation_Address4"
  Member 2%,ContainerPickupDate# : Item "ContainerPickupDate"
  Member ContainerPickupTime$[50] : Item "ContainerPickupTime"
  Member ContainerPickupInstructions$[100] : Item "ContainerPickupInstructions"
  Member 2%,YardLoadDate# : Item "YardLoadDate"
  Member YardLoadTime$[50] : Item "YardLoadTime"
  Member YardLoadInstructions$[100] : Item "YardLoadInstructions"
  Member DeliveryInstructions$[100] : Item "DeliveryInstructions"
  Member Comment$[50] : Item "Comment"
  Member 4%,TotalLoads : Item "TotalLoads"
  Member 4%,LoadsInProcess : Item "LoadsInProcess"
  Member 4%,LoadsRemaining : Item "LoadsRemaining"
  Member 3%,CompleteDateTime# : Item "CompleteDateTime"
End Def 
Dim SalesRelease. As Sales_Release
! Sales Release Table (partial)
Def Struct Sales_Release_Items
  Member 4%,ReleaseNo : Item "ReleaseNo"
  Member CustomerReleaseNo$[20] : Item "CustomerReleaseNo"
  Member CustomerNo$[6] : Item "CustomerNo"
  Member SONo$[10] : Item "SONo"
  Member SOLine$[2] : Item "SOLine"
  Member BookingNo$[16] : Item "BookingNo"
  Member CarrierNo$[6] : Item "CarrierNo"
  Member 2%,YardLoadDate# : Item "YardLoadDate"
  Member 4%,LoadsInProcess : Item "LoadsInProcess"
  Member 4%,LoadsRemaining : Item "LoadsRemaining"
End Def 
SalesRel_Max = 50 \ Dim SalesRel.[SalesRel_Max] As Sales_Release_Items
! Sales Booking
Def Struct Sales_Booking
  Member BookingNo$[16] : Item "BookingNo"
  Member 1%,InspectionPhotosReqd : Item "InspectionPhotosReqd"
  Member 1%,InspectionRequired : Item "InspectionRequired"
End Def 
Dim SalesBooking. As Sales_Booking
! TMS Scale Outbound table
Def Struct TMS_Scale_Outbound
  Member 4%,SAIReferenceID : Item "SAIReferenceID"
  Member SAIReferenceType$[10] : Item "SAIReferenceType"
  Member 1%,StopSequenceNumber : Item "StopSequenceNumber"
  Member 1%,IsInYard : Item "IsInYard"
  Member VehicleNumber$[11] : Item "VehicleNumber"
  Member 3%,TareWgt : Item "TareWgt"
  Member 3%,GrossWgt : Item "GrossWgt"
  Member TicketComments$[50] : Item "TicketComments"
  Member WeighmasterInitials$[3] : Item "WeighmasterInitials"
  Member 1%,IsTMSRead : Item "IsTMSRead"
End Def 
Dim TMS_ScaleOutbound. As TMS_Scale_Outbound
! Greeter
Def Struct Greeter_Queue : Item "Greeter_Queue"
  Member 3%,rowid : Item "rowid"
  Member Branch$[2] : Item "Branch"
  Member Name$[50] : Item "Name"
  Member 4%,supplier_id_rowid : Item "supplier_id_rowid"
  Member VehicleTagState$[3] : Item "VehicleTagState"
  Member VehicleTagNo$[15] : Item "VehicleTagNo"
  Member VehicleDesc$[30] : Item "VehicleDesc"
  Member VehicleMake$[15] : Item "VehicleMake"
  Member VehicleModel$[15] : Item "VehicleModel"
  Member VehicleColor$[15] : Item "VehicleColor"
  Member SupplierNo$[6] : Item "SupplierNo"
  Member 3%,QueueType : Item "QueueType"
  Member InYardID$[11] : Item "InYardID"
  Member MaterialCode$[8] : Item "MaterialCode"
  Member 3%,Price : Item "Price"
  Member PriceUM$[2] : Item "PriceUM"
  Member TrailerTagNo$[15] : Item "TrailerTagNo"
  Member TrailerTagState$[3] : Item "TrailerTagState"
  Member 1%,CFCTaken : Item "CFCTaken"
  Member 1%,TitlesTaken : Item "TitlesTaken"
  Member 1%,OccupantCount : Item "OccupantCount"
  Member IDNumber$[25] : Item "IDNumber"
  Member IDType$[2] : Item "IDType"
  Member IDIssuer$[12] : Item "IDIssuer"
  Member 2%,IDExpirationDate# : Item "IDExpirationDate"
  Member 2%,IDIssueDate# : Item "IDIssueDate"
  Member 2%,DateOfBirth# : Item "DateOfBirth"
  Member LastName$[40] : Item "LastName"
  Member FirstName$[25] : Item "FirstName"
  Member MiddleName$[25] : Item "MiddleName"
  Member FullName$[50] : Item "FullName"
  Member Address1$[35] : Item "Address1"
  Member Address2$[35] : Item "Address2"
  Member City$[25] : Item "City"
  Member State$[3] : Item "State"
  Member PostCode$[15] : Item "PostCode"
  Member Height$[12] : Item "Height"
  Member Weight$[12] : Item "Weight"
  Member EyeColor$[12] : Item "EyeColor"
  Member HairColor$[12] : Item "HairColor"
  Member Race$[12] : Item "Race"
  Member Gender$[1] : Item "Gender"
  Member 3%,CreatedDate# : Item "CreatedDate"
  Member CreatedBy$[25] : Item "CreatedBy"
End Def 
Dim GreeterQueue.[100] As Greeter_Queue
Def Struct Greeter_Queue_Item : Item "Greeter_Queue_Item"
  Member TicketNo$[6] : Item "TicketNo"
  Member Branch$[2] : Item "Branch"
  Member MaterialCode$[8] : Item "MaterialCode"
  Member 3%,Price : Item "Price"
  Member PriceUM$[2] : Item "PriceUM"
End Def 
Dim GreeterQueueItem. As Greeter_Queue_Item
Def Struct GreeterQueue_TicketNo_Xref
  Member 4%,GreeterQueueID : Item "GreeterQueueID"
  Member TicketNo$[6] : Item "TicketNo"
End Def 
Dim GreeterQueueTicketNoXref. As GreeterQueue_TicketNo_Xref
! Pu_Mix_Hdr (Partial Structure)
Def Struct Pur_Mix_Hdr
  Member TicketNo$[6] : Item "TicketNo"
  Member 2%,ShipmentDate# : Item "ShipmentDate"
  Member Branch$[2] : Item "Branch"
  Member SupplierNo$[6] : Item "SupplierNo"
  Member PONo$[10] : Item "PONo"
  Member 1%,RecoveryMode : Item "RecoveryMode"
  Member 3%,VehGrossWt : Item "VehGrossWt"
  Member 3%,VehTareWt : Item "VehTareWt"
  Member 3%,VehNetWt : Item "VehNetWt"
  Member 1%,InUse : Item "InUse"
  Member InUseBy$[20] : Item "InUseBy"
  Member InUsePort$[4] : Item "InUsePort"
End Def 
Dim PurMixHdr. As Pur_Mix_Hdr
! Payment Register
Def Struct Payment_Register_Hdr
  Member BankCode$[2] : Item "BankCode"
  Member PaymentNo$[10] : Item "PaymentNo"
  Member Branch$[2] : Item "Branch"
  Member PaymentType$[10] : Item "PaymentType"
  Member CashierNo$[1] : Item "CashierNo"
  Member CDUReceiptNo$[10] : Item "CDUReceiptNo"
  Member 2%,PaymentDate# : Item "PaymentDate"
  Member PaymentYearPeriod$[6] : Item "PaymentYearPeriod"
  Member 3%,CreateDateTime# : Item "CreateDateTime"
  Member SupplierNo$[6] : Item "SupplierNo"
  Member Payee$[30] : Item "Payee"
  Member IDNumber$[25] : Item "IDNumber"
  Member 4%,Amount : Item "Amount"
  Member ProgramNo$[4] : Item "ProgramNo"
  Member 1%,PrintBankCode : Item "PrintBankCode"
  Member 1%,Voided : Item "Voided"
  Member 3%,VoidDateTime# : Item "VoidDateTime"
  Member VoidYearPeriod$[6] : Item "VoidYearPeriod"
  Member 1%,Cleared : Item "Cleared"
  Member 2%,ClearedDate# : Item "ClearedDate"
  Member 4%,ClearedAmount : Item "ClearedAmount"
  Member 1%,PosPay : Item "PosPay"
  Member 2%,PosPayExtractDate# : Item "PosPayExtractDate"
  Member 1%,EFT : Item "EFT"
  Member 1%,EDI : Item "EDI"
End Def 
Dim PaymentRegisterHdr. As Payment_Register_Hdr
Def Struct Payment_Register_Dtl
  Member BankCode$[2] : Item "BankCode"
  Member PaymentNo$[10] : Item "PaymentNo"
  Member 1%,SeqNo : Item "SeqNo"
  Member TicketNo$[6] : Item "TicketNo"
  Member ShipmentNo$[6] : Item "ShipmentNo"
  Member 2%,ShipmentDate# : Item "ShipmentDate"
  Member MaterialCode$[8] : Item "MaterialCode"
  Member Description$[30] : Item "Description"
  Member AltSupplierNo$[6] : Item "AltSupplierNo"
  Member VoucherNo$[6] : Item "VoucherNo"
  Member InvoiceNo$[8] : Item "InvoiceNo"
  Member 4%,ItemAmount : Item "ItemAmount"
End Def 
Dim PaymentRegisterDtl. As Payment_Register_Dtl
! Check tables
Def Struct LaserCheck_Hdr
  Member BankCode$[2] : Item "BankCode"
  Member CheckNo$[10] : Item "CheckNo"
  Member CheckStatus$[1] : Item "CheckStatus"
  Member Branch$[2] : Item "Branch"
  Member 2%,CheckDate# : Item "CheckDate"
  Member 2%,CreateDateTime# : Item "CreateDateTime"
  Member SupplierNo$[6] : Item "SupplierNo"
  Member Payee$[30] : Item "Payee"
  Member Address1$[50] : Item "Address1"
  Member Address2$[50] : Item "Address2"
  Member Address3$[50] : Item "Address3"
  Member Contact$[30] : Item "Contact"
  Member 4%,Amount : Item "Amount"
  Member AmountDesc$[200] : Item "AmountDesc"
  Member MICRText$[60] : Item "MICRText"
  Member FormName$[30] : Item "FormName"
  Member ProgramNo$[4] : Item "ProgramNo"
End Def 
Dim LaserCheckHdr. As LaserCheck_Hdr
Def Struct LaserCheck_Dtl
  Member BankCode$[2] : Item "BankCode"
  Member CheckNo$[10] : Item "CheckNo"
  Member 1%,LineNo : Item "LineNo"
  Member DetailText$[150] : Item "DetailText"
End Def 
Dim LaserCheckDtl. As LaserCheck_Dtl
! Alternate Freight Rate (Partial Structure)
Def Struct Alternate_Flat_Rate
  Member 4%,FlatRate : Item "FlatRate"
  Member FlatRate_UM$[2] : Item "FlatRate_UM"
End Def 
Dim AltFlatRate. As Alternate_Flat_Rate
! OTM Interface
Def Struct OTM_Freight_Interface
  Member 4%,OTMFrtInterfaceID : Item "OTMFrtInterfaceID"
  Member OTMRefNo$[15] : Item "OTMRefNo"
  Member OriginEntityNo$[6] : Item "OriginEntityNo"
  Member OriginLocationCode$[4] : Item "OriginLocationCode"
  Member DestEntityNo$[6] : Item "DestEntityNo"
  Member DestLocationCode$[4] : Item "DestLocationCode"
  Member VehicleNo$[11] : Item "VehicleNo"
  Member TicketNo$[6] : Item "TicketNo"
  Member CarrierNo$[6] : Item "CarrierNo"
  Member TransType$[2] : Item "TransType" !  P=Purchase, S=Sale, TI=Transfer-Inbound, TO=Transfer-Outbound, D=Dirt, B=Brokerage
  Member Status$[1] : Item "Status"
  Member 4%,FrtAccrualAmt : Item "FrtAccrualAmt"
  Member FrtAccrualUM$[2] : Item "FrtAccrualUM"
  Member 3%,NetWt : Item "NetWt"
  Member NetWtUM$[2] : Item "NetWtUM"
  Member EquipNo$[25] : Item "EquipNo"
End Def 
Dim OTMFreightInterface. As OTM_Freight_Interface
Def Struct OTM_Freight_Key
  Member OTMRefNo$[15] : Item "OTMRefNo"
  Member OriginEntityNo$[6] : Item "OriginEntityNo"
  Member OriginLocationCode$[4] : Item "OriginLocationCode"
  Member DestEntityNo$[6] : Item "DestEntityNo"
  Member DestLocationCode$[4] : Item "DestLocationCode"
  Member VehicleNo$[11] : Item "DestLocationCode"
End Def 
Dim OTMFreightKey. As OTM_Freight_Key
! VGM Interface
Def Struct VGM_Interface
  Member 4%,VGM_ID : Item "VGM_ID"
  Member TicketNo$[6] : Item "TicketNo"
  Member 2%,ShipmentDate# : Item "ShipmentDate"
  Member Branch$[2] : Item "Branch"
  Member BookingNo$[16] : Item "BookingNo"
  Member ContainerNo$[11] : Item "ContainerNo"
  Member CarrierNo$[6] : Item "CarrierNo"
  Member SCAC_Code$[4] : Item "SCAC_Code"
  Member 3%,VGM_Weight : Item "VGM_Weight"
  Member VGM_UM$[2] : Item "VGM_UM"
  Member WeighMaster$[3] : Item "WeighMaster"
  Member 3%,SubmissionDate# : Item "SubmissionDate"
  Member Status$[20] : Item "Status"
End Def 
Dim VGMInterface. As VGM_Interface
!*****  Code Table Structures  *****
! Branch Codes (Partial Structure)
Def Struct Codes_Branch
  Member Branch$[2] : Item "Branch"
  Member Description$[30] : Item "Description"
  Member BranchGroup$[3] : Item "BranchGroup"
  Member BranchMgrEmail$[50] : Item "BranchMgrEmail"
End Def 
Dim CodesBranch. As Codes_Branch
! WeighMaster
Def Struct Codes_WeighMaster
  Member WeighMasterCode$[3] : Item "WeighMasterCode"
  Member Description$[20] : Item "Description"
  Member Password$[20] : Item "Password"
  Member 1%,UseExternalAuth : Item "UseExternalAuth"
  Member ExternalUserName$[20] : Item "ExternalUserName"
  Member AllowVoids$[1] : Item "AllowVoids" ! Y=Yes; I=InYard Only; N=Never
  Member 1%,ManualWt_Auth : Item "ManualWt_Auth"
End Def 
Dim CodesWeighMaster. As Codes_WeighMaster
Dim CodesWeighMasterTemp. As Codes_WeighMaster
! State Codes (Partial Structure)
Def Struct Codes_State
  Member State$[3] : Item "State"
  Member Description$[30] : Item "Description"
End Def 
Dim CodesState. As Codes_State
! UM Codes (Partial Structure)
Def Struct Codes_UM
  Member UM_Code$[2] : Item "UM_Code"
  Member Description$[30] : Item "Description"
End Def 
Dim CodesUM. As Codes_UM
! Trader Structure
Def Struct Codes_Trader
  Member TraderCode$[3] : Item "TraderCode"
  Member Description$[20] : Item "Description"
  Member UserName$[20] : Item "Username"
  Member EmailAddress$[100] : Item "EmailAddress"
  Member 1%,InternalTrader : Item "InternalTrader"
  Member 1%,Inactive : Item "Inactive"
End Def 
Dim CodesTrader. As Codes_Trader
! Veh Prefix Codes (Partial Structure)
Def Struct Codes_Vehicle_Prefix
  Member VehicleType$[1] : Item "VehicleType"
  Member VehiclePrefix$[5] : Item "VehiclePrefix"
  Member Description$[20] : Item "Description"
  Member 1%,IsContainer : Item "IsContainer"
  Member 1%,IsPrivateCar : Item "IsPrivateCar"
End Def 
Dim CodesVehiclePrefix. As Codes_Vehicle_Prefix
! Veh Size Codes (Partial Structure)
Def Struct Codes_Vehicle_Size
  Member VehicleType$[1] : Item "VehicleType"
  Member VehicleSize$[2] : Item "VehicleSize"
  Member Description$[20] : Item "Description"
End Def 
Dim CodesVehicleSize. As Codes_Vehicle_Size
! Veh Type Codes (Partial Structure)
Def Struct Codes_Vehicle_Type
  Member VehicleType$[1] : Item "VehicleType"
  Member Description$[20] : Item "Description"
  Member DefaultPrefix$[5] : Item "DefaultPrefix"
  Member TwoPartVehOverride$[1] : Item "TwoPartVehOverride"
  Member 1%,PrintBOL : Item "PrintBOL"
  Member 1%,UpdateVehTracking : Item "UpdateVehTracking"
  Member 1%,RequireVehicleSize : Item "RequireVehicleSize"
End Def 
Dim CodesVehicleType. As Codes_Vehicle_Type
! Weight Adjustment Codes (Partial Structure)
Def Struct Codes_Weight_Adjustment
  Member WeightAdjCode$[1] : Item "WeightAdjCode"
  Member Description$[15] : Item "Description"
End Def 
Dim CodesWgtAdj. As Codes_Weight_Adjustment
! Reason Codes (Manual Wt and Void Tkt)
Def Struct Codes_Reason
  Member ReasonType$[10] : Item "ReasonType"
  Member ReasonCode$[2] : Item "ReasonCode"
  Member Description$[30] : Item "Description"
End Def 
Dim CodesReason. As Codes_Reason
! Yard Zone Structure
Def Struct Codes_Yard_Zone
  Member Branch$[2] : Item "Branch"
  Member YardZone$[2] : Item "YardZone"
  Member Description$[20] : Item "Description"
End Def 
Dim CodesYardZone.[0] As Codes_Yard_Zone
! Levy Weight Adj Codes
Def Struct Codes_Levy_WeightAdj
  Member Branch$[2] : Item "Branch"
  Member WeightAdjCode$[1] : Item "WeightAdjCode"
  Member LevyMaterialCode$[8] : Item "LevyMaterialCode"
End Def 
Dim CodesLevyWeightAdj. As Codes_Levy_WeightAdj
!*****  Non-Datbase structures used by the program  *****
! Drivers License Stucure Version 2
Def Struct Drivers_License2
  Member LicenseNo$[25]
  Member ExpirationDate$[8] ! YYYYMMDD
  Member IssueDate$[8] ! YYYYMMDD
  Member DateOfBirth$[8] ! YYYYMMDD
  Member FirstName$[25]
  Member MiddleName$[25]
  Member LastName$[40]
  Member FullName$[50]
  Member Address1$[35]
  Member Address2$[35]
  Member City$[25]
  Member State$[3]
  Member PostCode$[15]
  Member Gender$[1]
  Member Height$[12]
  Member Weight$[12]
  Member WeightRange$[12]
  Member HairColor$[12]
  Member EyeColor$[12]
  Member Race$[12]
  Member DocumentNo$[25]
  Member CountryID$[3]
End Def 
Dim DriversLicense. As Drivers_License2
! Payment Detail Structure (for laser checks)
Def Struct PaymentDetail
  Member TicketNo$[6]
  Member ShipDate$[6]
  Member TicketType$[1]
  Member MaterialCode$[8]
  Member MaterialDesc$[30]
  Member LevyFlag$[1]
  Member VehNo$[11]
  Member InYardID$[11]
  Member PONo$[10]
  Member POLine$[2]
  Member InvoiceNo$[8]
  Member SuppInvNo$[10]
  Member SuppShipNo$[10]
  Member 3%,GrossWt
  Member 3%,TareWt
  Member 3%,NetWt
  Member 3%,AdjWt
  Member AdjCode$[1]
  Member 3%,PaidWt
  Member 3%,CarBodies
  Member 3%,RedCount
  Member 3%,RedWgt
  Member 4%,RedExt
  Member 4%,Price
  Member PriceUM$[2]
  Member 4%,MatExt
  Member 4%,FrtExt
  Member 4%,TaxAmt
  Member TaxFlag$[1]
  Member 4%,PaymentAmt
End Def 
Dim PD. As PaymentDetail
! Frequent Entities
Def Struct Frequent_Entity
  Member EntityNo$[6]
  Member Name$[30]
  Member 3%,BtnColor
End Def 
Dim FreqSupplier.[9] As Frequent_Entity
Dim FreqCustomer.[9] As Frequent_Entity
Dim FreqIntCustomer.[9] As Frequent_Entity
Dim FreqCarrier.[9] As Frequent_Entity
! Frequent Materials
Def Struct Frequent_Material
  Member MaterialCode$[8]
  Member MaterialDesc$[30]
  Member 3%,BtnColor
  Member 1%,Expired
End Def 
Dim 1%,FreqMaterialMax \ FreqMaterialMax = 50
Dim FreqMaterial.[FreqMaterialMax] As Frequent_Material
Dim GroupMaterial.[16,16] As Frequent_Material
Dim MatButtons.[16] As Frequent_Material
! Inventory Tagging Tables
Def Struct Inventory_Tag
  Member TagID$[10] : Item "TagID"
  Member Branch$[2] : Item "Branch"
End Def 
Dim InvTagList.[0] As Inventory_Tag
Def Struct Inventory_Tag_Void_Info
  Member Branch$[2] : Item "Branch"
  Member TagID$[10] : Item "TagID"
  Member 3%,VoidDateTime# : Item "VoidDateTime"
  Member VoidedByUser$[15] : Item "VoidedByUser"
  Member VoidedByWM$[3] : Item "VoidedByWM"
  Member VoidedReason$[50] : Item "VoidedReason"
End Def 
Dim InvTagVoid. As Inventory_Tag_Void_Info
! Derived Ticket Data
Def Struct Ticket_Temp
  !    Member 1%,Transfer
  !    Member 1%,DirtTicket
  Member 1%,MixUnload ! 1=Pur_Mix_Hdr built ,2=Ticket in use by mixunload
  Member 1%,RecoveryMode
End Def 
Dim TicketTemp. As Ticket_Temp
! Source Data (for Transfers and Notices)
Def Struct Source
  Member 3%,AdjWt
  Member AdjCode$[1]
End Def 
Dim Source. As Source
! ProForma Invoice Query
Def Struct Proforma
  Member TariffCode$[13] : Item "TariffCode"
  Member Description$[30] : Item "Description"
  Member MaterialCode$[8] : Item "MaterialCode"
  Member MaterialDesc$[30] : Item "MaterialDesc"
  Member 3%,PaidWt : Item "PaidWt"
  Member 4%,Price : Item "Price"
  Member Price_UM$[2] : Item "Price_UM"
  Member 4%,MatExt : Item "MatExt"
End Def 
Dim ProForma. As Proforma
! Credit Limit Check
Def Struct Credit
  Member 3%,CreditLimit ! Customer[1]
  Member 3%,CurrentBalance ! Customer[4]
  Member 3%,FutureAccrual ! Customer[11]
  Member 3%,UntransferredSales ! calculated from 8430, 8530 & 8325
  Member 3%,CreditUsed ! CurrentBalance+FutureAccrual+UntransferredSales
  Member 3%,OverLimit ! CreditUsed-CreditLimit
  Member 3%,CreditChkPercent ! Customer[13]
  Member 3%,PercentReached ! CreditUsed/CreditLimit * 100
End Def 
Dim Credit. As Credit
! data needed for alternate frt rates used in sub.frtrate
Def Struct OrigDestData
  Member OriginEntityNo$[6]
  Member OriginEntityType$[1]
  Member OriginEntityShipToFrom$[4]
  Member DestEntityNo$[6]
  Member DestEntityType$[1]
  Member DestEntityShipToFrom$[4]
End Def 
Dim OrigDest. As OrigDestData
Def Struct OTM_Order_Changes
  Member OrderNo$[10] : Item "OrderNo"
  Member OrderType$[2] : Item "OrderType" ! MR/SO/PO
  Member Event$[10] : Item "Event"
End Def 
Dim otmOrderChanges. As OTM_Order_Changes
Def Struct Ohio_DoNotBuy
  Member DataEnvironmentName$[20] : Item "DataEnvironmentName"
  Member FacilityRegNumber$[30] : Item "FacilityRegNumber"
  Member FirstName$[25] : Item "FirstName"
  Member LastName$[40] : Item "LastName"
  Member DOB$[10] : Item "DOB"
  Member DLNumber$[25] : Item "DLNumber"
  Member DLState$[2] : Item "DLState"
End Def 
Dim OhioDoNotBuy. As Ohio_DoNotBuy
Def Struct Interface_Sales_Ticket_Log
  Member TicketNo$[6] : Item "TicketNo"
  Member 2%,ShipmentDate# : Item "ShipmentDate"
  !    Member 1%,Leg     : ITEM "Leg"
  Member Branch$[2] : Item "Branch"
  Member 4%,ReleaseNo : Item "ReleaseNo"
  Member MatReqNo$[10] : Item "MatReqNo"
  Member MatReqLine$[2] : Item "MatReqLine"
  Member CarrierNo$[6] : Item "CarrierNo"
  Member VehNo$[11] : Item "VehNo"
  Member Event$[10] : Item "Event"
End Def 
Dim SalesTicketLog. As Interface_Sales_Ticket_Log
Def Struct Interface_SuppShipNo
  Member TicketNo$[6] : Item "TicketNo"
  Member 2%,ShipmentDate# : Item "ShipmentDate"
  Member SupplierNo$[6] : Item "SupplierNo"
  Member SuppShipNo$[10] : Item "SuppShipNo"
End Def 
Dim InterfaceSuppShipNo. As Interface_SuppShipNo
! Sales Shipment Validate Service
Def Struct SSV_Service
  Member DataEnvironmentName$[20] : Item "DataEnvironmentName"
  Member Branch$[2] : Item "Branch"
  Member SupplierNo$[6] : Item "SupplierNo"
  Member PONo$[10] : Item "PONo"
  Member POLine$[2] : Item "POLine"
  Member ShipmentRefNo$[10] : Item "ShipmentRefNo"
End Def 
Dim SSV. As SSV_Service
Def Struct KeyValue_Node
  Member Name$[512]
  Member value$[5096]
  Member dataType$[50] !PRIMATIVE, OBJECT, ARRAY, STRING
  Member 4%,parentNode
  Member 3%,groupID
End Def 
Dim jsonNode.[50] As KeyValue_Node
! Program Dimensions
Dim w$[200],z$[650],shareco$[2],errmess$[500],temp$[500],temp2$[200],mask$[20]
Dim k$[50],k1$[50],k2$[50],ksav$[50],ktemp$[50],klist$[100],kmat$[50],kotm$[50]
Dim SearchString$[50],SearchBy$[1],Filter$[1],SavedValue$[10],SQL$[1000],SessionDefault$[15]
Dim Environment$[20],TicketNo$[6],LastTicket$[6],Status$[1],ID$[12],c$[7]
Dim CurrentPeriodEnd$[8],FuturePeriodEnd$[8],2%,FiscalYrBeginDate#,curperiod,curyear,ShipmentDate#,ShipmentDate$[8],CompleteDate#,d1#
Dim 1%,NumMatGroups,MatGroupNum[16] \ Dim MatGroups$[16,8]
Dim SupplierNo$[6],VendorNo$[6],CarrierNo$[6],CustomerNo$[6]
ilistmax = 50 \ ilistselmax = 50 \ ilistlen = 100 \ Dim ilist$[ilistmax,ilistlen],ilistsel$[ilistselmax,ilistlen],istring$[100]
Dim 1%,UnpricedItem,NumCashiers,TransferMode,WeightOnly,IdentityInfo,BrYd,Dirt$[1],MultiItemTicket$[1],SaveTransferMode$[1]
Dim 1%,TicketAudit,VoidTicketReasonCodes,ReasonCode$[2],TicketControlNo,ControlNoLabel$[20]
Dim FullPONo$[13],FullSONo$[13],SPLC_src$[6],SPLC_dest$[6]
Dim WeighMaster$[3],WMName$[20],WMVoid$[1],BankCodes$[10,2],BankCode$[2],ReceiptNo$[6],CDUReceiptNo$[20]
Dim IntSupplierNo$[6],YardSupplierNo$[6],StockPile$[3],TransType$[2],ConsumptionYard$[1],ConsumptionPile$[3]
Dim MaterialCode$[8],ButtonDesc$[28,50],TicketFunctions$[16,30]
Dim ScaleTicketStatus$[1],MaterialUnpriced$[38],CreditStatus$[1]
Dim VehicleType$[1],VehicleSize$[2],VehicleNo$[11],VehPrefix$[11],VehNum$[11],DefaultUpdateVehTracking$[1],UpdateVehTracking$[1],ValidateContainer$[1]
Dim VehType1$[1],VehType2$[1],1%,CurbSideFile,CurbSideCity$[2],BOLReleaseName$[20],RFID$[16]
Dim BarCodeStart$[10],BarCodeEnd$[10],BX$[5],EX$[5],BB$[5],EB$[5],CutPaper$[20],LineTerm$[2]
Dim 4%,TotalMatExt,TotalMatTax,TotalCbkFrt,TotalCbkTax,TotalNetAmt
Dim 4%,cf,x,nr,Price,AdjAmt,MatExt,TaxAmt,TotalAmt,GreeterQueueID,supplier_id_rowid
Dim 1%,Numbers[3],2%,DBConnectionTime#,ScanDefault,ipage,istart,VGM_Interface,OTMOrderChanges,SalesTicketLog,pmtopt,mixopt,buildmixticket,PrintSignature
Dim 3%,num,r,r1,RoundAmt,PortNumber,ProcessID,VehDiffWt,SavedMixAdjWt
! LaserCheck Variables
Dim TransitNo$[9],BankAccount$[15],PrintBankCode$[1],PreNumberedCheck$[1],CheckDigitOpt$[1],CheckFormName$[50],CheckFormSig$[50],CheckDetails$[100,150]
Dim ONUS$[5],TRANSIT$[5],DASH$[5],4%,CheckSignatureLimit,1%,CheckCopies,ndetails,CheckWordOverride$[10]
Dim CheckComments$[3,50],1%,CheckCommentLines
Dim TextLines$[10,150]
! JPegger
Dim FieldName$[15,30],FieldValue$[15,100],JPServer$[50],JPegger$[1]
! Scale Sensors
Dim InputStates$[5,1],Counts$[5,10]
! sub.frt_calc
Dim ShipmentNo$[6],veh_tp$[3],ph_status$[2],frtrte$[12],FrtCalcMode$[50],MultiFreightError$[2],errmess_frtcalc$[100]
Dim 3%,gpw[3],mgpw[3],fgpw[3],cbgpw[3],supcbgpw[3],tot_frt,cbk_frt
! TMS
Dim 4%,TMS_TotalFrtExt,TMS_TotalFrtExtUM$[2]
! Non-Contract Freight
Dim FreightOption$[1],CarrierTaxFlag$[1],CarrierTaxJurisdiction$[1],4%,TotalFreight,FreightRate,SubTotalFreight,3%,TotalWeight,1%,ConvertableFrtUM,FreightRateEntered
! AdvancedIdentity
Dim TicketList$[1,6],ShipDateList$[1,6],PhotoCaptured$[1],SupplierVCode$[1]
! GST
Dim 4%,GSTTaxRate,TaxRates[4],TaxableAmt,FYTDPurchases,gbl_bin$[10],TaxFlag$[1],PrintStatementofSupply$[1]
! Levy
Dim LevyFlag$[1],LevyMaterialCode$[8],LevyMatl$[8]
! Alternate Unit Ticket
Dim AltWeightUM$[2],alt_descum$[15],AltCurrencyCode$[3],4%,alt_cf,ExchangeRate,TotalNetWt,TotalAdjWt,TotalPrice
! L.A. Info for Allan Sun Valley
Dim 1%,SunValley,SV_SupplierNo$[6]
! Summary Weight
Dim TicketSummaryWeightDesc$[10],4%,TicketSummaryWeight_cf,3%
Dim TicketSummaryWeightDesc2$[10],4%,TicketSummaryWeight_cf2,3%
! Email Tickets
Dim 1%,SCL_PTkt_EmailAlert,SCL_STkt_EmailAlert
Dim EmailToList$[10000],EmailCCList$[10000],FromAddress$[100],EmailString$[25000]
! DJJ Customer Loyality Points
Dim 3%,PointTotal
! Credit Alert
Dim 1%,SCLCredit_EmailAlert
! Ohio DO NOT BUY
Dim OHDNB_Server$[50],OHDNB_SubmitTo$[100],OHDNB_APIToken$[100]
! Sales Shipment Validation Service
Dim SSV_Server$[50],SSV_SubmitTo$[100],SSV_APIToken$[100]
Dim RequestString$[500],Response$[10000]
! Config file parameters
Dim UserAccess$[20],Mill$[1],ChangeProcessingDate$[5],UseYardZones$[1],YardZone$[2],DocLang$[10]
Dim ScaleIndicators$[5],ScaleAddr$[5,50],ScaleSensorAddr$[5,50],ScaleScannerAddr$[5,50],ScaleNames$[5]
Dim DisableManualWt$[1],AllowTransferManualWt$[1],AllowDirtManualWt$[1],AllowSalesManualWt$[1],ReturnToZero$[1],ReadScaleOnManualWt$[1]
Dim AllowMultipleItems$[1],AllowItemSplit$[1],AllowAdjustment$[1],AllowSplitWt$[1],DisableManualSplitWt$[1]
Dim TicketWeightAdjustmentAsPrice$[1],PaymentWeightAdjustmentAsPrice$[1]
Dim DisplayPrice$[1],EditPrice$[10],PrintPrice$[1],PrintSalesPrice$[1],PriceToleranceAction$[1],AlwaysRepriceOnSupplierChange$[1]
Dim EditMaterialDesc$[1],WeightOnlyMaterial$[1],EnableOccupantCount$[1]
Dim PurchaseManualReason$[1],SalesManualReason$[1],RequireVoidComment$[1]
Dim PromptVehInfo$[1],DefaultVehType$[1],AllowVehTypeChange$[1],DefaultVehPrefix$[5],RequireVehicleNo$[1]
Dim PurchaseOrderRequired$[1],SalesOrderRequired$[1],ShowCurrentOrdersOnly$[1],ShowCurrentCompanyOrdersOnly$[1],ShowOrdersWithMaterialReqsOnly$[1]
Dim AllowMaterialChange$[1],WarnSalesOrderOvership$[1],OTMFreight$[1]
Dim NonContractCarrierHandling$[10],NonContractFreightCode$[2],AllowFreightRateEntry$[1],1%,CTicketCopies
Dim CashEnvelopePrinter$[50],CheckPrinter$[50],LaserReceiptOptionColumn$[20],ATMEncoder$[50],RoundCASH$[20],RoundATM$[20],EFTOverLimitBankCode$[2]
Dim CDUAddr$[50],CDUPrinter$[50],CDUPrinterType$[20],CDUBarcodePCL$[100],CDUReceiptFooter$[100,69],1%,ncdufooter,CDUReceiptBlankLines
Dim CardReaders$[5,50],Device$[50]
Dim ScaleCamera$[5,50],CameraDefs$[6,100],ATMCamera$[50],CASHCamera$[50],CHECKCamera$[50],EFTCamera$[50],OTHERCamera$[50],ManualWtOverrideCamera$[100]
Dim PhotoURL$[100],PhotoViewerTrigger$[100],CapturePhotoOnMaterialChange$[1]
Dim InYardFilter$[1],InYardScanDefault$[1],InYardPhotos$[1],InYardDemo$[1],JPThumbsLocation$[100],WelcomeSignAddr$[30]
Dim RequireInspection$[1]
Dim InBoundTransferDefaultID$[1],InBoundTransferCarrierRequired$[1],CreateInBoundTransfers$[1],AllowIBTransferInvMismatch$[1],OutBoundTransferCarrierRequired$[1]
Dim ValidTransferBranches$[200]
Dim RFReader$[5,50],RFAutoRead$[1],RFCreateMaster$[1]
Dim PaymentMethod$[20],PaymentOptions$[10,10],PaymentMethods$[10,10],PaymentCodes$[10,1],PaymentTypes$[10,10]
Dim TicketCopyLegend$[10,69],TicketCopySuppressPrice$[10,1],TicketCopyPrintCFCText$[10,1],TicketCopyPrintPurchaseBarcode$[10,1]
Dim TicketCopyAlternateUnit$[10,1],EnterPriceInAltCurrency$[1],TicketLineSpacing$[5]
Dim TicketPrinter$[50],TicketPrinterType$[20],TicketForm$[50],DPTicketTitle$[25],SuppressDPTicketCertificate$[1]
Dim PrintStockPile$[1],PrintMaterialCode$[1],PrintTraderName$[1],PrintCFCOnFile$[1],PrintVINNumbers$[1],PrintDriverIDNumber$[1]
Dim PrintShippingInstructions$[1],SuppressTicketSummaryWeight$[1],TicketSummaryWeightUM$[2],TicketSummaryWeightUM2$[2]
Dim EmailPurchaseTickets$[1],EmailSalesTickets$[1]
Dim PrintIDExpDate$[1],PrintDateOfBirth$[1],PrintPhoneNo$[1],PrintVehicleSize$[1],PrintDriverName$[1]
Dim VehicleNoDescription$[25],PrintVehicleTagInfo$[1]
Dim PrintInspector$[10],PrintWeighmaster$[10]
Dim CustSignature$[1],WMSignature$[1],CashierSignature$[1]
Dim PrintPurchaseShipFrom$[1],PrintSaleShipTo$[1],PrintInspectionComment$[1]
Dim TicketHeader$[100,69],TicketFooter$[100,69],TicketOptFooter$[100,69],CFCText$[100,69],InspectionTicketHeader$[100,69],InspectionTicketText$[100,69],InspectionTicketFooter$[100,69]
Dim 1%,nheader,nfooter,nofooter,ncfc,niheader,nitext,nifooter
Dim PrintInspectionTicket$[1],PrintSalesInspectionTicket$[1],InspectionTicketPrinter$[50],InspectionTicketPrinterType$[20],InspectionTicketForm$[50]
Dim InspectionTicketMaterialBarcode$[1],InspectionWeighmaster$[50],InspectionCustomerSignature$[1],1%,InspectionTicketCopies
Dim PrintMaterialCodeForm$[1],MaterialCodeFormList$[100],MaterialCodeFormFile$[50],1%,MaterialCodeFormCopies
Dim MIXTicketPrinter$[50],MIXTicketForm$[50],MIXTicketDecimals$[1],MIXTicketPrintBoth$[1],1%,MIXTicketItemsPerPage
Dim RequireIdentity$[1],DisableSavedPhotoAutoCopy$[1],CheckDoNotBuy$[1],DefaultNameOrder$[3],RequireVINonCarBodyMaterial$[1]
Dim CheckOhioDoNotBuy$[1],OhioFacilityRegNumber$[50]
Dim SignaturePad$[50],2%,PurchaseTicketSigID,PaymentSigID,BOLSigID,IDSigID
Dim BOLPrinter$[50],BOLForm$[50],BOLForm2$[50],BOLFormOptions$[50],BOLReferenceNumber$[20],BOLReferenceNumberPCL$[100]
Dim 1%,BOLCopies,BOLLinesPerPage,BOLShipmentNoPosition[2],BOLTareWtDerived$[1]
Dim ProFormaForm$[50],ProFormaForm2$[50],1%,ProFormaCopies
Dim EOD_time$[4],EOD_day$[10],EOD_Mode$[1],EOD_First_Only$[1]
Dim BOM_TicketPrevent$[1],BOM_TicketPrevent_start$[4],BOM_TicketPrevent_end$[4],1%,BOM_TicketPrevent_day
Dim BCLeadIn$[5],AutoViewID$[1],InBoundPeddlerInfoPrompt$[2],PeddlerInfoPrompt$[1],SupplierShipNoPrompt$[1],SupplierDefaultFromID$[1],CustomerDefaultFromID$[1]
Dim PromptForBargeDates$[1],RequireAxleCount$[1],Greeter$[1],GreeterPhotos$[1],MixUnloadMode$[1],RequireTicketComment$[1],ReviewPhotos$[1]
Dim DisableGenerateManualTicketNo$[1],AllowManualTTicket$[1],AllowEditFrequents$[1],AutoStartMixTicketOption$[1],CheckOutboundVehMaxGross$[1],ViewNoticesOnly$[1]
Dim WarnHazMat$[1],HazMatSupplierTypes$[20]
Dim AgencyBrokSupplierDesc$[69]
Dim MainButtons$[15,40],MainFunctions$[3,40],MoreButtons$[15,40],MoreFunctions$[15,40]
Dim LastUsed$[6],BranchPeddlerNo$[6]
Dim QuickIDSet1$[9,11],QuickIDSet2$[9,11]
Dim EmailWtAdjOverToleranceAction$[1],EmailWtAdjWithinToleranceAction$[1],EmailBuyer_ccBranchManager$[1]
Dim 3%,EmailWtAdjTolerance,2%,EmailWtAdjPercentTolerance,1%,TicketHasWtAdj,WtAdjOverTolerance
Dim 3%,MaxATM,MaxCash,MaxEFT,MaxOther,EFTDailyLimit,EFTOverLimitMax,EstCarBodyWt,ContainterTareWt
Dim 1%,NumScales,DefScale,DefCashier,NumPaymentOptions,NumPaymentMethods,TicketCopies,RFID
Dim 1%,PaymentLinePosition,TicketNoSize,QuickID,PhotoCameras,AxleCount
Dim 2%,MultiSalesCheckWtTolerance,MIXRetailWtTolerance
Dim 3%
! Set Colors
Dim 3%,bgcolor,bgcolor1,ReqColor
bgcolor = SAIColorRGB(125,190,255)
bgcolor1 = SAIColorRGB(230,230,230)
ReqColor = 16776960 ! Yellow
! Get Environment
Call Env(1,"WORKENV",Environment$)
If Environment$ = ""
  Call SAITouchError("No Environment set.  Program aborted.")
  Goto end_program
End If 
! Set Branch/Yard file structure mode
BrYd = 1
! Program Defaults
Call ConfigFile()
If UserAccess$ = "DENY"
  Call SAITouchWarning("You are not authorized to run this application.")
  Goto end_program
End If 
! Attempt to open Database
ch_db = 70
Call SAIOpenDatabase(ch_db,status,errmess$)
If status
  Call WriteLogFile("Database connection COULD NOT be established at program initialization.")
  Call SAITouchError("Unable to open Database.\15\Program will exit.")
  Goto end_program
Else 
  DBConnectionTime# = Tim#(0)
End If 
! Check Security
If SAISecurityEnabled()
  If SAIValidProgram(ch_db,Branch$,"TRK1") = 0
    Call SAITouchWarning("You are not authorized to run this program (TRK1).")
    Goto end_program
  End If 
End If 
! Open Files
ch_shre = -1 ! To initialize share file
Try 
  ch_8330 = 1
  ch_8330ro = 31
  Dim recdef_8330. As RecordDef ! Scale Purchase Ticket File
  Call SAIOpenFile("8330",Branch$,ch_8330,recdef_8330.,"RW",ch_shre,shareco$,status,errmess$)
  Ropen #ch_8330ro,Chf$(ch_8330 + 800)
  Dim ScaleTicket$[recdef_8330.StrDim],3%,ScaleTicket3[recdef_8330.MatNum[3] - 1],4%,ScaleTicket4[recdef_8330.MatNum[4] - 1]
  Dim ScaleCTicket$[recdef_8330.StrDim],3%,ScaleCTicket3[recdef_8330.MatNum[3] - 1],4%,ScaleCTicket4[recdef_8330.MatNum[4] - 1]
  ch_8332 = 30
  Dim recdef_8332. As RecordDef ! Scale Purchase Ticket History File
  Call SAIOpenFile("8332",Branch$,ch_8332,recdef_8332.,"R",ch_shre,shareco$,status,errmess$)
  ! Use ScaleTicket variables from 8330
  ch_8326 = 2
  ch_8326ro = 32
  Dim recdef_8326. As RecordDef ! Scale Ticket Audit File
  Call SAIOpenFile("8326",Branch$,ch_8326,recdef_8326.,"RW",ch_shre,shareco$,status,errmess$)
  Ropen #ch_8326ro,Chf$(ch_8326 + 800)
  Dim ScaleTicAudit$[recdef_8326.StrDim],3%,ScaleTicAudit[recdef_8326.MatNum[3] - 1]
  ch_110A = 3
  ch_110Aro = 33
  Dim recdef_110A. As RecordDef ! Scrap Codes File
  Call SAIOpenFile("110A",Branch$,ch_110A,recdef_110A.,"RW",ch_shre,shareco$,status,errmess$)
  Ropen #ch_110Aro,Chf$(ch_110A + 800)
  Dim ScrapCode$[recdef_110A.StrDim],4%,ScrapCode[recdef_110A.MatNum[4] - 1]
  Dim ScrapCodeTmp$[recdef_110A.StrDim],4%,ScrapCodeTmp[recdef_110A.MatNum[4] - 1]
  Dim ScrapSRecord$[recdef_110A.StrDim]
  Dim ScaleCodes$[recdef_110A.StrDim]
  ! Get S record from Scrap Codes File
  k$ = "S" + Branch$
  Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",rec_110A,ScrapSRecord$,ScrapCode[],stat,errmess$)
  If stat
    k$ = "S  "
    Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",rec_110A,ScrapSRecord$,ScrapCode[],stat,errmess$)
  End If 
  If stat
    Call SAITouchError("Missing Scrap 'S' record.\15\PROGRAM ABORTED!!")
    Goto end_program
  End If 
  ! Get Scale Codes Record "s"
  k$ = "s" + Branch$
  Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScaleCodes$,ScrapCode[],stat,errmess$)
  If stat
    k$ = "s  "
    Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScaleCodes$,ScrapCode[],stat,errmess$)
  End If 
  If stat
    Call SAITouchError("No " + gbl_scale$ + " Codes record built!\15\Program will exit.")
    Goto end_program
  End If 
  If ScaleCodes$[47,47] = "Y" Let JPegger$ = "Y"
  If ReturnToZero$ = "" Let ReturnToZero$ = ScaleCodes$[100,100]
  If ScaleCodes$[133,133] = "Y"
    NumCashiers = 2
  Else 
    NumCashiers = ScaleCodes$[133,133]
  End If 
  If NumCashiers = 0 Let NumCashiers = 1
  ch_8331 = 4
  Dim recdef_8331. As RecordDef ! Scale Check Register File
  Call SAIOpenFile("8331",Branch$,ch_8331,recdef_8331.,"RW",ch_shre,shareco$,status,errmess$)
  Dim ScaleCheckReg$[recdef_8331.StrDim],3%,ScaleCheckReg[recdef_8331.MatNum[3] - 1]
  ch_1220 = 5
  Dim recdef_1220. As RecordDef ! Purchase Shipments File
  Call SAIOpenFile("1220",Branch$,ch_1220,recdef_1220.,"RW",ch_shre,shareco$,status,errmess$)
  Dim PurchaseShipments$[recdef_1220.StrDim],3%,PurchaseShipments3[recdef_1220.MatNum[3] - 1]
  Dim 4%,PurchaseShipments4[recdef_1220.MatNum[4] - 1]
  ch_8430 = 6
  ch_8430ro = 36
  Dim recdef_8430. As RecordDef ! Scale Sales Ticket File
  Call SAIOpenFile("8430",Branch$,ch_8430,recdef_8430.,"RW",ch_shre,shareco$,status,errmess$)
  Ropen #ch_8430ro,Chf$(ch_8430 + 800)
  Dim SalesTicket$[recdef_8430.StrDim]
  Dim 3%,SalesTicket3[recdef_8430.MatNum[3] - 1],4%,SalesTicket4[recdef_8430.MatNum[4] - 1]
  ch_8530 = 7
  ch_8530ro = 37
  Dim recdef_8530. As RecordDef ! Retail Sales File
  Call SAIOpenFile("8530",Branch$,ch_8530,recdef_8530.,"RW",ch_shre,shareco$,status,errmess$)
  Ropen #ch_8530ro,Chf$(ch_8530 + 800)
  Dim RetailSales$[recdef_8530.StrDim],3%,RetailSales[recdef_8530.MatNum[3] - 1]
  ch_1460 = 8
  ch_1460ro = 38
  Dim recdef_1460. As RecordDef ! Transfers File
  Call SAIOpenFile("1460",Branch$,ch_1460,recdef_1460.,"RW",ch_shre,shareco$,status,errmess$)
  Ropen #ch_1460ro,Chf$(ch_1460 + 800)
  Dim Transfer$[recdef_1460.StrDim],3%,Transfer[recdef_1460.MatNum[3] - 1]
  ch_1115 = 10
  ch_1115ro = 40
  Dim recdef_1115. As RecordDef ! Global Comment File
  Call SAIOpenFile("1115",Branch$,ch_1115,recdef_1115.,"RW",ch_shre,shareco$,status,errmess$)
  Ropen #ch_1115ro,Chf$(ch_1115 + 800)
  Dim GblCmt$[recdef_1115.StrDim],GblCmtTmp$[recdef_1115.StrDim],CommentKey$[30]
  ch_1215 = 11
  ch_1215ro = 41
  Dim recdef_1215. As RecordDef ! P.O. Freight/Proc File
  Call SAIOpenFile("1215",Branch$,ch_1215,recdef_1215.,"RW",ch_shre,shareco$,status,errmess$)
  Ropen #ch_1215ro,Chf$(ch_1215 + 800)
  Dim POFreight$[recdef_1215.StrDim],3%,POFreight[recdef_1215.MatNum[3] - 1]
  POFreightMax = 20 \ Dim POFreightRecords$[POFreightMax,recdef_1215.StrDim]
  ch_1200 = 12
  Dim recdef_1200. As RecordDef ! P.O. Header File
  Call SAIOpenFile("1200",Branch$,ch_1200,recdef_1200.,"R",ch_shre,shareco$,status,errmess$)
  Dim POHeader$[recdef_1200.StrDim],3%,POHeader[recdef_1200.MatNum[3] - 1]
  ch_1210 = 13
  ch_1210ro = 43
  Dim recdef_1210. As RecordDef ! P.O. Detail File
  Call SAIOpenFile("1210",Branch$,ch_1210,recdef_1210.,"RW",ch_shre,shareco$,status,errmess$)
  Ropen #ch_1210ro,Chf$(ch_1210 + 800)
  Dim PODetail$[recdef_1210.StrDim],3%,PODetail[recdef_1210.MatNum[3] - 1]
  Dim TempPODetail$[recdef_1210.StrDim],3%,TempPODetail[recdef_1210.MatNum[3] - 1]
  ch_1300 = 14
  Dim recdef_1300. As RecordDef ! S.O. Header File
  Call SAIOpenFile("1300",Branch$,ch_1300,recdef_1300.,"R",ch_shre,shareco$,status,errmess$)
  Dim SOHeader$[recdef_1300.StrDim],3%,SOHeader[recdef_1300.MatNum[3] - 1]
  Dim SOHeaderTemp$[recdef_1300.StrDim],3%,SOHeaderTemp[recdef_1300.MatNum[3] - 1]
  ch_1310 = 15
  ch_1310ro = 45
  Dim recdef_1310. As RecordDef ! S.O. Detail File
  Call SAIOpenFile("1310",Branch$,ch_1310,recdef_1310.,"RW",ch_shre,shareco$,status,errmess$)
  Ropen #ch_1310ro,Chf$(ch_1310 + 800)
  Dim SODetail$[recdef_1310.StrDim],3%,SODetail[recdef_1310.MatNum[3] - 1]
  Dim TempSODetail$[recdef_1310.StrDim],3%,TempSODetail[recdef_1310.MatNum[3] - 1]
  !    ch #19 - was Customer Master File
  ch_1600 = 20
  Dim recdef_1600. As RecordDef ! Inventory Master File
  Call SAIOpenFile("1600",Branch$,ch_1600,recdef_1600.,"R",ch_shre,shareco$,status,errmess$)
  Dim Inventory$[recdef_1600.StrDim],3%,Inventory[recdef_1600.MatNum[3] - 1]
  Dim InventoryTmp$[recdef_1600.StrDim],3%,InventoryTmp[recdef_1600.MatNum[3] - 1]
  ch_1246 = 21
  Dim recdef_1246. As RecordDef ! SO/PO Xref File
  Call SAIOpenFile("1246",Branch$,ch_1246,recdef_1246.,"R",ch_shre,shareco$,status,errmess$)
  Dim Xref$[recdef_1246.StrDim]
  ch_070A = 22
  Dim recdef_070A. As RecordDef ! AP Codes File
  Call SAIOpenFile("070A",Branch$,ch_070A,recdef_070A.,"R",ch_shre,shareco$,status,errmess$)
  Dim APCode$[recdef_070A.StrDim],4%,APCode[recdef_070A.MatNum[4] - 1]
  ch_0715 = 23
  Dim recdef_0715. As RecordDef ! AP Check Register
  Call SAIOpenFile("0715",Branch$,ch_0715,recdef_0715.,"R",ch_shre,shareco$,status,errmess$)
  Dim APCheckReg$[recdef_0715.StrDim],3%,APCheckReg[recdef_0715.MatNum[3] - 1]
  ! CA Redeption Files
  CurbSideFile = 0
  If ScrapSRecord$[69,70] = "CA"
    ch_2401 = 27
    Dim recdef_2401. As RecordDef ! Redemption Reimbursement Rate File
    Call SAIOpenFile("2401",Branch$,ch_2401,recdef_2401.,"R",ch_shre,shareco$,status,errmess$)
    Dim Reimbursement$[recdef_2401.StrDim],3%,Reimbursement[recdef_2401.MatNum[3] - 1]
    ch_2402 = 28
    Dim recdef_2402. As RecordDef ! Recycler/Processor File
    Call SAIOpenFile("2402",Branch$,ch_2402,recdef_2402.,"R",ch_shre,shareco$,status,errmess$)
    Dim Recycler$[recdef_2402.StrDim]
    Try 
      ch_07XY = 29
      Dim recdef_07XY. As RecordDef ! Curbside Tracking File
      Call SAIOpenFile("07XY",Branch$,ch_07XY,recdef_07XY.,"R",ch_shre,shareco$,stat,errmess$)
      Dim CurbSide$[recdef_07XY.StrDim],3%,CurbSide[recdef_07XY.MatNum[3] - 1]
      CurbSideFile = 1
    Else 
    End Try 
  End If 
  ! Open these files temporarily
  ch = -1
  Dim recdef_COMP. As RecordDef ! Companies File
  Call SAIOpenFile("COMP","00",ch,recdef_COMP.,"R",ch_shre,shareco$,status,errmess$)
  Dim Company$[recdef_COMP.StrDim],3%,Company[recdef_COMP.MatNum[3] - 1]
  k$ = Branch$
  Call SAIGetRecord(ch,recdef_COMP.,k$,1,"Y","U",r,Company$,Company[],stat,errmess$)
  If stat
    Call SAITouchError("Error reading COMP file.\15\" + errmess$)
    Goto end_program
  End If 
  Close #ch
  If ScaleCodes$[42,42] <> "N" And ScaleCodes$[42,42] <> " "
    Dim recdef_010A. As RecordDef ! C/R Codes File
    Call SAIOpenFile("010A",Branch$,ch,recdef_010A.,"R",ch_shre,shareco$,status,errmess$)
    Dim CRCodes$[recdef_010A.StrDim],4%,CRCodes[recdef_010A.MatNum[4] - 1]
    k$ = "S"
    Call SAIGetRecord(ch,recdef_010A.,k$,1,"Y","U",r,CRCodes$,CRCodes[],stat,errmess$)
    If stat
      Call SAITouchError("Error reading C/R Codes file.\15\" + errmess$)
      Goto end_program
    End If 
    Close #ch
  End If 
Else 
  If Spc(8) <> 38 Let errmess$ = "Error # " + Str$(Spc(8)) + " at line " + Str$(Spc(10)) + "\15\" + Erm$(Spc(8))
  Call SAITouchError(errmess$)
  Goto end_program
End Try 
Close #ch_shre \ ch_shre = -1
Dim 3%
! Check for Scale Audit Table
TicketAudit = SAITableExists(ch_db,"Ticket_Audit")
! Check for Void Reason Codes
VoidTicketReasonCodes = 0
Try 
  Search #ch_db;"SELECT * FROM Codes_Reason WHERE ReasonType=" + SQLV$("VOIDTKT") + " LIMIT 1"
  If Chf(ch_db) Let VoidTicketReasonCodes = 1
Else 
End Try 
! Check for VGM Interface
VGM_Interface = SAITableExists(ch_db,"VGM_Interface")
! Check for OTMOrder Changes
OTMOrderChanges = SAITableExists(ch_db,"OTM_Order_Changes")
! Check for Sales Ticket Logging
SalesTicketLog = SAITableExists(ch_db,"Interface_Sales_Ticket_Log")
! Get System Properties from SAI_System_Prop
gbl.CorporateCo$ = SAIGetSystemProp$(ch_db,"CorporateCo")
gbl.CustomerID$ = SAIGetSystemProp$(ch_db,"CustomerID")
gbl.CustomerGroupID$ = SAIGetSystemProp$(ch_db,"CustomerGroupID")
gbl.BaseCurrency$ = SAIGetSystemProp$(ch_db,"BaseCurrency")
gbl.MultiCurrency$ = SAIGetSystemProp$(ch_db,"MultiCurrency")
gbl.LevyMode$ = UCase$(SAIGetSystemProp$(ch_db,"LevyMode"))
gbl.DefaultPaperSize$ = UCase$(SAIGetSystemProp$(ch_db,"DefaultPaperSize"))
gbl.A4Offset = 0 \ If gbl.DefaultPaperSize$ = "A4" Let gbl.A4Offset = 4
gbl.SystemEmailFrom$ = SAIGetSystemProp$(ch_db,"SystemEmailFrom")
! Load FundsType / Currency Codes
If gbl.MultiCurrency$ = "Y"
  Search #ch_db;"SELECT " + SQLN$(CodesCurrency.[0]) + " FROM Codes_Currency ORDER BY FundsType"
  NumCodesCurrency = Chf(ch_db)
  If NumCodesCurrency
    NumCodesCurrency = NumCodesCurrency - 1
    Dim CodesCurrency.[NumCodesCurrency] As Codes_Currency
    Map Record #ch_db As Codes_Currency
    For n = 0 To NumCodesCurrency
      Read Record #ch_db;CodesCurrency.[n]
      If CodesCurrency.[n].CurrencyCode$ = gbl.BaseCurrency$ Let gbl.BaseFundsType$ = CodesCurrency.[n].FundsType$
    Next n
  Else 
    Call SAITouchError("Codes_Currency table is empty.")
    Goto end_program
  End If 
  Call SAIGetBranchFundsType(ch_db,Branch$,gbl.BranchFundsType$,gbl.BranchCurrency$)
  If gbl.BranchCurrency$ = ""
    Call SAITouchError("Unable to determine Branch Currency.")
    Goto end_program
  Else 
    gbl.BranchFundsType$ = Trim$(gbl.BranchFundsType$)
  End If 
End If 
! Populate z$ with necessary values
z$ = " ",z$
z$[1,2] = Branch$
z$[58,61] = "TRK1"
z$[63,63] = Company$[15,15] ! Allow Corporate Display
z$[301,433] = SAISpaceFill$(ScrapSRecord$,133) ! Plug Scrap Codes "S" record into z$
z$[581,584] = SAISpaceFill$(ScaleIndicators$,4)
!  z$[642,643]=ConfFile$[370,371] ! Corporate Company No.
!  if Company$[57,58]<>"  " Let z$[642,643]=Company$[57,58] ! Corporate Company from COMP file
!  z$[644,646]=ConfFile$[376,378] ! Custom Company No.
z$[642,643] = SAISpaceFill$(gbl.CorporateCo$,2) ! Corporate Company No.
z$[644,646] = SAISpaceFill$(gbl.CustomerID$,3) ! Custom Company No.
If z$[644,646] = "255" Or z$[644,646] = "355" Or z$[644,646] = "351" Let gbl.PeddlerLimit = SAIGetSystemProp$(ch_db,"PeddlerLimit")
Search #ch_db;"SELECT " + SQLN$(CodesBranch.) + "FROM Codes_Branch WHERE Branch=" + SQLV$(Trim$(Branch$))
If Chf(ch_db)
  Map Record #ch_db As Codes_Branch
  Read Record #ch_db;CodesBranch.
  z$[616,618] = SAISpaceFill$(CodesBranch.BranchGroup$,3) ! Branch Group for Branch
End If 
! Check if running from the Corporate company
If Trim$(z$[642,643]) And Branch$ = z$[642,643]
  Call SAITouchError("You cannot run the TruckScale program from the Corporate Company!")
  Goto end_program
End If 
! Get Scrap Code "E" for Current Period
k$ = "E" + Branch$
Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
If stat
  k$ = "E  "
  Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
End If 
If stat
  Call SAITouchError("Missing Scrap 'E' record.\15\PROGRAM ABORTED!!")
  Goto end_program
End If 
curperiod = ScrapCode[12]
curyear = SAIConvertYear$(4,ScrapCode$[101,102])
CurrentPeriodEnd$ = curyear Using "&&&&" + ScrapCode[curperiod - 1] Using "&&&&" ! YYYYMMDD
If curperiod = 12
  temp$ = ScrapCode[0] Using "&&&&" ! period 1 end MMDD
Else 
  temp$ = ScrapCode[curperiod] Using "&&&&" ! future period end MMDD
End If 
If temp$[1,2] < CurrentPeriodEnd$[5,6] ! Future month less than current month, crossed a year boundary.
  FuturePeriodEnd$ = curyear + 1 Using "&&&&" + temp$
Else 
  FuturePeriodEnd$ = curyear Using "&&&&" + temp$
End If 
! Fiscal Year Begin Date (for SimsANZ)
temp$ = ScrapCode[0] Using "&&&&" ! period 1 end MMDD
temp$[3,4] = "01" ! Hardcode to first of month
If RunDate$[1,4] < temp$
  curyear = SAIConvertYear$(4,RunDate$[5,6])
  curyear = curyear - 1
  FiscalYrBeginDate# = SAIConvertDate#(temp$ + SAIConvertYear$(0,Str$(curyear)))
Else 
  FiscalYrBeginDate# = SAIConvertDate#(temp$ + RunDate$[5,6])
End If 
! Check Price file for *MULT record
SQL$ = "SELECT " + SQLN$(MultPrice.) + " FROM Purchase_Material_Price"
SQL$ = SQL$ + " WHERE SupplierNo=" + SQLV$("CP000*")
SQL$ = SQL$ + " AND MaterialCode IN (" + SQLV$("*MULT") + "," + SQLV$("*MUL") + ") "
SQL$ = SQL$ + " AND Branch=" + SQLV$(Branch$)
Search #ch_db;SQL$
If Chf(ch_db)
  Map Record #ch_db As Mult_Price
  Read Record #ch_db;MultPrice.
Else 
  Call SAITouchError("*MULT record not found in price file!\15\Cannot run this program until one is built.")
  Goto end_program
End If 
! Validate YardSupplierNo if specified in config file
IntSupplierNo$ = ""
If YardSupplierNo$
  Call RetrieveSupplier(YardSupplierNo$,Vendor.,stat)
  If stat = 0
    If Vendor.IntercompanyType$ = "I"
      IntSupplierNo$ = YardSupplierNo$
    Else If Vendor.AccountType$ <> "Y"
      YardSupplierNo$ = ""
    End If 
  Else 
    YardSupplierNo$ = ""
  End If 
End If 
If YardSupplierNo$
  status = 1 ! set status to failure first
  k$ = "Y"
  Do 
    Search #ch_110Aro,3,1;k$,r,e
    If e Exit Do 
    If k$[1,1] <> "Y" Exit Do 
    If k$[3,4] = Branch$
      Call SAIReadRecord(ch_110Aro,recdef_110A.,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
      If ScrapCode$[36,36] <> "Y" ! Not Brokerage yard
        If Trim$(ScrapCode$[57,62]) = YardSupplierNo$
          status = 0 ! Supplier found on a yard code
          Exit Do 
        End If 
      End If 
    End If 
  Loop 
  If status
    IntSupplierNo$ = "" \ YardSupplierNo$ = ""
  End If 
End If 
! Get Internal Supplier # from Yard Code record (first non-brokerage yard for this Branch)
If IntSupplierNo$ = ""
  k$ = "Y"
  Do 
    Search #ch_110Aro,3,1;k$,r,e
    If e Exit Do 
    If k$[1,1] <> "Y" Exit Do 
    If k$[3,4] = Branch$
      Call SAIReadRecord(ch_110Aro,recdef_110A.,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
      If ScrapCode$[36,36] <> "Y" And Trim$(ScrapCode$[57,62]) <> ""
        Call RetrieveSupplier(ScrapCode$[57,62],Vendor.,stat)
        If stat = 0 And Vendor.IntercompanyType$ = "I"
          IntSupplierNo$ = Trim$(ScrapCode$[57,62])
          Exit Do 
        End If 
      End If 
    End If 
  Loop 
End If 
If YardSupplierNo$ = ""
  If IntSupplierNo$
    YardSupplierNo$ = IntSupplierNo$
  Else 
    k$ = "Y"
    Do 
      Search #ch_110Aro,3,1;k$,r,e
      If e Exit Do 
      If k$[1,1] <> "Y" Exit Do 
      If k$[3,4] = Branch$
        Call SAIReadRecord(ch_110Aro,recdef_110A.,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
        If ScrapCode$[36,36] <> "Y" And Trim$(ScrapCode$[57,62]) <> ""
          Call RetrieveSupplier(ScrapCode$[57,62],Vendor.,stat)
          If stat = 0 And Vendor.AccountType$ = "Y" ! Yard Supplier
            YardSupplierNo$ = Trim$(ScrapCode$[57,62])
            Exit Do 
          End If 
        End If 
      End If 
    Loop 
  End If 
End If 
! Validate Default Vehicle Type
If DefaultVehType$
  Search #ch_db;"SELECT " + SQLN$(CodesVehicleType.) + "FROM Codes_Vehicle_Type WHERE VehicleType=" + SQLV$(DefaultVehType$)
  If Chf(ch_db)
    Map Record #ch_db As Codes_Vehicle_Type
    Read Record #ch_db;CodesVehicleType.
    VehPrefixLen = CalcVehPrefixLen(CodesVehicleType.TwoPartVehOverride$,ScrapSRecord$[133,133])
    CodesVehicleType.TwoPartVehOverride$ = VehPrefixLen Using "#" ! Plug the corrected value back into record
    If CodesVehicleType.UpdateVehTracking Let DefaultUpdateVehTracking$ = "Y" Else Let DefaultUpdateVehTracking$ = "N"
    If DefaultUpdateVehTracking$ = "Y" ! Update Veh Tracking
      If VehPrefixLen
        If DefaultVehPrefix$ = "" Let DefaultVehPrefix$ = Trim$(CodesVehicleType.DefaultPrefix$)
        DefaultVehPrefix$ = SAISpaceFill$(DefaultVehPrefix$,VehPrefixLen)
        If Trim$(DefaultVehPrefix$)
          Search #ch_db;"SELECT Description FROM Codes_Vehicle_Prefix WHERE VehicleType=" + SQLV$(DefaultVehType$) + " AND VehiclePrefix=" + SQLV$(Trim$(DefaultVehPrefix$))
          If Chf(ch_db) = 0
            Call SAITouchError("Configuration Error!\15\Invalid Default Vehicle Prefix: " + DefaultVehPrefix$ + "\15\Program will exit.")
            Goto end_program
          End If 
        End If 
      End If 
    End If 
  Else 
    Call SAITouchError("Configuration Error!\15\Invalid Default Vehicle Type: " + DefaultVehType$ + "\15\Program will exit.")
    Goto end_program
  End If 
End If 
! Check if Ticket Control Number is setup
k$ = "NTN" + Branch$
Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
If stat = 0
  TicketControlNo = 1
  ControlNoLabel$ = Trim$(ScrapCode$[15,34])
  If ControlNoLabel$ = "" Let ControlNoLabel$ = "Control No."
Else 
  TicketControlNo = 0
End If 
! GST
If z$[644,646] = "255"
  gbl_bin$ = "ABN"
Else If z$[644,646] = "355"
  gbl_bin$ = "GST"
Else 
  gbl_bin$ = "BIN"
End If 
! Always Print Phone No for Sims NZ
If z$[644,646] = "355" Let PrintPhoneNo$ = "Y"
! Override Inspection Ticket option if set
If PrintInspectionTicket$ = ""
  If ScaleCodes$[64,64] = "Y" Let PrintInspectionTicket$ = "P" Else Let PrintInspectionTicket$ = "N"
End If 
! Set flag for Allan Sun Valley
If z$[644,646] = "151" And Branch$ = "03"
  SunValley = 1
  SV_SupplierNo$ = "COLA01"
End If 
! Set SupplierShipNoPrompt$ if SDI
If z$[644,646] = "311" And Mill$ = "Y" And SupplierShipNoPrompt$ = "N" Let SupplierShipNoPrompt$ = "Y"
! Look for a configured Summary Weight UM
If TicketSummaryWeightUM$
  k$ = "U" + SAISpaceFill$(TicketSummaryWeightUM$,2)
  Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
  If stat = 0 And ScrapCode$[133,133] <> "*"
    TicketSummaryWeightUM$ = ScrapCode$[2,3]
    TicketSummaryWeightDesc$ = SAIFill$(RTrim$(ScrapCode$[15,34]),"R"," ",10)
    If TicketSummaryWeightUM$ = gbl_um$
      TicketSummaryWeight_cf = 1
    Else 
      p = Pos(ScrapCode$[35,44], = SAISpaceFill$(gbl_um$,2),2)
      If p Let TicketSummaryWeight_cf = ScrapCode[(p - 1) / 2]
    End If 
  End If 
End If 
If TicketSummaryWeight_cf = 0
  TicketSummaryWeightUM$ = ScrapSRecord$[67,68]
  TicketSummaryWeightDesc$ = SAIFill$(RTrim$(ScrapSRecord$[57,66]),"R"," ",10)
  TicketSummaryWeight_cf = ScrapSRecord$[45,56]
End If 
! Look for a configured Summary Weight UM 2
If TicketSummaryWeightUM2$
  k$ = "U" + SAISpaceFill$(TicketSummaryWeightUM2$,2)
  Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
  If stat = 0 And ScrapCode$[133,133] <> "*"
    TicketSummaryWeightUM2$ = ScrapCode$[2,3]
    TicketSummaryWeightDesc2$ = SAIFill$(RTrim$(ScrapCode$[15,34]),"R"," ",10)
    If TicketSummaryWeightUM2$ = gbl_um$
      TicketSummaryWeight_cf2 = 1
    Else 
      p = Pos(ScrapCode$[35,44], = SAISpaceFill$(gbl_um$,2),2)
      If p Let TicketSummaryWeight_cf2 = ScrapCode[(p - 1) / 2]
    End If 
  End If 
End If 
If TicketSummaryWeight_cf2 = 0
  TicketSummaryWeightUM2$ = ""
End If 
! Check for OTM (OmniSource)
If OTMBranch(ch_db,Branch$) Let OTMFreight$ = "Y" Else Let OTMFreight$ = "N"
! Setup for Yard Zones
If UseYardZones$ = "Y"
  Try 
    SQL$ = "SELECT " + SQLN$(CodesYardZone.[0]) + " FROM Codes_Yard_Zone WHERE Branch=" + SQLV$(Branch$)
    If YardZone$ Let SQL$ = SQL$ + " AND YardZone=" + SQLV$(YardZone$)
    Search #ch_db;SQL$
    NumYardZones = Chf(ch_db)
    If NumYardZones
      Dim CodesYardZone.[NumYardZones] As Codes_Yard_Zone
      Map Record #ch_db As Codes_Yard_Zone
      For n = 1 To NumYardZones
        Read Record #ch_db;CodesYardZone.[n]
      Next n
    End If 
  Else 
    NumYardZones = 0
  End Try 
  If NumYardZones = 0
    UseYardZones$ = "N" \ YardZone$ = ""
  End If 
End If 
! Check for Email Alerts
SCL_PTkt_EmailAlert = SAIEmailAlertStatus(ch_db,"SCL_PTkt")
SCL_STkt_EmailAlert = SAIEmailAlertStatus(ch_db,"SCL_STkt")
SCLCredit_EmailAlert = SAIEmailAlertStatus(ch_db,"SCLCredit")
! Initialize Main Display
Call InitializeScreen()
! Check for DEMO mode of Processing Date
If ChangeProcessingDate$ = "DEMO" And chained = 1
  RunDate$ = PortRec$[13,14] + PortRec$[16,17] + PortRec$[19,20]
  RunDate# = SAIConvertDate#(RunDate$)
  rundatetext$ = DateUsing$(RunDate#,DateformatText$)
End If 
! Enter WeighMaster Initials and Date
Call LoginScreen(status)
If status Goto end_program
! Setup Alternate Unit Ticket
If TicketCopyAlternateUnit$[0] = "Y"
  If AltWeightUM$
    k$ = "U" + SAISpaceFill$(AltWeightUM$,2)
    Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
    If stat = 0
      alt_descum$ = UCase$(ScrapCode$[15,15]) + LCase$(Trim$(ScrapCode$[16,34]))
      If AltWeightUM$ = gbl_um$
        alt_cf = 1
      Else 
        If ScrapCode$[133,133] = "*" ! Non-convertable
          errmess$ = "Alternate Weight U/M, " + AltWeightUM$ + ", not convertable."
          stat = 1
        Else 
          p = Pos(ScrapCode$[35,44], = gbl_um$,2)
          If p
            alt_cf = ScrapCode[(p - 1) / 2]
            If alt_cf = 0
              errmess$ = "Alternate Weight U/M, " + AltWeightUM$ + " conversion factor to " + gbl_um$ + " is set to 0."
              stat = 1
            End If 
          Else 
            errmess$ = "Alternate Weight U/M, " + AltWeightUM$ + ", not convertable to " + gbl_um$ + "."
            stat = 1
          End If 
        End If 
      End If 
    Else 
      errmess$ = "Alternate Weight U/M, " + AltWeightUM$ + ", not found."
      stat = 1
    End If 
  Else 
    errmess$ = "No Alternate Weight Unit of Measure specified in configuration."
    stat = 1
  End If 
  If stat
    Call SAITouchError(errmess$,"Configuration Error")
    Goto end_program
  End If 
  If AltCurrencyCode$ = ""
    errmess$ = "No Alternate Currency Code specified in configuration."
    stat = 1
  Else 
    Try 
      Search #ch_db;"SELECT ExchangeRate FROM Exchange_Rate WHERE FromCurrencyCode=" + SQLV$(AltCurrencyCode$) + " AND EffectiveDate=" + SQLD$(RunDate#)
      Read #ch_db;ExchangeRate;
    Else 
      ExchangeRate = 0
    End Try 
    If ExchangeRate = 0
      errmess$ = "Exchange Rate not found for Currency Code " + AltCurrencyCode$ + " and Processing Date of " + DateUsing$(RunDate#,dateformat$) + "."
      stat = 1
    End If 
  End If 
  If stat
    Call SAITouchError(errmess$,"Configuration Error")
    Goto end_program
  End If 
End If 
! Display Main Screen
screen = 0
Call MainScreen(screen)
! Main Input Loop
Do 
  TransferMode = 0
  WeightOnly = 0
  Dirt$ = ""
  Clear SupplierID.,TicketIdentity.,SalesRelease.
  Input #-3; Len (1);w$
  If w$ <> 'F50' ! Not Exit
    Call EndOfDayAdjust(status)
    If status
      If RunDate$ <> SAIConvertDate$(Tim#(0)) Print PChr$(SAIColorRGB(255,0,0));'BACKCOLOR';
      Print @650,1;'12FONTSIZE';rundatetext$;
      Print PChr$(bgcolor);'BACKCOLOR';
    Else If RunDate$ <> SAIConvertDate$(Tim#(0)) And ChangeProcessingDate$ = "N"
      RunDate# = SAICurrentDate#() ! Use this function instead of Tim#(0) so not affected by TZ
      RunDate$ = SAIConvertDate$(RunDate#)
      rundatetext$ = DateUsing$(RunDate#,DateformatText$)
      Print @650,1;rundatetext$;
    End If 
    ! Check how long the connection has been open
    If Tim#(0) - DBConnectionTime# > 25200 ! Greater than 7 hours
      Try Close #ch_db Else Rem
      Call SAIOpenDatabase(ch_db,status,errmess$)
      If status = 0
        DBConnectionTime# = Tim#(0)
        !          Call WriteLogFile("Database connection re-established in main loop after connection limit reached.")
      Else 
        Call WriteLogFile("Database connection COULD NOT be re-established in main loop after connection limit reached.")
        Call SAITouchError("Database Connection has been lost.\15\Program will now exit.")
        w$ = 'F50'
      End If 
    End If 
  End If 
  Select Case w$
    Case 'F1' ! Purchase
      status = 0
      If BOM_TicketPrevent$ <> "N"
        If Tim(10) = BOM_TicketPrevent_day ! day of the month
          temp$ = DateUsing$(Tim#(0),"HHNN")
          If temp$ >= BOM_TicketPrevent_start$ And temp$ <= BOM_TicketPrevent_end$
            temp$ = "Ticket creation is currently prevented between the hours of " + BOM_TicketPrevent_start$[1,2] + ":" + BOM_TicketPrevent_start$[3,4]
            temp$ = temp$ + " and " + BOM_TicketPrevent_end$[1,2] + ":" + BOM_TicketPrevent_end$[3,4] + "."
            If BOM_TicketPrevent$ = "W"
              ans = SAITouchYesNo(temp$ + "\15\\15\Do you wish to proceed anyway?","Warning","N")
              If ans
                status = 0
              Else 
                status = 1
              End If 
            Else 
              Call SAITouchWarning(temp$)
              status = 1
            End If 
          End If 
        End If 
      End If 
      If status = 0
        Call Purchase("A",status)
        If status = 999 Exit Do 
        If status <> -1 Call MainScreen(0)
      End If 
    Case 'F2' ! View In-Yard Vehicles
      Call InYardList(InYardFilter$,status)
      If status = 0
        Select Case TicketHeader.TktType$
          Case "P","R"
            Call Purchase("E",status)
            If status = 999 Exit Do 
            Call MainScreen(0)
          Case "S","W"
            Call Sale("E",status)
            Call MainScreen(0)
          Case Else 
            Call SAITouchWarning("Unknown transaction type: " + TicketHeader.TktType$)
        End Select 
      End If 
    Case 'F3' ! Contract Sale
      Call Sale("A",status)
      If status <> -1 Call MainScreen(0)
    Case 'F4' ! View Noticed Purchases
      Call ListNotices(status)
      If status = 0
        Call DisplaySupplierComments(TicketHeader.EntityNo$,status)
        If status
          Clear TicketHeader.
        Else 
          Call Purchase("E",status)
          If status = 999 Exit Do 
          Call MainScreen(0)
        End If 
      End If 
    Case 'F5' ! Weight Only Tickets
      WeightOnly = 1
      Call Sale("A",status)
      If status <> -1 Call MainScreen(0)
    Case 'F6' ! View Sales Releases
      Clear CustomerNo$,FullSONo$
      Call ListSalesReleases(CustomerNo$,FullSONo$,status)
      If status = 0
        Call Sale("A",status)
        If status <> -1 Call MainScreen(0)
      End If 
      Clear SalesRelease.
    Case 'F7' ! Receive In-Bound Transfer
      Call InBoundTransfer(status)
      If status = 0
        Call Purchase("E",status)
        If status = 999 Exit Do 
        If status <> -1 Call MainScreen(0)
      End If 
    Case 'F8' ! Re-Print Ticket
      Call RePrintTicket()
    Case 'F25' ! Create Out-Bound Transfer (really button 9)
      TransferMode = 1
      Call Sale("A",status)
      If status <> -1 Call MainScreen(0)
    Case 'F10' To 'F12' ! Main Program Functions
      i = Asc(w$) - Asc('F9')
      If MainFunctions$[i] Call ProgramFunction(MainFunctions$[i],repaint)
      If repaint = 999 Exit Do 
      If repaint Call MainScreen(screen)
    Case 'F13' To 'F24' ! More Screen Functions
      i = Asc(w$) - Asc('F12')
      If MoreFunctions$[i] Call ProgramFunction(MoreFunctions$[i],repaint)
      If repaint = 999 Exit Do 
      If repaint Call MainScreen(screen)
    Case 'F31' To 'F35'
      ReadScale = Asc(w$) - Asc('F30')
    Case 'F47' ! Logout WeighMaster
      RunDate# = SAICurrentDate#() ! Use this function instead of Tim#(0) so not affected by TZ
      RunDate$ = SAIConvertDate$(RunDate#)
      Call LoginScreen(status)
      If status
        Exit Do 
      Else 
        screen = 0 \ Call MainScreen(screen)
      End If 
    Case 'F48' ! Change WeighMaster
      Call ChangeWeighMaster(status)
      If status = 0 Print '10FONTSIZE';@10,275;'CL';"On Duty:  ";WMName$;'12FONTSIZE';
    Case 'F49' ! More or Back
      screen = Abs(screen - 1) ! Toggle between 1 and 0
      Call MainScreen(screen)
    Case 'F50' ! Exit
      Exit Do 
    Case 'F60' ! Certification Info
      Call CertificationInfo()
    Case 'F61' ! Config File Info
      Call ConfigFileInfo()
    Case 'F62' ! Display Files
      Call SAIChannelDisplay()
    Case 'F63' ! Version
      Call SAIVersion(ident$,Msc$(9))
  End Select 
Loop 
end_program: !
Call SAIScreenReset()
Close 
If chained
  Chain "scm.menu0"
Else 
  Chain "bye"
End If 
error0: !
If Err 0 Chain ""
Close 
errmess$ = "Error " + Str$(Spc(8)) + " at line " + Str$(Spc(10)) + " in program " + Msc$(4) + ".\15\" + Msc$(2)
Try Let errmess$ = errmess$ + "\15\" + "Actual Line: " + Str$(Msc(46)) + "  Version=" + Version$ Else Rem
Call WriteLogFile(errmess$)
Pause 5 ! Pause half a second
Print '0WCSELECT XX IOBE K3';
Print errmess$
Print 
Input "Hit (CR) to return to menu. "w$
If chained
  Chain "scm.menu0"
Else 
  Chain "bye"
End If 
!------------------------------------------------------------------------------
External Function ValidSupplier(z$,SupplierMaster. As Supplier_Master)
  Dim 1%,Result
  Result = 1
  If SupplierMaster.AccountType$ = "F" ! Freight Carrier
    Result = 0
  Else If SupplierMaster.IntercompanyType$ = "I" ! Intercompany Suppliers not valid
    Result = 0
  Else If SAIValidSupplier(z$,SupplierMaster.) = 0
    Result = 0
  End If 
End Function Result
External Function ValidCustomer(z$,CustomerMaster. As Customer_Master)
  Dim 1%,Result
  Result = SAIValidSupplier(z$,CustomerMaster.)
End Function Result
External Function InterCoCustomerCheck(CustomerMaster. As Customer_Master,TransferMode)
  Dim 1%,e
  e = 0
  If TransferMode = 0
    If CustomerMaster.IntercompanyType$ = "I" Let e = 1
  Else 
    If CustomerMaster.IntercompanyType$ <> "I" Let e = 1
  End If 
End Function e
External Function NoNull$(value$)
  If value$ = SQLNull$() Let value$ = ""
End Function value$
External Sub SkipLines(ch,NoLines)
  For i = 1 To NoLines
    Print #ch;
  Next i
End Sub 
External Sub StringTab(text$,tabpos)
  If Len(text$) < tabpos
    text$ = text$ + Rep$(" ",tabpos - Len(text$))
  End If 
End Sub 
External Function DisplayDate$(DateOrder$,DateVar$)
  Dim a$[10]
  If Len(DateVar$) <> 8
    a$ = ""
  Else 
    If DateOrder$ = "DMY"
      a$ = DateVar$[7,8] + "/" + DateVar$[5,6] + "/" + DateVar$[1,4]
    Else 
      a$ = DateVar$[5,6] + "/" + DateVar$[7,8] + "/" + DateVar$[1,4]
    End If 
  End If 
End Function a$
External Function OTMBranch(ch_db,BranchCode$)
  Dim 1%,Result
  If BranchCode$ = "" Exit Function 0
  Try 
    Search #ch_db;"SELECT Branch FROM OTM_Interface_Branches WHERE Branch=" + SQLV$(BranchCode$)
    If Chf(ch_db) Let Result = 1
  Else 
    Result = 0
  End Try 
End Function Result
External Function AdjustDate$(mode$,cutoff$)
  !************ Function to return the "calculated" current date in SAI date forma **********
  !   function used when using auto-end-of-day logic based on scale config file setup
  !
  ! Arguments
  !  mode$ Adjustment mode
  !    =current to adjust to current day
  !    =next to adjust to next day
  !  cutoff$ Cutoff time (HHMM)
  !
  ! Returned Value
  !  Corrected date in SAI format (MMDDAA)
  !  ="" if an error occurs
  !
  Declare External Function SAIConvertDate$
  Dim 3%,CurrentTime#,CutoffTime#,saidate$[6]
  If Len(cutoff$) <> 4 Exit Function ""
  CurrentTime# = Tim#(0) ! System time
  Try 
    CutoffTime# = Dat#(Year(CurrentTime#),Month(CurrentTime#),Monthday(CurrentTime#),Val(cutoff$[1,2]),Val(cutoff$[3,4]),0)
  Else 
    Exit Function ""
  End Try 
  Select Case (LCase$(mode$))
    Case "current"
      If CurrentTime# < CutoffTime# Let CurrentTime# = CurrentTime# - 86400
      saidate$ = SAIConvertDate$(CurrentTime#)
    Case "next"
      If CurrentTime# > CutoffTime# Let CurrentTime# = CurrentTime# + 86400
      saidate$ = SAIConvertDate$(CurrentTime#)
    Case Else 
      saidate$ = ""
  End Select 
End Function saidate$
External Function CalcVehPrefixLen(Veh2PartOverride$,SRecord2PartVehID$)
  Dim 1%,VehPrefixLen
  If Trim$(Veh2PartOverride$) = "" Let Veh2PartOverride$ = SRecord2PartVehID$ ! 2 Part Veh No
  If Trim$(Veh2PartOverride$) = ""
    Veh2PartOverride$ = "1" ! Both are blank, set to 1 part Veh No
  Else If Veh2PartOverride$ = "2" Or Veh2PartOverride$ = "Y"
    Veh2PartOverride$ = "5" ! Account for older setups
  End If 
  VehPrefixLen = Veh2PartOverride$
  If VehPrefixLen = 1 Let VehPrefixLen = 0 ! If 1 part Veh No, return 0 length of prefix
End Function VehPrefixLen
External Function DecodeContractNo$(InputString$)
  If InputString$ = "" Exit Function ""
  Dim ContractNo$[12]
  n = Len(InputString$)
  p = Pos(InputString$, = "-")
  If p = 1
    Exit Function ""
  Else If p = n
    InputString$ = InputString$[1,n - 1]
    n = n - 1 \ p = 0
  End If 
  If p
    ContractNo$ = SAIFill$(InputString$[1,p - 1],"R"," ",10) + SAIFill$(InputString$[p + 1],"R","0",2)
  Else 
    If n > 10
      ContractNo$ = SAIFill$(InputString$,"R"," ",12)
    Else 
      ContractNo$ = SAIFill$(InputString$,"R"," ",10)
    End If 
  End If 
End Function ContractNo$
External Function DisplayNumber$(num,bgcolor)
  Dim a$[20]
  If num > 0
    a$ = PChr$(32768,bgcolor) + 'WCSETCOLOR' + Str$(num) ! Dark Green Text
  Else If num < 0
    a$ = PChr$(16711680,bgcolor) + 'WCSETCOLOR' + Str$(num) ! Red Text
  Else 
    a$ = PChr$(-1,-2) + 'WCSETCOLOR' + Str$(num) ! Black Text
  End If 
End Function a$
External Function ScaleNumber$(Scale$)
  Dim a$[1]
  Select Case Scale$
    Case "M","m"
      a$ = "m"
    Case "0"
      a$ = "j"
    Case "1" To "9"
      a$ = Chr$(Asc(Scale$) + 48)
    Case " ",""
      a$ = " "
    Case Else 
      a$ = LCase$(Scale$)
  End Select 
End Function a$
External Function FormatNum$(num,ndigits)
  If ndigits <= 0 Exit Function ""
  Dim mask$[ndigits],result$[ndigits]
  If num < 0
    mask$ = Rep$("-",ndigits - 1) + "#"
  Else 
    mask$ = Rep$("#",ndigits)
  End If 
  result$ = num Using mask$
End Function result$
External Function FormatWeight$(Weight,nchar)
  Dim mask$[nchar],WeightStr$[nchar]
  mask$ = "-",mask$
  If Fra(Weight)
    mask$[nchar - 2,nchar] = "#.#"
  Else 
    mask$[nchar,nchar] = "#"
  End If 
  WeightStr$ = Weight Using mask$
End Function WeightStr$
External Function YesNoFlag(Flag$)
  Dim 1%,Flag
  If Flag$ = "Y" Let Flag = 1 Else Let Flag = 0
End Function Flag
External Function YesNoFlag$(Flag)
  Dim Flag$[1]
  If Flag Let Flag$ = "Y" Else Let Flag$ = " "
End Function Flag$
External Function UMDesc$(ch110a,UM$)
  Dim Desc$[30]
  Desc$ = LCase$(Trim$(SAICodesFileDesc$(ch110a,"U",SAISpaceFill$(UM$,2))))
  If Desc$ Let Desc$[1,1] = UCase$(Desc$[1,1])
End Function Desc$
External Function TimeDisplay$(t)
  Dim a$[5],3%
  h = Int(t / 10000)
  m = Int((t Mod 10000) / 100)
  a$ = h Using "&&" + ":" + m Using "&&"
End Function a$
External Function Duration$(d1#)
  Dim a$[25],3%,delta,2%
  If d1#
    Try 
      delta = Int(Tim#(0) - d1#)
      If delta > 86400
        days = Int(delta / 86400)
        delta = delta - days * 86400
        a$ = Str$(days) + " Days "
      End If 
      hrs = Int(delta / 3600)
      delta = delta - hrs * 3600
      min = Int(delta / 60)
      a$ = a$ + Str$(hrs) + " Hrs "
      a$ = a$ + Str$(min) + " Min"
    Else 
      a$ = ""
    End Try 
  End If 
End Function a$
External Function GetReqAdvIdentityValue(ch_db,MiscSupplierType$)
  Dim 1%,ReqAdvIdentity
  ReqAdvIdentity = 0
  If MiscSupplierType$
    Search #ch_db;"SELECT ReqAdvIdentity FROM Codes_Misc_Supplier_Type WHERE MiscSupplierType=" + SQLV$(Trim$(MiscSupplierType$))
    If Chf(ch_db)
      Map #ch_db;
      Read #ch_db;ReqAdvIdentity
    End If 
  End If 
End Function ReqAdvIdentity
External Function GetComplianceDocOnFile(ch_db,SupplierNo$)
  Dim 1%,ComplianceDocOnFile,ComplianceDocOnFile$[1],2%,ComplianceDocExpDate#
  ComplianceDocOnFile = 0
  Try 
    Search #ch_db;"SELECT ComplianceDocOnFile,ComplianceDocExpDate FROM Supplier_Master WHERE SupplierNo=" + SQLV$(Trim$(SupplierNo$))
    If Chf(ch_db)
      Map #ch_db;
      Read #ch_db;ComplianceDocOnFile$,ComplianceDocExpDate#
      If ComplianceDocOnFile$ = "Y"
        If ComplianceDocExpDate#
          If DateUsing$(ComplianceDocExpDate#,"YYYYMMDD") >= DateUsing$(SAICurrentDate#(),"YYYYMMDD")
            ComplianceDocOnFile = 1
          End If 
        End If 
      End If 
    End If 
  Else 
    ComplianceDocOnFile = 0
  End Try 
End Function ComplianceDocOnFile
External Function IsMaterialGroup(Matname$)
  Dim 1%,Result
  If Matname$
    If Matname$[1,1] = "[" And Matname$[Len(Matname$),Len(Matname$)] = "]" Let Result = 1
  End If 
End Function Result
External Sub ValidateProgramFunction(PFunction$,ButtonName$)
  If ButtonName$ Let ButtonName$ = Replace$(ButtonName$,"<CR>","\15\")
  Select Case PFunction$
    Case "BOL"
      If ButtonName$ = "" Let ButtonName$ = "PRINT BOL"
    Case "DIRT"
      If ButtonName$ = "" Let ButtonName$ = "DIRT TICKET"
    Case "EDITFREQUENTS"
      If ButtonName$ = "" Let ButtonName$ = "EDIT FREQUENTS"
    Case "IDENTITY"
      If ButtonName$ = "" Let ButtonName$ = "CREATE IDENTITY"
    Case "MANUAL","MANUALPURCHASE"
      If ButtonName$ = "" Let ButtonName$ = "MANUAL PURCHASE TICKET"
    Case "MANUALSALE"
      If ButtonName$ = "" Let ButtonName$ = "MANUAL SALES TICKET"
    Case "SPLITLOAD"
      If ButtonName$ = "" Let ButtonName$ = "RECEIVE\15\SPLIT LOAD"
    Case "TICKETCOMMENT"
      If ButtonName$ = "" Let ButtonName$ = "EDIT TICKET\15\COMMENT"
    Case "USAGE"
      If ButtonName$ = "" Let ButtonName$ = "USAGE"
    Case "VINDETAIL"
      If ButtonName$ = "" Let ButtonName$ = "EDIT\15\VIN DETAIL"
    Case "VOID"
      If ButtonName$ = "" Let ButtonName$ = "VOID TICKET"
    Case Else 
      PFunction$ = ""
  End Select 
End Sub 
External Sub DisplayPayment(Amount,status)
  Dim temp$[50]
  chwin = SAIOpenWindow("Pay this amount",500,100,1)
  Print #chwin;PChr$("Arial");'FONTFACE 40FONTSIZE WCSETFONT';
  temp$ = "$ " + Trim$(Amount Using "----,---.##")
  x = 20 + (12 - Len(temp$)) * 20
  Print #chwin;PChr$(10,x,10,495,55,temp$);'WCLABEL';
  Print #chwin;'12FONTSIZE WCSETFONT';
  Call SAIButtons(chwin,2,1,"&&&OK~&Cancel",500,60,25,100,40)
  Print #chwin;'1WCFOCUS';
  Do 
    Input #chwin; Len (1);temp$
    Select Case temp$
      Case 'F1' ! OK
        status = 0
        Exit Do 
      Case 'F2' ! Cancel
        status = 1
        Exit Do 
    End Select 
  Loop 
  Close #chwin
End Sub 
External Sub SplashMessage(chan,Title$,Message$)
  chan = SAIOpenWindow(Title$,450,50,1)
  Print #chan;'10FONTSIZE BBOLD WCSETFONT';
  Print #chan;@20,10;Message$;
  Print #chan;@140,30;"Please stand by...";
  Print #chan;'0WCFOCUS';
End Sub 
External Function GetStateCountry$(ch_db,State$)
  Dim Country$[3]
  Search #ch_db;"SELECT CountryCode FROM Codes_State WHERE State=" + SQLV$(Trim$(State$))
  If Chf(ch_db)
    Map #ch_db;
    Read #ch_db;Country$
  End If 
End Function Country$
Function UMConvertable(UM$)
  ktemp$ = "U" + SAISpaceFill$(UM$,2)
  Call SAIGetRecord(ch_110Aro,recdef_110A.,ktemp$,1,"Y","U",rtemp,ScrapCodeTmp$,ScrapCodeTmp[],stat,errmess$)
  If ScrapCodeTmp$[133,133] = "*" ! Not convertable
    Result = 0
  Else 
    Result = 1
  End If 
End Function Result
Function PrintTicketWeightAdjustmentAsPr()
  Result = 0
  If TicketWeightAdjustmentAsPrice$ = "N"
    Result = 0
  Else If TicketWeightAdjustmentAsPrice$ = "Y"
    Result = 1
  Else If TicketWeightAdjustmentAsPrice$ = "P"
    If TicketHeader.TktMode$ <> "T" And (TicketHeader.TktType$ = "P" Or TicketHeader.TktType$ = "R") Let Result = 1
  End If 
End Function Result
Function PrintTextLine$(TextLine$)
  If Pos(TextLine$, = "%",1,2) = 0 ! Look for 2nd "%" in string
    Exit Function TextLine$
  End If 
  Dim NewTextLine$[200]
  NewTextLine$ = TextLine$
  NewTextLine$ = ReplaceCI$(NewTextLine$,"%TicketNo%",TicketHeader.TicketNo$)
  NewTextLine$ = ReplaceCI$(NewTextLine$,"%ControlNo%",Branch$ + " " + Str$(TicketHeader.ControlNo))
  NewTextLine$ = ReplaceCI$(NewTextLine$,"%ShipmentNo%",TicketHeader.ShipmentNo$)
  NewTextLine$ = ReplaceCI$(NewTextLine$,"%ShipmentDate%",DateUsing$(TicketHeader.ShipmentDate#,dateformat$))
  !  if TicketHeader.EndTime#
  !    if DateUsing$(TicketHeader.ShipmentDate#,"MMDDYY")=DateUsing$(TicketHeader.EndTime#,"MMDDYY")
  !      NewTextLine$=ReplaceCI$(NewTextLine$,"%ShipmentTime%",DateUsing$(TicketHeader.EndTime#,"HH:NNpm"))
  !    endif
  !  endif
  If AltUnitTicket
    NewTextLine$ = ReplaceCI$(NewTextLine$,"%TicketTotal%",Trim$(TotalPrice + TotalCbkFrt Using "----,---,--#.##"))
  Else 
    NewTextLine$ = ReplaceCI$(NewTextLine$,"%TicketTotal%",Trim$(TicketTotals.TotalPrice + TicketTotals.TotalCbkFrt Using "----,---,--#.##"))
  End If 
End Function NewTextLine$
Function XTypeInventory(InventoryCode$,YardCode$,Branch$)
  Result = 0
  Search #ch_db;"SELECT CostingMethod FROM Inventory_Master WHERE InventoryCode=" + SQLV$(InventoryCode$) + " AND YardCode=" + SQLV$(YardCode$) + " AND Branch=" + SQLV$(Branch$)
  If Chf(ch_db)
    Map #ch_db;
    Read #ch_db;temp$
    If temp$ = "X" Let Result = 1
  Else 
    Result = 0
  End If 
End Function Result
Function GetCurrencyCode$(FundsType$)
  p = Pos(CodesCurrency.[], = FundsType$)
  If p = -1
    Exit Function FundsType$
  Else 
    Exit Function CodesCurrency.[p].CurrencyCode$
  End If 
End Function ""
Function MaterialCodeFormFound()
  If UCase$(MaterialCodeFormList$) = "ALL"
    Exit Function 1
  End If 
  If ItemCount
    p = 1
    Do 
      temp$ = MaterialCodeFormList$[p] To ","
      If temp$
        If Trim$(temp$)
          For i = 1 To ItemCount
            If Items.[i].MaterialCode$ = Trim$(temp$) Exit Function 1
          Next i
        End If 
        p = p + Len(temp$) + 1
        If p >= Len(MaterialCodeFormList$) Exit Do 
      Else 
        Exit Do 
      End If 
    Loop 
  End If 
End Function 0
Sub UpdateOTMChangeTable()
  If OTMOrderChanges = 0 Exit Sub 
  kotm$ = PODetail$[1,16]
  Call SAIGetRecord(ch_1200,recdef_1200.,kotm$,1,"Y","U",r1,POHeader$,POHeader[],stat,errmess$)
  If stat
    Exit Sub 
  End If 
  Clear otmOrderChanges.
  otmOrderChanges.OrderNo$ = Trim$(POHeader$[7,16])
  otmOrderChanges.OrderType$ = Trim$(POHeader$[182,183])
  otmOrderChanges.Event$ = "CHANGE"
  Clear SQL$
  SQL$ = "INSERT INTO OTM_Order_Changes (" + SQLN$(otmOrderChanges.) + ")"
  SQL$ = SQL$ + "  VALUES(" + SQLV$(otmOrderChanges.) + ")"
  SQL$ = SQL$ + "  ON DUPLICATE KEY UPDATE Event=" + SQLV$(otmOrderChanges.Event$)
  SQL$ = SQL$ + ",  LastUpdated=CURRENT_TIMESTAMP" !Done to Force The The LastUpdated TimeStamp to Change on Trival Update
  Try Search #ch_db;SQL$ Else Rem
End Sub 
Sub LoadTicketAuditHeader()
  Clear TicketAudit.
  TicketAudit.Branch$ = Branch$
  TicketAudit.TicketNo$ = TicketHeader.TicketNo$
  TicketAudit.EventDateTime# = Tim#(0)
  TicketAudit.ProgramNo$ = z$[58,61]
  TicketAudit.TktType$ = TicketHeader.TktType$
  If TicketHeader.TktMode$ = "T"
    TicketAudit.TktType$ = "T"
  Else If Dirt$ = "Y"
    TicketAudit.TktType$ = "D"
  Else If WeightOnly
    TicketAudit.TktType$ = "W"
  End If 
  TicketAudit.InYardID$ = TicketHeader.InYardID$
  TicketAudit.EntityNo$ = TicketHeader.EntityNo$
  TicketAudit.WeighMaster$ = WeighMaster$
  TicketAudit.UserName$ = user$
  TicketAudit.ConfigFile$ = ConfigFile$
End Sub 
Sub LoadTicketAudit()
  Call LoadTicketAuditHeader()
  TicketAudit.ItemNo = ItemNo
  TicketAudit.MaterialCode$ = TicketDetail.MaterialCode$
  TicketAudit.MatCodeChg = TicketDetail.MatCodeChg
  TicketAudit.Price = TicketDetail.Price
  TicketAudit.Price_UM$ = TicketDetail.PriceUM$
  TicketAudit.PriceChg = TicketDetail.PriceChg
  TicketAudit.GrossWt = TicketDetail.GrossWt
  TicketAudit.GrossWtScale$ = TicketDetail.GrossWtScale$
  TicketAudit.TareWt = TicketDetail.TareWt
  TicketAudit.TareWtScale$ = TicketDetail.TareWtScale$
  TicketAudit.ManReason$ = TicketDetail.ManReason$
  TicketAudit.NetWt = TicketDetail.NetWt
  TicketAudit.AdjWt = TicketDetail.AdjWt
  TicketAudit.AdjPercent = TicketDetail.AdjPercent
  TicketAudit.AdjCode$ = TicketDetail.AdjCode$
  TicketAudit.PaidWt = TicketDetail.NetWt + TicketDetail.AdjWt
End Sub 
Sub WriteTicketAudit()
  Try 
    Search #ch_db;"INSERT INTO Ticket_Audit (" + SQLN$(TicketAudit.) + ") VALUES (" + SQLV$(TicketAudit.) + ")"
  Else 
    Call SAITouchError("Error creating entry in Ticket_Audit table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
  End Try 
End Sub 
Sub WriteSalesTicketLog(Event$)
  Clear SalesTicketLog.
  SalesTicketLog.TicketNo$ = TicketHeader.TicketNo$
  SalesTicketLog.ShipmentDate# = TicketHeader.ShipmentDate#
  SalesTicketLog.Branch$ = TicketHeader.Branch$
  SalesTicketLog.ReleaseNo = TicketHeader.ReleaseNo
  SalesTicketLog.MatReqNo$ = TicketHeader.MatReqNo$
  SalesTicketLog.MatReqLine$ = TicketHeader.MatReqLine$
  SalesTicketLog.CarrierNo$ = TicketHeader.CarrierNo$
  SalesTicketLog.VehNo$ = TicketHeader.VehNo$
  SalesTicketLog.Event$ = Event$
  Try 
    Search #ch_db;"INSERT INTO Interface_Sales_Ticket_Log (" + SQLN$(SalesTicketLog.) + ") VALUES (" + SQLV$(SalesTicketLog.) + ")"
  Else 
    Call SAITouchError("Error creating entry in Interface_Sales_Ticket_Log table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
  End Try 
End Sub 
Sub ValidateSalesShipmentNo(SuppShipNo$,ExitStatus)
  Clear ExitStatus
  If SSV_Server$ = ""
    Call SAIGetWebServiceParams(ch_db,Environment$,Branch$,"SalesShipment","CallValidate",SSV_Server$,SSV_SubmitTo$,SSV_APIToken$,status,errmess$)
    If status
      Call SAITouchWarning("Error retrieving Shipment Validation Service parameters.\15\\15\Validation will not be performed.")
      ExitStatus = 0 ! Set to continue
      Exit Sub 
    End If 
  End If 
  Clear SSV.
  SSV.DataEnvironmentName$ = Environment$
  SSV.Branch$ = Branch$
  SSV.SupplierNo$ = TicketHeader.EntityNo$
  SSV.PONo$ = TicketHeader.OrderNo$
  SSV.POLine$ = TicketHeader.OrderLine$
  SSV.ShipmentRefNo$ = SuppShipNo$
  Call SAIFormatJSON(SSV.,RequestString$)
  Do 
    Call SplashMessage(ch_splash,"Validation Service","Validating Supplier Shipment Reference No.")
    Call SAISubmitHTTPRequest("POST/1.1",SSV_Server$,SSV_SubmitTo$,"application/json","API-Token: " + SSV_APIToken$,RequestString$,30,1,Response$,status,errmess$)
    Close #ch_splash
    If status
      If errmess$ = "Service timed out."
        temp$ = SAITouchGeneric$("Service Timeout","Shipment Reference service timed out.",2,"&&&Retry~&Cancel","RC")
        If temp$ = "C" Exit Do 
      Else 
        Call SAITouchError(errmess$)
        Exit Do 
      End If 
    Else 
      Exit Do 
    End If 
  Loop 
  If status Exit Sub 
  If Pos(Response$ To "\15\", = " 200 OK")
    p = Pos(Response$, = "\15\\12\\15\\12\")
    If p
      Call SAIDecodeJSONResponse(Response$[p + 4],jsonNode.[],jsonNodeCount)
    End If 
  Else 
    errmess$ = "Unsuccessful response from Shipment Reference service.\15\\15\Validation unable to be performed."
    Call SAITouchError(errmess$)
    Exit Sub 
  End If 
  If LCase$(jsonNode.[1].Name$) <> "response"
    errmess$ = "Unrecognized response from Shipment Reference service.\15\\15\Validation unable to be performed."
    Call SAITouchError(errmess$)
    Exit Sub 
  End If 
  jsonNodeCount = jsonNodeCount - 1
  Clear Response$,errmess$
  For i = 2 To jsonNodeCount
    Select Case LCase$(jsonNode.[i].Name$)
      Case "status"
        Response$ = UCase$(jsonNode.[i].value$)
      Case "message"
        errmess$ = jsonNode.[i].value$
    End Select 
  Next i
  Select Case Response$
    Case "OK"
      ExitStatus = 0
    Case "INVALID"
      Call SAITouchError(errmess$,"Invalid Shipment No.")
      ExitStatus = 1
    Case "SYSTEM_ERROR"
      Call SAITouchError(errmess$ + "\15\\15\Validation unable to be performed.")
      ExitStatus = 0
    Case Else 
      Call SAITouchError("Unrecognized status from Shipment Reference service.\15\\15\Validation unable to be performed.")
      ExitStatus = 0 ! Still let user move on
  End Select 
End Sub 
Sub ValidateSupplierShipmentNo(SuppShipNo$,ExitStatus)
  Clear ExitStatus
  If Len(SuppShipNo$) <> 6
	! This is a RIMAS Call, Do Nothing at this Point
	Try 
		Search #ch_db;"SELECT * FROM OmniIntegration_ControlNumbers WHERE ControlNo=" + SQLV$(SuppShipNo$)
		If Chf(ch_db)
			Call SAITouchWarning("That Supplier Shipment No. was already used.")
			ExitStatus = 1
			Exit Sub 
		End If  
	Else
		Call SAITouchWarning("Supplier Shipment No. is not in valid form.")
		ExitStatus = 1
		Exit Sub
	End Try

	Call ValidateSalesShipmentNo(SuppShipNo$,ExitStatus)
	if ExitStatus = 0
		! Replace SuppShipNo(ControlNo) with 6 long RIMAS Identifier.
		Try 
			 Search #ch_db;"SELECT SuppShipNo FROM OmniIntegration_ControlNumbers WHERE ControlNo=" + SQLV$(SuppShipNo$)
			 if Chf(ch_db)
				Map #ch_db;
				Read #ch_db;temp$
				SuppShipNo$ = temp$
			 else
				 Call SAITouchWarning("ControlNo number found for " + SuppShipNo$ + ".")
				 ExitStatus = 1
				 Exit Sub
			 End If 
		Else
			Call SAITouchWarning("Supplier Shipment No. is not in valid form.")
			ExitStatus = 1
			Exit Sub
		End Try
	endif

	ExitStatus = 0
	Exit Sub
  Else 
    If SuppShipNo$[1,1] < "0" Or SuppShipNo$[1,1] > "9"
      ExitStatus = 1
    Else If SuppShipNo$[2,2] < "0" Or SuppShipNo$[2,2] > "Z" Or (SuppShipNo$[2,2] > "9" And SuppShipNo$[2,2] < "A") Or SuppShipNo$[2,2] = "O"
      ExitStatus = 1
    Else If SuppShipNo$[3,3] < "0" Or SuppShipNo$[3,3] > "Z" Or (SuppShipNo$[3,3] > "9" And SuppShipNo$[3,3] < "A") Or SuppShipNo$[3,3] = "O"
      ExitStatus = 1
    Else 
      Try 
        Call CheckDigits(SuppShipNo$[4,6])
      Else 
        ExitStatus = 1
      End Try 
    End If 
  End If 
  If ExitStatus
    Call SAITouchWarning("Supplier Shipment No. is not in valid form.")
  Else If Supplier.SuppShipNoHandling$ = "S"
    Try 
      Search #ch_db;"SELECT TicketNo FROM Interface_SuppShipNo WHERE SupplierNo=" + SQLV$(TicketHeader.EntityNo$) + " AND SuppShipNo=" + SQLV$(SuppShipNo$)
      If Chf(ch_db)
        Map #ch_db;
        Read #ch_db;temp$
        Call SAITouchWarning("That Supplier Shipment No. was already used on ticket " + temp$)
        ExitStatus = 1
        Exit Sub 
      End If 
    Else 
    End Try 
    Call ValidateSalesShipmentNo(SuppShipNo$,ExitStatus)
  End If 
End Sub 
Sub SendPhotoViewerTrigger(PhotoViewerTrigger$,EventName$)
  temp$ = "Ticket=" + TicketHeader.TicketNo$ + ";SupplierNo=" + TicketHeader.EntityNo$ + ";SupplierName=" + TicketHeader.Name$
  If RequireIdentity$ = "V" And TicketHeader.TktMode$ <> "T" And Dirt$ <> "Y"
    If GetReqAdvIdentityValue(ch_db,Supplier.MiscSupplierType$)
      temp$ = temp$ + ";SupplierIDReqVCode=Y"
    End If 
  End If 
  If Supplier.MiscSupplierType$
    temp$ = temp$ + ";MiscSupplierType=" + Supplier.MiscSupplierType$
  End If 
  If Supplier.MercuryFlag$ = "Y"
    temp$ = temp$ + ";MercuryOnFile=" + Supplier.MercuryFlag$
  Else 
    temp$ = temp$ + ";MercuryOnFile=N"
  End If 
  If Supplier.SignatureOnFile$ = "Y"
    temp$ = temp$ + ";CFCOnFile=" + Supplier.SignatureOnFile$ + ";CFCExpirationDate=" + SAISafeDateUsing$(Supplier.CFCFormDate#,DateFormat1$)
  Else 
    temp$ = temp$ + ";CFCOnFile=N"
  End If 
  If TicketIdentity.TicketNo$
    temp$ = temp$ + ";IDTicket=" + TicketIdentity.TicketNo$
    temp$ = temp$ + ";IDFullName=" + TicketIdentity.FullName$
    temp$ = temp$ + ";IDType=" + TicketIdentity.IDType$
    temp$ = temp$ + ";IDIssuer=" + TicketIdentity.IDIssuer$
    temp$ = temp$ + ";IDNumber=" + TicketIdentity.IDNumber$
    temp$ = temp$ + ";IDExpirationDate=" + SAISafeDateUsing$(TicketIdentity.IDExpirationDate#,DateFormat1$)
  End If 
  Call SAIPhotoViewerTrigger(PhotoViewerTrigger$,EventName$,temp$)
End Sub 
External Sub OpenConfigFile(ch,filename$,status)
  status = 0
  Try 
    ch = FindChannel()
    Ropen #ch,"(charset=ansi)global/config/" + filename$ As "Profile"
  Else 
    status = 1
  End Try 
End Sub 
External Sub GetTicketText(filename$,Section$,TextVar$[],nlines)
  Dim 1%,ch,status,w$[50]
  Call OpenConfigFile(ch,filename$,status)
  If status Exit Sub 
  nlines = 0
  Try 
    Search #ch;Section$
    Read #ch,-2;w$,TextVar$[nlines + 1] ! Read first record
    nlines = nlines + 1
  Else 
    Exit Sub 
  End Try 
  Try 
    Do 
      Read #ch,-1;w$,TextVar$[nlines + 1] ! Read next record
      nlines = nlines + 1
    Loop 
  Else 
  End Try 
  Close #ch
End Sub 
Sub ReadFrequent(SectionName$,FreqEnt.[] As Frequent_Entity)
  isav = 0
  Try 
    Search #ch_freq;SectionName$
    Read #ch_freq,-2;temp$,w$ ! Read first record
  Else 
    Exit Sub 
  End Try 
  Try 
    Do 
      i = temp$
      If i > 0 And i < 10
        If isav
          If FreqEnt.[isav].Name$ = "" Let FreqEnt.[isav].Name$ = FreqEnt.[isav].EntityNo$
        End If 
        isav = i
        FreqEnt.[isav].EntityNo$ = Trim$(w$)
      Else 
        If isav
          Select Case UCase$(temp$)
            Case "NAME"
              FreqEnt.[isav].Name$ = Trim$(w$)
            Case "BTNCOLOR"
              FreqEnt.[isav].BtnColor = Trim$(w$)
              If FreqEnt.[isav].BtnColor < 0 Let FreqEnt.[isav].BtnColor = 0
          End Select 
        End If 
      End If 
      Read #ch_freq,-1;temp$,w$ ! Read next record
    Loop 
  Else 
    If isav
      If FreqEnt.[isav].Name$ = "" Let FreqEnt.[isav].Name$ = FreqEnt.[isav].EntityNo$
    End If 
  End Try 
End Sub 
Sub ReadConfigFile()
  ! Settings
  Try 
    Search #ch_config;"Settings","UserAccess",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "DENY"
      UserAccess$ = "DENY"
      Exit Sub 
    End If 
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","Branch",w$
    w$ = Trim$(w$)
    If Len(w$) = 2 Let Branch$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","Mill",w$
    w$ = UCase$(w$)
    If w$ = "Y" Or w$ = "N" Let Mill$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","ChangeProcessingDate",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Or w$ = "DEMO" Let ChangeProcessingDate$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","UseYardZones",w$
    w$ = UCase$(w$)
    If w$ = "Y" Or w$ = "N" Let UseYardZones$ = w$
  Else 
  End Try 
  If UseYardZones$ = "Y"
    Try 
      Search #ch_config;"Settings","YardZone",w$
      YardZone$ = Trim$(w$)
    Else 
    End Try 
  End If 
  Try 
    Search #ch_config;"Settings","DocumentLanguage",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "FRENCHCANADIAN" Let DocLang$ = "FC"
  Else 
  End Try 
  ! Scale Config
  Try 
    Search #ch_config;"Settings","Scales",w$
    NumScales = w$
    If NumScales > 5 Let NumScales = 5
  Else 
  End Try 
  If NumScales
    Try 
      Search #ch_config;"Settings","DefaultScale",w$
      DefScale = w$
      If DefScale > NumScales Let DefScale = 1
    Else 
    End Try 
    Try 
      Search #ch_config;"Settings","IndicatorTypes",ScaleIndicators$
    Else 
    End Try 
    If ScaleIndicators$ <> "demo"
      ScaleIndicators$ = SAISpaceFill$(ScaleIndicators$,NumScales)
      If DefScale
        If ScaleIndicators$[DefScale,DefScale] = "-"
          For i = 1 To NumScales
            If ScaleIndicators$[i,i] <> "-"
              DefScale = i
              Exit For 
            End If 
          Next i
        End If 
      End If 
    End If 
    For i = 1 To NumScales
      If ScaleIndicators$[i,i] <> "-"
        Try 
          Search #ch_config;"Settings","ScaleAddr" + Str$(i),w$
          If w$
            If Pos(w$, = ":") = 0 Let w$ = w$ + ":16000" ! Append default port
            ScaleAddr$[i] = w$
            ScaleIndicators$[i,i] = "Z" ! Set indicator type to Z
            If ClientIPAddr$ Let ScaleAddr$[i] = ReplaceCI$(ScaleAddr$[i],"localhost:",ClientIPAddr$ + ":",1)
          Else 
            ScaleAddr$[i] = ""
          End If 
        Else 
          ScaleAddr$[i] = ""
        End Try 
        If ScaleAddr$[i] = "" And ScaleIndicators$[i,i] = "Z" Let ScaleIndicators$[i,i] = " "
      End If 
    Next i
    For i = 1 To NumScales
      Try 
        Search #ch_config;"Settings","ScaleSensorAddr" + Str$(i),w$
        w$ = Trim$(w$)
        If w$ Let ScaleSensorAddr$[i] = w$
      Else 
        ScaleSensorAddr$[i] = ""
      End Try 
    Next i
    For i = 1 To NumScales
      Try 
        Search #ch_config;"Settings","ScaleScannerAddr" + Str$(i),w$
        w$ = Trim$(w$)
        If w$ Let ScaleScannerAddr$[i] = w$
        If ClientIPAddr$ Let ScaleScannerAddr$[i] = ReplaceCI$(ScaleScannerAddr$[i],"localhost:",ClientIPAddr$ + ":",1)
      Else 
        ScaleScannerAddr$[i] = ""
      End Try 
    Next i
    Try 
      Search #ch_config;"Settings","ScaleNames",ScaleNames$
    Else 
    End Try 
    ScaleNames$ = SAISpaceFill$(ScaleNames$,NumScales)
    For i = 1 To NumScales
      If ScaleIndicators$[i,i] <> "-" And ScaleNames$[i,i] = " "
        ScaleNames$[i,i] = Str$(i)
      Else 
        ScaleNames$[i,i] = LCase$(ScaleNames$[i,i])
      End If 
      If ScaleNames$[i,i] = "m" Let ScaleNames$[i,i] = Str$(i)
    Next i
    Try 
      Search #ch_config;"Settings","DisableManualWt",w$
      w$ = UCase$(Trim$(w$))
      If w$ = "Y" Or w$ = "N" Or w$ = "A" Let DisableManualWt$ = w$
    Else 
    End Try 
    Try 
      Search #ch_config;"Settings","AllowTransferManualWt",w$
      w$ = UCase$(Trim$(w$))
      If w$ = "Y" Or w$ = "N" Let AllowTransferManualWt$ = w$
    Else 
    End Try 
    Try 
      Search #ch_config;"Settings","AllowDirtManualWt",w$
      w$ = UCase$(Trim$(w$))
      If w$ = "Y" Or w$ = "N" Or w$ = "T" Let AllowDirtManualWt$ = w$
    Else 
    End Try 
    Try 
      Search #ch_config;"Settings","AllowSalesManualWt",w$
      w$ = UCase$(Trim$(w$))
      If w$ = "Y" Or w$ = "N" Or w$ = "T" Let AllowSalesManualWt$ = w$
    Else 
    End Try 
    Try 
      Search #ch_config;"Settings","ReturnToZero",w$
      w$ = UCase$(Trim$(w$))
      If w$ = "Y" Or w$ = "N" Let ReturnToZero$ = w$
    Else 
    End Try 
    Try 
      Search #ch_config;"Settings","ReadScaleOnManualWt",w$
      w$ = UCase$(Trim$(w$))
      If w$ = "Y" Or w$ = "N" Let ReadScaleOnManualWt$ = w$
    Else 
    End Try 
    If ScaleIndicators$[1,NumScales] = Rep$("-",NumScales) ! All indicators are set to "-"
      NumScales = 0
      DefScale = 0
    End If 
  Else 
    DefScale = 0
  End If 
  ! Price Options
  Try 
    Search #ch_config;"Settings","DisplayPrice",w$
    w$ = UCase$(Trim$(w$))
    If Pos("YNPS", = w$) > 0 Let DisplayPrice$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","EditPrice",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "PEDDLER"
      EditPrice$ = w$
    Else If Pos("YNPS", = w$) > 0
      EditPrice$ = w$
    End If 
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","PrintPrice",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N"
      PrintPrice$ = w$
    Else If w$ = "NONCONTRACT"
      PrintPrice$ = "C"
    End If 
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","PrintSalesPrice",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let PrintSalesPrice$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","PriceToleranceAction",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "P" Or w$ = "W" Let PriceToleranceAction$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","AlwaysRepriceOnSupplierChange",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let AlwaysRepriceOnSupplierChange$ = w$
  Else 
  End Try 
  ! Weight/Material Options
  Try 
    Search #ch_config;"Settings","AllowMultipleItems",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let AllowMultipleItems$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","AllowItemSplit",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let AllowItemSplit$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","AllowAdjustment",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let AllowAdjustment$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","TicketWeightAdjustmentAsPrice",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Or w$ = "P" Let TicketWeightAdjustmentAsPrice$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","PaymentWeightAdjustmentAsPrice",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let PaymentWeightAdjustmentAsPrice$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","AllowSplitWt",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let AllowSplitWt$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","DisableManualSplitWt",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let DisableManualSplitWt$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","EnableOccupantCount",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let EnableOccupantCount$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","EditMaterialDesc",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let EditMaterialDesc$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","WeightOnlyMaterial",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let WeightOnlyMaterial$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","PurchaseManualReason",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Or w$ = "P" Let PurchaseManualReason$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","SalesManualReason",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Or w$ = "P" Let SalesManualReason$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","MultiSalesCheckWtTolerance",w$
    MultiSalesCheckWtTolerance = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","*MIXRetailWtTolerance",w$
    MIXRetailWtTolerance = w$
  Else 
  End Try 
  ! Vehicle Info options
  Try 
    Search #ch_config;"Settings","PromptVehicleInfo",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let PromptVehInfo$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","DefaultVehicleType",w$
    DefaultVehType$ = Trim$(w$)
  Else 
  End Try 
  If DefaultVehType$
    Try 
      Search #ch_config;"Settings","AllowVehicleTypeChange",w$
      w$ = UCase$(Trim$(w$))
      If w$ = "Y" Or w$ = "N" Let AllowVehTypeChange$ = w$
    Else 
    End Try 
    Try 
      Search #ch_config;"Settings","DefaultVehiclePrefix",DefaultVehPrefix$
    Else 
    End Try 
  End If 
  Try 
    Search #ch_config;"Settings","RequireVehicleNo",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let RequireVehicleNo$ = w$
  Else 
  End Try 
  ! Purchase/Sales Order Options
  Try 
    Search #ch_config;"Settings","PurchaseOrderRequired",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let PurchaseOrderRequired$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","SalesOrderRequired",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let SalesOrderRequired$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","ShowCurrentOrdersOnly",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Or w$ = "C" Let ShowCurrentOrdersOnly$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","ShowCurrentCompanyOrdersOnly",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let ShowCurrentCompanyOrdersOnly$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","ShowOrdersWithMaterialReqsOnly",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let ShowOrdersWithMaterialReqsOnly$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","AllowMaterialChange",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let AllowMaterialChange$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","WarnSalesOrderOvership",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let WarnSalesOrderOvership$ = w$
  Else 
  End Try 
  ! Non-Contract Freight
  Try 
    Search #ch_config;"Settings","NonContractCarrierHandling",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "PREVENT" Or w$ = "ASK" Or w$ = "SUPPLIER" Or w$ = "CARRIER" Or w$ = "DEDUCT" Let NonContractCarrierHandling$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","NonContractFreightCode",NonContractFreightCode$
    If Trim$(NonContractFreightCode$) = ""
      NonContractFreightCode$ = ""
    Else If Len(NonContractFreightCode$) <> 2
      NonContractFreightCode$ = SAISpaceFill$(NonContractFreightCode$,2)
    End If 
  Else 
  End Try 
  If NonContractCarrierHandling$ And NonContractCarrierHandling$ <> "PREVENT"
    Try 
      Search #ch_config;"Settings","AllowFreightRateEntry",w$
      w$ = UCase$(Trim$(w$))
      If w$ = "Y" Or w$ = "N" Let AllowFreightRateEntry$ = w$
    Else 
    End Try 
  End If 
  If NonContractCarrierHandling$ And NonContractCarrierHandling$ <> "PREVENT" And NonContractFreightCode$ = ""
    NonContractCarrierHandling$ = ""
  End If 
  Try 
    Search #ch_config;"Settings","CTicketCopies",w$
    CTicketCopies = w$
  Else 
  End Try 
  ! Payment options
  NumPaymentOptions = 0
  For i = 1 To 10
    Try 
      Search #ch_config;"Settings","PaymentOption" + Str$(i),w$
      w$ = UCase$(Trim$(w$))
      Select Case w$
        Case "CASH"
          NumPaymentOptions = NumPaymentOptions + 1
          PaymentOptions$[NumPaymentOptions] = w$
          Try 
            Search #ch_config;"Settings","CashEnvelopePrinter",CashEnvelopePrinter$
            CashEnvelopePrinter$ = Trim$(CashEnvelopePrinter$)
          Else 
          End Try 
        Case "ATM"
          Try 
            Search #ch_config;"Settings","ATMEncoder",ATMEncoder$
            ATMEncoder$ = Trim$(ATMEncoder$)
            If ClientIPAddr$ Let ATMEncoder$ = ReplaceCI$(ATMEncoder$,"localhost:",ClientIPAddr$ + ":",1)
          Else 
            ATMEncoder$ = ""
          End Try 
          If ATMEncoder$
            NumPaymentOptions = NumPaymentOptions + 1
            PaymentOptions$[NumPaymentOptions] = w$
          End If 
        Case "CDU"
          Try 
            Search #ch_config;"Settings","CDUAddr",CDUAddr$
            CDUAddr$ = Trim$(CDUAddr$)
            If ClientIPAddr$ Let CDUAddr$ = ReplaceCI$(CDUAddr$,"localhost:",ClientIPAddr$ + ":",1)
          Else 
            CDUAddr$ = ""
          End Try 
          If CDUAddr$
            Try 
              Search #ch_config;"Settings","CDUPrinter",CDUPrinter$
              CDUPrinter$ = Trim$(CDUPrinter$)
              If UCase$(CDUPrinter$) = "SAME" Or UCase$(CDUPrinter$) = "DEFAULT" Or UCase$(CDUPrinter$) = "SELECT" Let CDUPrinter$ = UCase$(CDUPrinter$)
            Else 
              CDUPrinter$ = ""
            End Try 
            If CDUPrinter$
              Try 
                Search #ch_config;"Settings","CDUPrinterType",w$
                w$ = UCase$(Trim$(w$))
                If w$ = "STAR" Or w$ = "ZEBRA" Or w$ = "CITIZEN" Or w$ = "LASER"
                  CDUPrinterType$ = w$
                Else 
                  CDUPrinterType$ = "STAR"
                End If 
              Else 
                CDUPrinterType$ = "STAR"
              End Try 
              If CDUPrinterType$ = "LASER"
                Try 
                  Search #ch_config;"Settings","CDUBarcodePCL",CDUBarcodePCL$
                  CDUBarcodePCL$ = Trim$(CDUBarcodePCL$)
                  If CDUBarcodePCL$
                    CDUBarcodePCL$ = Replace$(CDUBarcodePCL$,"<ESC>",'ESC')
                  End If 
                Else 
                End Try 
                If CDUBarcodePCL$ = "" Let CDUBarcodePCL$ = "\33\(s1p24670T\33\*p6500Y\33\*p3650X" ! Default to Code 39 at lower right
              End If 
              NumPaymentOptions = NumPaymentOptions + 1
              PaymentOptions$[NumPaymentOptions] = "CDU"
              ncdufooter = 0
              Try 
                Search #ch_config;"Settings","CDUReceiptFooterFile",w$
                w$ = Trim$(w$)
                If w$ Call GetTicketText(w$,"CDUReceiptFooter",CDUReceiptFooter$[],ncdufooter)
              Else 
              End Try 
              If ncdufooter = 0
                Do 
                  Try 
                    Search #ch_config;"Settings","CDUReceiptFooter" + Str$(ncdufooter + 1),CDUReceiptFooter$[ncdufooter + 1]
                    ncdufooter = ncdufooter + 1
                  Else 
                    Exit Do 
                  End Try 
                Loop 
              End If 
              Try 
                Search #ch_config;"Settings","CDUReceiptBlankLines",w$
                w$ = Trim$(w$)
                Try Let CDUReceiptBlankLines = Val(w$) Else Let CDUReceiptBlankLines = 0
              Else 
              End Try 
            Else 
              CDUAddr$ = ""
            End If 
          End If 
        Case "CHECK"
          Try 
            Search #ch_config;"Settings","CheckPrinter",CheckPrinter$
          Else 
            CheckPrinter$ = ""
          End Try 
          NumPaymentOptions = NumPaymentOptions + 1
          PaymentOptions$[NumPaymentOptions] = w$
          Try 
            Search #ch_config;"Settings","LaserReceiptOptionColumn",w$
            w$ = UCase$(Trim$(w$))
            If w$ = "VEHICLENO" Or w$ = "INYARDID" Or w$ = "SUPPLIERINVNO" Or w$ = "SUPPLIERSHIPNO" Or w$ = "" Let LaserReceiptOptionColumn$ = w$
          Else 
          End Try 
        Case "EFT"
          NumPaymentOptions = NumPaymentOptions + 1
          PaymentOptions$[NumPaymentOptions] = "EFT"
          Try 
            Search #ch_config;"Settings","EFTDailyLimit",w$
            EFTDailyLimit = w$
          Else 
          End Try 
          Try 
            Search #ch_config;"Settings","EFTOverLimitMax",w$
            EFTOverLimitMax = w$
          Else 
          End Try 
          Try 
            Search #ch_config;"Settings","EFTOverLimitBankCode",w$
            EFTOverLimitBankCode$ = Trim$(w$)
            If Len(EFTOverLimitBankCode$) <> 2 Let EFTOverLimitBankCode$ = ""
          Else 
          End Try 
      End Select 
    Else 
    End Try 
  Next i
  DefCashier = 0
  If NumPaymentOptions
    Try 
      Search #ch_config;"Settings","DefaultCashier",w$
      DefCashier = w$
    Else 
    End Try 
    If DefCashier = 0 Let DefCashier = 1
    Try 
      Search #ch_config;"Settings","RoundCash",RoundCASH$
      RoundCASH$ = Trim$(RoundCASH$)
      If UCase$(RoundCASH$) = "N" Let RoundCASH$ = "0"
    Else 
    End Try 
    Try 
      Search #ch_config;"Settings","RoundATM",RoundATM$
      RoundATM$ = Trim$(RoundATM$)
      If UCase$(RoundATM$) = "N" Let RoundATM$ = "0"
    Else 
    End Try 
    Try 
      Search #ch_config;"Settings","MaxATM",w$ !search for max ATM override
      MaxATM = w$
    Else 
    End Try 
    Try 
      Search #ch_config;"Settings","MaxCash",w$ !search for max Cash override
      MaxCash = w$
    Else 
    End Try 
    Try 
      Search #ch_config;"Settings","MaxEFT",w$ !search for max EFT override
      MaxEFT = w$
    Else 
    End Try 
    Try 
      Search #ch_config;"Settings","MaxOther",w$ !search for max other override
      MaxOther = w$
    Else 
    End Try 
  End If 
  ! ID Reader Config
  n = 0
  For i = 0 To 5
    If i = 0 Let temp$ = "" Else Let temp$ = Str$(i)
    Try 
      Search #ch_config;"Settings","CardReader" + temp$,w$
      w$ = Trim$(w$)
      If w$
        n = n + 1
        CardReaders$[n] = w$
        If ClientIPAddr$ Let CardReaders$[n] = ReplaceCI$(CardReaders$[n],"localhost:",ClientIPAddr$ + ":",1)
      End If 
    Else 
    End Try 
  Next i
  If n Let CardReaders$[0] = Str$(n)
  ! Ticket Options
  Try 
    Search #ch_config;"Settings","TicketCopies",w$
    TicketCopies = w$
  Else 
  End Try 
  For i = 1 To TicketCopies
    If i > 10 Exit For 
    Try 
      Search #ch_config;"Settings","TicketCopy" + Str$(i) + "_Legend",w$
      TicketCopyLegend$[i] = Trim$(w$)
    Else 
      TicketCopyLegend$[i] = ""
    End Try 
  Next i
  For i = 1 To TicketCopies
    If i > 10 Exit For 
    Try 
      Search #ch_config;"Settings","TicketCopy" + Str$(i) + "_SuppressPrice",w$
      w$ = UCase$(Trim$(w$))
      If w$ = "Y" Or w$ = "N"
        TicketCopySuppressPrice$[i] = w$
      Else 
        TicketCopySuppressPrice$[i] = "N"
      End If 
    Else 
      TicketCopySuppressPrice$[i] = "N"
    End Try 
  Next i
  For i = 1 To TicketCopies
    If i > 10 Exit For 
    Try 
      Search #ch_config;"Settings","TicketCopy" + Str$(i) + "_AlternateUnit",w$
      w$ = UCase$(Trim$(w$))
      If w$ = "Y" Or w$ = "N"
        TicketCopyAlternateUnit$[i] = w$
      Else 
        TicketCopyAlternateUnit$[i] = "N"
      End If 
    Else 
      TicketCopyAlternateUnit$[i] = "N"
    End Try 
    If TicketCopyAlternateUnit$[i] = "Y" Let TicketCopyAlternateUnit$[0] = "Y"
  Next i
  For i = 1 To TicketCopies
    If i > 10 Exit For 
    Try 
      Search #ch_config;"Settings","TicketCopy" + Str$(i) + "_PrintPurchaseBarcode",w$
      w$ = UCase$(Trim$(w$))
      If w$ = "Y" Or w$ = "N"
        TicketCopyPrintPurchaseBarcode$[i] = w$
      Else 
        TicketCopyPrintPurchaseBarcode$[i] = "Y"
      End If 
    Else 
      TicketCopyPrintPurchaseBarcode$[i] = "Y"
    End Try 
  Next i
  For i = 1 To TicketCopies
    If i > 10 Exit For 
    Try 
      Search #ch_config;"Settings","TicketCopy" + Str$(i) + "_PrintCFCText",w$
      TicketCopyPrintCFCText$[i] = Trim$(w$)
      w$ = UCase$(Trim$(w$))
      If w$ = "Y" Or w$ = "N"
        TicketCopyPrintCFCText$[i] = w$
      Else 
        TicketCopyPrintCFCText$[i] = "Y"
      End If 
    Else 
      TicketCopyPrintCFCText$[i] = "Y"
    End Try 
  Next i
  Try 
    Search #ch_config;"Settings","PrintStockPile",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let PrintStockPile$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","PrintMaterialCode",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let PrintMaterialCode$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","PrintTraderName",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let PrintTraderName$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","PrintCFCOnFile",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let PrintCFCOnFile$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","PrintVINNumbers",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Or w$ = "F" Let PrintVINNumbers$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","PrintDriverIDNumber",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let PrintDriverIDNumber$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","PrintVehicleTagInfo",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let PrintVehicleTagInfo$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","PrintShippingInstructions",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let PrintShippingInstructions$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","SuppressTicketSummaryWeight",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let SuppressTicketSummaryWeight$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","TicketSummaryWeightUM",w$
    TicketSummaryWeightUM$ = Trim$(w$)
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","TicketSummaryWeightUM2",w$
    TicketSummaryWeightUM2$ = Trim$(w$)
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","EmailPurchaseTickets",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let EmailPurchaseTickets$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","EmailSalesTickets",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let EmailSalesTickets$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","TicketPrinter",w$
    TicketPrinter$ = Trim$(w$)
    If UCase$(TicketPrinter$) = "DEFAULT" Let TicketPrinter$ = UCase$(TicketPrinter$)
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","TicketPrinterType",w$
    TicketPrinterType$ = UCase$(Trim$(w$))
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","TicketForm",w$
    TicketForm$ = Trim$(w$)
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","DPTicketTitle",DPTicketTitle$
    If DPTicketTitle$ = "" Let DPTicketTitle$ = " "
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","SuppressDPTicketCertificate",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let SuppressDPTicketCertificate$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","PaymentLinePosition",w$
    PaymentLinePosition = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","TicketNoSize",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "1" Or w$ = "2" Or w$ = "3" Or w$ = "4" Let TicketNoSize = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","TicketLineSpacing",w$
    w$ = Trim$(w$)
    If w$ = "3mm" Or w$ = "4mm" Let TicketLineSpacing$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","VehicleNoDescription",w$
    If Trim$(w$)
      VehicleNoDescription$ = w$
    End If 
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","PrintIDExpDate",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let PrintIDExpDate$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","PrintDateOfBirth",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Or w$ = "D" Let PrintDateOfBirth$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","PrintPhoneNo",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let PrintPhoneNo$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","PrintVehicleSize",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let PrintVehicleSize$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","PrintDriverName",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let PrintDriverName$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","PrintInspectorName",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Let PrintInspector$ = "NAME"
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","PrintInspector",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "NAME" Or w$ = "CODE" Or w$ = "COMMENT" Let PrintInspector$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","PrintWeighmaster",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "NAME" Or w$ = "CODE" Or w$ = "COMMENT" Let PrintWeighmaster$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","WMSignature",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let WMSignature$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","CashierSignature",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let CashierSignature$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","CustomerSignature",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Or w$ = "P" Or w$ = "S" Let CustSignature$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","PrintPurchaseShipFrom",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let PrintPurchaseShipFrom$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","PrintSaleShipTo",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let PrintSaleShipTo$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","PrintInspectionComment",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let PrintInspectionComment$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","AgencyBrokSupplierDesc",w$
    AgencyBrokSupplierDesc$ = RTrim$(w$)
  Else 
  End Try 
  nheader = 0
  Try 
    Search #ch_config;"Settings","TicketHeaderFile",w$
    w$ = Trim$(w$)
    If w$ Call GetTicketText(w$,"TicketHeader",TicketHeader$[],nheader)
  Else 
  End Try 
  If nheader = 0
    Do 
      Try 
        Search #ch_config;"Settings","TicketHeader" + Str$(nheader + 1),TicketHeader$[nheader + 1]
        nheader = nheader + 1
      Else 
        Exit Do 
      End Try 
    Loop 
  End If 
  nfooter = 0
  Try 
    Search #ch_config;"Settings","TicketFooterFile",w$
    w$ = Trim$(w$)
    If w$ Call GetTicketText(w$,"TicketFooter",TicketFooter$[],nfooter)
  Else 
  End Try 
  If nfooter = 0
    Do 
      Try 
        Search #ch_config;"Settings","TicketFooter" + Str$(nfooter + 1),TicketFooter$[nfooter + 1]
        nfooter = nfooter + 1
      Else 
        Exit Do 
      End Try 
    Loop 
  End If 
  nofooter = 0
  Try 
    Search #ch_config;"Settings","TicketOptionalFooterFile",w$
    w$ = Trim$(w$)
    If w$ Call GetTicketText(w$,"TicketOptionalFooter",TicketOptFooter$[],nofooter)
  Else 
  End Try 
  If nofooter = 0
    Do 
      Try 
        Search #ch_config;"Settings","TicketOptionalFooter" + Str$(nofooter + 1),TicketOptFooter$[nofooter + 1]
        nofooter = nofooter + 1
      Else 
        Exit Do 
      End Try 
    Loop 
  End If 
  ncfc = 0
  Try 
    Search #ch_config;"Settings","CFCTextFile",w$
    w$ = Trim$(w$)
    If w$ Call GetTicketText(w$,"CFCText",CFCText$[],ncfc)
  Else 
  End Try 
  If ncfc = 0
    Do 
      Try 
        Search #ch_config;"Settings","CFCText" + Str$(ncfc + 1),CFCText$[ncfc + 1]
        ncfc = ncfc + 1
      Else 
        Exit Do 
      End Try 
    Loop 
  End If 
  ! Inspection Ticket Printer Options
  Try 
    Search #ch_config;"Settings","PrintInspectionTicket",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Or w$ = "P" Let PrintInspectionTicket$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","PrintSalesInspectionTicket",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Or w$ = "P" Let PrintSalesInspectionTicket$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","InspectionTicketPrinter",w$
    InspectionTicketPrinter$ = Trim$(w$)
    If UCase$(InspectionTicketPrinter$) = "DEFAULT" Let InspectionTicketPrinter$ = UCase$(InspectionTicketPrinter$)
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","InspectionTicketPrinterType",w$
    InspectionTicketPrinterType$ = UCase$(Trim$(w$))
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","InspectionTicketForm",w$
    InspectionTicketForm$ = Trim$(w$)
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","InspectionTicketCopies",w$
    InspectionTicketCopies = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","InspectionTicketMaterialBarcode",w$
    w$ = Trim$(UCase$(w$))
    If w$ = "Y" Or w$ = "N" Let InspectionTicketMaterialBarcode$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","InspectionWeighmaster",w$
    w$ = Trim$(w$)
    If w$ Let InspectionWeighmaster$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","InspectionCustomerSignature",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Or w$ = "P" Or w$ = "S" Let InspectionCustomerSignature$ = w$
  Else 
  End Try 
  niheader = 0
  Try 
    Search #ch_config;"Settings","InspectionTicketHeaderFile",w$
    w$ = Trim$(w$)
    If w$ Call GetTicketText(w$,"InspectionTicketHeader",InspectionTicketHeader$[],niheader)
  Else 
  End Try 
  If niheader = 0
    Do 
      Try 
        Search #ch_config;"Settings","InspectionTicketHeader" + Str$(niheader + 1),InspectionTicketHeader$[niheader + 1]
        niheader = niheader + 1
      Else 
        Exit Do 
      End Try 
    Loop 
  End If 
  nitext = 0
  Try 
    Search #ch_config;"Settings","InspectionTicketTextFile",w$
    w$ = Trim$(w$)
    If w$ Call GetTicketText(w$,"InspectionTicketText",InspectionTicketText$[],nitext)
  Else 
  End Try 
  If nitext = 0
    Do 
      Try 
        Search #ch_config;"Settings","InspectionTicketText" + Str$(nitext + 1),InspectionTicketText$[nitext + 1]
        nitext = nitext + 1
      Else 
        Exit Do 
      End Try 
    Loop 
  End If 
  nifooter = 0
  Try 
    Search #ch_config;"Settings","InspectionTicketFooterFile",w$
    w$ = Trim$(w$)
    If w$ Call GetTicketText(w$,"InspectionTicketFooter",InspectionTicketFooter$[],nifooter)
  Else 
  End Try 
  If nifooter = 0
    Do 
      Try 
        Search #ch_config;"Settings","InspectionTicketFooter" + Str$(nifooter + 1),InspectionTicketFooter$[nifooter + 1]
        nifooter = nifooter + 1
      Else 
        Exit Do 
      End Try 
    Loop 
  End If 
  ! Material Specific Form Options
  Try 
    Search #ch_config;"Settings","PrintMaterialCodeForm",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Or w$ = "P" Let PrintMaterialCodeForm$ = w$
  Else 
  End Try 
  If PrintMaterialCodeForm$ = "Y" Or PrintMaterialCodeForm$ = "P"
    Try 
      Search #ch_config;"Settings","MaterialCodeFormList",w$
      MaterialCodeFormList$ = Trim$(w$)
    Else 
    End Try 
    Try 
      Search #ch_config;"Settings","MaterialCodeFormFile",w$
      MaterialCodeFormFile$ = Trim$(w$)
    Else 
    End Try 
    Try 
      Search #ch_config;"Settings","MaterialCodeFormCopies",w$
      MaterialCodeFormCopies = w$
    Else 
    End Try 
    If MaterialCodeFormList$ = "" Or MaterialCodeFormFile$ = "" Let PrintMaterialCodeForm$ = "N"
  End If 
  ! MIX Retail Ticket Options
  Try 
    Search #ch_config;"Settings","MIXTicketPrinter",w$
    MIXTicketPrinter$ = Trim$(w$)
    If UCase$(MIXTicketPrinter$) = "DEFAULT"
      MIXTicketPrinter$ = UCase$(MIXTicketPrinter$)
    Else If UCase$(MIXTicketPrinter$) = "SAME"
      MIXTicketPrinter$ = TicketPrinter$
    End If 
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","MIXTicketForm",w$
    MIXTicketForm$ = Trim$(w$)
  Else 
  End Try 
  Try 
    MIXTicketDecimals$ = "N"
    Search #ch_config;"Settings","MIXTicketDecimals",w$
    w$ = Trim$(UCase$(w$))
    If w$ = "Y" Or w$ = "N" Let MIXTicketDecimals$ = w$
  Else 
  End Try 
  Try 
    MIXTicketItemsPerPage = 60
    Search #ch_config;"Settings","MIXTicketItemsPerPage",w$
    Try Let MIXTicketItemsPerPage = Val(w$) Else Rem
    If MIXTicketItemsPerPage = 0 Let MIXTicketItemsPerPage = 60
  Else 
  End Try 
  Try 
    MIXTicketPrintBoth$ = "N"
    Search #ch_config;"Settings","MIXTicketPrintBoth",w$
    w$ = Trim$(UCase$(w$))
    If w$ = "Y" Or w$ = "N" Let MIXTicketPrintBoth$ = w$
  Else 
  End Try 
  ! Alternate Unit Ticket Options
  If TicketCopyAlternateUnit$[0] = "Y"
    Try 
      Search #ch_config;"Settings","AltWeightUM",w$
      AltWeightUM$ = Trim$(w$)
      If AltWeightUM$ Let AltWeightUM$ = SAISpaceFill$(AltWeightUM$,2)
    Else 
    End Try 
    Try 
      Search #ch_config;"Settings","AltCurrencyCode",w$
      AltCurrencyCode$ = Trim$(w$)
      If AltCurrencyCode$ Let AltCurrencyCode$ = SAISpaceFill$(AltCurrencyCode$,3)
    Else 
    End Try 
    Try 
      EnterPriceInAltCurrency$ = "N"
      Search #ch_config;"Settings","EnterPriceInAltCurrency",w$
      w$ = Trim$(UCase$(w$))
      If w$ = "Y" Or w$ = "N" Let EnterPriceInAltCurrency$ = w$
    Else 
    End Try 
  End If 
  ! BOL Print Options
  Try 
    Search #ch_config;"Settings","BOLPrinter",w$
    BOLPrinter$ = Trim$(w$)
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","BOLForm",w$
    BOLForm$ = Trim$(w$)
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","BOLForm2",w$
    BOLForm2$ = Trim$(w$)
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","BOLFormOptions",w$
    BOLFormOptions$ = Trim$(w$)
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","BOLCopies",w$
    BOLCopies = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","BOLReferenceNumber",w$
    w$ = Trim$(UCase$(w$))
    If w$ = "TICKET" Or w$ = "SHIPMENT" Let BOLReferenceNumber$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","BOLReferenceNumberPCL",w$
    BOLReferenceNumberPCL$ = Replace$(w$,"<ESC>",'ESC')
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","BOLLinesPerPage",w$
    BOLLinesPerPage = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","BOLShipmentNoPosition",w$
    w$ = Trim$(w$)
    If w$
      Call SAIGetNumbers(w$,BOLShipmentNoPosition[])
      If BOLShipmentNoPosition[0] <> 2 Clear BOLShipmentNoPosition[]
    End If 
  Else 
  End Try 
  If BOLLinesPerPage = 0
    If BOLShipmentNoPosition[0]
      BOLLinesPerPage = BOLShipmentNoPosition[1] + 10
    Else 
      BOLLinesPerPage = 25
    End If 
  End If 
  Try 
    Search #ch_config;"Settings","BOLTareWtDerived",w$
    w$ = Trim$(UCase$(w$))
    If w$ = "Y" Or w$ = "N" Let BOLTareWtDerived$ = w$
  Else 
  End Try 
  If BOLPrinter$ = "" Or BOLForm$ = "" Let BOLCopies = 0
  ! ProForma Invoice Options
  Try 
    Search #ch_config;"Settings","ProFormaForm",w$
    ProFormaForm$ = Trim$(w$)
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","ProFormaForm2",w$
    ProFormaForm2$ = Trim$(w$)
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","ProFormaCopies",w$
    ProFormaCopies = w$
  Else 
  End Try 
  ! Camera Configuration
  For i = 1 To 5
    Try 
      Search #ch_config;"Settings","ScaleCamera" + Str$(i),w$
      ScaleCamera$[i] = Trim$(w$)
    Else 
    End Try 
  Next i
  Try 
    Search #ch_config;"Settings","IDCamera",w$
    CameraDefs$[1] = Trim$(w$)
    If CameraDefs$[1] Let PhotoCameras = 1
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","FingerPrintCamera",w$
    CameraDefs$[2] = Trim$(w$)
    If CameraDefs$[2] Let PhotoCameras = 1
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","OnDemandCamera",w$
    CameraDefs$[3] = Trim$(w$)
    If CameraDefs$[3] Let PhotoCameras = 1
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","OnDemand2Camera",w$
    CameraDefs$[5] = Trim$(w$)
    If CameraDefs$[5] Let PhotoCameras = 1
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","SignatureCamera",w$
    CameraDefs$[4] = Trim$(w$)
    If CameraDefs$[4] Let PhotoCameras = 1
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","AttachmentCamera",w$
    CameraDefs$[6] = Trim$(w$)
    If ClientIPAddr$ And Pos(CameraDefs$[6], = ":") Let CameraDefs$[6] = ReplaceCI$(CameraDefs$[6],"localhost:",ClientIPAddr$ + ":",1)
    If CameraDefs$[6] Let PhotoCameras = 1
  Else 
  End Try 
  ! Payment Cameras
  Try 
    Search #ch_config;"Settings","ATMCamera",w$
    ATMCamera$ = Trim$(w$)
  Else 
    ATMCamera$ = ""
  End Try 
  Try 
    Search #ch_config;"Settings","CASHCamera",w$
    CASHCamera$ = Trim$(w$)
  Else 
    CASHCamera$ = ""
  End Try 
  Try 
    Search #ch_config;"Settings","CHECKCamera",w$
    CHECKCamera$ = Trim$(w$)
  Else 
    CHECKCamera$ = ""
  End Try 
  Try 
    Search #ch_config;"Settings","EFTCamera",w$
    EFTCamera$ = Trim$(w$)
  Else 
    EFTCamera$ = ""
  End Try 
  Try 
    Search #ch_config;"Settings","OTHERCamera",w$
    OTHERCamera$ = Trim$(w$)
  Else 
    OTHERCamera$ = ""
  End Try 
  Try 
    Search #ch_config;"Settings","ManualWtOverrideCamera",w$
    ManualWtOverrideCamera$ = Trim$(w$)
  Else 
    ManualWtOverrideCamera$ = ""
  End Try 
  Try 
    Search #ch_config;"Settings","PhotoURL",w$
    w$ = Trim$(w$)
  Else 
    w$ = ""
  End Try 
  If UCase$(w$) = "NONE"
    CameraDefs$[0] = ""
  Else If w$ = "" Or UCase$(w$) = "AUTOCONFIG"
    Call SAIGetCameraHost(Branch$,w$)
    If w$
      CameraDefs$[0] = "http://" + w$ + "/sdcgi"
    Else 
      CameraDefs$[0] = ""
    End If 
  Else 
    CameraDefs$[0] = w$
  End If 
  PhotoURL$ = CameraDefs$[0]
  ! Photo viewer trigger
  Try 
    Search #ch_config;"Settings","PhotoViewerTrigger",w$
    PhotoViewerTrigger$ = Trim$(w$)
    If ClientIPAddr$ Let PhotoViewerTrigger$ = ReplaceCI$(PhotoViewerTrigger$,"localhost:",ClientIPAddr$ + ":",1)
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","CapturePhotoOnMaterialChange",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let CapturePhotoOnMaterialChange$ = w$
  Else 
  End Try 
  ! InYard Options
  Try 
    Search #ch_config;"Settings","InYardFilter",w$
    w$ = UCase$(Trim$(w$))
    If Pos("APSTW", = w$) Let InYardFilter$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","InYardScanDefault",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let InYardScanDefault$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","InYardPhotos",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let InYardPhotos$ = w$
  Else 
  End Try 
  If InYardPhotos$ = "Y"
    Try 
      Search #ch_config;"Settings","InYardDemo",w$
      w$ = UCase$(Trim$(w$))
      If w$ = "Y" Or w$ = "N" Let InYardDemo$ = w$
    Else 
    End Try 
  End If 
  Try 
    Search #ch_config;"Settings","JPThumbsLocation",JPThumbsLocation$
    If JPThumbsLocation$
      If JPThumbsLocation$[Len(JPThumbsLocation$)] <> "\\" Let JPThumbsLocation$ = JPThumbsLocation$ + "\\"
    Else 
      InYardPhotos$ = "N"
    End If 
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","WelcomeSignAddr",WelcomeSignAddr$
  Else 
  End Try 
  ! Inspection
  Try 
    Search #ch_config;"Settings","RequireInspection",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Or w$ = "W" Let RequireInspection$ = w$
  Else 
  End Try 
  ! Weight Adjustment Auto Email
  Try 
    Search #ch_config;"Settings","EmailWtAdjTolerance",w$
    EmailWtAdjTolerance = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","EmailWtAdjPercentTolerance",w$
    EmailWtAdjPercentTolerance = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","EmailWtAdjOverToleranceAction",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "N" Or w$ = "A" Or w$ = "P" Let EmailWtAdjOverToleranceAction$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","EmailWtAdjWithinToleranceAction",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "N" Or w$ = "A" Or w$ = "P" Let EmailWtAdjWithinToleranceAction$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","EmailBuyer_ccBranchManager",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Or w$ = "A" Let EmailBuyer_ccBranchManager$ = w$
  Else 
  End Try 
  ! Transfers
  Try 
    Search #ch_config;"Settings","InBoundTransferDefaultID",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let InBoundTransferDefaultID$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","InBoundTransferCarrierRequired",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let InBoundTransferCarrierRequired$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","CreateInBoundTransfers",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Or w$ = "C" Let CreateInBoundTransfers$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","AllowInBoundTransferInventoryMismatch",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let AllowIBTransferInvMismatch$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","OutBoundTransferCarrierRequired",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let OutBoundTransferCarrierRequired$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","ValidTransferBranches",w$
    ValidTransferBranches$ = UCase$(Trim$(w$))
  Else 
  End Try 
  ! RFID
  x = 0
  For i = 1 To 5
    Try 
      Search #ch_config;"Settings","RFReader" + Str$(i),RFReader$[i]
      RFReader$[i] = Trim$(RFReader$[i])
      If RFReader$[i] Let x = x + 1
    Else 
    End Try 
  Next i
  If x
    RFID = 1
    Try 
      Search #ch_config;"Settings","RFMaxAge",w$
      RFMaxAge = w$
    Else 
    End Try 
    Try 
      Search #ch_config;"Settings","RFAutoRead",w$
      w$ = UCase$(Trim$(w$))
      If w$ = "Y" Or w$ = "N" Let RFAutoRead$ = w$
    Else 
    End Try 
    Try 
      Search #ch_config;"Settings","RFCreateMaster",w$
      w$ = UCase$(Trim$(w$))
      If w$ = "Y" Or w$ = "N" Let RFCreateMaster$ = w$
    Else 
    End Try 
  Else 
    RFID = 0
  End If 
  ! End Of Day Cutoff options
  EOD_time$ = ""
  EOD_day$ = ""
  EOD_Mode$ = ""
  EOD_First_Only$ = ""
  Try 
    Search #ch_config;"Settings","EOD_cutoff_time",w$
    x = w$
    If x > 0 And x < 2401 Let EOD_time$ = x Using "&&&&"
  Else 
  End Try 
  If EOD_time$
    Try 
      Search #ch_config;"Settings","EOD_cutoff_day",w$
      w$ = LCase$(w$)
      If w$ = "current" Or w$ = "next" Let EOD_day$ = w$
    Else 
    End Try 
    If EOD_day$
      Try 
        Search #ch_config;"Settings","EOD_cutoff_mode",w$
        w$ = UCase$(Trim$(w$))
        If w$ = "P" Or w$ = "A"
          EOD_Mode$ = w$
        Else 
          EOD_Mode$ = "A"
        End If 
      Else 
      End Try 
      Try 
        Search #ch_config;"Settings","EOD_cutoff_first_only",w$
        If UCase$(w$) = "Y" Let EOD_First_Only$ = "Y"
      Else 
      End Try 
    Else 
      EOD_time$ = ""
    End If 
  End If 
  ! BOM Ticket Prevent Options
  Try 
    Search #ch_config;"Settings","BOM_TicketPrevent",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Or w$ = "W" Let BOM_TicketPrevent$ = w$
  Else 
  End Try 
  If BOM_TicketPrevent$ <> "N"
    Try 
      Search #ch_config;"Settings","BOM_TicketPrevent_day",w$
      x = w$
      If x >= 1 And x < 31 Let BOM_TicketPrevent_day = x
    Else 
    End Try 
    Try 
      Search #ch_config;"Settings","BOM_TicketPrevent_start",w$
      x = w$
      If x >= 0 And x < 2401 Let BOM_TicketPrevent_start$ = x Using "&&&&"
    Else 
    End Try 
    Try 
      Search #ch_config;"Settings","BOM_TicketPrevent_end",w$
      x = w$
      If x >= 0 And x < 2401 Let BOM_TicketPrevent_end$ = x Using "&&&&"
    Else 
    End Try 
    If BOM_TicketPrevent_end$ <= BOM_TicketPrevent_start$ Let BOM_TicketPrevent$ = "N"
    If BOM_TicketPrevent_day = 0 Let BOM_TicketPrevent_day = 1
  End If 
  ! Identity Options
  Try 
    Search #ch_config;"Settings","RequireIdentity",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Or w$ = "V" Let RequireIdentity$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","DisableSavedPhotoAutoCopy",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let DisableSavedPhotoAutoCopy$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","CheckDoNotBuy",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "P" Or w$ = "W" Let CheckDoNotBuy$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","CheckOhioDoNotBuy",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "P" Or w$ = "W" Let CheckOhioDoNotBuy$ = w$
  Else 
  End Try 
  If CheckOhioDoNotBuy$ = "P" Or CheckOhioDoNotBuy$ = "W"
    Try 
      Search #ch_config;"Settings","OhioFacilityRegNumber",OhioFacilityRegNumber$
      OhioFacilityRegNumber$ = Trim$(OhioFacilityRegNumber$)
    Else 
    End Try 
    If OhioFacilityRegNumber$ = "" Let CheckOhioDoNotBuy$ = ""
  End If 
  Try 
    Search #ch_config;"Settings","DefaultNameOrder",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "FML" Or w$ = "LFM" Let DefaultNameOrder$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","RequireVINonCarBodyMaterial",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Or w$ = "W" Let RequireVINonCarBodyMaterial$ = w$
  Else 
  End Try 
  ! Signature Capture
  Try 
    Search #ch_config;"Settings","SignaturePad",w$
    SignaturePad$ = Trim$(w$)
    If ClientIPAddr$ Let SignaturePad$ = ReplaceCI$(SignaturePad$,"localhost:",ClientIPAddr$ + ":",1)
  Else 
  End Try 
  If SignaturePad$
    Try 
      Search #ch_config;"Settings","PurchaseTicketSigID",w$
      PurchaseTicketSigID = Trim$(w$)
    Else 
    End Try 
    Try 
      Search #ch_config;"Settings","PaymentSigID",w$
      PaymentSigID = Trim$(w$)
    Else 
    End Try 
    Try 
      Search #ch_config;"Settings","BOLSigID",w$
      BOLSigID = Trim$(w$)
    Else 
    End Try 
    Try 
      Search #ch_config;"Settings","IDSigID",w$
      IDSigID = Trim$(w$)
    Else 
    End Try 
  End If 
  ! Misc.
  Try 
    Search #ch_config;"Settings","BackgroundColor",w$
    Call SAIGetNumbers(w$,Numbers[])
    If Numbers[0] = 3
      Try Let bgcolor = SAIColorRGB(Numbers[1],Numbers[2],Numbers[3]) Else Rem
    End If 
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","BarCodeLeadIn",w$
    BCLeadIn$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","Weighmaster",w$
    w$ = Trim$(w$)
    If w$ Let gbl_WeighMaster$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","AutoViewID",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let AutoViewID$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","InBoundPeddlerInfoPrompt",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Or w$ = "R" Or w$ = "V" Or w$ = "RV" Let InBoundPeddlerInfoPrompt$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","PeddlerInfoPrompt",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Or w$ = "R" Let PeddlerInfoPrompt$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","SupplierShipNoPrompt",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Or w$ = "R" Or w$ = "D" Let SupplierShipNoPrompt$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","RequireVoidComment",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let RequireVoidComment$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","SupplierDefaultFromID",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Or w$ = "S" Let SupplierDefaultFromID$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","CustomerDefaultFromID",w$
    w$ = UCase$(Trim$(w$))
    If w$ = "Y" Or w$ = "N" Let CustomerDefaultFromID$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","EstimatedCarBodyWeight",w$
    EstCarBodyWt = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","PromptForBargeDates",w$
    w$ = Trim$(UCase$(w$))
    If w$ = "Y" Or w$ = "N" Let PromptForBargeDates$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","RequireAxleCount",w$
    w$ = Trim$(UCase$(w$))
    If w$ = "Y" Or w$ = "N" Let RequireAxleCount$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","Greeter",w$
    w$ = Trim$(UCase$(w$))
    If w$ = "Y" Or w$ = "N" Let Greeter$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","GreeterPhotos",w$
    w$ = Trim$(UCase$(w$))
    If w$ = "Y" Or w$ = "N" Let GreeterPhotos$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","MixUnloadMode",w$
    w$ = Trim$(UCase$(w$))
    If w$ = "Y" Or w$ = "N" Let MixUnloadMode$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","RequireTicketComment",w$
    w$ = Trim$(UCase$(w$))
    If w$ = "Y" Or w$ = "N" Or w$ = "P" Or w$ = "S" Let RequireTicketComment$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","ReviewPhotos",w$
    w$ = Trim$(UCase$(w$))
    If w$ = "Y" Or w$ = "N" Or w$ = "S" Or w$ = "A" Let ReviewPhotos$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","DisableGenerateManualTicketNo",w$
    w$ = Trim$(UCase$(w$))
    If w$ = "Y" Or w$ = "N" Let DisableGenerateManualTicketNo$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","AllowManualTTicket",w$
    w$ = Trim$(UCase$(w$))
    If w$ = "Y" Or w$ = "N" Let AllowManualTTicket$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","AllowEditFrequents",w$
    w$ = Trim$(UCase$(w$))
    If w$ = "Y" Or w$ = "N" Let AllowEditFrequents$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","AutoStartMixTicketOption",w$
    w$ = Trim$(UCase$(w$))
    If w$ = "Y" Or w$ = "N" Let AutoStartMixTicketOption$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","CheckOutboundVehMaxGross",w$
    w$ = Trim$(UCase$(w$))
    If w$ = "Y" Or w$ = "N" Let CheckOutboundVehMaxGross$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","ViewNoticesOnly",w$
    w$ = Trim$(UCase$(w$))
    If w$ = "Y" Or w$ = "N" Let ViewNoticesOnly$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"Settings","WarnHazMat",w$
    w$ = Trim$(UCase$(w$))
    If w$ = "Y" Or w$ = "N" Let WarnHazMat$ = w$
  Else 
  End Try 
  If WarnHazMat$ = "Y"
    Try 
      Search #ch_config;"Settings","HazMatSupplierTypes",w$
      HazMatSupplierTypes$ = Trim$(w$)
    Else 
    End Try 
  End If 
  ! Program Functions
  !  Main Screen
  For i = 1 To 3
    Try 
      Search #ch_config;"ProgramFunctions","Main" + Str$(i),w$
      w$ = UCase$(w$)
      Try 
        Read #ch_config,-1;errmess$,temp$ ! Read next record
        If UCase$(errmess$) <> "BUTTONNAME" Let temp$ = ""
      Else 
        temp$ = ""
      End Try 
      Call ValidateProgramFunction(w$,temp$)
      If w$
        MainFunctions$[i] = w$
        MainButtons$[i + 9] = temp$
      Else 
        MainFunctions$[i] = ""
        MainButtons$[i + 9] = ""
      End If 
    Else 
    End Try 
  Next i
  !  More Screen
  For i = 1 To 12
    Try 
      Search #ch_config;"ProgramFunctions","More" + Str$(i),w$
      w$ = UCase$(w$)
      Try 
        Read #ch_config,-1;errmess$,temp$ ! Read next record
        If UCase$(errmess$) <> "BUTTONNAME" Let temp$ = ""
      Else 
        temp$ = ""
      End Try 
      Call ValidateProgramFunction(w$,temp$)
      If w$
        MoreFunctions$[i] = w$
        MoreButtons$[i] = temp$
      Else 
        MoreFunctions$[i] = ""
        MoreButtons$[i] = ""
      End If 
    Else 
    End Try 
  Next i
  ! Disable Main Buttons
  For i = 1 To 12
    Try 
      Search #ch_config;"MainDisable",Str$(i),w$
      If UCase$(w$) = "DISABLE"
        If MainButtons$[i,1,1] <> "~"
          temp$ = MainButtons$[i]
          MainButtons$[i] = "~" + temp$
        End If 
      End If 
    Else 
    End Try 
  Next i
  ! QuickIDSet1
  For i = 1 To 9
    Try 
      Search #ch_config;"QuickIDSet1",Str$(i),w$
      If Trim$(w$) Let QuickIDSet1$[i] = LTrim$(w$)
    Else 
    End Try 
  Next i
  ! QuickIDSet2
  For i = 1 To 9
    Try 
      Search #ch_config;"QuickIDSet2",Str$(i),w$
      If Trim$(w$) Let QuickIDSet2$[i] = RTrim$(w$)
    Else 
    End Try 
  Next i
  ! Frequent Suppliers (other settings)
  Try 
    Search #ch_config;"FrequentSuppliers","BranchPeddlerNo",w$
    w$ = Trim$(w$)
    If Len(w$) = 6 Let BranchPeddlerNo$ = w$
  Else 
  End Try 
  Try 
    Search #ch_config;"FrequentSuppliers","YardSupplierNo",w$
    w$ = Trim$(w$)
    If w$ Let YardSupplierNo$ = w$
  Else 
  End Try 
  ! Look for saved frequents
  ch_freq = FindChannel()
  Try 
    Ropen #ch_freq,"(charset=ansi)global/frequents/" + ConfigFile$ As "Profile"
  Else 
    ch_freq = ch_config
  End Try 
  ! Frequent Suppliers
  Call ReadFrequent("FrequentSuppliers",FreqSupplier.[])
  If BranchPeddlerNo$ = "" And FreqSupplier.[1].EntityNo$[1,3] = "CP0" Let BranchPeddlerNo$ = FreqSupplier.[1].EntityNo$
  ! Frequent Customers
  Call ReadFrequent("FrequentCustomers",FreqCustomer.[])
  ! Frequent InterCompany Customers
  Call ReadFrequent("FrequentInterCoCustomers",FreqIntCustomer.[])
  ! Frequent Carriers
  Call ReadFrequent("FrequentCarriers",FreqCarrier.[])
  ! Frequent Material List
  i = 0 \ isav = 0
  Try 
    Search #ch_freq;"MaterialList"
    Read #ch_freq,-2;temp$,w$ ! Read first record
    Do 
      Select Case UCase$(temp$)
        Case "CODE"
          !        if Trim$(w$)
          i = i + 1
          isav = i
          If i > FreqMaterialMax
            FreqMaterialMax = FreqMaterialMax + 20
            Dim FreqMaterial.[FreqMaterialMax] As Frequent_Material
          End If 
          FreqMaterial.[isav].MaterialCode$ = Trim$(w$)
          !        else
          !          isav=0
          !        endif
        Case "NAME"
          If isav Let FreqMaterial.[isav].MaterialDesc$ = Trim$(w$)
        Case "BTNCOLOR"
          If isav
            FreqMaterial.[isav].BtnColor = Trim$(w$)
            If FreqMaterial.[isav].BtnColor < 0 Let FreqMaterial.[isav].BtnColor = 0
          End If 
      End Select 
      Read #ch_freq,-1;temp$,w$ ! Read next record
    Loop 
  Else 
  End Try 
  FreqMaterialMax = i
  ! Determine Material Groups
  For i = 1 To FreqMaterialMax
    If FreqMaterial.[i].MaterialCode$
      If IsMaterialGroup(FreqMaterial.[i].MaterialCode$)
        stat = 0
        For n = 1 To NumMatGroups
          If MatGroups$[n] = FreqMaterial.[i].MaterialCode$[1,1]
            stat = 1
            Exit For 
          End If 
        Next n
        If stat = 0 And NumMatGroups < 16
          NumMatGroups = NumMatGroups + 1
          MatGroups$[NumMatGroups] = FreqMaterial.[i].MaterialCode$
        End If 
      End If 
    End If 
  Next i
  ! Get Materials for each Material Group
  Clear MatGroupNum[]
  For n = 1 To NumMatGroups
    i = 0 \ isav = 0
    Try 
      temp$ = MatGroups$[n][2,Len(MatGroups$[n]) - 1] ! remove the brackets
      Search #ch_freq;temp$
      Read #ch_freq,-2;temp$,w$ ! Read first record
      Do 
        Select Case UCase$(temp$)
          Case "CODE"
            If i = 16 Exit Do ! Max materials per group
            i = i + 1
            isav = i
            GroupMaterial.[n,isav].MaterialCode$ = Trim$(w$)
          Case "NAME"
            If isav Let GroupMaterial.[n,isav].MaterialDesc$ = Trim$(w$)
          Case "BTNCOLOR"
            If isav
              GroupMaterial.[n,isav].BtnColor = Trim$(w$)
              If GroupMaterial.[n,isav].BtnColor < 0 Let GroupMaterial.[n,isav].BtnColor = 0
            End If 
        End Select 
        Read #ch_freq,-1;temp$,w$ ! Read next record
      Loop 
    Else 
    End Try 
    MatGroupNum[n] = i
  Next n
  ! Close frequents channel if open
  If ch_freq <> ch_config
    Close #ch_freq
  End If 
End Sub 
Sub SelectConfigFile(ConfigFile$,status)
  chwin = SAIOpenWindow("Select Config File",400,190,1)
  Print #chwin;PChr$(30,10,10,390,150,"",2);'WCLIST';
  Print #chwin;PChr$(30,2,'F1');'WCACTION'; ! Set double-click action
  Print #chwin;PChr$("Arial");'FONTFACE 12FONTSIZE WCSETFONT';
  Call SAIButtons(chwin,2,1,"&&&OK~&Cancel",400,160,25,100,20)
  ch = FindChannel()
  Try 
    Ropen #ch,"global/config" As "Sorted Directory"
  Else 
    Call SAITouchError("Unable to open global/config directory.\15\" + Erm$(Spc(8)))
    Close #chwin
    Exit Sub 
  End Try 
  Print #chwin;'30WCSELECT CU';
  Do 
    Read #ch;w$
    If w$ = "" Exit Do 
    If w$ <> "." And w$ <> ".."
      If w$[1,Len(ConfigFile$)] = ConfigFile$
        x = Len(w$)
        If LCase$(w$[x - 3,x]) = ".ini" Print #chwin;w$
      End If 
    End If 
  Loop 
  Close #ch
  Print #chwin;'0WCSELECT 30WCFOCUS';
  Do 
    Input #chwin; Len (1);w$
    Select Case w$
      Case 'F1' ! OK
        ConfigFile$ = SAIQuery$(chwin,30)
        status = 0
        Exit Do 
      Case 'F2' ! Cancel
        status = 1
        Exit Do 
    End Select 
  Loop 
  Close #chwin
End Sub 
Sub ConfigFile()
  ! Set Program Default Values
  Mill$ = "N"
  ChangeProcessingDate$ = "Y"
  UseYardZones$ = "N"
  YardZone$ = ""
  DocLang$ = ""
  ! Pricing Options
  DisplayPrice$ = "Y"
  EditPrice$ = "Y"
  PrintPrice$ = "Y"
  PrintSalesPrice$ = "" ! Let it default to PrintPrice setting
  PriceToleranceAction$ = "W"
  AlwaysRepriceOnSupplierChange$ = "N"
  ! Scale Config
  NumScales = 1
  DefScale = 1
  ScaleIndicators$ = " "
  Clear ScaleAddr$[]
  DisableManualWt$ = "N"
  AllowTransferManualWt$ = "N"
  AllowDirtManualWt$ = "N"
  AllowSalesManualWt$ = "N"
  ReturnToZero$ = "" ! Defaults from s record
  ReadScaleOnManualWt$ = "N"
  ! Material/Weight
  AllowMultipleItems$ = "Y"
  AllowItemSplit$ = "N"
  AllowAdjustment$ = "Y"
  TicketWeightAdjustmentAsPrice$ = "N"
  PaymentWeightAdjustmentAsPrice$ = "N"
  AllowSplitWt$ = "N"
  DisableManualSplitWt$ = "N"
  EnableOccupantCount$ = "N"
  EditMaterialDesc$ = "Y"
  WeightOnlyMaterial$ = "N"
  PurchaseManualReason$ = "N"
  SalesManualReason$ = "N"
  MultiSalesCheckWtTolerance = 0
  MIXRetailWtTolerance = 0
  ! Vehicle Info Options
  PromptVehInfo$ = "Y"
  DefaultVehType$ = "T"
  DefaultVehPrefix$ = ""
  AllowVehTypeChange$ = "Y"
  RequireVehicleNo$ = "N"
  ! Purchase/Sales Order Options
  PurchaseOrderRequired$ = "N"
  SalesOrderRequired$ = "N"
  ShowCurrentOrdersOnly$ = "N"
  ShowCurrentCompanyOrdersOnly$ = "Y"
  ShowOrdersWithMaterialReqsOnly$ = "N"
  AllowMaterialChange$ = "Y"
  WarnSalesOrderOvership$ = "N"
  ! Non-Contract Freight
  NonContractCarrierHandling$ = ""
  NonContractFreightCode$ = ""
  AllowFreightRateEntry$ = "N"
  ! Payment Options
  !  PaymentMethod$="N"
  Clear PaymentOptions$[]
  Clear PaymentMethods$[]
  LaserReceiptOptionColumn$ = "INYARDID"
  ! Ticket Options
  TicketCopies = 1
  TicketPrinter$ = ""
  TicketPrinterType$ = ""
  TicketForm$ = ""
  PrintStockPile$ = "N"
  PrintMaterialCode$ = "N"
  PrintTraderName$ = "N"
  PrintCFCOnFile$ = "N"
  PrintVINNumbers$ = "N"
  PrintDriverIDNumber$ = "Y"
  PrintVehicleTagInfo$ = "N"
  PrintShippingInstructions$ = "N"
  SuppressTicketSummaryWeight$ = "N"
  EmailPurchaseTickets$ = "N"
  EmailSalesTickets$ = "N"
  TicketNoSize = 2
  TicketLineSpacing$ = "3mm"
  VehicleNoDescription$ = "Vehicle No"
  PrintIDExpDate$ = "N"
  PrintDateOfBirth$ = "N"
  PrintPhoneNo$ = "N"
  PrintVehicleSize$ = "N"
  PrintDriverName$ = "Y"
  PrintInspector$ = ""
  PrintWeighmaster$ = ""
  WMSignature$ = "Y"
  CashierSignature$ = "N"
  CustSignature$ = "Y"
  PrintPurchaseShipFrom$ = "N"
  PrintSaleShipTo$ = "N"
  PrintInspectionComment$ = "N"
  PaymentLinePosition = 2
  SuppressDPTicketCertificate$ = "N"
  Clear TicketHeader$[],TicketFooter$[]
  ! Inspection
  PrintInspectionTicket$ = ""
  PrintSalesInspectionTicket$ = ""
  InspectionTicketPrinter$ = ""
  InspectionTicketMaterialBarcode$ = "N"
  InspectionTicketCopies = 1
  Clear InspectionTicketHeader$[],InspectionTicketText$[],InspectionTicketFooter$[]
  ! Material Specific Form
  PrintMaterialCodeForm$ = "N"
  ! BOL Options
  BOLPrinter$ = ""
  BOLForm$ = ""
  BOLForm2$ = ""
  BOLFormOptions$ = ""
  BOLCopies = 1
  BOLTareWtDerived$ = "N"
  ! Camera Config
  Clear ScaleCamera$[]
  Clear CameraDefs$[]
  CapturePhotoOnMaterialChange$ = "Y"
  ! InYard Options
  InYardFilter$ = "A"
  InYardPhotos$ = "N"
  InYardDemo$ = "N"
  ! Inspection
  RequireInspection$ = "N"
  ! Email Buyer
  EmailWtAdjOverToleranceAction$ = "N"
  EmailWtAdjWithinToleranceAction$ = "N"
  EmailBuyer_ccBranchManager$ = "N"
  ! Transfers
  InBoundTransferDefaultID$ = "N"
  InBoundTransferCarrierRequired$ = "N"
  CreateInBoundTransfers$ = "Y"
  AllowIBTransferInvMismatch$ = "Y"
  OutBoundTransferCarrierRequired$ = "N"
  ! RFID
  Clear RFReader$[]
  RFAutoRead$ = "Y"
  RFCreateMaster$ = "Y"
  ! BOM Ticket Prevent
  BOM_TicketPrevent$ = "N"
  ! Identity Options
  RequireIdentity$ = "N"
  DisableSavedPhotoAutoCopy$ = "N"
  DefaultNameOrder$ = "FML"
  RequireVINonCarBodyMaterial$ = "N"
  ! Misc.
  BCLeadIn$ = "%"
  AutoViewID$ = "N"
  InBoundPeddlerInfoPrompt$ = "N"
  PeddlerInfoPrompt$ = "Y"
  SupplierShipNoPrompt$ = "N"
  RequireVoidComment$ = "N"
  SupplierDefaultFromID$ = "Y"
  CustomerDefaultFromID$ = "Y"
  PromptForBargeDates$ = "N"
  RequireAxleCount$ = "N"
  Greeter$ = "N"
  GreeterPhotos$ = "N"
  MixUnloadMode$ = "N"
  RequireTicketComment$ = "N"
  ReviewPhotos$ = "N"
  DisableGenerateManualTicketNo$ = "N"
  AllowManualTTicket$ = "N"
  AllowEditFrequents$ = "Y"
  AutoStartMixTicketOption$ = "N"
  CheckOutboundVehMaxGross$ = "N"
  ViewNoticesOnly$ = "N"
  WarnHazMat$ = "N"
  ! Row 1
  MainButtons$[1] = "PURCHASE"
  MainButtons$[2] = "VIEW IN-YARD\15\VEHICLES"
  MainButtons$[3] = "CONTRACT SALE"
  ! Row 2
  MainButtons$[4] = "VIEW NOTICED PURCHASES"
  MainButtons$[5] = "WEIGHT ONLY\15\TICKET"
  MainButtons$[6] = "VIEW SALES RELEASES"
  ! Row 3
  MainButtons$[7] = "RECEIVE IN-BOUND TRANSFER"
  MainButtons$[8] = "RE-PRINT TICKET"
  MainButtons$[9] = "CREATE OUT-BOUND TRANSFER"
  ! Row 4 (Programmable Functions)
  MainButtons$[10] = ""
  MainButtons$[11] = ""
  MainButtons$[12] = ""
  ! Change program defaults per customer
  Select Case z$[644,646]
    Case "220","323" ! SimsUS & SA
      SuppressTicketSummaryWeight$ = "Y"
  End Select 
  ! Look for Config file
  ConfigFile$ = "truckscale_" + Station$ + ".ini"
  Call OpenConfigFile(ch_config,ConfigFile$,status)
  If status
    ConfigFile$ = LCase$("truckscale_" + Branch$ + "_" + Station$ + ".ini")
    Call OpenConfigFile(ch_config,ConfigFile$,status)
  End If 
  If status
    ConfigFile$ = LCase$("truckscale_" + user$ + ".ini")
    Call OpenConfigFile(ch_config,ConfigFile$,status)
  End If 
  If status
    ConfigFile$ = LCase$("truckscale_" + Branch$ + "_" + user$ + ".ini")
    Call OpenConfigFile(ch_config,ConfigFile$,status)
  End If 
  If status
    ConfigFile$ = LCase$("truckscale_" + Branch$ + ".ini")
    Call OpenConfigFile(ch_config,ConfigFile$,status)
  End If 
  If status
    If chained
      ConfigFile$ = LCase$("truckscale_" + Branch$ + "_")
      Call SelectConfigFile(ConfigFile$,status)
      If status = 0 Call OpenConfigFile(ch_config,ConfigFile$,status)
      If status
        ConfigFile$ = ""
      Else 
        Station$ = ConfigFile$[15] To ".ini"
      End If 
    Else 
      ConfigFile$ = ""
    End If 
  End If 
  If status = 0
    Call ReadConfigFile()
    Close #ch_config
  End If 
  ! Final adjustment of settings
  If PrintSalesPrice$ = ""
    If PrintPrice$ = "Y" Or PrintPrice$ = "N"
      PrintSalesPrice$ = PrintPrice$
    Else 
      PrintSalesPrice$ = "Y"
    End If 
  End If 
  ! Inspection Ticket Options
  If InspectionTicketPrinter$ = ""
    InspectionTicketPrinter$ = TicketPrinter$
    InspectionTicketPrinterType$ = TicketPrinterType$
    InspectionTicketForm$ = TicketForm$
    !    InspectionTicketCopies=1
  End If 
  ! QuickID
  QuickID = 0
  For i = 1 To 9
    If QuickIDSet1$[i] <> "" Or QuickIDSet2$[i] <> ""
      QuickID = 1
      Exit For 
    End If 
  Next i
  ! Editing Frequent Lists
  If AllowEditFrequents$ = "Y"
    If ConfigFile$ = ""
      AllowEditFrequents$ = "N"
    Else 
      Try 
        ch = FindChannel()
        Ropen #ch,"global/frequents" As "Directory"
        Close #ch
      Else 
        AllowEditFrequents$ = "N"
      End Try 
    End If 
  End If 
  ! VehicleNoDescription default
  If VehicleNoDescription$ = "Vehicle No"
    Select Case DocLang$
      Case "FC"
        VehicleNoDescription$ = "No. V\351\hicule/Vehicle No"
    End Select 
  End If 
End Sub 
Sub CertificationInfo()
  ysize = 180
  chcert = SAIOpenWindow("About Certification",400,ysize,1)
  Print #chcert;PChr$("Arial");'FONTFACE 8FONTSIZE';
  y = 5 \ dy = 8 \ x = 150
  Print #chcert;@20,y;'BI';"Software Developed by:";'EI';
  y = y + dy + 5
  Try 
    Call DrawImage(chcert,"global/images/sai_logo.jpg",20,y,x - 15,y + (3 * dy))
    Try Call DrawImage(chcert,"global/images/brady_logo.jpg",20,y + (3 * dy),x - 15,y + (3 * dy) + (3 * dy)) Else Rem
  Else 
    Box #chcert;@20,y; To @x - 15,y + 20;
    Print #chcert;@50,y + 1;'18FONTSIZE BBOLD BI';"SAI";'8FONTSIZE EBOLD EI';
  End Try 
  Print #chcert;@x,y;'BBOLD';"Systems Alternatives Int'l LLC";'EBOLD';
  y = y + dy
  Print #chcert;@x,y;"1705 Indian Wood Circle"
  y = y + dy
  Print #chcert;@x,y;"Maumee, OH  43537"
  y = y + dy
  Print #chcert;@x,y;"(419) 891-1100"
  y = y + 2 * dy
  Print #chcert;@x,y;"Web:   www.sysalt.com"
  y = y + dy
  Print #chcert;@x,y;"Email:  support@sysalt.com"
  y = y + 2 * dy \ dy = 14
  Print #chcert;'8FONTSIZE WCSETFONT';
  Print #chcert;PChr$(100,75,y,325,y + 10,"",0);'WCTEXT';
  Print #chcert;'100WCSELECT';PChr$(-1,16777160);'WCSETCOLOR';"Model:  SAI ES";'0WCSELECT';
  y = y + dy
  Print #chcert;PChr$(101,75,y,325,y + 10,"",0);'WCTEXT';
  Print #chcert;'101WCSELECT';PChr$(-1,16777160);'WCSETCOLOR';"Software Version:  Truck/Rail Scale C1";'0WCSELECT';
  y = y + dy
  Print #chcert;'10FONTSIZE BBOLD WCSETFONT';
  Print #chcert;PChr$(102,75,y,325,y + 12,"",0);'WCTEXT';
  Print #chcert;'102WCSELECT';PChr$(-1,16777160);'WCSETCOLOR';NTEPCert$;'0WCSELECT';
  y = y + dy
  Print #chcert;'10FONTSIZE EBOLD WCSETFONT';
  Print #chcert;PChr$(2,75,y,325,y + 15,"View NTEP Certificate",2);'WCBUTTON';
  Print #chcert;'12FONTSIZE EBOLD WCSETFONT';
  Print #chcert;PChr$(1,150,ysize - 30,250,ysize - 5,"OK",2);'WCDEFAULTBTN';
  Print #chcert;'1WCFOCUS';
  Do 
    Input #chcert; Len (1);w$
    Select Case w$
      Case 'F1' ! OK
        Exit Do 
      Case 'F2' ! View Certificate
        temp$ = "iexplore.exe http://www.sysalt.com/NTEP/06-071.pdf"
        System 33,temp$,s
        If s Call SAITouchWarning("Unable to launch Internet Explorer.")
    End Select 
  Loop 
  Close #chcert
End Sub 
Sub ConfigFileInfo()
  Call SAITouchMessage("Config File used:  " + ConfigFile$)
End Sub 
Sub InitializeScreen()
  Print PChr$(90,"&Options","");'WCMENU';
  Print PChr$(61,"&Config File Info","");'WCMENUACTION';
  Print PChr$(62,"&Display Files","");'WCMENUACTION';
  Print PChr$(63,"&Version","");'WCMENUACTION';
  Print 'WCENDMENU';
  Print PChr$(91,"&Help","");'WCMENU';
  Print PChr$(60,"&About Certification","");'WCMENUACTION';
  Print 'WCENDMENU';
  temp$ = "TruckScale Model: SAI ES - Env=" + Environment$ + ", Branch=" + Branch$
  !  if chained=0 Let temp$=temp$+", Station="+Station$
  If Station$ Let temp$ = temp$ + ", Station=" + Station$
  temp$ = temp$ + ", Port=" + Str$(Spc(6))
  temp$ = temp$ + Rep$(" ",10) + NTEPCert$
  Call SAIWindowTitle(-4,temp$)
  Print '12FONTSIZE EBOLD WCSETFONT';
End Sub 
Sub SetupPaymentMethods(DefCashier,NumPaymentMethods)
  NumPaymentMethods = 0
  Clear PaymentMethods$[]
  Clear BankCodes$[]
  ! Get Scrap Code "E" record for Bank Code
  k$ = "E" + Branch$
  Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
  If stat
    k$ = "E  "
    Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
  End If 
  If stat Exit Sub ! No E record, can't setup any payment methods
  n = (DefCashier - 1) * 2 + 1
  For i = 1 To NumPaymentOptions
    For ii = 1 To NumPaymentMethods
      If PaymentOptions$[i] = PaymentMethods$[ii] Goto NextPaymentOption
    Next ii
    Select Case PaymentOptions$[i]
      Case "CASH"
        !         Primary             Secondary             3rd               4th               5th
        temp$ = ScrapCode$[103,104] + ScrapCode$[122,123] + ScrapCode$[89,90] + ScrapCode$[93,94] + ScrapCode$[97,98]
        If Trim$(temp$[n,n + 1])
          NumPaymentMethods = NumPaymentMethods + 1
          PaymentMethods$[NumPaymentMethods] = PaymentOptions$[i]
          PaymentCodes$[NumPaymentMethods] = "R"
          PaymentTypes$[NumPaymentMethods] = "CASH"
          BankCodes$[NumPaymentMethods] = temp$[n,n + 1]
          If RoundCASH$ = ""
            Select Case ScaleCodes$[90,90]
              Case " "
                RoundCASH$ = "0"
              Case "Y"
                RoundCASH$ = Trim$(ScaleCodes$[91,93])
              Case Else 
                RoundCASH$ = ScaleCodes$[90,90] + Trim$(ScaleCodes$[91,93])
            End Select 
          End If 
        End If 
      Case "ATM","CDU"
        temp$ = ScrapCode$[55,64] ! All five are in order
        If Trim$(temp$[n,n + 1])
          NumPaymentMethods = NumPaymentMethods + 1
          PaymentMethods$[NumPaymentMethods] = PaymentOptions$[i]
          PaymentCodes$[NumPaymentMethods] = "A"
          PaymentTypes$[NumPaymentMethods] = "ATM"
          BankCodes$[NumPaymentMethods] = temp$[n,n + 1]
        Else If ScaleCodes$[61,61] <> " " ! Old method of ATM (Use cash bank codes)
          !         Primary             Secondary             3rd               4th               5th
          temp$ = ScrapCode$[103,104] + ScrapCode$[122,123] + ScrapCode$[89,90] + ScrapCode$[93,94] + ScrapCode$[97,98]
          If Trim$(temp$[n,n + 1])
            NumPaymentMethods = NumPaymentMethods + 1
            PaymentMethods$[NumPaymentMethods] = PaymentOptions$[i]
            PaymentCodes$[NumPaymentMethods] = "R"
            PaymentTypes$[NumPaymentMethods] = "ATM"
            BankCodes$[NumPaymentMethods] = temp$[n,n + 1]
          End If 
        End If 
        If RoundATM$ = ""
          Select Case ScaleCodes$[90,90]
            Case " "
              RoundATM$ = "0"
            Case "Y"
              RoundATM$ = Trim$(ScaleCodes$[91,93])
            Case Else 
              RoundATM$ = ScaleCodes$[90,90] + Trim$(ScaleCodes$[91,93])
          End Select 
        End If 
        If PaymentOptions$[i] = "CDU"
          If CDUPrinter$ = "SAME"
            CDUPrinter$ = TicketPrinter$
            If TicketForm$
              CDUPrinterType$ = "LASER"
            Else 
              CDUPrinterType$ = TicketPrinterType$
            End If 
          Else If CDUPrinter$ = "SELECT"
            If CDUPrinterType$ <> "LASER" Let CDUPrinter$ = ""
          End If 
        End If 
      Case "CHECK"
        temp2$ = "Error configuring CHECK as payment option.\15\"
        If CheckPrinter$ = ""
          Call SAITouchError(temp2$ + "No check printer configured.")
          Goto NextPaymentOption
        End If 
        !         Primary             Secondary             3rd               4th               5th
        temp$ = ScrapCode$[110,111] + ScrapCode$[124,125] + ScrapCode$[91,92] + ScrapCode$[95,96] + ScrapCode$[99,100]
        If Trim$(temp$[n,n + 1])
          ktemp$ = "F" + temp$[n,n + 1] + Branch$
          Call SAIGetRecord(ch_070A,recdef_070A.,ktemp$,1,"Y","U",rec_070A,APCode$,APCode[],stat,errmess$)
          If stat
            ktemp$ = "F" + temp$[n,n + 1]
            Call SAIGetRecord(ch_070A,recdef_070A.,ktemp$,1,"Y","U",rec_070A,APCode$,APCode[],stat,errmess$)
          End If 
          If stat
            Call SAITouchError(temp2$ + "Unable to find A/P Bank Codes record.")
            Goto NextPaymentOption
          End If 
          If APCode$[131,131] = " " ! Not configured for Laser Check
            Call SAITouchError(temp2$ + "Bank code not configured for Laser Check.")
            Goto NextPaymentOption
          End If 
          PreNumberedCheck$ = APCode$[131,131] ! P=prenumbered,N=print next seq number
          If PreNumberedCheck$ <> "N" ! Only allow MICR checks for now
            Call SAITouchError(temp2$ + "Bank code not configured for MICR Laser Check.")
            Goto NextPaymentOption
          End If 
          If gbl.MultiCurrency$ = "Y"
            Search #ch_db;"SELECT FundsType FROM Codes_Bank_Code_fx WHERE BankCode=" + SQLV$(APCode$[2,3]) + " AND Branch=" + SQLV$(Branch$)
            If Chf(ch_db)
              Map #ch_db;
              Read #ch_db;ktemp$
              If Trim$(ktemp$) <> gbl.BranchFundsType$
                Call SAITouchError(temp2$ + "Bank Code is not a branch funds account: Funds Type=" + ktemp$)
                Goto NextPaymentOption
              End If 
            End If 
          End If 
          CheckDigitOpt$ = Trim$(APCode$[129,129]) ! Check Digit calculation option
          PrintBankCode$ = APCode$[130,130] ! print bank code as part of check number
          BankAccount$ = RTrim$(APCode$[102,116]) ! bank account number
          If Trim$(BankAccount$) = "" Or APCode[4] = 0
            Call SAITouchError(temp2$ + "No Bank Account No. or Transit No. specified.")
            Goto NextPaymentOption
          End If 
          ! Open lasercheck.ini config file
          ch_config = FindChannel()
          Try 
            Ropen #ch_config,"(charset=ansi)global/config/lasercheck.ini" As "Profile"
          Else 
            Call SAITouchError(temp2$ + "Unable to open lasercheck.ini configuration file.")
            Goto NextPaymentOption
          End Try 
          Try 
            Search #ch_config;Branch$,"ScaleCheckForm",CheckFormName$
            CheckFormName$ = Trim$(CheckFormName$)
            If SAICheckFormExists(CheckFormName$) = 0
              Try Close #ch_config Else Rem
              Call SAITouchError(temp2$ + "Form " + CheckFormName$ + " not found in forms directory.")
              Goto NextPaymentOption
            End If 
          Else 
            Try Close #ch_config Else Rem
            Call SAITouchError(temp2$ + "ScaleCheckForm setting not found in lasercheck.ini.")
            Goto NextPaymentOption
          End Try 
          If SAICheckFormConfigExists(ch_config,CheckFormName$) = 0
            Try Close #ch_config Else Rem
            Call SAITouchError(temp2$ + "Form " + CheckFormName$ + " not configured in lasercheck.ini.")
            Goto NextPaymentOption
          End If 
          Try 
            Search #ch_config;Branch$,"ScaleCheckCopies",w$
            CheckCopies = w$
          Else 
            CheckCopies = 1
          End Try 
          If CheckCopies = 0 Let CheckCopies = 1
          Try 
            Search #ch_config;Branch$,"ScaleCheckSignatureLimit",w$
            CheckSignatureLimit = w$
          Else 
            CheckSignatureLimit = 0
          End Try 
          If CheckSignatureLimit < 0 Let CheckSignatureLimit = 0
          If CheckSignatureLimit
            CheckFormSig$ = CheckFormName$ To ".dpf"
            CheckFormSig$ = CheckFormSig$ + "_sig.dpf"
            If SAICheckFormExists(CheckFormSig$) = 0
              Call SAITouchError(temp2$ + "Pre-signed form not found in forms directory.\15\All checks will be printed unsigned.")
              CheckSignatureLimit = 0
              CheckFormSig$ = ""
            Else If SAICheckFormConfigExists(ch_config,CheckFormSig$) = 0
              Call SAITouchError(temp2$ + "Pre-signed form not configured in lasercheck.ini.\15\All checks will be printed unsigned.")
              CheckSignatureLimit = 0
              CheckFormSig$ = ""
            End If 
          End If 
          ! Look for MICR symbols
          Try 
            Search #ch_config;"MICR_Symbols","ONUS",ONUS$
          Else 
            ONUS$ = "C"
          End Try 
          Try 
            Search #ch_config;"MICR_Symbols","TRANSIT",TRANSIT$
          Else 
            TRANSIT$ = "A"
          End Try 
          Try 
            Search #ch_config;"MICR_Symbols","DASH",DASH$
          Else 
            DASH$ = "D"
          End Try 
          Try Close #ch_config Else Rem
          Call SAIFormatTransitNo(APCode[4],APCode[5],DASH$,TransitNo$) ! Format Transit Number
          ! Look for LaserCheck_Hdr table
          If SAITableExists(ch_db,"LaserCheck_Hdr") = 0
            Call SAITouchError(temp2$ + "Laser Check Database tables do not exist.")
            Goto NextPaymentOption
          End If 
          NumPaymentMethods = NumPaymentMethods + 1
          PaymentMethods$[NumPaymentMethods] = PaymentOptions$[i]
          PaymentCodes$[NumPaymentMethods] = "C"
          PaymentTypes$[NumPaymentMethods] = "CHECK"
          BankCodes$[NumPaymentMethods] = temp$[n,n + 1]
          ! Look for Check comments
          CheckCommentLines = 0
          Clear CheckComments$[]
          ktemp$ = "G" + Rep$(" ",24) + "TSC"
          ksav$ = ktemp$
          Do 
            Search #ch_1115ro,3,1;ktemp$,r,e
            If e Exit Do 
            If ktemp$[1,Len(ksav$)] <> ksav$ Exit Do 
            Call SAIReadRecord(ch_1115ro,recdef_1115.,"Y","U",r,GblCmtTmp$,stat,errmess$)
            If stat = 0
              CheckCommentLines = CheckCommentLines + 1
              CheckComments$[CheckCommentLines] = RTrim$(GblCmtTmp$[31,80])
            End If 
          Loop Until CheckCommentLines = 3
        End If 
      Case "EFT"
        If Trim$(ScrapCode$[126,127]) ! EFT Bank Code
          ! Make sure eft.ini config file exists
          ch_config = FindChannel()
          Try 
            Ropen #ch_config,"global/config/eft.ini" As "Profile"
            Close #ch_config
          Else 
            Call SAITouchError("Error configuring EFT as payment option.\15\Unable to open eft.ini configuration file.")
            Goto NextPaymentOption
          End Try 
          NumPaymentMethods = NumPaymentMethods + 1
          PaymentMethods$[NumPaymentMethods] = PaymentOptions$[i]
          PaymentCodes$[NumPaymentMethods] = "E"
          PaymentTypes$[NumPaymentMethods] = "EFT"
          BankCodes$[NumPaymentMethods] = ScrapCode$[126,127]
        End If 
      Case "PAYCARD"
        Goto NextPaymentOption ! Temporarily disable
        temp$ = ScrapCode$[65,74] ! All five are in order
        If Trim$(temp$[n,n + 1])
          NumPaymentMethods = NumPaymentMethods + 1
          PaymentMethods$[NumPaymentMethods] = PaymentOptions$[i]
          PaymentCodes$[NumPaymentMethods] = "O"
          PaymentTypes$[NumPaymentMethods] = "OTHER"
          BankCodes$[NumPaymentMethods] = temp$[n,n + 1]
        End If 
    End Select 
NextPaymentOption: !
  Next i
End Sub 
Sub ChangeWeighMaster(status)
  w$ = ""
  Call SAIKeyBoardGen("Change " + gbl_WeighMaster$,KBParams.alphacase,3,1,w$,status)
  If status = 0
    w$ = Trim$(w$)
    Call SAIValidateWeighMaster(ch_db,w$,z$[58,61],istatus)
    If istatus = 0
      Search #ch_db;"SELECT * FROM Codes_WeighMaster WHERE WeighMasterCode=" + SQLV$(w$)
      If Chf(ch_db)
        Map Record #ch_db As Codes_WeighMaster
        Read Record #ch_db;CodesWeighMaster.
      Else 
        status = 1
        Exit Sub 
      End If 
      WeighMaster$ = w$
      WMName$ = CodesWeighMaster.Description$
      WMVoid$ = CodesWeighMaster.AllowVoids$
    Else If istatus = -1 ! Password cancelled
      status = 1
    Else If istatus = 99
      Call SAITouchError(gbl_WeighMaster$ + " is not permitted to use this application.")
      status = 1
    Else 
      Call SAITouchError(gbl_WeighMaster$ + " Initials not on file.\15\Please re-enter.")
      status = 1
    End If 
  End If 
End Sub 
Sub ManualWeightAuthorization(status)
  If XTypeInventory(TicketDetail.InventoryCode$,TicketDetail.YardCode$,Branch$) And TicketDetail.MaterialCode$ <> "*MIX"
    status = 0 ! Authorization not required on "X" type inventory items (except for *MIX item)
    Exit Sub 
  Else If TicketHeader.TktMode$ = "T" And AllowTransferManualWt$ = "Y"
    status = 0
    Exit Sub 
  End If 
  w$ = ""
  Call SAIKeyBoardGen("Manual Weight " + gbl_WeighMaster$ + " authorization required",KBParams.alphacase,3,1,w$,status)
  If status = 0
    w$ = Trim$(w$)
    Call SAIValidateWeighMaster(ch_db,w$,"",istatus)
    If istatus = 0
      Search #ch_db;"SELECT * FROM Codes_WeighMaster WHERE WeighMasterCode=" + SQLV$(w$)
      If Chf(ch_db)
        Map Record #ch_db As Codes_WeighMaster
        Read Record #ch_db;CodesWeighMasterTemp.
      Else 
        status = 1
        Exit Sub 
      End If 
      If CodesWeighMasterTemp.ManualWt_Auth = 0
        Call SAITouchWarning(gbl_WeighMaster$ + " not allowed to authorized Manual Weights.")
        status = 1
      Else 
        If ManualWtOverrideCamera$
          ksav$ = WeighMaster$
          WeighMaster$ = w$
          Call ScaleCamera("M",ManualWtOverrideCamera$,"M",0)
          WeighMaster$ = ksav$
        End If 
      End If 
    Else If istatus = -1 ! Password cancelled
      status = 1
    Else 
      Call SAITouchError(gbl_WeighMaster$ + " Initials not on file.")
      status = 1
    End If 
  End If 
End Sub 
Sub LoginScreen(status)
  status = 1
  Print PChr$(2,'F27');'ONCLOSE'; ! Send a Cancel if window closed
  Print '-1FONTCOLOR -2BACKCOLOR CS';
  Print '12FONTSIZE WCSETFONT';
  Print @10,1;'BBOLD BI';"SAI ";'EI';" Truck/Rail Scale System";'EBOLD';@650,1;DateUsing$(Tim#(0),DateformatText$);
  x0 = 20 \ dx = 50
  x = x0 + 10 \ y = 40
  If NumScales
    Print PChr$(16777215);'BACKCOLOR WCSETCOLOR';
    For i = 1 To NumScales
      If ScaleIndicators$[i,i] <> "-"
        Print PChr$(i,x,y,x + dx,y + 25,"  " + ScaleNames$[i,i],2 + 4);'WCRADIO';
      End If 
      x = x + dx + 20
    Next i
    Print 'WCRESETCOLOR';
    ReadScale = DefScale
    If DefScale
      If ScaleIndicators$[DefScale,DefScale] <> "-"
        Print PChr$(DefScale);'WCSELECT';"1"
        Print '0WCSELECT';
      Else 
        DefScale = 0
      End If 
    End If 
  Else 
    Print PChr$(1,x0 + 120,y + 5,x0 + 270,y + 15,"None");'WCLABEL';
  End If 
  Print PChr$(500,x0,y - 15,x0 + 350,y + 30,"Default " + gbl_scale$);'WCGROUP';
  y = y + 50
  x = x0 + 10
  If NumCashiers And NumPaymentOptions > 0
    Print PChr$(16777215);'BACKCOLOR WCSETCOLOR';
    For i = 1 To NumCashiers
      Print PChr$(i + 10,x,y,x + dx,y + 25,"  " + Str$(i),2 + 4);'WCRADIO';
      x = x + dx + 20
    Next i
    Print 'WCRESETCOLOR';
    If DefCashier Print PChr$(DefCashier + 10);'WCSELECT';"1"
    Print '0WCSELECT';
  End If 
  Print PChr$(600,x0,y - 15,x0 + 350,y + 30,"Cashier");'WCGROUP';
  If NumPaymentOptions = 0 Print '600WCDISABLE';
  x = 450
  y = 35
  Print PChr$(20,x,y,x + 200,y + 30,"Processing Date");'WCTEXT';
  Print '20WCSELECT';PChr$(-1,16777215);'WCSETCOLOR 0WCSELECT';
  If ChangeProcessingDate$ <> "N" Print PChr$(21,x + 205,y + 5,x + 290,y + 30,"Change",2);'WCBUTTON';
  y = y + 45
  Print PChr$(22,x,y,x + 200,y + 32,gbl_WeighMaster$ + " Initials",2,3);'WCPRIVATE';
  Print '20WCSELECT CU';SAIDateDisplay$(RunDate$);'0WCSELECT';
  KBParams.alphacase = 1
  KBParams.StartX = 5
  KBParams.StartY = 130
  KBParams.ButtonHeight = 25
  KBParams.ButtonWidth = 50
  KBParams.FontSize1 = 14
  KBParams.FontSize2 = 12
  KBParams.InputElement = 22
  KBParams.IELength = 0
  KBParams.IEMaxChar = 0
  KBParams.FuncBtnLen = 0
  Call SAIDrawKeyboard(-4,KBParams.,0)
  Print PChr$(KBParams.InputElement);'WCFOCUS';
  Do 
    Input #-3; Len (1);w$
    Select Case w$
      Case 'F21'
        If ChangeProcessingDate$ <> "N"
          Call SAITouchCalendar(RunDate$,w$)
          If w$
            If SAIConvertYear$(4,w$[5,6]) + w$[1,2] > FuturePeriodEnd$
              ans = SAITouchYesNo("Processing Date is greater than the Future Period End Date.\15\\15\Is this correct?","Processing Date Warning")
              If ans = 1 Let RunDate$ = w$
            Else 
              RunDate$ = w$
            End If 
            RunDate# = SAIConvertDate#(RunDate$)
            rundatetext$ = DateUsing$(RunDate#,DateformatText$)
            Print '20WCSELECT CU';SAIDateDisplay$(RunDate$);'0WCSELECT';
          End If 
        End If 
      Case 'F60' ! Certification Info
        Call CertificationInfo()
      Case 'F61' ! Config File Info
        Call ConfigFileInfo()
      Case 'F62' ! Display Files
        Call SAIChannelDisplay()
      Case 'F63' ! Version
        Call SAIVersion(ident$,Msc$(9))
      Case Else 
        Call SAIKeyBoardInput(-3,-4,KBParams.,ishift,w$,istring$,istatus)
        If istatus = -1
          status = 1
          Exit Do 
        Else If istatus
          WeighMaster$ = Trim$(SAIQuery$(-1,KBParams.InputElement))
          Call SAIValidateWeighMaster(ch_db,WeighMaster$,z$[58,61],istatus)
          If istatus = 0
            Search #ch_db;"SELECT * FROM Codes_WeighMaster WHERE WeighMasterCode=" + SQLV$(WeighMaster$)
            If Chf(ch_db)
              Map Record #ch_db As Codes_WeighMaster
              Read Record #ch_db;CodesWeighMaster.
            Else 
              status = 1
              Exit Sub 
            End If 
            WMName$ = CodesWeighMaster.Description$
            WMVoid$ = CodesWeighMaster.AllowVoids$
            If NumScales
              For i = 1 To NumScales
                If ScaleIndicators$[i,i] <> "-"
                  w$ = SAIQuery$(-1,i)
                  If w$ = "1"
                    DefScale = i
                    Exit For 
                  End If 
                End If 
              Next i
            End If 
            If NumPaymentOptions And NumCashiers > 0
              If NumCashiers > 1
                Print PChr$(11,10 + NumCashiers);'WCQUERY';
                For i = 1 To NumCashiers
                  Input #-3,1;w$
                  If w$ = "1" Let DefCashier = i
                Next i
              Else 
                DefCashier = 1
              End If 
              Call SetupPaymentMethods(DefCashier,NumPaymentMethods)
              If NumPaymentMethods = 0
                ans = SAITouchConfirm("No payment methods are configured for selected Cashier (" + Str$(DefCashier) + ")")
                If ans
                  status = 0
                  Exit Do 
                End If 
              Else 
                status = 0
                Exit Do 
              End If 
            Else 
              NumPaymentMethods = 0
              status = 0
              Exit Do 
            End If 
          Else If istatus = 99
            Call SAITouchError(gbl_WeighMaster$ + " is not permitted to use this application.")
            status = 1
            Exit Do 
          Else 
            If istatus <> -1 ! Password cancelled
              Call SAITouchError(gbl_WeighMaster$ + " Initials not on file.\15\Please re-enter.")
            End If 
            istring$ = ""
            Print PChr$(KBParams.InputElement);'WCSELECT CU 0WCSELECT';
            Print PChr$(KBParams.InputElement);'WCFOCUS';
          End If 
        End If 
    End Select 
  Loop 
  z$[33,40] = RunDate$[1,2] + "/" + RunDate$[3,4] + "/" + RunDate$[5,6]
  RunDate# = SAIConvertDate#(RunDate$)
  rundatetext$ = DateUsing$(RunDate#,DateformatText$)
End Sub 
Sub MainScreen(screen)
  Call EndOfDayAdjust(status)
  If status = 0 And RunDate$ <> SAIConvertDate$(Tim#(0)) And ChangeProcessingDate$ = "N"
    RunDate# = SAICurrentDate#() ! Use this function instead of Tim#(0) so not affected by TZ
    RunDate$ = SAIConvertDate$(RunDate#)
    rundatetext$ = DateUsing$(RunDate#,DateformatText$)
  End If 
  Print PChr$(2,'F50');'ONCLOSE'; ! Send an Exit if window closed
  Print PChr$(bgcolor);'BACKCOLOR CS';
  Print '12FONTSIZE WCSETFONT';
  Print @10,1;'BBOLD BI';"SAI ";'EI';" Truck/Rail Scale System";'EBOLD';
  If RunDate$ <> SAIConvertDate$(Tim#(0)) Print PChr$(SAIColorRGB(255,0,0));'BACKCOLOR';
  Print @650,1;rundatetext$;
  Print PChr$(bgcolor);'BACKCOLOR';
  Print '10FONTSIZE WCSETFONT';
  bw = 200 \ bh = 30 \ dy = bh + 10 \ y0 = 75
  i = 0
  y = y0
  For r = 1 To 4
    x = 50
    For c = 1 To 3
      i = i + 1
      If screen = 0 Let temp$ = MainButtons$[i] Else Let temp$ = MoreButtons$[i]
      If temp$ = ""
        opt = 1
      Else If temp$[1,1] = "~"
        temp$ = temp$[2] \ opt = 1
      Else 
        opt = 2
      End If 
      e = i + (screen * 12)
      If e = 9 Let e = 25 ! Can't use element 9 as a button
      Print PChr$(e,x,y,x + bw,y + bh,temp$,opt);'WCBUTTON';
      If opt = 1 Print PChr$(e,"");'PGMFN'; ! Disable function key as well
      x = x + 250
    Next c
    y = y + dy
  Next r
  Print '12FONTSIZE EBOLD WCSETFONT';
  If screen = 0 Let temp$ = "More >>" Else Let temp$ = "<< Back"
  Print PChr$(49,570,260,670,285,temp$,2);'WCBUTTON';
  Print PChr$(50,690,260,790,285,"E&xit",2);'WCBUTTON';
  x0 = 210 \ dx = 70
  x = x0 + 20 \ y = 35
  If NumScales
    Print PChr$(SAIColorRGB(193,74,40));'BACKCOLOR WCSETCOLOR';
    For i = 1 To NumScales
      If ScaleIndicators$[i,i] <> "-"
        Print PChr$(i + 30,x,y,x + dx,y + 25,"  " + ScaleNames$[i,i] + "  ",2 + 4);'WCRADIO';
      End If 
      x = x + dx + 20
    Next i
    Print 'WCRESETCOLOR';
    ReadScale = DefScale
    If DefScale
      Print PChr$(DefScale + 30);'WCSELECT';"1"
      Print PChr$(DefScale + 30);'WCFOCUS';
      Print '0WCSELECT';
    Else 
      Print '31WCFOCUS';
    End If 
  Else 
    Print PChr$(bgcolor);'BACKCOLOR WCSETCOLOR';
    Print PChr$(21,x0 + 160,y + 5,x0 + 270,y + 15,"None");'WCLABEL';
  End If 
  Print PChr$(bgcolor);'BACKCOLOR WCSETCOLOR';
  If NumScales = 5
    Print PChr$(500,x0,y - 15,x0 + 470,y + 30,gbl_scale$ + " Selection");'WCGROUP';
  Else 
    Print PChr$(500,x0,y - 15,x0 + 380,y + 30,gbl_scale$ + " Selection");'WCGROUP';
  End If 
  Print '10FONTSIZE WCSETFONT';
  x = x0 - 160
  Print PChr$(47,x,y,x + 150,y + 25,"Logout\15\" + gbl_WeighMaster$,2);'WCBUTTON';
  If NumScales < 5
    x = x0 + 390
    Print PChr$(48,x,y,x + 150,y + 25,"Change\15\" + gbl_WeighMaster$,2);'WCBUTTON';
  End If 
  Print @10,275;"On Duty:  ";WMName$;
  Print 'WCRESETCOLOR';
  Print '12FONTSIZE WCSETFONT';
End Sub 
Sub EndOfDayAdjust(status)
  status = 0
  If EOD_time$ = "" Or EOD_day$ = "" Exit Sub 
  If EOD_First_Only$ = "Y" And Tim(10) <> 1 Exit Sub 
  status = 1
  temp$ = AdjustDate$(EOD_day$,EOD_time$)
  If temp$ = "" Or temp$ = RunDate$ Exit Sub 
  If EOD_Mode$ = "P"
    ans = SAITouchYesNo("Setup indicates your processing date should be " + SAIDateDisplay$(temp$) + ".\15\\15\" + Rep$(" ",15) + "Do you wish to change the date?")
    If ans = 0 Exit Sub 
  End If 
  RunDate$ = temp$
  RunDate# = SAIConvertDate#(RunDate$)
  rundatetext$ = DateUsing$(RunDate#,DateformatText$)
  z$[33,40] = RunDate$[1,2] + "/" + RunDate$[3,4] + "/" + RunDate$[5,6]
End Sub 
Sub SearchID(type$,ID$,w$)
  w$ = ""
  If Trim$(ID$) = "" Exit Sub 
  ! Look first in InYard_ID_Default table
  ktemp$ = type$
  If type$ = "S"
    If WeightOnly
      ktemp$ = "W"
    Else If TransferMode
      ktemp$ = "T"
    End If 
  End If 
  Search #ch_db;"SELECT EntityNo FROM InYard_ID_Default WHERE InYardID=" + SQLV$(ID$) + " AND Branch=" + SQLV$(Branch$) + "AND TktType=" + SQLV$(ktemp$)
  If Chf(ch_db)
    Map #ch_db;
    Read #ch_db;w$
    If type$ = "P" And SupplierDefaultFromID$ = "S" And w$[1,3] = "CP0"
      w$ = "" ! skip
    Else 
      Exit Sub 
    End If 
  End If 
  ! If not found, use 8326
  ktemp$ = SAISpaceFill$(ID$,11)
  Search #ch_8326ro,2,1;ktemp$,r,e
  If e Exit Sub ! ID not found
  m = Tim(9) ! Current month
  y = Tim(16) ! Current Year
  temp$ = m Using "&&"
  temp$ = temp$ + SAIConvertYear$(0,Str$(y))
  ksav$ = SAISpaceFill$(ID$,11)
  For i = 1 To 12
    ktemp$ = ksav$ + temp$[1,2] + "~~~~~~" ! Set key for descending search for current month
    Do 
      Search #ch_8326ro,6,1;ktemp$,r,e
      If e Exit Do 
      If ktemp$[1,Len(ksav$)] <> ksav$ Exit Do 
      If ktemp$[12,13] <> temp$[1,2] Exit Do ! Different month
      If ktemp$[16,17] = temp$[3,4] ! Correct year
        Call SAIReadRecord(ch_8326ro,recdef_8326.,"Y","U",r,ScaleTicAudit$,ScaleTicAudit[],stat,errmess$)
        If stat = 0 And ScaleTicAudit$[120,121] = Branch$
          If ScaleTicAudit$[153,153] = type$
            If type$ = "P" And SupplierDefaultFromID$ = "S" And ScaleTicAudit$[26,28] = "CP0"
              ! skip
            Else 
              w$ = ScaleTicAudit$[26,31]
              Exit Sub 
            End If 
          Else If type$ = "P" And (ScaleTicAudit$[153,153] = "P" Or ScaleTicAudit$[153,153] = "R")
            If ScaleTicAudit$[20,20] = "T"
              If SupplierDefaultFromID$ = "S" And ScaleTicAudit$[26,28] = "CP0"
                ! skip
              Else 
                w$ = ScaleTicAudit$[26,31]
                Exit Sub 
              End If 
            End If 
          Else If type$ = "S" And WeightOnly = 1
            If Pos("GTW", = ScaleTicAudit$[153,153])
              w$ = ScaleTicAudit$[26,31]
              Exit Sub 
            End If 
          End If 
        End If 
      End If 
    Loop 
    m = m - 1
    If m = 0
      m = 12
      y = y - 1
      temp$[3,4] = SAIConvertYear$(0,Str$(y))
    End If 
    temp$[1,2] = m Using "&&"
  Next i
End Sub 
Sub PopulateCustomerAddress()
  TicketHeader.Name$ = Customer.Name$
  TicketHeader.Address1$ = Customer.Address1$
  TicketHeader.Address2$ = Customer.Address2$
  TicketHeader.City$ = Customer.City$
  TicketHeader.State$ = Customer.State$
  TicketHeader.PostCode$ = Customer.PostCode$
  TicketHeader.PhoneNo$ = Customer.PhoneNo$
  TicketHeader.TaxID$ = Customer.TaxID$
  TicketHeader.TaxID2$ = Customer.TaxID2$
End Sub 
Sub PopulateSupplierAddress()
  TicketHeader.Name$ = Supplier.Name$
  TicketHeader.Address1$ = Supplier.Address1$
  TicketHeader.Address2$ = Supplier.Address2$
  TicketHeader.City$ = Supplier.City$
  TicketHeader.State$ = Supplier.State$
  TicketHeader.PostCode$ = Supplier.PostCode$
  TicketHeader.PhoneNo$ = Supplier.PhoneNo$
  TicketHeader.TaxID$ = Supplier.TaxID$
  TicketHeader.TaxID2$ = Supplier.TaxID2$
End Sub 
Sub CheckDoNotBuy(IDNumber$,IDIssuer$,FirstName$,LastName$,DateOfBirth#,status)
  status = 0
  If CheckDoNotBuy$ = "P" Or CheckDoNotBuy$ = "W"
    Call SAICheckDoNotBuyList(ch_db,IDNumber$,IDIssuer$,status,temp2$)
    If status
      temp$ = "Name  : " + temp2$ + "\15\"
      temp$ = temp$ + "ID No.: " + IDNumber$ + "\15\"
      temp$ = temp$ + "Issuer: " + IDIssuer$ + "\15\\15\"
      temp$ = temp$ + "The above individual is listed on the DO NOT BUY List.\15\\15\"
      If CheckDoNotBuy$ = "P"
        temp$ = temp$ + "You are not permitted to buy from this individual!"
        Call SAITouchWarning(temp$)
      Else 
        temp$ = temp$ + "Do you wish to buy from this individual?"
        ans = SAITouchYesNo(temp$,"Warning")
        If ans Let status = 0
      End If 
    End If 
    If status Exit Sub 
  End If 
  If CheckOhioDoNotBuy$ = "P" Or CheckOhioDoNotBuy$ = "W"
    Clear OhioDoNotBuy.
    OhioDoNotBuy.DataEnvironmentName$ = Environment$
    OhioDoNotBuy.FacilityRegNumber$ = OhioFacilityRegNumber$
    OhioDoNotBuy.FirstName$ = FirstName$
    OhioDoNotBuy.LastName$ = LastName$
    If DateOfBirth#
      OhioDoNotBuy.DOB$ = DateUsing$(DateOfBirth#,"YYYY-MM-DD")
    End If 
    OhioDoNotBuy.DLNumber$ = IDNumber$
    OhioDoNotBuy.DLState$ = IDIssuer$
    Call SAICheckOhioDoNotBuy(ch_db,Branch$,CheckOhioDoNotBuy$,OHDNB_Server$,OHDNB_SubmitTo$,OHDNB_APIToken$,OhioDoNotBuy.,DoNotBuy,status,errmess$)
    If DoNotBuy > 0
      status = 1
    Else If DoNotBuy < 0 ! Identity found, but operator chose to continue
      If TicketHeader.TicketNo$
        Call LoadTicketAuditHeader()
        TicketAudit.Event$ = "Ohio DoNotBuy overruled"
        Call WriteTicketAudit()
      End If 
      status = 0
    Else 
      status = 0
    End If 
  End If 
End Sub 
Sub AdvancedIdentityInfo(status)
  TicketList$[1] = TicketHeader.TicketNo$
  ShipDateList$[1] = SAIConvertDate$(TicketHeader.ShipmentDate#)
  PhotoCaptured$ = ""
  Call SAIAdvancedIdentityInfo(z$,ch_db,ConfigFile$,TicketIdentity.,1,TicketList$[],ShipDateList$[],SupplierNo$,WeighMaster$,PhotoCaptured$,status)
  If status = 0
    Call CheckDoNotBuy(TicketIdentity.IDNumber$,TicketIdentity.IDIssuer$,TicketIdentity.FirstName$,TicketIdentity.LastName$,TicketIdentity.DateOfBirth#,status)
    If status Clear TicketIdentity.
  End If 
  If status = 0
    If PhotoCaptured$ = "Y" Let TicketHeader.Photo = 1
    TicketHeader.IDNumber$ = TicketIdentity.IDNumber$
    If TicketHeader.EntityNo$[1,3] = "CP0"
      TicketHeader.Name$ = TicketIdentity.FullName$
      TicketHeader.Address1$ = TicketIdentity.Address1$
      TicketHeader.Address2$ = TicketIdentity.Address2$
      TicketHeader.City$ = TicketIdentity.City$
      TicketHeader.State$ = TicketIdentity.State$
      TicketHeader.PostCode$ = TicketIdentity.PostCode$
      TicketHeader.PhoneNo$ = TicketIdentity.PhoneNo$
      TicketHeader.TaxID$ = TicketIdentity.TaxID$
      TicketHeader.TaxID2$ = TicketIdentity.TaxID2$
      If TicketIdentity.CFCExpirationDate#
        Supplier.SignatureOnFile$ = "Y"
        Supplier.CFCFormDate# = TicketIdentity.CFCExpirationDate#
      Else 
        Clear Supplier.SignatureOnFile$,Supplier.CFCFormDate#
      End If 
      If TicketHeader.TktType$ = "R"
        Try 
          Search #ch_db;"SELECT * FROM Retail_Ticket_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$)
          If Chf(ch_db)
            Map Record #ch_db As Retail_Ticket_Hdr
            Read Record #ch_db;RTicketHdr.
            RTicketHdr.IDNumber$ = TicketIdentity.IDNumber$
            RTicketHdr.SupplierName$ = TicketIdentity.FullName$
            RTicketHdr.Address1$ = TicketIdentity.Address1$
            RTicketHdr.Address2$ = TicketIdentity.Address2$
            RTicketHdr.City$ = TicketIdentity.City$
            RTicketHdr.State$ = TicketIdentity.State$
            RTicketHdr.PostCode$ = TicketIdentity.PostCode$
            RTicketHdr.PhoneNo$ = TicketIdentity.PhoneNo$
            RTicketHdr.TaxID$ = TicketIdentity.TaxID$
            RTicketHdr.TaxID2$ = TicketIdentity.TaxID2$
            Search #ch_db;"UPDATE Retail_Ticket_Hdr SET " + SQLNV$(RTicketHdr.) + " WHERE TicketNo=" + SQLV$(RTicketHdr.TicketNo$)
          End If 
        Else 
        End Try 
      End If 
    End If 
  End If 
End Sub 
Sub CopyPhotos(IDNumber$,TktNo$,stat)
  Clear FieldName$[],FieldValue$[] \ NumFields = 0
  NumFields = NumFields + 1 \ FieldName$[NumFields] = "location" \ FieldValue$[NumFields] = Branch$
  NumFields = NumFields + 1 \ FieldName$[NumFields] = "transaction_type" \ FieldValue$[NumFields] = "P"
  NumFields = NumFields + 1 \ FieldName$[NumFields] = "app_date_time" \ FieldValue$[NumFields] = DateUsing$(Tim#(0),"YYYY-MM-DD HH:NN:SS")
  NumFields = NumFields + 1 \ FieldName$[NumFields] = "branch_code" \ FieldValue$[NumFields] = Branch$
  NumFields = NumFields + 1 \ FieldName$[NumFields] = "initials" \ FieldValue$[NumFields] = WeighMaster$
  Call SAICopyPhotos(IDNumber$,TktNo$,Branch$,JPServer$,NumFields,FieldName$[],FieldValue$[],stat)
End Sub 
Sub SetupIdentity(status)
  status = 0
  Call SAISetTicketIdentity(TicketIdentity.,SupplierID.)
  ksav$ = TicketIdentity.IDNumber$
  If SupplierID.IDPhoto
    TicketIdentity.IDPhoto = SupplierID.IDPhoto
    Call SAILicView(SupplierID.IDNumber$,PhotoURL$)
  End If 
  If SupplierID.FingerPrint Let TicketIdentity.FingerPrint = 1
  If TicketHeader.TicketNo$
    TicketIdentity.TicketNo$ = TicketHeader.TicketNo$
    TicketIdentity.ShipmentDate# = TicketHeader.ShipmentDate#
    TicketIdentity.Branch$ = TicketHeader.Branch$
    Try Search #ch_db;"REPLACE Pur_Ticket_Identity (" + SQLN$(TicketIdentity.) + ") VALUES (" + SQLV$(TicketIdentity.) + ")" Else Rem
    Call AdvancedIdentityInfo(status)
    If status = 0 And ksav$ = TicketIdentity.IDNumber$ ! IDNumber did not change
      If DisableSavedPhotoAutoCopy$ <> "Y"
        Call CopyPhotos(TicketIdentity.IDNumber$,TicketIdentity.TicketNo$,stat)
      End If 
    Else 
      Try Search #ch_db;"DELETE FROM Pur_Ticket_Identity WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#) Else Rem
    End If 
  Else 
    Clear TicketList$[],ShipDateList$[],PhotoCaptured$
    Call SAIAdvancedIdentityInfo(z$,ch_db,ConfigFile$,TicketIdentity.,0,TicketList$[],ShipDateList$[],SupplierID.SupplierNo$,WeighMaster$,PhotoCaptured$,status)
  End If 
  If status
    Clear TicketIdentity.
  Else 
    SupplierNo$ = SupplierID.SupplierNo$
    If SupplierNo$ = "******" Let SupplierNo$ = BranchPeddlerNo$
    Try Search #ch_db;"UPDATE Supplier_ID SET DateLastUsed=" + SQLV$(Tim#(0)) + ", SET BranchLastUsed=" + SQLV$(Branch$) + " WHERE rowid=" + SQLV$(SupplierID.rowid) Else Rem
  End If 
End Sub 
Sub CurbSideCitySearch(klist$)
  icount = 0
  Clear ilistsel$[]
  If ilistcur > ilistmax
    ilistmax = ilistmax + 10
    Dim ilist$[ilistmax,ilistlen]
  End If 
  ilist$[ilistcur] = klist$
  Print #chlist;PChr$(1,3);'WCDISABLE';
  Print #chlist;PChr$(30,29 + imax);'WCDELETE';
  Do 
    Search #ch_07XY,3,1;klist$,r,e
    If e Exit Do 
    If klist$[1,6] <> SAISpaceFill$(Supplier.SupplierNo$,6)
      e = 1
      Exit Do 
    End If 
    Call SAIReadRecord(ch_07XY,recdef_110A.,"Y","U",r,CurbSide$,CurbSide[],e,errmess$)
    If e
      Call SAITouchError(errmess$)
    Else 
      temp$ = CurbSide$[7,8] + " - " + CurbSide$[242,266]
      temp$ = Replace$(temp$,"&","&&")
      Print #chlist;PChr$(icount + 30,10,5 + (icount * 30),ilistw - 10,(icount + 1) * 30,temp$,2);'WCBUTTON';
      ilistsel$[icount] = CurbSide$[1,8]
      icount = icount + 1
    End If 
  Loop Until icount = imax
  Print #chlist;PChr$(1,3);'WCENABLE';
  If e Print #chlist;'2WCDISABLE';
  If ilistcur = 0 Print #chlist;'1WCDISABLE';
  If icount = 0
    Print #chlist;'3WCFOCUS';
  Else 
    Print #chlist;'30WCFOCUS';
  End If 
End Sub 
Sub ListCurbSideCities(CurbSideCity$,ExitStatus)
  Clear CurbSideCity$,ExitStatus
  If ScrapSRecord$[69,70] <> "CA" Or CurbSideFile = 0 Exit Sub 
  Try 
    Search #ch_db;"SELECT CurbsideSupplier FROM Codes_Account_Type WHERE AccountType=" + SQLV$(Supplier.AccountType$)
    If Chf(ch_db)
      Map #ch_db;
      Read #ch_db;x
      If x = 0 Exit Sub 
    Else 
      Exit Sub 
    End If 
  Else 
    Exit Sub 
  End Try 
  imax = 9
  Clear ilist$[]
  ilistcur = 0
  ilistw = 550
  Call SAITouchButtonList(chlist,imax,ilistw,"Cities on file for Supplier " + Supplier.SupplierNo$)
  klist$ = SAISpaceFill$(Supplier.SupplierNo$,6)
  Call CurbSideCitySearch(klist$)
  Do 
    Input #chlist; Len (1);w$
    Select Case w$
      Case 'F1' ! Previous
        If ilistcur > 0
          ilistcur = ilistcur - 1
          klist$ = ilist$[ilistcur]
          Call CurbSideCitySearch(klist$)
        End If 
      Case 'F2' ! Next
        ilistcur = ilistcur + 1
        Call CurbSideCitySearch(klist$)
      Case 'F3' ! Cancel
        ExitStatus = 1
        Exit Do 
      Case 'F30' To 'F39'
        i = Asc(w$) - Asc('F30')
        CurbSideCity$ = ilistsel$[i][7,8]
        ExitStatus = 0
        Exit Do 
    End Select 
  Loop 
  Close #chlist
End Sub 
Sub GetAutoTare(TareWt,status)
  TareWt = 0
  status = 0
  If Trim$(TicketHeader.VehNo$)
    If VehPrefixLen = 0
      ksav$ = "L" + SAISpaceFill$(TicketHeader.VehNo$,6)
    Else 
      If Len(TicketHeader.VehNo$) > VehPrefixLen
        ksav$ = "L" + SAISpaceFill$(TicketHeader.VehNo$[VehPrefixLen + 1],6)
      Else 
        status = 1
      End If 
    End If 
  Else 
    status = 1
  End If 
  If status Exit Sub 
  status = 1
  If TicketHeader.CarrierNo$
    ktemp$ = ksav$ + TicketHeader.CarrierNo$
    Call SAIGetRecord(ch_110Aro,recdef_110A.,ktemp$,1,"Y","U",r,ScrapCode$,ScrapCode[],status,errmess$)
  End If 
  If status
    ktemp$ = ksav$ + TicketHeader.EntityNo$
    Call SAIGetRecord(ch_110Aro,recdef_110A.,ktemp$,1,"Y","U",r,ScrapCode$,ScrapCode[],status,errmess$)
  End If 
  If status
    ktemp$ = ksav$ + "000000"
    Call SAIGetRecord(ch_110Aro,recdef_110A.,ktemp$,1,"Y","U",r,ScrapCode$,ScrapCode[],status,errmess$)
  End If 
  If status
    ktemp$ = ksav$ + Rep$(" ",6)
    Call SAIGetRecord(ch_110Aro,recdef_110A.,ktemp$,1,"Y","U",r,ScrapCode$,ScrapCode[],status,errmess$)
  End If 
  If status = 0
    If RunDate$[5,6] + RunDate$[1,4] > ScrapCode$[46,47] + ScrapCode$[42,45]
      status = 1
    Else 
      TareWt = ScrapCode[0]
    End If 
  End If 
End Sub 
Sub GetSVLAInfo(status)
  chsv = SAIOpenWindow("L.A. Info",600,230,1)
  Print #chsv;PChr$("Arial");'FONTFACE';
  Print #chsv;PChr$(bgcolor1);'BACKCOLOR CS';
  Print #chsv;'WCSETCOLOR';
  Print #chsv;'12FONTSIZE BBOLD WCSETFONT';
  y = 10
  Print #chsv;PChr$(100,150,y,500,y + 18,"City of Los Angeles Information");'WCLABEL';
  Print #chsv;'EBOLD WCSETFONT';
  dy = 30
  x0 = 50 \ x1 = 220 \ bw = 100
  y = y + dy \ dx = 300
  Print #chsv;PChr$(110,x0,y,x1,y + 14,"Driver's Name:");'WCLABEL';
  Print #chsv;PChr$(10,x1,y - 1,x1 + dx,y + 14,"",2,15);'WCSTRING 10WCSELECT WCRESETCOLOR 0WCSELECT';
  !  x=x1+dx+5
  !  print #chsv;PChr$(30,x,y-5,x+bw,y+20,"Keyboard",0);'WCBUTTON';
  y = y + dy \ dx = 70
  Print #chsv;PChr$(111,x0,y,x1,y + 14,"District:");'WCLABEL';
  Print #chsv;PChr$(11,x1,y - 1,x1 + dx,y + 14,"",2,2);'WCSTRING 11WCSELECT WCRESETCOLOR 0WCSELECT';
  !  x=x1+dx+5
  !  print #chsv;PChr$(31,x,y-5,x+bw,y+20,"Keyboard",0);'WCBUTTON';
  y = y + dy \ dx = 120
  Print #chsv;PChr$(112,x0,y,x1,y + 14,"Route:");'WCLABEL';
  Print #chsv;PChr$(12,x1,y - 1,x1 + dx,y + 14,"",2,5);'WCSTRING 12WCSELECT WCRESETCOLOR 0WCSELECT';
  !  x=x1+dx+5
  !  print #chsv;PChr$(32,x,y-5,x+bw,y+20,"Keyboard",0);'WCBUTTON';
  y = y + dy \ dx = 35
  Print #chsv;PChr$(113,x0,y,x1,y + 14,"Section:");'WCLABEL';
  Print #chsv;PChr$(13,x1,y - 1,x1 + dx,y + 14,"",2,1);'WCSTRING 13WCSELECT WCRESETCOLOR 0WCSELECT';
  !  x=x1+dx+5
  !  print #chsv;PChr$(33,x1+dx+5,y-5,x1+dx+5+bw,y+20,"Keyboard",0);'WCBUTTON';
  Print #chsv;'WCRESETCOLOR WCSETFONT';
  y = y + dy + 20
  Call SAIButtons(chsv,2,1,"Submit~Cancel",600,y,25,100,20)
  ! Populate Fields
  If TicketHeader.LAInfo_DriversName$ Print #chsv;'10WCSELECT CU';TicketHeader.LAInfo_DriversName$;
  If TicketHeader.LAInfo_District$ Print #chsv;'11WCSELECT CU';TicketHeader.LAInfo_District$;
  If TicketHeader.LAInfo_Route$ Print #chsv;'12WCSELECT CU';TicketHeader.LAInfo_Route$;
  If TicketHeader.LAInfo_Section$ Print #chsv;'13WCSELECT CU';TicketHeader.LAInfo_Section$;
  Print #chsv;'0WCSELECT 10BEGIN';
  Do 
    Input #chsv; Len (1);w$
    Select Case w$
      Case 'F1' ! Submit
        Print #chsv;PChr$(10,13);'WCQUERY';
        TicketHeader.LAInfo_DriversName$ = SAIQueryInput$(chsv,0)
        TicketHeader.LAInfo_District$ = SAIQueryInput$(chsv,0)
        TicketHeader.LAInfo_Route$ = SAIQueryInput$(chsv,0)
        TicketHeader.LAInfo_Section$ = SAIQueryInput$(chsv,0)
        status = 0
        Exit Do 
      Case 'F2' ! Cancel
        status = 1
        Exit Do 
    End Select 
  Loop 
  Close #chsv
End Sub 
Sub SaveFrequents(status)
  status = 0
  Try 
    ch = FindChannel()
    Build #ch,"global/frequents/" + ConfigFile$ + "!" As "Text"
  Else 
    status = 1
    Exit Sub 
  End Try 
  Print #ch;"; Frequent settings for: " + ConfigFile$
  Print #ch;"; Created ";DateUsing$(Tim#(0),DateFormat1$);" by ";user$
  Print #ch;
  Print #ch;"[FrequentSuppliers]"
  For i = 1 To 9
    If FreqSupplier.[i].EntityNo$
      Print #ch;Str$(i);"=";FreqSupplier.[i].EntityNo$
      Print #ch;"Name=";FreqSupplier.[i].Name$
      Print #ch;"BtnColor=";Str$(FreqSupplier.[i].BtnColor)
    End If 
  Next i
  Print #ch;
  Print #ch;"[FrequentCustomers]"
  For i = 1 To 9
    If FreqCustomer.[i].EntityNo$
      Print #ch;Str$(i);"=";FreqCustomer.[i].EntityNo$
      Print #ch;"Name=";FreqCustomer.[i].Name$
      Print #ch;"BtnColor=";Str$(FreqCustomer.[i].BtnColor)
    End If 
  Next i
  Print #ch;
  Print #ch;"[FrequentInterCoCustomers]"
  For i = 1 To 9
    If FreqIntCustomer.[i].EntityNo$
      Print #ch;Str$(i);"=";FreqIntCustomer.[i].EntityNo$
      Print #ch;"Name=";FreqIntCustomer.[i].Name$
      Print #ch;"BtnColor=";Str$(FreqIntCustomer.[i].BtnColor)
    End If 
  Next i
  Print #ch;
  Print #ch;"[FrequentCarriers]"
  For i = 1 To 9
    If FreqCarrier.[i].EntityNo$
      Print #ch;Str$(i);"=";FreqCarrier.[i].EntityNo$
      Print #ch;"Name=";FreqCarrier.[i].Name$
      Print #ch;"BtnColor=";Str$(FreqCarrier.[i].BtnColor)
    End If 
  Next i
  Print #ch;
  Print #ch;"[MaterialList]"
  For i = 1 To FreqMaterialMax
    Print #ch;"Code=";FreqMaterial.[i].MaterialCode$
    If FreqMaterial.[i].MaterialDesc$ Print #ch;"Name=";FreqMaterial.[i].MaterialDesc$
    If FreqMaterial.[i].BtnColor Print #ch;"BtnColor=";Str$(FreqMaterial.[i].BtnColor)
  Next i
  For n = 1 To NumMatGroups
    Print #ch;
    Print #ch;MatGroups$[n]
    For i = 1 To MatGroupNum[n]
      Print #ch;"Code=";GroupMaterial.[n,i].MaterialCode$
      If GroupMaterial.[n,i].MaterialDesc$ Print #ch;"Name=";GroupMaterial.[n,i].MaterialDesc$
      If GroupMaterial.[n,i].BtnColor Print #ch;"BtnColor=";Str$(GroupMaterial.[n,i].BtnColor)
    Next i
  Next n
  Close #ch
  status = 0
End Sub 
Sub FreqMaterialSearch(k$)
  icount = 0
  If ilistcur > ilistmax
    ilistmax = ilistmax + 10
    Dim ilist$[ilistmax,ilistlen]
  End If 
  ilist$[ilistcur] = k$
  Print #chlist;PChr$(1,3);'WCDISABLE';
  Print #chlist;PChr$(30,29 + imax);'WCDELETE';
  SQL$ = "SELECT * FROM Purchase_Material_Price WHERE SupplierNo=" + SQLV$("CP000*") + " AND Branch=" + SQLV$(Branch$)
  If ilistcur = 0 And k$
    SQL$ = SQL$ + " AND MaterialCode >= " + SQLV$(k$)
  Else 
    SQL$ = SQL$ + " AND MaterialCode > " + SQLV$(k$)
  End If 
  If gbl.MultiCurrency$ = "Y"
    !    SQL$=SQL$+" AND FundsType="+SQLV$(TicketHeader.FundsType$)
  End If 
  SQL$ = SQL$ + " ORDER BY MaterialCode"
  Search #ch_db;SQL$
  nr = Chf(ch_db)
  If nr
    Map Record #ch_db As Purchase_Material_Price
    For n = 1 To nr
      Read Record #ch_db;PMatPrice.
      If PMatPrice.MaterialCode$[1,2] <> "*M"
        temp$ = SAISpaceFill$(PMatPrice.MaterialCode$,8) + " - " + SAISpaceFill$(PMatPrice.MaterialDesc$,30)
        temp$ = Replace$(temp$,"&","&&")
        opt = 2
        Print #chlist;PChr$(icount + 30,10,5 + (icount * 30),ilistw - 10,(icount + 1) * 30,temp$,opt);'WCBUTTON';
        ilistsel$[icount] = PMatPrice.MaterialCode$
        icount = icount + 1
      End If 
      If icount = imax Exit For 
    Next n
    k$ = PMatPrice.MaterialCode$
  End If 
  Print #chlist;PChr$(1,3);'WCENABLE';
  If n >= nr Print #chlist;'2WCDISABLE';
  If ilistcur = 0 Print #chlist;'1WCDISABLE';
  Print #chlist;'3WCFOCUS';
End Sub 
Sub ListFreqMaterials(k$,status)
  imax = 9
  Clear ilist$[]
  ilistcur = 0
  ilistw = 700
  Call SAITouchButtonList(chlist,imax,ilistw,"List Materials")
  Call FreqMaterialSearch(k$)
  Do 
    Input #chlist; Len (1);w$
    Select Case w$
      Case 'F1' ! Previous
        If ilistcur > 0
          ilistcur = ilistcur - 1
          k$ = ilist$[ilistcur]
          Call FreqMaterialSearch(k$)
        End If 
      Case 'F2' ! Next
        ilistcur = ilistcur + 1
        Call FreqMaterialSearch(k$)
      Case 'F3' ! Cancel
        status = 1
        Exit Do 
      Case 'F30' To 'F39'
        n = Asc(w$) - Asc('F30')
        w$ = ilistsel$[n]
        status = 0
        Exit Do 
    End Select 
  Loop 
  Close #chlist
End Sub 
Sub InsertEditFreqMaterialGroupMate(mode$,GrpNo,i,status)
  chgrpm = SAIOpenWindow(mode$ + " Group Frequent Material",600,160,1)
  Print #chgrpm;SAIArialFont$();
  Print #chgrpm;'12FONTSIZE EBOLD WCRESETCOLOR WCSETFONT';
  y = 10 \ dy = 30
  x0 = 20 \ x1 = x0 + 150 \ dx = 150
  Print #chgrpm;PChr$(220,x0,y,x1,y + 14,"Material Code:");'WCLABEL';
  Print #chgrpm;PChr$(20,x1,y,x1 + dx,y + 14,"",2,8);'WCSTRING';
  x = x1 + dx + 10
  Print #chgrpm;PChr$(30,x,y - 5,x + 100,y + 20,"List");'WCBUTTON';
  y = y + dy \ dx = 400
  If EditMaterialDesc$ = "Y"
    y = y + 10
    Print #chgrpm;PChr$(221,x0,y,x1,y + 14,"Description:");'WCLABEL';
    Print #chgrpm;PChr$(21,x1,y,x1 + dx,y + 14,"",2,20);'WCSTRING';
    Print #chgrpm;'8FONTSIZE WCSETFONT';PChr$(321,x1,y - 10,x1 + dx,y,"(Only if you want to override normal description)");'WCLABEL';
    Print #chgrpm;'12FONTSIZE WCSETFONT';
  Else 
    Print #chgrpm;PChr$(221,x0,y,x1,y + 14,"Description:");'WCLABEL';
    Print #chgrpm;PChr$(21,x1,y,x1 + dx,y + 14,"",2,20);'WCSTRING';
    Print #chgrpm;'21WCDISABLE';
  End If 
  y = y + dy \ dx = 100
  Print #chgrpm;PChr$(222,x0,y,x1,y + 14,"Button Color:");'WCLABEL';
  Print #chgrpm;PChr$(22,x1,y,x1 + dx,y + 14,"");'WCTEXT';
  x = x1 + dx + 10
  Print #chgrpm;PChr$(31,x,y - 5,x + 100,y + 20,"Select");'WCBUTTON';
  x = x + 110
  Print #chgrpm;PChr$(32,x,y - 5,x + 100,y + 20,"Default");'WCBUTTON';
  y = y + dy + 20
  Call SAIButtons(chgrpm,2,1,"Submit~Cancel",550,y,25,100,20)
  Clear FreqMaterial.[0]
  If mode$ = "Edit"
    FreqMaterial.[0] = GroupMaterial.[GrpNo,i]
    Print #chgrpm;'20WCSELECT';FreqMaterial.[0].MaterialCode$
    Print #chgrpm;'21WCSELECT';FreqMaterial.[0].MaterialDesc$
    If FreqMaterial.[0].BtnColor > 0
      Print #chgrpm;'22WCSELECT';PChr$(-1,FreqMaterial.[0].BtnColor);'WCSETCOLOR';
    End If 
    Print #chgrpm;'0WCSELECT';
  End If 
  Print #chgrpm;'20WCFOCUS';
  Do 
    Input #chgrpm; Len (1);w$
    Select Case w$
      Case 'F1' ! Submit
        Print #chgrpm;PChr$(20,21);'WCQUERY';
        FreqMaterial.[0].MaterialCode$ = SAIQueryInput$(-1,0)
        FreqMaterial.[0].MaterialDesc$ = SAIQueryInput$(-1,0)
        If FreqMaterial.[0].MaterialCode$
          If IsMaterialGroup(FreqMaterial.[0].MaterialCode$)
            Call SAITouchWarning("Cannot define a Group within a Group.")
            stat = 1
          Else 
            SQL$ = "SELECT * FROM Purchase_Material_Price WHERE SupplierNo=" + SQLV$("CP000*") + " AND Branch=" + SQLV$(Branch$)
            SQL$ = SQL$ + " AND MaterialCode=" + SQLV$(FreqMaterial.[0].MaterialCode$)
            Search #ch_db;SQL$
            nr = Chf(ch_db)
            If nr = 0
              ans = SAITouchYesNo("Material Code does not exist in this Branch.\15\\15\Do you still wish to store it?")
              If ans Let stat = 0 Else Let stat = 1
            Else 
              stat = 0
            End If 
          End If 
        Else 
          ans = SAITouchYesNo("Are you sure you want " + mode$ + " an empty Material Code?")
          If ans
            stat = 0 ! Allow blank code
          Else 
            stat = 1
          End If 
        End If 
        If stat = 0
          If mode$ = "Insert"
            If i = 0
              If MatGroupNum[GrpNo] = 0
                MatGroupNum[GrpNo] = MatGroupNum[GrpNo] + 1
                GroupMaterial.[GrpNo,MatGroupNum[GrpNo]] = FreqMaterial.[0]
              Else 
                For n = MatGroupNum[GrpNo] To 1 Step -1
                  GroupMaterial.[GrpNo,n + 1] = GroupMaterial.[GrpNo,n]
                Next n
                GroupMaterial.[GrpNo,1] = FreqMaterial.[0]
                MatGroupNum[GrpNo] = MatGroupNum[GrpNo] + 1
              End If 
            Else If i > MatGroupNum[GrpNo]
              MatGroupNum[GrpNo] = MatGroupNum[GrpNo] + 1
              GroupMaterial.[GrpNo,MatGroupNum[GrpNo]] = FreqMaterial.[0]
            Else 
              For n = MatGroupNum[GrpNo] To i Step -1
                GroupMaterial.[GrpNo,n + 1] = GroupMaterial.[GrpNo,n]
              Next n
              GroupMaterial.[GrpNo,i] = FreqMaterial.[0]
              MatGroupNum[GrpNo] = MatGroupNum[GrpNo] + 1
            End If 
          Else If mode$ = "Edit"
            GroupMaterial.[GrpNo,i] = FreqMaterial.[0]
          End If 
          Clear FreqMaterial.[0]
          ichanges = 1
          status = 0
          Exit Do 
        End If 
      Case 'F2' ! Cancel
        status = 1
        Exit Do 
      Case 'F30'
        k$ = Trim$(SAIQuery$(chgrpm,20))
        Call ListFreqMaterials(k$,status)
        If status = 0
          Print #chgrpm;'20WCSELECT CU';w$;'0WCSELECT';
        End If 
      Case 'F31' ! Select Color
        Print #chgrpm;PChr$(rgb[0]);'WCASKCOLOR';
        Input #chgrpm,1;w$
        If w$
          FreqMaterial.[0].BtnColor = w$
          If FreqMaterial.[0].BtnColor = 0 ! Black = default
            Print #chgrpm;'22WCSELECT WCRESETCOLOR 0WCSELECT';
          Else 
            Print #chgrpm;'22WCSELECT';PChr$(-1,FreqMaterial.[0].BtnColor);'WCSETCOLOR 0WCSELECT';
          End If 
        End If 
      Case 'F32' ! Default Color
        Print #chgrpm;'22WCSELECT WCRESETCOLOR 0WCSELECT';
        FreqMaterial.[0].BtnColor = 0
    End Select 
  Loop 
  Close #chgrpm
End Sub 
Sub DisplayFreqMaterialGroup(GrpNo)
  Print #chgrp;'10WCSELECT CU';
  For n = 1 To MatGroupNum[GrpNo]
    Print #chgrp;Str$(n);'HT';
    If GroupMaterial.[GrpNo,n].BtnColor > 0
      Print #chgrp;PChr$(GroupMaterial.[GrpNo,n].BtnColor);'BACKCOLOR';
    Else 
      Print #chgrp;'WCRESETCOLOR';
    End If 
    Print #chgrp;SAISpaceFill$(GroupMaterial.[GrpNo,n].MaterialCode$,8);": ";
    If GroupMaterial.[GrpNo,n].MaterialDesc$
      Print #chgrp;GroupMaterial.[GrpNo,n].MaterialDesc$
    Else If GroupMaterial.[GrpNo,n].MaterialCode$
      SQL$ = "SELECT MaterialDesc FROM Purchase_Material_Price WHERE SupplierNo=" + SQLV$("CP000*") + " AND MaterialCode=" + SQLV$(GroupMaterial.[GrpNo,n].MaterialCode$) + " AND Branch=" + SQLV$(Branch$)
      Search #ch_db;SQL$
      If Chf(ch_db)
        Map #ch_db;
        Read #ch_db;temp$
        Print #chgrp;temp$
      Else 
        Print #chgrp;
      End If 
    Else 
      Print #chgrp;
    End If 
  Next n
  Print #chgrp;'WCRESETCOLOR';
  Print #chgrp;'11WCSELECT CU';Str$(MatGroupNum[GrpNo]);" entries";'0WCSELECT';
End Sub 
Sub EditFreqMaterialGroupList(GrpNo,status)
  chgrp = SAIOpenWindow("Edit Frequent Material Group " + FreqMaterial.[0].MaterialCode$,800,290,1)
  x0 = 10 \ y0 = 10
  Print #chgrp;SAIMonoFont$();
  Print #chgrp;'12FONTSIZE EBOLD WCSETFONT';
  dy = 200
  Print #chgrp;PChr$(10,x0,y0,x0 + 600,275,"Frequent Group Materials for " + FreqMaterial.[0].MaterialCode$,2 + 16);'WCLIST';
  Print #chgrp;SAIArialFont$();
  Print #chgrp;'8FONTSIZE WCSETFONT';PChr$(11,x0,276,x0 + 120,288,"");'WCTEXT';
  Print #chgrp;PChr$(12,x0 + 130,278,x0 + 230,288,"(16 Max.)");'WCLABEL 12FONTSIZE WCSETFONT'
  Call DisplayFreqMaterialGroup(GrpNo)
  y = 30 \ dy = 27
  x = 630 \ dx = 150
  Print #chgrp;PChr$(1,x,y,x + dx,y + 25,"Insert Before",2);'WCBUTTON';
  y = y + dy
  Print #chgrp;PChr$(2,x,y,x + dx,y + 25,"Insert After",2);'WCBUTTON';
  y = y + dy
  Print #chgrp;PChr$(3,x,y,x + dx,y + 25,"Edit **",2);'WCBUTTON';
  Print #chgrp;PChr$(10,2,'F3');'WCACTION'; ! Set double-click action
  y = y + dy
  Print #chgrp;PChr$(4,x,y,x + dx,y + 25,"Delete",2);'WCBUTTON';
  y = y + dy + 20
  Print #chgrp;PChr$(5,x,y,x + dx,y + 25,"Move Up",2);'WCBUTTON';
  y = y + dy
  Print #chgrp;PChr$(6,x,y,x + dx,y + 25,"Move Down",2);'WCBUTTON';
  y = 250
  Print #chgrp;PChr$(7,x,y,x + dx,y + 25,"Done",2);'WCBUTTON';
  Do 
    Input #chgrp; Len (1);w$
    Select Case w$
      Case 'F1','F2' ! Insert Before/After
        temp$ = SAIQuery$(chgrp,10)
        If temp$ = "" And MatGroupNum[GrpNo] = 1 Let temp$ = "1"
        If temp$ = "" And MatGroupNum[GrpNo] > 0
          Call SAITouchWarning("You must first select a row.")
        Else 
          If MatGroupNum[GrpNo] = 16
            Call SAITouchWarning("Cannot have more than 16 Materials to a Group.")
          Else 
            i = temp$
            If MatGroupNum[GrpNo] > 0 And w$ = 'F2' Let i = i + 1 ! After
            Call InsertEditFreqMaterialGroupMate("Insert",GrpNo,i,status)
            If status = 0
              Call DisplayFreqMaterialGroup(GrpNo)
              Print #chgrp;'10WCSELECT';PChr$(i - 1);'WCMARK 0WCSELECT';
            End If 
          End If 
        End If 
      Case 'F3' ! Edit
        w$ = SAIQuery$(chgrp,10)
        If w$ = ""
          Call SAITouchWarning("You must first select a row.")
        Else 
          i = w$
          Call InsertEditFreqMaterialGroupMate("Edit",GrpNo,i,status)
          If status = 0 Call DisplayFreqMaterialGroup(GrpNo)
        End If 
      Case 'F4' ! Delete
        w$ = SAIQuery$(chgrp,10)
        If w$ = ""
          Call SAITouchWarning("You must first select a row.")
        Else 
          ans = SAITouchConfirm("Are you sure you want to delete this item?")
          If ans
            i = w$
            If i < MatGroupNum[GrpNo]
              For n = i To MatGroupNum[GrpNo] - 1
                GroupMaterial.[GrpNo,n] = GroupMaterial.[GrpNo,n + 1]
              Next n
            End If 
            Clear GroupMaterial.[GrpNo,MatGroupNum[GrpNo]]
            MatGroupNum[GrpNo] = MatGroupNum[GrpNo] - 1
            Call DisplayFreqMaterialGroup(GrpNo)
            ichanges = 1
          End If 
        End If 
      Case 'F5' ! Move Up
        w$ = SAIQuery$(chgrp,10)
        If w$ = ""
          Call SAITouchWarning("You must first select a row.")
        Else 
          i = w$
          If i > 1
            FreqMaterial.[0] = GroupMaterial.[GrpNo,i - 1]
            GroupMaterial.[GrpNo,i - 1] = GroupMaterial.[GrpNo,i]
            GroupMaterial.[GrpNo,i] = FreqMaterial.[0]
            Clear FreqMaterial.[0]
            Call DisplayFreqMaterialGroup(GrpNo)
            Print #chgrp;'10WCSELECT';PChr$(i - 2);'WCMARK 0WCSELECT';
            ichanges = 1
          End If 
        End If 
      Case 'F6' ! Move Down
        w$ = SAIQuery$(chgrp,10)
        If w$ = ""
          Call SAITouchWarning("You must first select a row.")
        Else 
          i = w$
          If i < MatGroupNum[GrpNo]
            FreqMaterial.[0] = GroupMaterial.[GrpNo,i + 1]
            GroupMaterial.[GrpNo,i + 1] = GroupMaterial.[GrpNo,i]
            GroupMaterial.[GrpNo,i] = FreqMaterial.[0]
            Clear FreqMaterial.[0]
            Call DisplayFreqMaterialGroup(GrpNo)
            Print #chgrp;'10WCSELECT';PChr$(i);'WCMARK 0WCSELECT';
            ichanges = 1
          End If 
        End If 
      Case 'F7' ! Done
        Exit Do 
    End Select 
  Loop 
  Close #chgrp
End Sub 
Sub AddEditFreqMaterialGroup(mode$,isav,status)
  chfme = SAIOpenWindow(mode$ + " Frequent Material Group",600,170,1)
  Print #chfme;SAIArialFont$();
  Print #chfme;'12FONTSIZE EBOLD WCRESETCOLOR WCSETFONT';
  y = 10 \ dy = 30
  x0 = 20 \ x1 = x0 + 150 \ dx = 150
  Print #chfme;PChr$(220,x0,y,x1,y + 14,"Group Code:");'WCLABEL';
  Print #chfme;PChr$(20,x1,y,x1 + dx,y + 14,"",2,6);'WCSTRING';
  x = x1 + dx + 10
  y = y + dy \ dx = 400
  Print #chfme;PChr$(221,x0,y,x1,y + 14,"Description:");'WCLABEL';
  Print #chfme;PChr$(21,x1,y,x1 + dx,y + 14,"",2,20);'WCSTRING';
  y = y + dy \ dx = 100
  Print #chfme;PChr$(222,x0,y,x1,y + 14,"Button Color:");'WCLABEL';
  Print #chfme;PChr$(22,x1,y,x1 + dx,y + 14,"");'WCTEXT';
  x = x1 + dx + 10
  Print #chfme;PChr$(31,x,y - 5,x + 100,y + 20,"Select");'WCBUTTON';
  x = x + 110
  Print #chfme;PChr$(32,x,y - 5,x + 100,y + 20,"Default");'WCBUTTON';
  y = y + dy + 10 \ x = 187
  Print #chfme;PChr$(33,x,y - 5,x + 225,y + 20,"Edit Material List");'WCBUTTON';
  y = y + 25
  Call SAIButtons(chfme,2,1,"Submit~Cancel",600,y,25,100,20)
  Clear FreqMaterial.[0]
  If mode$ = "Edit"
    FreqMaterial.[0] = FreqMaterial.[isav]
    Print #chfme;'20WCSELECT';FreqMaterial.[0].MaterialCode$[2] To "]"
    Print #chfme;'21WCSELECT';FreqMaterial.[0].MaterialDesc$
    If FreqMaterial.[0].BtnColor > 0
      Print #chfme;'22WCSELECT';PChr$(-1,FreqMaterial.[0].BtnColor);'WCSETCOLOR';
    End If 
    Print #chfme;'0WCSELECT';
    GrpNo = Pos(MatGroups$[], = FreqMaterial.[0].MaterialCode$)
  Else 
    GrpNo = NumMatGroups + 1
    Clear GroupMaterial.[GrpNo][],MatGroups$[GrpNo],FreqMaterial.[0]
  End If 
  Print #chfme;'20WCFOCUS';
  Do 
    Input #chfme; Len (1);w$
    Select Case w$
      Case 'F1' ! Submit
        stat = 0
        Print #chfme;PChr$(20,21);'WCQUERY';
        FreqMaterial.[0].MaterialCode$ = SAIQueryInput$(-1,0)
        FreqMaterial.[0].MaterialDesc$ = SAIQueryInput$(-1,0)
        If FreqMaterial.[0].MaterialCode$ = ""
          Call SAITouchWarning("Group Code is required.")
          stat = 1
        Else If FreqMaterial.[0].MaterialDesc$ = ""
          Call SAITouchWarning("Description is required.")
          stat = 1
        End If 
        w$ = FreqMaterial.[0].MaterialCode$
        FreqMaterial.[0].MaterialCode$ = "[" + w$ + "]"
        If mode$ = "Edit"
          If FreqMaterial.[0].MaterialCode$ <> FreqMaterial.[isav].MaterialCode$ ! check for group name change
            p = Pos(MatGroups$[], = FreqMaterial.[0].MaterialCode$)
            If p > 0
              Call SAITouchWarning("A Group by that name already exists.")
              stat = 1
            Else 
              p = Pos(MatGroups$[], = FreqMaterial.[isav].MaterialCode$)
              If p > 0
                MatGroups$[p] = FreqMaterial.[0].MaterialCode$
              End If 
            End If 
          End If 
        Else 
          p = Pos(MatGroups$[], = FreqMaterial.[0].MaterialCode$)
          If p > 0
            Call SAITouchWarning("A Group by that name already exists.")
            stat = 1
          Else 
            If NumMatGroups = 16
              Call SAITouchWarning("Cannot have more that 16 Groups defined.")
              stat = 1
            Else 
              NumMatGroups = NumMatGroups + 1
              MatGroups$[NumMatGroups] = FreqMaterial.[0].MaterialCode$
            End If 
          End If 
        End If 
        If stat = 0
          If mode$ = "Add"
            FreqMaterialMax = FreqMaterialMax + 1
            FreqMaterial.[FreqMaterialMax] = FreqMaterial.[0]
          Else If mode$ = "Edit"
            FreqMaterial.[isav] = FreqMaterial.[0]
          End If 
          Clear FreqMaterial.[0]
          ichanges = 1
          status = 0
          Exit Do 
        End If 
      Case 'F2' ! Cancel
        If mode$ = "Add"
          Clear GroupMaterial.[GrpNo][]
        End If 
        status = 1
        Exit Do 
      Case 'F31' ! Select Color
        Print #chfme;PChr$(rgb[0]);'WCASKCOLOR';
        Input #chfme,1;w$
        If w$
          FreqMaterial.[0].BtnColor = w$
          If FreqMaterial.[0].BtnColor = 0 ! Black = default
            Print #chfme;'22WCSELECT WCRESETCOLOR 0WCSELECT';
          Else 
            Print #chfme;'22WCSELECT';PChr$(-1,FreqMaterial.[0].BtnColor);'WCSETCOLOR 0WCSELECT';
          End If 
        End If 
      Case 'F32' ! Default Color
        Print #chfme;'22WCSELECT WCRESETCOLOR 0WCSELECT';
        FreqMaterial.[0].BtnColor = 0
      Case 'F33' ! Add/Edit Material Group Material List
        BtnColor = FreqMaterial.[0].BtnColor ! Save current value
        w$ = SAIQuery$(chfme,20)
        FreqMaterial.[0].MaterialCode$ = "[" + w$ + "]"
        Call EditFreqMaterialGroupList(GrpNo,status)
        FreqMaterial.[0].BtnColor = BtnColor
    End Select 
  Loop 
  Close #chfme
End Sub 
Sub InsertEditFreqMaterial(mode$,isav,status)
  chfme = SAIOpenWindow(mode$ + " Frequent Material",600,160,1)
  Print #chfme;SAIArialFont$();
  Print #chfme;'12FONTSIZE EBOLD WCRESETCOLOR WCSETFONT';
  y = 10 \ dy = 30
  x0 = 20 \ x1 = x0 + 150 \ dx = 150
  Print #chfme;PChr$(220,x0,y,x1,y + 14,"Material Code:");'WCLABEL';
  Print #chfme;PChr$(20,x1,y,x1 + dx,y + 14,"",2,8);'WCSTRING';
  x = x1 + dx + 10
  Print #chfme;PChr$(30,x,y - 5,x + 100,y + 20,"List");'WCBUTTON';
  y = y + dy \ dx = 400
  If EditMaterialDesc$ = "Y"
    y = y + 10
    Print #chfme;PChr$(221,x0,y,x1,y + 14,"Description:");'WCLABEL';
    Print #chfme;PChr$(21,x1,y,x1 + dx,y + 14,"",2,20);'WCSTRING';
    Print #chfme;'8FONTSIZE WCSETFONT';PChr$(321,x1,y - 10,x1 + dx,y,"(Only if you want to override normal description)");'WCLABEL';
    Print #chfme;'12FONTSIZE WCSETFONT';
  Else 
    Print #chfme;PChr$(221,x0,y,x1,y + 14,"Description:");'WCLABEL';
    Print #chfme;PChr$(21,x1,y,x1 + dx,y + 14,"",2,20);'WCSTRING';
    Print #chfme;'21WCDISABLE';
  End If 
  y = y + dy \ dx = 100
  Print #chfme;PChr$(222,x0,y,x1,y + 14,"Button Color:");'WCLABEL';
  Print #chfme;PChr$(22,x1,y,x1 + dx,y + 14,"");'WCTEXT';
  x = x1 + dx + 10
  Print #chfme;PChr$(31,x,y - 5,x + 100,y + 20,"Select");'WCBUTTON';
  x = x + 110
  Print #chfme;PChr$(32,x,y - 5,x + 100,y + 20,"Default");'WCBUTTON';
  y = y + dy + 20
  Call SAIButtons(chfme,2,1,"Submit~Cancel",600,y,25,100,20)
  Clear FreqMaterial.[0],IsGroup
  If mode$ = "Edit"
    FreqMaterial.[0] = FreqMaterial.[isav]
    Print #chfme;'20WCSELECT';FreqMaterial.[0].MaterialCode$
    Print #chfme;'21WCSELECT';FreqMaterial.[0].MaterialDesc$
    If FreqMaterial.[0].BtnColor > 0
      Print #chfme;'22WCSELECT';PChr$(-1,FreqMaterial.[0].BtnColor);'WCSETCOLOR';
    End If 
    Print #chfme;'0WCSELECT';
  End If 
  Print #chfme;'20WCFOCUS';
  Do 
    Input #chfme; Len (1);w$
    Select Case w$
      Case 'F1' ! Submit
        Print #chfme;PChr$(20,21);'WCQUERY';
        FreqMaterial.[0].MaterialCode$ = SAIQueryInput$(-1,0)
        FreqMaterial.[0].MaterialDesc$ = SAIQueryInput$(-1,0)
        stat = 0
        If IsMaterialGroup(FreqMaterial.[0].MaterialCode$)
          If mode$ = "Edit"
            Call SAITouchWarning("Cannot change a regular item into a Group.")
          Else 
            Call SAITouchWarning("Cannot add a Group with this function.\15\\15\You must use ''Add Group'' function.")
          End If 
          stat = 1
        End If 
        If stat = 0
          If FreqMaterial.[0].MaterialCode$
            SQL$ = "SELECT * FROM Purchase_Material_Price WHERE SupplierNo=" + SQLV$("CP000*") + " AND Branch=" + SQLV$(Branch$)
            SQL$ = SQL$ + " AND MaterialCode=" + SQLV$(FreqMaterial.[0].MaterialCode$)
            Search #ch_db;SQL$
            nr = Chf(ch_db)
            If nr = 0
              ans = SAITouchYesNo("Material Code does not exist in this Branch.\15\\15\Do you still wish to store it?")
              If ans Let stat = 0 Else Let stat = 1
            Else 
              stat = 0
            End If 
          Else 
            ans = SAITouchYesNo("Are you sure you want " + mode$ + " an empty Material Code?")
            If ans
              stat = 0 ! Allow blank code
            Else 
              stat = 1
            End If 
          End If 
        End If 
        If stat = 0
          If mode$ = "Insert"
            If isav = 0
              If FreqMaterialMax = 0
                FreqMaterialMax = FreqMaterialMax + 1
                FreqMaterial.[FreqMaterialMax] = FreqMaterial.[0]
              Else 
                For n = FreqMaterialMax To 1 Step -1
                  FreqMaterial.[n + 1] = FreqMaterial.[n]
                Next n
                FreqMaterial.[1] = FreqMaterial.[0]
                FreqMaterialMax = FreqMaterialMax + 1
              End If 
            Else If isav > FreqMaterialMax
              FreqMaterialMax = FreqMaterialMax + 1
              FreqMaterial.[FreqMaterialMax] = FreqMaterial.[0]
            Else 
              For n = FreqMaterialMax To isav Step -1
                FreqMaterial.[n + 1] = FreqMaterial.[n]
              Next n
              FreqMaterial.[isav] = FreqMaterial.[0]
              FreqMaterialMax = FreqMaterialMax + 1
            End If 
          Else If mode$ = "Edit"
            FreqMaterial.[isav] = FreqMaterial.[0]
          End If 
          Clear FreqMaterial.[0]
          ichanges = 1
          status = 0
          Exit Do 
        End If 
      Case 'F2' ! Cancel
        status = 1
        Exit Do 
      Case 'F30' ! List Materials
        k$ = Trim$(SAIQuery$(chfme,20))
        Call ListFreqMaterials(k$,status)
        If status = 0
          Print #chfme;'20WCSELECT CU';w$;'0WCSELECT';
        End If 
      Case 'F31' ! Select Color
        Print #chfme;PChr$(rgb[0]);'WCASKCOLOR';
        Input #chfme,1;w$
        If w$
          FreqMaterial.[0].BtnColor = w$
          If FreqMaterial.[0].BtnColor = 0 ! Black = default
            Print #chfme;'22WCSELECT WCRESETCOLOR 0WCSELECT';
          Else 
            Print #chfme;'22WCSELECT';PChr$(-1,FreqMaterial.[0].BtnColor);'WCSETCOLOR 0WCSELECT';
          End If 
        End If 
      Case 'F32' ! Default Color
        Print #chfme;'22WCSELECT WCRESETCOLOR 0WCSELECT';
        FreqMaterial.[0].BtnColor = 0
    End Select 
  Loop 
  Close #chfme
End Sub 
Sub DisplayFreqMaterials()
  Print #chfrq;'10WCSELECT CU';
  For n = 1 To FreqMaterialMax
    Print #chfrq;Str$(n);'HT';
    If FreqMaterial.[n].BtnColor > 0
      Print #chfrq;PChr$(FreqMaterial.[n].BtnColor);'BACKCOLOR';
    Else 
      Print #chfrq;'WCRESETCOLOR';
    End If 
    Print #chfrq;SAISpaceFill$(FreqMaterial.[n].MaterialCode$,8);": ";
    If FreqMaterial.[n].MaterialDesc$
      Print #chfrq;FreqMaterial.[n].MaterialDesc$
    Else If FreqMaterial.[n].MaterialCode$
      SQL$ = "SELECT MaterialDesc FROM Purchase_Material_Price WHERE SupplierNo=" + SQLV$("CP000*") + " AND MaterialCode=" + SQLV$(FreqMaterial.[n].MaterialCode$) + " AND Branch=" + SQLV$(Branch$)
      Search #ch_db;SQL$
      If Chf(ch_db)
        Map #ch_db;
        Read #ch_db;temp$
        Print #chfrq;temp$
      Else 
        Print #chfrq;
      End If 
    Else 
      Print #chfrq;
    End If 
  Next n
  Print #chfrq;'WCRESETCOLOR';
  Print #chfrq;'11WCSELECT CU';Str$(FreqMaterialMax);" entries";'0WCSELECT';
End Sub 
Sub EditFreqMaterial(status)
  Clear ichanges
  chfrq = SAIOpenWindow("Edit Frequent Materials",800,290,1)
  x0 = 10 \ y0 = 10
  Print #chfrq;SAIMonoFont$();
  Print #chfrq;'12FONTSIZE EBOLD WCSETFONT';
  dy = 200
  Print #chfrq;PChr$(10,x0,y0,x0 + 600,275,"Frequent Materials",2 + 16);'WCLIST';
  Print #chfrq;'8FONTSIZE WCSETFONT';PChr$(11,x0,276,x0 + 120,288,"");'WCTEXT 12FONTSIZE WCSETFONT'
  Print #chfrq;SAIArialFont$();
  Call DisplayFreqMaterials()
  y = 30 \ dy = 27
  x = 630 \ dx = 150
  Print #chfrq;PChr$(1,x,y,x + dx,y + 25,"Insert Before",2);'WCBUTTON';
  y = y + dy
  Print #chfrq;PChr$(2,x,y,x + dx,y + 25,"Insert After",2);'WCBUTTON';
  y = y + dy
  Print #chfrq;PChr$(3,x,y,x + dx,y + 25,"Edit **",2);'WCBUTTON';
  Print #chfrq;PChr$(10,2,'F3');'WCACTION'; ! Set double-click action
  y = y + dy
  Print #chfrq;PChr$(4,x,y,x + dx,y + 25,"Add Group",2);'WCBUTTON';
  y = y + dy
  Print #chfrq;PChr$(5,x,y,x + dx,y + 25,"Delete",2);'WCBUTTON';
  y = y + dy + 20
  Print #chfrq;PChr$(6,x,y,x + dx,y + 25,"Move Up",2);'WCBUTTON';
  y = y + dy
  Print #chfrq;PChr$(7,x,y,x + dx,y + 25,"Move Down",2);'WCBUTTON';
  y = 250
  Print #chfrq;PChr$(8,x,y,x + dx,y + 25,"Done",2);'WCBUTTON';
  Do 
    Input #chfrq; Len (1);w$
    Select Case w$
      Case 'F1','F2' ! Insert Before/After
        temp$ = SAIQuery$(chfrq,10)
        If temp$ = "" And FreqMaterialMax = 1 Let temp$ = "1"
        If temp$ = "" And FreqMaterialMax > 0
          Call SAITouchWarning("You must first select a row.")
        Else 
          isav = temp$
          If FreqMaterialMax > 0 And w$ = 'F2' Let isav = isav + 1 ! After
          Call InsertEditFreqMaterial("Insert",isav,status)
          If status = 0
            Call DisplayFreqMaterials()
            Print #chfrq;'10WCSELECT';PChr$(isav - 1);'WCMARK 0WCSELECT';
          End If 
        End If 
      Case 'F3' ! Edit
        w$ = SAIQuery$(chfrq,10)
        If w$ = ""
          Call SAITouchWarning("You must first select a row.")
        Else 
          isav = w$
          If IsMaterialGroup(FreqMaterial.[isav].MaterialCode$)
            Call AddEditFreqMaterialGroup("Edit",isav,status)
          Else 
            Call InsertEditFreqMaterial("Edit",isav,status)
          End If 
          If status = 0 Call DisplayFreqMaterials()
        End If 
      Case 'F4' ! Add Group
        isav = FreqMaterialMax
        Call AddEditFreqMaterialGroup("Add",isav,status)
        If status = 0 Call DisplayFreqMaterials()
      Case 'F5' ! Delete
        w$ = SAIQuery$(chfrq,10)
        If w$ = ""
          Call SAITouchWarning("You must first select a row.")
        Else 
          ans = SAITouchConfirm("Are you sure you want to delete this item?")
          If ans
            i = w$
            If IsMaterialGroup(FreqMaterial.[i].MaterialCode$)
              n = Pos(MatGroups$[], = FreqMaterial.[i].MaterialCode$)
              If n > 0
                For j = n To NumMatGroups - 1
                  MatGroups$[j] = MatGroups$[j + 1]
                  Clear GroupMaterial.[j][]
                  For nn = 1 To MatGroupNum[j + 1]
                    GroupMaterial.[j,nn] = GroupMaterial.[j + 1,nn]
                  Next nn
                  MatGroupNum[j] = MatGroupNum[j + 1]
                Next j
                Clear MatGroups$[NumMatGroups],GroupMaterial.[NumMatGroups][],MatGroupNum[NumMatGroups]
                NumMatGroups = NumMatGroups - 1
              End If 
            End If 
            If i < FreqMaterialMax
              For n = i To FreqMaterialMax - 1
                FreqMaterial.[n] = FreqMaterial.[n + 1]
              Next n
            End If 
            Clear FreqMaterial.[FreqMaterialMax]
            FreqMaterialMax = FreqMaterialMax - 1
            Call DisplayFreqMaterials()
            ichanges = 1
          End If 
        End If 
      Case 'F6' ! Move Up
        w$ = SAIQuery$(chfrq,10)
        If w$ = ""
          Call SAITouchWarning("You must first select a row.")
        Else 
          i = w$
          If i > 1
            FreqMaterial.[0] = FreqMaterial.[i - 1]
            FreqMaterial.[i - 1] = FreqMaterial.[i]
            FreqMaterial.[i] = FreqMaterial.[0]
            Clear FreqMaterial.[0]
            Call DisplayFreqMaterials()
            Print #chfrq;'10WCSELECT';PChr$(i - 2);'WCMARK 0WCSELECT';
            ichanges = 1
          End If 
        End If 
      Case 'F7' ! Move Down
        w$ = SAIQuery$(chfrq,10)
        If w$ = ""
          Call SAITouchWarning("You must first select a row.")
        Else 
          i = w$
          If i < FreqMaterialMax
            FreqMaterial.[0] = FreqMaterial.[i + 1]
            FreqMaterial.[i + 1] = FreqMaterial.[i]
            FreqMaterial.[i] = FreqMaterial.[0]
            Clear FreqMaterial.[0]
            Call DisplayFreqMaterials()
            Print #chfrq;'10WCSELECT';PChr$(i);'WCMARK 0WCSELECT';
            ichanges = 1
          End If 
        End If 
      Case 'F8' ! Done
        If ichanges
          Call SaveFrequents(status)
          status = 0
        Else 
          status = 1
        End If 
        Exit Do 
    End Select 
  Loop 
  Close #chfrq
End Sub 
Sub DisplayFreqEntityButtons(ch,FreqEnt.[] As Frequent_Entity,Disable)
  Print #ch;'10FONTSIZE EBOLD WCSETFONT';
  x = x0 + 9 \ y = y0 + 15
  dx = 140 \ dy = 22
  elem = 1
  For r = 1 To 3
    For i = 1 To 3
      temp$ = FreqEnt.[elem].Name$
      If temp$ = "" Let temp$ = FreqEnt.[elem].EntityNo$
      temp$ = Replace$(temp$,"&","&&")
      If Len(temp$) > 12 Print #ch;'8FONTSIZE WCSETFONT';
      If FreqEnt.[elem].BtnColor <= 0 Or temp$ = ""
        Print #ch;PChr$(elem + 9,x,y,x + dx,y + dy,temp$,2);'WCBUTTON';
      Else 
        Print #ch;PChr$(-1,FreqEnt.[elem].BtnColor);'WCSETCOLOR';
        Print #ch;PChr$(elem + 9,x,y,x + dx,y + dy,temp$,2);'WCCOLORBTN';
        Print #ch;PChr$(-1,-2);'WCSETCOLOR';
      End If 
      If Len(temp$) > 12 Print #ch;'10FONTSIZE WCSETFONT';
      If temp$ = "" And Disable Print #ch;PChr$(elem + 9);'WCDISABLE';
      elem = elem + 1
      x = x + dx
    Next i
    x = x0 + 9
    y = y + dy
  Next r
  Print #ch;'12FONTSIZE WCSETFONT';
  Print #ch;PChr$(bgcolor1);'BACKCOLOR WCSETCOLOR';
End Sub 
Sub EditFrequentEntities(EntType$,FreqEnt.[] As Frequent_Entity,status)
  Clear isav,ichanges
  chfrq = SAIOpenWindow("Edit Frequent " + EntType$ + "s",550,280,1)
  x0 = 20 \ y0 = 10
  Print #chfrq;SAIArialFont$();
  Print #chfrq;PChr$(bgcolor1);'BACKCOLOR CS';
  Print #chfrq;'10FONTSIZE BBOLD WCSETCOLOR WCSETFONT';
  Print #chfrq;PChr$(100,x0,y0,x0 + 438,y0 + 88,"Frequent " + EntType$ + "s:");'WCGROUP';
  Call DisplayFreqEntityButtons(chfrq,FreqEnt.[],0)
  dy = 30
  y = y + dy
  x1 = x0 + 159 \ dx = 100 \ yy0 = y - 20
  If Pos(EntType$, = "Customer") Let temp$ = "Customer" Else Let temp$ = EntType$
  Print #chfrq;PChr$(220,x0 + 9,y,x1,y + 14,temp$ + " No:");'WCLABEL';
  Print #chfrq;PChr$(20,x1,y,x1 + dx,y + 14,"",2,6);'WCSTRING';
  x = x1 + dx + 10
  Print #chfrq;PChr$(30,x,y - 5,x + 100,y + 20,"List");'WCBUTTON';
  y = y + dy \ dx = 300
  Print #chfrq;PChr$(221,x0 + 9,y,x1,y + 14,"Display Name:");'WCLABEL';
  Print #chfrq;PChr$(21,x1,y,x1 + dx,y + 14,"",2,20);'WCSTRING';
  y = y + dy \ dx = 100
  Print #chfrq;PChr$(222,x0 + 9,y,x1,y + 14,"Button Color:");'WCLABEL';
  Print #chfrq;PChr$(22,x1,y,x1 + dx,y + 14,"");'WCTEXT';
  x = x1 + dx + 10
  Print #chfrq;PChr$(31,x,y - 5,x + 100,y + 20,"Select");'WCBUTTON';
  x = x + 110
  Print #chfrq;PChr$(32,x,y - 5,x + 100,y + 20,"Default");'WCBUTTON';
  y = y + dy
  Call SAIButtons(chfrq,3,1,"Clear~Submit~Cancel",550,y,25,100,20)
  y = y + dy
  Print #chfrq;PChr$(299,x0,yy0,540,y,"");'WCGROUP';
  y = y + 10
  Call SAIButtons(chfrq,1,4,"Done",550,y,25,100,20)
  Print #chfrq;PChr$(1,3);'WCDISABLE';PChr$(20,22);'WCDISABLE';PChr$(30,32);'WCDISABLE';
  Do 
    Input #chfrq; Len (1);w$
    Select Case w$
      Case 'F1' ! Clear
        Print #chfrq;PChr$(20,21);'WCCU';
        Print #chfrq;'22WCSELECT WCRESETCOLOR 0WCSELECT';
        Clear FreqEnt.[0]
        FreqEnt.[0].BtnColor = 0
      Case 'F2' ! Submit
        Print #chfrq;PChr$(20,21);'WCQUERY';
        FreqEnt.[0].EntityNo$ = SAIQueryInput$(-1,0)
        FreqEnt.[0].Name$ = SAIQueryInput$(-1,0)
        If FreqEnt.[0].EntityNo$ = ""
          FreqEnt.[0].Name$ = ""
          FreqEnt.[0].BtnColor = 0
          stat = 0
        Else 
          Select Case EntType$
            Case "Supplier"
              Call RetrieveSupplier(FreqEnt.[0].EntityNo$,Vendor.,stat)
              If stat = 0
                If ValidSupplier(z$,Vendor.)
                  stat = 0
                Else 
                  stat = 1
                  Call SAITouchWarning("Supplier No. " + FreqEnt.[0].EntityNo$ + " is not valid at this location.")
                End If 
              Else 
                Call SAITouchWarning("Supplier No. " + FreqEnt.[0].EntityNo$ + " not found.")
              End If 
            Case "Customer","InterCoCustomer"
              Call RetrieveCustomer(FreqEnt.[0].EntityNo$,CustomerTemp.,stat)
              If stat = 0
                If ValidCustomer(z$,CustomerTemp.)
                  stat = 0
                Else 
                  stat = 1
                  Call SAITouchWarning("Customer No. " + FreqEnt.[0].EntityNo$ + " is not valid at this location.")
                End If 
              Else 
                Call SAITouchWarning("Customer No. " + FreqEnt.[0].EntityNo$ + " not found.")
              End If 
            Case "Carrier"
              k$ = "C" + SAISpaceFill$(FreqEnt.[0].EntityNo$,6)
              Search #ch_110Aro,2,1;k$,r,stat
              If stat
                Call SAITouchWarning("Carrier No. " + FreqEnt.[0].EntityNo$ + " not found.")
              End If 
            Case Else 
              stat = 1
          End Select 
        End If 
        If stat = 0
          FreqEnt.[isav] = FreqEnt.[0]
          Clear FreqEnt.[0]
          ichanges = 1
          Call DisplayFreqEntityButtons(chfrq,FreqEnt.[],0)
          Print #chfrq;PChr$(20,21);'WCCU';
          Print #chfrq;'22WCSELECT WCRESETCOLOR 0WCSELECT';
          Print #chfrq;PChr$(1,3);'WCDISABLE';PChr$(20,22);'WCDISABLE';PChr$(30,32);'WCDISABLE';
          Print #chfrq;PChr$(10,19);'WCENABLE 4WCENABLE';
        End If 
      Case 'F3' ! Cancel
        Print #chfrq;PChr$(20,21);'WCCU';
        Print #chfrq;'22WCSELECT WCRESETCOLOR 0WCSELECT';
        Print #chfrq;PChr$(1,3);'WCDISABLE';PChr$(20,22);'WCDISABLE';PChr$(30,32);'WCDISABLE';
        Print #chfrq;PChr$(10,19);'WCENABLE 4WCENABLE';
      Case 'F4' ! Done
        If ichanges
          Call SaveFrequents(status)
          status = 0
        Else 
          status = 1
        End If 
        Exit Do 
      Case 'F10' To 'F19'
        isav = Asc(w$) - Asc('F9')
        Print #chfrq;PChr$(10,19);'WCDISABLE 4WCDISABLE';
        Print #chfrq;PChr$(1,3);'WCENABLE';PChr$(20,22);'WCENABLE';PChr$(30,32);'WCENABLE';
        Print #chfrq;'20WCSELECT WCRESETCOLOR';FreqEnt.[isav].EntityNo$;
        Print #chfrq;'21WCSELECT WCRESETCOLOR';FreqEnt.[isav].Name$;
        If FreqEnt.[isav].BtnColor <= 0 Or FreqEnt.[isav].EntityNo$ = ""
          Print #chfrq;'22WCSELECT WCRESETCOLOR';
          FreqEnt.[isav].BtnColor = 0
        Else 
          Print #chfrq;'22WCSELECT';PChr$(-1,FreqEnt.[isav].BtnColor);'WCSETCOLOR';
        End If 
        Print #chfrq;'0WCSELECT';
        FreqEnt.[0] = FreqEnt.[isav]
      Case 'F30'
        Clear w$,temp$
        Select Case EntType$
          Case "Supplier"
            SQL$ = "AccountType<>" + SQLV$("F") + " AND IntercompanyType<>" + SQLV$("I")
            Call SAISelectSupplier(ch_db,z$,1,SQL$,w$,temp$,status)
          Case "Customer"
            SQL$ = "IntercompanyType<>" + SQLV$("I")
            Call SAISelectCustomer(ch_db,z$,1,SQL$,w$,temp$,status)
          Case "InterCoCustomer"
            SQL$ = "IntercompanyType=" + SQLV$("I")
            Call SAISelectCustomer(ch_db,z$,1,SQL$,w$,temp$,status)
          Case "Carrier"
            k$ = "C"
            Call ListCarriers(k$,"",ksav$)
            If ksav$
              w$ = ksav$
              status = 0
            Else 
              status = 1
            End If 
          Case Else 
            status = 1
        End Select 
        If status = 0
          Print #chfrq;'20WCSELECT CU';w$;'21WCSELECT CU';w$;'0WCSELECT';
        End If 
      Case 'F31' ! Select Color
        Print #chfrq;PChr$(rgb[0]);'WCASKCOLOR'; ! Assumes dl4Term 5.2 or higher
        Input #chfrq,1;w$
        If w$
          FreqEnt.[0].BtnColor = w$
          If FreqEnt.[0].BtnColor = 0 ! Black = default
            Print #chfrq;'22WCSELECT WCRESETCOLOR 0WCSELECT';
          Else 
            Print #chfrq;'22WCSELECT';PChr$(-1,FreqEnt.[0].BtnColor);'WCSETCOLOR 0WCSELECT';
          End If 
        End If 
      Case 'F32' ! Default Color
        Print #chfrq;'22WCSELECT WCRESETCOLOR 0WCSELECT';
        FreqEnt.[0].BtnColor = 0
    End Select 
  Loop 
  Close #chfrq
End Sub 
Sub DisplaySupplierComments(SupplierNo$,status)
  status = 0
  ktemp$ = "V" + SAISpaceFill$(SupplierNo$,6) + Rep$(" ",18) + "TSV"
  ksav$ = ktemp$
  Search #ch_1115ro,2,1;ktemp$,r,e
  If e Exit Sub 
  chsupc = SAIOpenWindow("Supplier Comments",800,180,1)
  Print #chsupc;PChr$("Arial");'FONTFACE 12FONTSIZE WCSETFONT';
  Print #chsupc;PChr$(10,10,5,790,145,"",0);'WCTEXT';
  Print #chsupc;'10WCSELECT';
  ktemp$ = ksav$
  Do 
    Search #ch_1115ro,3,1;ktemp$,r,e
    If e Exit Do 
    If ktemp$[1,Len(ksav$)] <> ksav$ Exit Do 
    Call SAIReadRecord(ch_1115ro,recdef_1115.,"Y","U",r,GblCmtTmp$,stat,errmess$)
    Print #chsupc;Trim$(GblCmtTmp$[31,80])
  Loop 
  Print #chsupc;'0WCSELECT';
  Call SAIButtons(chsupc,2,1,"&&OK~CANCEL",800,150,25,120,20)
  Print #chsupc;'1WCFOCUS';
  Do 
    Input #chsupc; Len (1);w$
    Select Case w$
      Case 'F1' ! OK
        status = 0
        Exit Do 
      Case 'F2' ! Cancel
        status = 1
        Exit Do 
    End Select 
  Loop 
  Close #chsupc
End Sub 
Sub RetrieveSupplier(SuppNo$,SupplierMaster. As Supplier_Master,stat)
  Clear SupplierMaster.
  Search #ch_db;"SELECT " + SQLN$(SupplierMaster.) + " FROM Supplier_Master WHERE SupplierNo=" + SQLV$(Trim$(SuppNo$))
  If Chf(ch_db)
    Map Record #ch_db As Supplier_Master
    Read Record #ch_db;SupplierMaster.
    stat = 0
  Else 
    stat = 1
  End If 
End Sub 
Sub SupplierSearch(klist$)
  icount = 0
  Clear ilistsel$[]
  If ilistcur > ilistmax
    ilistmax = ilistmax + 10
    Dim ilist$[ilistmax,ilistlen]
  End If 
  ilist$[ilistcur] = klist$
  Print #chlist;PChr$(1,3);'WCDISABLE';
  Print #chlist;PChr$(30,29 + imax);'WCDELETE';
  Print #chlist;SAIMonoFont$();'14FONTSIZE BBOLD WCSETFONT';
  SQL$ = "SELECT " + SQLN$(SupplierList.) + " FROM Supplier_Master"
  SQL$ = SQL$ + " WHERE ISNULL(CancelDate) AND SettlementCode<>" + SQLV$("")
  SQL$ = SQL$ + " AND AccountType<>" + SQLV$("F") + " AND IntercompanyType<>" + SQLV$("I")
  If Trim$(z$[642,643]) ! Environment is using corporate logic
    If Trim$(z$[616,618]) ! Current branch belongs to a branch group
      SQL$ = SQL$ + " AND (Branch=" + SQLV$(Branch$) + " OR (Branch=" + SQLV$(z$[642,643]) + " AND BranchGroup IN (" + SQLV$(z$[616,618]) + "," + SQLV$("") + ")))"
    Else 
      SQL$ = SQL$ + " AND (Branch=" + SQLV$(Branch$) + " OR (Branch=" + SQLV$(z$[642,643]) + " AND BranchGroup=" + SQLV$("") + "))"
    End If 
  Else 
    SQL$ = SQL$ + " AND Branch =" + SQLV$(Branch$)
  End If 
  If ilistcur = 0 And klist$ Let temp$ = ">= " Else Let temp$ = "> "
  If SupplierDir = 1
    SQL$ = SQL$ + " AND SupplierNo " + temp$ + SQLV$(klist$) + " ORDER BY SupplierNo LIMIT " + Str$(imax)
  Else 
    SQL$ = SQL$ + " AND SupplierAlpha " + temp$ + SQLV$(klist$) + " ORDER BY SupplierAlpha LIMIT " + Str$(imax)
  End If 
  Try 
    Search #ch_db;SQL$
    nr = Chf(ch_db)
    If nr
      Map Record #ch_db As Supplier_List
      For i = 1 To nr
        Read Record #ch_db;SupplierList.
        If SupplierDir = 1
          temp$ = SAISpaceFill$(SupplierList.SupplierNo$,6) + " - " + SAISpaceFill$(SupplierList.Name$,30) + "  " + SAISpaceFill$(SupplierList.City$,20)
        Else 
          temp$ = SAISpaceFill$(SupplierList.SupplierAlpha$,10) + " - " + SAISpaceFill$(SupplierList.Name$,30) + "  " + SAISpaceFill$(SupplierList.City$,17)
        End If 
        temp$ = Replace$(temp$,"&","&&")
        Print #chlist;PChr$(icount + 30,10,5 + (icount * 30),ilistw - 10,(icount + 1) * 30,temp$,2);'WCBUTTON';
        ilistsel$[icount] = SupplierList.SupplierNo$
        icount = icount + 1
      Next i
      If SupplierDir = 1
        klist$ = SupplierList.SupplierNo$
      Else 
        klist$ = SupplierList.SupplierAlpha$
      End If 
    End If 
  Else 
    nr = 0
  End Try 
  Print #chlist;PChr$(1,3);'WCENABLE';
  If nr < imax Print #chlist;'2WCDISABLE';
  If ilistcur = 0 Print #chlist;'1WCDISABLE';
  If icount = 0
    Print #chlist;'3WCFOCUS';
  Else 
    Print #chlist;'30WCFOCUS';
  End If 
End Sub 
Sub ListSuppliers(klist$)
  imax = 9
  Clear ilist$[]
  ilistcur = 0
  ilistw = 920
  If SupplierDir = 1 Let temp$ = "Number" Else Let temp$ = "Alpha"
  Call SAITouchButtonList(chlist,imax,ilistw,"List Suppliers by " + temp$)
  Call SupplierSearch(klist$)
  Do 
    Input #chlist; Len (1);w$
    Select Case w$
      Case 'F1' ! Previous
        If ilistcur > 0
          ilistcur = ilistcur - 1
          klist$ = ilist$[ilistcur]
          Call SupplierSearch(klist$)
        End If 
      Case 'F2' ! Next
        ilistcur = ilistcur + 1
        Call SupplierSearch(klist$)
      Case 'F3' ! Cancel
        VendorNo$ = ""
        Exit Do 
      Case 'F30' To 'F39'
        i = Asc(w$) - Asc('F30')
        VendorNo$ = ilistsel$[i]
        Exit Do 
    End Select 
  Loop 
  Close #chlist
End Sub 
Sub GetSupplier()
  If SupplierDefaultFromID$ <> "N" Let ysize = 290 Else Let ysize = 260
  chwin = SAIOpenWindow("Supplier Selection",820,ysize,1)
  If AllowEditFrequents$ = "Y"
    Print #chwin;PChr$(90,"Edit Frequent Suppliers","");'WCMENU';
    Print #chwin;PChr$(61,"&Edit","");'WCMENUACTION';
    Print #chwin;'WCENDMENU';
  End If 
  Print #chwin;SAIArialFont$();
  Print #chwin;PChr$(bgcolor1);'BACKCOLOR CS';
  Print #chwin;'WCSETCOLOR';
  Print #chwin;'12FONTSIZE WCSETFONT';
  x0 = 10 \ y0 = 2
  x = x0 + 10 \ y = 40
  Print #chwin;PChr$(7,x,y0 + 11,x + 100,y0 + 35,"Search",2);'WCBUTTON';
  Print #chwin;PChr$(8,x + 120,y0 + 11,x + 330,y0 + 35,"Identity Lookup",2);'WCBUTTON';
  Print #chwin;'WCRESETCOLOR';
  Print #chwin;PChr$(1,x,y,x + 100,y + 18,"Number",2);'WCRADIO';
  Print #chwin;PChr$(2,x + 120,y,x + 220,y + 18,"Alpha",2);'WCRADIO';
  Print #chwin;PChr$(3,x + 240,y,x + 330,y + 18,"P.O.#",2);'WCRADIO';
  y = y + 25
  dx = 230
  Print #chwin;'EBOLD 12FONTSIZE WCSETFONT';
  KBParams.InputElement = 4
  Print #chwin;PChr$(KBParams.InputElement,x,y,x + dx,y + 18,"",2);'WCSTRING';
  Print #chwin;PChr$(5,x + dx + 5,y - 3,x + dx + 100,y + 21,"List",2);'WCBUTTON';
  y = y + 25
  Print #chwin;'10FONTSIZE BBOLD WCSETFONT WCSETCOLOR';
  Print #chwin;PChr$(200,x0,y0,x + 340,y,"Find by:");'WCGROUP';
  x0 = x0 + 360
  Print #chwin;PChr$(201,x0,y0,810,y,"Frequent Suppliers:");'WCGROUP';
  Print #chwin;'EBOLD WCSETFONT';
  xsav = x0 \ ysav = y0
  Call DisplayFreqEntityButtons(chwin,FreqSupplier.[],1)
  KBParams.StartX = 15
  KBParams.StartY = ysize - 160
  KBParams.ButtonHeight = 25
  KBParams.ButtonWidth = 50
  KBParams.FontSize1 = 14
  KBParams.FontSize2 = 12
  KBParams.IELength = 0
  KBParams.IEMaxChar = 0
  KBParams.FuncBtnLen = 0
  Call SAIDrawKeyboard(chwin,KBParams.,0)
  LastUsed$ = ""
  If SupplierDefaultFromID$ <> "N"
    Call SearchID("P",ID$,w$)
    If w$
      Search #ch_db;"SELECT " + SQLN$(SupplierList.) + " FROM Supplier_Master WHERE SupplierNo=" + SQLV$(Trim$(w$))
      If Chf(ch_db)
        Map Record #ch_db As Supplier_List
        Read Record #ch_db;SupplierList.
        temp$ = "ID last used as:  " + SupplierList.SupplierNo$ + " - " + SupplierList.Name$
        temp$ = Replace$(temp$,"&","&&")
        Print #chwin;PChr$(6,10,KBParams.StartY - 35,810,KBParams.StartY - 10,temp$,2);'WCBUTTON';
        LastUsed$ = SupplierList.SupplierNo$
      End If 
    End If 
  End If 
  FullPONo$ = ""
  SupplierDir = 1 ! Default to Number
  Print #chwin;'1WCSELECT';"1"
  Print #chwin;'0WCSELECT';
GetSupplier_InputLoop: !
  Print #chwin;PChr$(KBParams.InputElement);'WCFOCUS';
  ishift = 0
  istring$ = ""
  Clear SupplierID.,TicketIdentity.
  Do 
    Input #chwin; Len (1);w$
    Select Case w$
      Case 'F10' To 'F18' ! Frequent Supplier
        i = Asc(w$) - Asc('F9')
        If FreqSupplier.[i].EntityNo$
          SupplierNo$ = FreqSupplier.[i].EntityNo$
          Exit Do 
        End If 
      Case 'F5' ! List
        SupplierDir = SAIQueryRadio$(chwin,1,3,"123")
        If SupplierDir = 3
          FullPONo$ = Trim$(SAIQuery$(chwin,KBParams.InputElement))
          Call ListPOs(FullPONo$,"N",status)
          If status = 0
            SupplierNo$ = Trim$(PODetail$[1,6])
            FullPONo$ = PODetail$[7,18]
            Exit Do 
          End If 
        Else 
          klist$ = Trim$(SAIQuery$(chwin,KBParams.InputElement))
          Call ListSuppliers(klist$)
          If VendorNo$
            SupplierNo$ = VendorNo$
            Exit Do 
          End If 
        End If 
      Case 'F6' ! Last Used ID
        SupplierNo$ = LastUsed$
        Exit Do 
      Case 'F7' ! Search
        SupplierDir = SAIQueryRadio$(chwin,1,3,"123")
        If SupplierDir = 3
          Call SAITouchWarning("Cannot Search when P.O.# is selected.")
        Else 
          Clear SupplierNo$,temp$
          w$ = Trim$(SAIQuery$(chwin,KBParams.InputElement))
          If w$
            If SupplierDir = 1
              SupplierNo$ = w$
            Else 
              temp$ = w$
            End If 
          End If 
          SQL$ = "AccountType<>" + SQLV$("F") + " AND IntercompanyType<>" + SQLV$("I")
          Call SAISelectSupplier(ch_db,z$,1,SQL$,SupplierNo$,temp$,status)
          If status = 0 Exit Do 
        End If 
      Case 'F8' ! Identity Lookup
        Call SAIRetrieveSupplierID(ch_db,SupplierID.,CardReaders$[],status)
        If status = 0
          Call CheckDoNotBuy(SupplierID.IDNumber$,SupplierID.IDIssuer$,SupplierID.FirstName$,SupplierID.LastName$,SupplierID.DateOfBirth#,status)
          If status Clear SupplierID.
        End If 
        If status = 0
          If Trim$(SupplierID.SupplierNo$) = ""
            Call SAITouchWarning("Supplier ID information did not specify a Supplier Number.")
            status = 1
          Else If SupplierID.SupplierNo$ = "******"
            If BranchPeddlerNo$ = ""
              Call SAITouchWarning("No Branch Peddler Number configured.")
              status = 1
            Else 
              SupplierID.SupplierNo$ = BranchPeddlerNo$
            End If 
          End If 
        End If 
        If status = 0
          Call SetupIdentity(status)
          If status = 0 Exit Do 
        End If 
      Case 'F61'
        Call EditFrequentEntities("Supplier",FreqSupplier.[],status)
        If status = 0
          x0 = xsav \ y0 = ysav
          Call DisplayFreqEntityButtons(chwin,FreqSupplier.[],1)
        End If 
      Case Else 
        Call SAIKeyBoardInput(chwin,chwin,KBParams.,ishift,w$,istring$,istatus)
        If istatus = -1
          SupplierNo$ = ""
          Exit Do 
        Else If istatus And istring$
          SupplierDir = SAIQueryRadio$(chwin,1,3,"123")
          If BCLeadIn$ Or (Len(istring$) > 10 And SupplierDir <> 3)
            If istring$[1,Len(BCLeadIn$)] = BCLeadIn$ Or (Len(istring$) > 10 And SupplierDir <> 3)
              Search #ch_db;"SELECT * FROM Supplier_ID WHERE BarcodeLookup=" + SQLV$(istring$)
              nr = Chf(ch_db)
              If nr
                Map Record #ch_db As Supplier_ID
                Read Record #ch_db;SupplierID.
                Call CheckDoNotBuy(SupplierID.IDNumber$,SupplierID.IDIssuer$,SupplierID.FirstName$,SupplierID.LastName$,SupplierID.DateOfBirth#,status)
                If status Goto GetSupplier_InputLoop
                If Trim$(SupplierID.SupplierNo$) = ""
                  Call SAITouchWarning("Supplier ID information did not specify a Supplier Number.")
                  Goto GetSupplier_InputLoop
                Else If SupplierID.SupplierNo$ = "******"
                  If BranchPeddlerNo$ = ""
                    Call SAITouchWarning("No Branch Peddler Number configured.")
                    Goto GetSupplier_InputLoop
                  Else 
                    SupplierID.SupplierNo$ = BranchPeddlerNo$
                  End If 
                End If 
                SupplierNo$ = SupplierID.SupplierNo$
                Call SetupIdentity(status)
                If status
                  Print #chwin;PChr$(KBParams.InputElement);'WCSELECT CU 0WCSELECT';
                  Goto GetSupplier_InputLoop
                Else 
                  Exit Do 
                End If 
              Else 
                Call SAITouchError("Cannot retrieve specified Supplier ID by Barcode.")
                Print #chwin;PChr$(KBParams.InputElement);'WCSELECT CU 0WCSELECT';
                Goto GetSupplier_InputLoop
              End If 
            End If 
          End If 
          Select Case SupplierDir
            Case 1
              SupplierNo$ = Trim$(UCase$(istring$))
              Exit Do 
            Case 2
              Search #ch_db;"SELECT SupplierNo FROM Supplier_Master WHERE SupplierAlpha=" + SQLV$(istring$)
              If Chf(ch_db)
                Map #ch_db;
                Read #ch_db;SupplierNo$
                Exit Do 
              Else 
                Call SAITouchError("Supplier Alpha not found!\15\Please try again.")
                Print #chwin;PChr$(KBParams.InputElement);'WCSELECT CU 0WCSELECT';
              End If 
            Case 3 ! P.O.#
              FullPONo$ = istring$
              Call RetrievePO(FullPONo$,status)
              If status = 0
                If PODetail[1] >= PODetail[0] And PODetail$[201,201] = "W"
                  Call SAITouchWarning("Accepting this load will cause the order to be overshipped!")
                End If 
                SupplierNo$ = Trim$(PODetail$[1,6])
                FullPONo$ = PODetail$[7,18]
                Exit Do 
              Else If status = 1
                FullPONo$ = ""
                Call SAITouchWarning("Invalid Purchase Order entered.  Please try again.")
              End If 
          End Select 
        End If 
    End Select 
  Loop 
  If SupplierNo$
    Call RetrieveSupplier(SupplierNo$,Vendor.,stat)
    If stat
      Call SAITouchError("Supplier Number does not exist!\15\Please try again.")
    Else 
      If ValidSupplier(z$,Vendor.) = 0
        Call SAITouchError("Invalid Supplier Entered!\15\Please try again.")
        stat = 1
      End If 
    End If 
    If stat
      Print #chwin;PChr$(KBParams.InputElement);'WCSELECT CU 0WCSELECT';
      Goto GetSupplier_InputLoop
    End If 
    Supplier. = Vendor.
    Call ListCurbSideCities(CurbSideCity$,ExitStatus)
    If ExitStatus Goto GetSupplier_InputLoop
    If WarnHazMat$ = "Y" And SupplierNo$[1,3] <> "CP0"
      If HazMatSupplierTypes$ = "" Or Pos(HazMatSupplierTypes$, = Supplier.MiscSupplierType$)
        If Supplier.HazMatDocOnFile$ = "Y"
          If Supplier.HazMatDocExpDate#
            If DateUsing$(Supplier.HazMatDocExpDate#,"YYYYMMDD") < DateUsing$(SAICurrentDate#(),"YYYYMMDD")
              Call SAITouchWarning("Supplier HazMat agreement has expired.\15\Expiration Date: " + DateUsing$(Supplier.HazMatDocExpDate#,DateFormat1$))
            End If 
          End If 
        Else 
          Call SAITouchWarning("Supplier does not have a HazMat agreement on file.")
        End If 
      End If 
    End If 
  End If 
  Close #chwin
End Sub 
Sub CreditLimitCalc_Old(CustNo$)
  ! 8430
  ktemp$ = SAISpaceFill$(CustNo$,6)
  k2$ = ktemp$
  Do 
    Search #ch_8430ro,3,2;ktemp$,r,e
    If e Exit Do 
    If ktemp$[1,Len(k2$)] <> k2$ Exit Do 
    Call SAIReadRecord(ch_8430ro,recdef_8430.,"Y","U",r,SalesTicket$,SalesTicket3[],SalesTicket4[],stat,errmess$)
    If stat = 0
      If SalesTicket$[146,146] = " " And SalesTicket$[89,89] <> "I" And SalesTicket$[89,89] <> "T" ! Skip G/T tkt or Interco/Trans
        Credit.UntransferredSales = Credit.UntransferredSales + SalesTicket4[1]
      End If 
    End If 
  Loop 
  ! 8530
  ktemp$ = k2$
  Do 
    Search #ch_8530ro,3,2;ktemp$,r,e
    If e Exit Do 
    If ktemp$[1,Len(k2$)] <> k2$ Exit Do 
    Call SAIReadRecord(ch_8530ro,recdef_8530.,"Y","U",r,RetailSales$,RetailSales[],stat,errmess$)
    If stat = 0
      If RetailSales$[13,14] <> "*M" And RetailSales$[87,88] <> "YY" And RetailSales$[89,89] <> "T" ! Skip *M and updated tkts
        Credit.UntransferredSales = Credit.UntransferredSales + RetailSales[11]
      End If 
    End If 
  Loop 
  ! InYard
  SQL$ = "SELECT " + SQLN$(InYardDtlItem.) + " FROM InYard_Dtl Dtl"
  SQL$ = SQL$ + " JOIN InYard_Hdr Hdr ON Dtl.TicketNo=Hdr.TicketNo"
  SQL$ = SQL$ + " WHERE TktType=" + SQLV$("S") + " AND EntityNo=" + SQLV$(CustNo$)
  SQL$ = SQL$ + " AND Hdr.TicketNo<>" + SQLV$(TicketHeader.TicketNo$)
  SQL$ = SQL$ + " AND GrossWt<>" + SQLV$(0) + " AND TareWt<>" + SQLV$(0) + " AND Price<>" + SQLV$(0)
  Search #ch_db;SQL$
  nr = Chf(ch_db)
  If nr
    Map Record #ch_db As InYard_Dtl_Item
    For nn = 1 To nr
      Read Record #ch_db;InYardDtlItem.
      PaidWeight = InYardDtlItem.NetWt + InYardDtlItem.AdjWt
      Call SAICalcPriceExt(ch_110Aro,PaidWeight,gbl_um$,InYardDtlItem.Price,SAISpaceFill$(InYardDtlItem.PriceUM$,2),2,x,stat)
      Credit.UntransferredSales = Credit.UntransferredSales + x
    Next nn
  End If 
End Sub 
Sub Total8530(TicNo$)
  k1$ = TicNo$
  Do 
    Search #ch_8530ro,3,1;k1$,r,e
    If e Exit Do 
    If k1$[1,Len(TicNo$)] <> TicNo$ Exit Do 
    Call SAIReadRecord(ch_8530ro,recdef_8530.,"Y","U",r,RetailSales$,RetailSales[],stat,errmess$)
    If stat = 0
      If RetailSales$[13,14] <> "*M" And RetailSales$[87,88] <> "YY" ! Skip *M and updated tkts
        Credit.UntransferredSales = Credit.UntransferredSales + RetailSales[11]
      End If 
    End If 
  Loop 
End Sub 
Sub CreditLimitCalc(CustNo$)
  ! 8430
  ktemp$ = SAISpaceFill$(CustNo$,6)
  k2$ = ktemp$
  Do 
    Search #ch_8430ro,3,2;ktemp$,r,e
    If e Exit Do 
    If ktemp$[1,Len(k2$)] <> k2$ Exit Do 
    Call SAIReadRecord(ch_8430ro,recdef_8430.,"Y","U",r,SalesTicket$,SalesTicket3[],SalesTicket4[],stat,errmess$)
    If stat = 0
      If SalesTicket$[146,146] = " " And SalesTicket$[89,89] <> "I" And SalesTicket$[89,89] <> "T" ! Skip G/T tkt or Interco/Trans
        If SalesTicket$[13,14] = "*M"
          Call Total8530(SalesTicket$[1,6])
        Else 
          If z$[644,646] = "255" Or z$[644,646] = "355"
            Credit.UntransferredSales = Credit.UntransferredSales + SalesTicket4[1] * 1.1 ! Add 10% to account for GST
          Else 
            Credit.UntransferredSales = Credit.UntransferredSales + SalesTicket4[1]
          End If 
        End If 
      End If 
    End If 
  Loop 
End Sub 
Sub CreditLimitCheck(CustNo$,CreditUsed,CreditStatus$,ExitStatus)
  Clear Credit.,CreditStatus$,CustomerTemp.,ExitStatus
  If ScaleCodes$[42,42] = "N" Or ScaleCodes$[42,42] = " " Exit Sub 
  CustomerTemp. = Customer.
  If Customer.HomeOfficeXRef$ ! Home Office specified
    If Customer.HomeOffice$ = "" And CRCodes$[44,44] = "H" ! Credit Limit on home office only
      Call RetrieveCustomer(Customer.HomeOfficeXRef$,CustomerTemp.,stat)
      If stat
        Call SAITouchError("Cannot perform Credit Check.\15\Unable to retrieve Home Office Customer record.")
        ExitStatus = 1
        Exit Sub 
      End If 
    End If 
  End If 
  If z$[644,646] = "255" Or z$[644,646] = "355"
    Credit.UntransferredSales = CreditUsed * 1.1 ! Add 10% to account for GST
  Else 
    Credit.UntransferredSales = CreditUsed
  End If 
  Credit.CreditLimit = CustomerTemp.CreditLimit
  Credit.CurrentBalance = CustomerTemp.CurrentBalance
  Credit.CreditChkPercent = CustomerTemp.CreditCheckPercent
  ! Check if current ticket is a *M since all amounts will be in 8530's not in CreditUsed
  If ItemCount
    If Items.[1].MaterialCode$[1,2] = "*M" Call Total8530(TicketHeader.TicketNo$)
  End If 
  If CustomerTemp.HomeOffice$ = "Y"
    SQL$ = "SELECT CustomerNo,FutureAccrual FROM Customer_Master"
    SQL$ = SQL$ + " WHERE HomeOfficeXRef=" + SQLV$(CustomerTemp.CustomerNo$)
    SQL$ = SQL$ + " AND CustomerNo<>" + SQLV$(CustomerTemp.CustomerNo$)
    Search #ch_db;SQL$
    ncus = Chf(ch_db)
    If ncus
      Clear ilist$[]
      If ncus > ilistmax
        ilistmax = ncus
        Dim ilist$[ilistmax,ilistlen]
      End If 
      For n = 1 To ncus
        Read #ch_db;ilist$[n],x
        Credit.FutureAccrual = Credit.FutureAccrual + x
      Next n
      For n = 1 To ncus
        Call CreditLimitCalc(ilist$[n])
      Next n
    End If 
  Else 
    Credit.FutureAccrual = CustomerTemp.FutureAccrual
    Call CreditLimitCalc(CustomerTemp.CustomerNo$)
  End If 
  Credit.CreditUsed = Credit.CurrentBalance + Credit.FutureAccrual + Credit.UntransferredSales
  If Credit.CreditUsed > Credit.CreditLimit Let Credit.OverLimit = Credit.CreditUsed - Credit.CreditLimit
  If Credit.CreditLimit Let Credit.PercentReached = ((Credit.CreditUsed / Credit.CreditLimit) * 100)
  If CustomerTemp.CreditStatus$ = "X" ! Credit Hold
    CreditStatus$ = "X"
  Else 
    If Credit.CreditLimit = 0 Or Credit.PercentReached = 0 ! No credit limit or no % reached
      CreditStatus$ = ""
    Else If Credit.CreditChkPercent = 0 And Credit.PercentReached < 100 ! No % for Auth entered and % reached is less than 100
      CreditStatus$ = ""
    Else 
      If Credit.PercentReached < Credit.CreditChkPercent ! % reached < % allowed
        CreditStatus$ = ""
      Else If Credit.PercentReached < 100 ! Set to Warn only
        CreditStatus$ = "W"
      Else 
        CreditStatus$ = "Y" ! Credit Limit reached
      End If 
    End If 
  End If 
  If CreditStatus$
    temp2$ = ""
    If ScaleCodes$[42,42] = "P" ! Prevent
      Select Case CreditStatus$
        Case "E"
          temp2$ = "" ! Already displayed message
        Case "Y"
          temp2$ = "Customer is OVER Credit Limit!!  Cannot select/complete."
        Case "W"
          temp2$ = "WARNING:  Customer is APPROACHING Credit Limit."
          CreditStatus$ = "" ! Only warn in this case
        Case "X"
          temp2$ = "Customer is on CREDIT HOLD.  Cannot select/complete."
      End Select 
    Else If ScaleCodes$[42,42] = "W" ! Warn
      Select Case CreditStatus$
        Case "E"
          temp2$ = "" ! Continue anyway
        Case "Y"
          temp2$ = "WARNING:  Customer is OVER Credit Limit!!"
        Case "W"
          temp2$ = "WARNING:  Customer is APPROACHING Credit Limit."
        Case "X"
          temp2$ = "Customer is on CREDIT HOLD.  Cannot select/complete."
      End Select 
      If CreditStatus$ <> "X" Let CreditStatus$ = "" ! Clear CreditStatus for Warn mode except if Credit Hold
    End If 
    If temp2$ Call SAITouchWarning(temp2$)
    If SCLCredit_EmailAlert
      temp$ = "Scale Credit Alert for Cust # " + CustomerTemp.CustomerNo$ + " at Branch " + Branch$
      Call SAIInitEmailAlert(ch_db,"SCLCredit",CustomerTemp.CustomerNo$,temp$,"HTML_TEXT",ch_email,stat,errmess$)
      If stat = 0
        x = 22
        Print #ch_email;temp$
        If temp2$ Print #ch_email;temp2$
        Print #ch_email;
        Print #ch_email;"Branch"; Tab x;Branch$;" : ";Trim$(Company$[63,92])
        Print #ch_email;"Customer"; Tab x;CustomerTemp.CustomerNo$;" : ";CustomerTemp.Name$
        Print #ch_email;"Date/Time"; Tab x;DateUsing$(Tim#(0),DateformatText$ + " HH:NNpm")
        Print #ch_email;"Operator"; Tab x;WMName$
        Print #ch_email;"Credit Warn %"; Tab x;Trim$(Credit.CreditChkPercent Using "---#%")
        Print #ch_email;"Credit Limit"; Tab x;"$ ";Credit.CreditLimit Using "----,---,--#.##"
        Print #ch_email;"Current Balance"; Tab x;"$ ";Credit.CreditUsed Using "----,---,--#.##"
        If TicketHeader.TicketNo$
          Print #ch_email;
          Print #ch_email;"Ticket No."; Tab x;TicketHeader.TicketNo$
          !  print #ch_email;"Shipment No.";Tab x;TicketHeader.ShipmentNo$
          If ItemCount
            Print #ch_email;"Material"; Tab x;Items.[1].MaterialCode$;" : ";Items.[1].MaterialDesc$
            Print #ch_email;"Net Weight"; Tab x;Trim$(Items.[1].NetWt Using "---,---,---,--#");" ";gbl_um$
            Print #ch_email;"Current Ticket Price"; Tab x;"$ ";Trim$(Items.[1].Price Using "----#.####");" ";Items.[1].PriceUM$
            Print #ch_email;"Current Ticket Value"; Tab x;"$ ";Trim$(Items.[1].MatExt Using "----,---,--#.##")
          End If 
        End If 
        Print #ch_email;"</pre>"
        Close #ch_email
      End If 
    End If 
  End If 
End Sub 
Sub DisplayCustomerComments(CustomerNo$,status)
  status = 0
  ktemp$ = "C" + SAISpaceFill$(CustomerNo$,6) + Rep$(" ",18) + "TSW"
  ksav$ = ktemp$
  Search #ch_1115ro,2,1;ktemp$,r,e
  If e Exit Sub 
  chsupc = SAIOpenWindow("Customer Comments",800,180,1)
  Print #chsupc;PChr$("Arial");'FONTFACE 12FONTSIZE WCSETFONT';
  Print #chsupc;PChr$(10,10,5,790,145,"",0);'WCTEXT';
  Print #chsupc;'10WCSELECT';
  ktemp$ = ksav$
  Do 
    Search #ch_1115ro,3,1;ktemp$,r,e
    If e Exit Do 
    If ktemp$[1,Len(ksav$)] <> ksav$ Exit Do 
    Call SAIReadRecord(ch_1115ro,recdef_1115.,"Y","U",r,GblCmtTmp$,stat,errmess$)
    Print #chsupc;Trim$(GblCmtTmp$[31,80])
  Loop 
  Print #chsupc;'0WCSELECT';
  Call SAIButtons(chsupc,2,1,"&&OK~CANCEL",800,150,25,120,20)
  Print #chsupc;'1WCFOCUS';
  Do 
    Input #chsupc; Len (1);w$
    Select Case w$
      Case 'F1' ! OK
        status = 0
        Exit Do 
      Case 'F2' ! Cancel
        status = 1
        Exit Do 
    End Select 
  Loop 
  Close #chsupc
End Sub 
Sub ValidateTransferBranch(EntityNo$,ExitStatus)
  ExitStatus = 1 ! set status to invalid first
  k$ = "Y"
  Do 
    Search #ch_110Aro,3,1;k$,r,e
    If e Exit Do 
    If k$[1,1] <> "Y" Exit Do 
    Call SAIReadRecord(ch_110Aro,recdef_110A.,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
    If ScrapCode$[36,36] <> "Y" ! Not Brokerage yard
      If Trim$(ScrapCode$[57,62]) = EntityNo$
        If Pos(ValidTransferBranches$, = ScrapCode$[3,4])
          ExitStatus = 0 ! Branch is a valid transfer branch
        Else 
          ExitStatus = 1 ! No a valid transfer branch
        End If 
        Exit Do 
      End If 
    End If 
  Loop 
End Sub 
Sub RetrieveCustomer(CustNo$,CustomerMaster. As Customer_Master,stat)
  Clear CustomerMaster.
  Search #ch_db;"SELECT " + SQLN$(CustomerMaster.) + " FROM Customer_Master WHERE CustomerNo=" + SQLV$(Trim$(CustNo$))
  If Chf(ch_db)
    Map Record #ch_db As Customer_Master
    Read Record #ch_db;CustomerMaster.
    stat = 0
  Else 
    stat = 1
  End If 
End Sub 
Sub CustomerSearch(klist$)
  icount = 0
  Clear ilistsel$[]
  If ilistcur > ilistmax
    ilistmax = ilistmax + 10
    Dim ilist$[ilistmax,ilistlen]
  End If 
  ilist$[ilistcur] = klist$
  Print #chlist;PChr$(1,3);'WCDISABLE';
  Print #chlist;PChr$(30,29 + imax);'WCDELETE';
  Print #chlist;SAIMonoFont$();'14FONTSIZE BBOLD WCSETFONT';
  SQL$ = "SELECT " + SQLN$(CustomerList.) + " FROM Customer_Master"
  SQL$ = SQL$ + " WHERE ISNULL(CancelDate) AND BrokerInvoiceWgtCode<>" + SQLV$("")
  If TransferMode
    SQL$ = SQL$ + " AND IntercompanyType=" + SQLV$("I")
  Else 
    SQL$ = SQL$ + " AND IntercompanyType<>" + SQLV$("I")
  End If 
  If Trim$(z$[642,643]) ! Environment is using corporate logic
    If Trim$(z$[616,618]) ! Current branch belongs to a branch group
      SQL$ = SQL$ + " AND (Branch=" + SQLV$(Branch$) + " OR (Branch=" + SQLV$(z$[642,643]) + " AND BranchGroup IN (" + SQLV$(z$[616,618]) + "," + SQLV$("") + ")))"
    Else 
      SQL$ = SQL$ + " AND (Branch=" + SQLV$(Branch$) + " OR (Branch=" + SQLV$(z$[642,643]) + " AND BranchGroup=" + SQLV$("") + "))"
    End If 
  Else 
    SQL$ = SQL$ + " AND Branch =" + SQLV$(Branch$)
  End If 
  If ilistcur = 0 And klist$ Let temp$ = ">= " Else Let temp$ = "> "
  If CustomerDir = 1
    SQL$ = SQL$ + " AND CustomerNo " + temp$ + SQLV$(klist$) + " ORDER BY CustomerNo LIMIT " + Str$(imax)
  Else 
    SQL$ = SQL$ + " AND CustomerAlpha " + temp$ + SQLV$(klist$) + " ORDER BY CustomerAlpha LIMIT " + Str$(imax)
  End If 
  Try 
    Search #ch_db;SQL$
    nr = Chf(ch_db)
    If nr
      Map Record #ch_db As Customer_List
      For i = 1 To nr
        Read Record #ch_db;CustomerList.
        If CustomerDir = 1
          temp$ = SAISpaceFill$(CustomerList.CustomerNo$,6) + " - " + SAISpaceFill$(CustomerList.Name$,30) + "  " + SAISpaceFill$(CustomerList.City$,20)
        Else 
          temp$ = SAISpaceFill$(CustomerList.CustomerAlpha$,10) + " - " + SAISpaceFill$(CustomerList.Name$,30) + "  " + SAISpaceFill$(CustomerList.City$,17)
        End If 
        temp$ = Replace$(temp$,"&","&&")
        Print #chlist;PChr$(icount + 30,10,5 + (icount * 30),ilistw - 10,(icount + 1) * 30,temp$,2);'WCBUTTON';
        ilistsel$[icount] = CustomerList.CustomerNo$
        icount = icount + 1
      Next i
      If CustomerDir = 1
        klist$ = CustomerList.CustomerNo$
      Else 
        klist$ = CustomerList.CustomerAlpha$
      End If 
    End If 
  Else 
    nr = 0
  End Try 
  Print #chlist;PChr$(1,3);'WCENABLE';
  If nr < imax Print #chlist;'2WCDISABLE';
  If ilistcur = 0 Print #chlist;'1WCDISABLE';
  If icount = 0
    Print #chlist;'3WCFOCUS';
  Else 
    Print #chlist;'30WCFOCUS';
  End If 
End Sub 
Sub ListCustomers(klist$)
  imax = 9
  Clear ilist$[]
  ilistcur = 0
  ilistw = 920
  If TransferMode = 0 Let temp$ = "List Standard Customers by " Else Let temp$ = "List Inter-Company Customers by "
  If CustomerDir = 1 Let temp$ = temp$ + "Number" Else Let temp$ = temp$ + "Alpha"
  Call SAITouchButtonList(chlist,imax,ilistw,temp$)
  Call CustomerSearch(klist$)
  Do 
    Input #chlist; Len (1);w$
    Select Case w$
      Case 'F1' ! Previous
        If ilistcur > 0
          ilistcur = ilistcur - 1
          klist$ = ilist$[ilistcur]
          Call CustomerSearch(klist$)
        End If 
      Case 'F2' ! Next
        ilistcur = ilistcur + 1
        Call CustomerSearch(klist$)
      Case 'F3' ! Cancel
        CustomerNo$ = ""
        Exit Do 
      Case 'F30' To 'F39'
        i = Asc(w$) - Asc('F30')
        CustomerNo$ = ilistsel$[i]
        Exit Do 
    End Select 
  Loop 
  Close #chlist
End Sub 
Sub GetCustomer()
  If CustomerDefaultFromID$ = "Y" Let ysize = 320 Else Let ysize = 290
  chwin = SAIOpenWindow("Customer Selection",820,ysize,1)
  If AllowEditFrequents$ = "Y"
    Print #chwin;PChr$(90,"Edit Frequent Customers","");'WCMENU';
    Print #chwin;PChr$(61,"&Edit","");'WCMENUACTION';
    Print #chwin;'WCENDMENU';
  End If 
  Print #chwin;SAIArialFont$();
  Print #chwin;PChr$(bgcolor1);'BACKCOLOR CS';
  Print #chwin;'12FONTSIZE BBOLD WCSETFONT';
  Print #chwin;PChr$(16777215,255);'WCSETCOLOR';
  Print #chwin;PChr$(7,85,13,385,33,"             Standard  ",6);'WCRADIO';
  Print #chwin;PChr$(8,435,13,735,33,"  Inter-Company (Transfer)",6);'WCRADIO';
  Print #chwin;'10FONTSIZE WCSETFONT WCSETCOLOR';
  Print #chwin;PChr$(200,10,1,810,37,"Customer Type");'WCGROUP';
  Print #chwin;'12FONTSIZE EBOLD WCSETFONT';
  x0 = 10 \ y0 = 38
  x = x0 + 10 \ y = y0 + 38
  Print #chwin;PChr$(20,x,y0 + 11,x + 100,y0 + 35,"Search",2);'WCBUTTON';
  Print #chwin;'WCRESETCOLOR';
  Print #chwin;PChr$(1,x,y,x + 100,y + 18,"Number",2);'WCRADIO';
  Print #chwin;PChr$(2,x + 120,y,x + 220,y + 18,"Alpha",2);'WCRADIO';
  Print #chwin;PChr$(3,x + 240,y,x + 330,y + 18,"S.O.#",2);'WCRADIO';
  y = y + 25
  dx = 230
  Print #chwin;'EBOLD 12FONTSIZE WCSETFONT';
  KBParams.InputElement = 4
  Print #chwin;PChr$(KBParams.InputElement,x,y,x + dx,y + 18,"",2);'WCSTRING';
  Print #chwin;PChr$(5,x + dx + 5,y - 3,x + dx + 100,y + 21,"List",2);'WCBUTTON';
  y = y + 25
  Print #chwin;'10FONTSIZE BBOLD WCSETFONT WCSETCOLOR';
  Print #chwin;PChr$(201,x0,y0,x + 340,y,"Find by:");'WCGROUP';
  x0 = x0 + 360
  Print #chwin;PChr$(202,x0,y0,810,y,"Frequent Customers:");'WCGROUP';
  Print #chwin;'EBOLD WCSETFONT';
  xsav = x0 \ ysav = y0
  If TransferMode
    Call DisplayFreqEntityButtons(chwin,FreqIntCustomer.[],1)
  Else 
    Call DisplayFreqEntityButtons(chwin,FreqCustomer.[],1)
  End If 
  KBParams.StartX = 15
  KBParams.StartY = ysize - 160
  KBParams.ButtonHeight = 25
  KBParams.ButtonWidth = 50
  KBParams.FontSize1 = 14
  KBParams.FontSize2 = 12
  KBParams.IELength = 0
  KBParams.IEMaxChar = 0
  KBParams.FuncBtnLen = 0
  Call SAIDrawKeyboard(chwin,KBParams.,0)
  LastUsed$ = ""
  If CustomerDefaultFromID$ = "Y"
    Call SearchID("S",ID$,w$)
    If w$
      Search #ch_db;"SELECT " + SQLN$(CustomerList.) + " FROM Customer_Master WHERE CustomerNo=" + SQLV$(Trim$(w$))
      If Chf(ch_db)
        Map Record #ch_db As Customer_List
        Read Record #ch_db;CustomerList.
        temp$ = "ID last used as:  " + CustomerList.CustomerNo$ + " - " + CustomerList.Name$
        Print #chwin;PChr$(6,10,KBParams.StartY - 30,810,KBParams.StartY - 5,temp$,2);'WCBUTTON';
        LastUsed$ = CustomerList.CustomerNo$
      End If 
    End If 
  End If 
  FullSONo$ = ""
  If TransferMode <> 0 And TransferMode <> 1 Let TransferMode = 0 ! Default to standard
  If TransferMode = 0 Print #chwin;'7WCSELECT';"1" Else Print #chwin;'8WCSELECT';"1"
  CustomerDir = 1 ! Default to Number
  Print #chwin;'1WCSELECT';"1"
  Print #chwin;'0WCSELECT';
GetCustomer_InputLoop: !
  Print #chwin;PChr$(KBParams.InputElement);'WCFOCUS';
  ishift = 0
  istring$ = ""
  Do 
    Input #chwin; Len (1);w$
    Select Case w$
      Case 'F10' To 'F18' ! Frequent Customer
        i = Asc(w$) - Asc('F9')
        If TransferMode = 0
          If FreqCustomer.[i].EntityNo$
            CustomerNo$ = FreqCustomer.[i].EntityNo$
            Exit Do 
          End If 
        Else 
          If FreqIntCustomer.[i].EntityNo$
            CustomerNo$ = FreqIntCustomer.[i].EntityNo$
            Exit Do 
          End If 
        End If 
      Case 'F5' ! List
        CustomerDir = SAIQueryRadio$(chwin,1,3,"123")
        If CustomerDir = 3
          FullSONo$ = Trim$(SAIQuery$(chwin,KBParams.InputElement))
          Call ListSOs(FullSONo$,"N",status)
          If status = 0
            CustomerNo$ = Trim$(SODetail$[1,6])
            If WeightOnly
              FullSONo$ = ""
            Else 
              FullSONo$ = SODetail$[7,18]
            End If 
            Exit Do 
          End If 
        Else 
          klist$ = Trim$(SAIQuery$(chwin,KBParams.InputElement))
          Call ListCustomers(klist$)
          If CustomerNo$ Exit Do 
        End If 
      Case 'F6' ! Last Used ID
        CustomerNo$ = LastUsed$
        Exit Do 
      Case 'F7' ! Standard Customer
        TransferMode = 0
        x0 = xsav \ y0 = ysav
        Call DisplayFreqEntityButtons(chwin,FreqCustomer.[],1)
      Case 'F8' ! Inter-Co Customer
        TransferMode = 1
        x0 = xsav \ y0 = ysav
        Call DisplayFreqEntityButtons(chwin,FreqIntCustomer.[],1)
      Case 'F20' ! Search
        CustomerDir = SAIQueryRadio$(chwin,1,3,"123")
        If CustomerDir = 3
          Call SAITouchWarning("Cannot Search when S.O.# is selected.")
        Else 
          Clear CustomerNo$,temp$
          w$ = Trim$(SAIQuery$(chwin,KBParams.InputElement))
          If w$
            If CustomerDir = 1
              CustomerNo$ = w$
            Else 
              temp$ = w$
            End If 
          End If 
          If TransferMode
            SQL$ = "IntercompanyType=" + SQLV$("I")
          Else 
            SQL$ = "IntercompanyType<>" + SQLV$("I")
          End If 
          Call SAISelectCustomer(ch_db,z$,1,SQL$,CustomerNo$,temp$,status)
          If status = 0 Exit Do 
        End If 
      Case 'F61'
        If TransferMode
          Call EditFrequentEntities("InterCoCustomer",FreqIntCustomer.[],status)
          If status = 0
            x0 = xsav \ y0 = ysav
            Call DisplayFreqEntityButtons(chwin,FreqIntCustomer.[],1)
          End If 
        Else 
          Call EditFrequentEntities("Customer",FreqCustomer.[],status)
          If status = 0
            x0 = xsav \ y0 = ysav
            Call DisplayFreqEntityButtons(chwin,FreqCustomer.[],1)
          End If 
        End If 
      Case Else 
        Call SAIKeyBoardInput(chwin,chwin,KBParams.,ishift,w$,istring$,istatus)
        If istatus = -1
          CustomerNo$ = ""
          Exit Do 
        Else If istatus
          CustomerDir = SAIQueryRadio$(chwin,1,3,"123")
          Select Case CustomerDir
            Case 1
              CustomerNo$ = SAISpaceFill$(UCase$(istring$),6)
              Exit Do 
            Case 2
              Search #ch_db;"SELECT CustomerNo FROM Customer_Master WHERE CustomerAlpha=" + SQLV$(istring$)
              If Chf(ch_db)
                Map #ch_db;
                Read #ch_db;CustomerNo$
                Exit Do 
              Else 
                Call SAITouchError("Customer Alpha not found!\15\Please try again.")
                Print #chwin;PChr$(KBParams.InputElement);'WCSELECT CU 0WCSELECT';
              End If 
            Case 3 ! S.O.#
              If Trim$(istring$) = ""
                Call SAITouchWarning("You must enter a Valid S.O.#")
              Else 
                FullSONo$ = istring$
                Call RetrieveSO(FullSONo$,status)
                If status = 0
                  CustomerNo$[1,6] = SODetail$[1,6]
                  If WeightOnly
                    FullSONo$ = ""
                  Else 
                    FullSONo$ = SODetail$[7,18]
                  End If 
                  Exit Do 
                Else If status = 1
                  FullSONo$ = ""
                  Call SAITouchWarning("Invalid Sales Order entered.  Please try again.")
                End If 
              End If 
          End Select 
        End If 
    End Select 
  Loop 
  If CustomerNo$
    Call RetrieveCustomer(CustomerNo$,Customer.,stat)
    If stat
      Call SAITouchWarning("Customer Number does not exist!\15\Please try again.")
    Else 
      If ValidCustomer(z$,Customer.) = 0
        Call SAITouchWarning("Invalid Customer Entered!\15\Please try again.")
        stat = 1
      End If 
    End If 
    If stat = 0
      stat = InterCoCustomerCheck(Customer.,TransferMode)
      If stat Call SAITouchWarning("Customer is not valid for selected transaction type.")
    End If 
    If stat = 0
      If TransferMode = 0
        Call CreditLimitCheck(CustomerNo$,TicketTotals.TotalPrice,CreditStatus$,ExitStatus)
        If CreditStatus$ Goto GetCustomer_InputLoop
      Else 
        If ValidTransferBranches$
          If ValidTransferBranches$ = "NONE"
            stat = 1
            Call SAITouchWarning("You are not permitted to create Outbound Transfers.")
          Else 
            Call ValidateTransferBranch(CustomerNo$,stat)
            If stat Call SAITouchWarning("You are not permitted to transfer to that Branch.")
          End If 
          If stat
            Print #chwin;PChr$(KBParams.InputElement);'WCSELECT CU 0WCSELECT';
            Goto GetCustomer_InputLoop
          End If 
        End If 
      End If 
    Else 
      Print #chwin;PChr$(KBParams.InputElement);'WCSELECT CU 0WCSELECT';
      Goto GetCustomer_InputLoop
    End If 
  End If 
  Close #chwin
End Sub 
Sub GetTripTicketNumber()
  ktemp$ = "C" + SAISpaceFill$(CarrierNo$,6)
  Call SAIGetRecord(ch_110Aro,recdef_110A.,ktemp$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
  If ScrapCode$[118,118] = "Y" Or (ScrapCode$[116,116] = "Y" And ScaleCodes$[27,27] <> "Y") ! Trip Ticket required
    w$ = TicketHeader.TripTicketNo$
    Do 
      Call SAIKeyBoardGen("Enter Trip Ticket Number",KBParams.alphacase,6,0,w$,stat)
      If stat = 0 And Trim$(w$) <> ""
        If w$ = "XXXXXX" And Trim$(TicketHeader.OrderNo$) <> "" And ScrapCode$[118,118] = "Y"
          Call SAITouchWarning("XXXXXX Trip Ticket not allowed on a Contract Purchase.")
        Else 
          !  TicketHeader.TripTicketNo$=SAIFill$(Trim$(w$),"R","0",6) Not sure why we need to right justify
          TicketHeader.TripTicketNo$ = Trim$(w$)
          Exit Do 
        End If 
      Else 
        Call SAITouchWarning("You must enter a Trip Ticket Number.")
      End If 
    Loop 
  Else 
    TicketHeader.TripTicketNo$ = ""
  End If 
End Sub 
Sub GetFreightHours(FreightHrs)
  Do 
    Call SAIKeyPad("Enter Freight Hours",num,0,status)
    If status = 0 And num <> 0
      If num > 100
        ans = SAITouchYesNo("Are you sure that Freight Hours should be that large (" + Str$(num) + " hrs)?")
        If ans
          FreightHrs = num
          Exit Do 
        End If 
      Else 
        FreightHrs = num
        Exit Do 
      End If 
    Else 
      ans = SAITouchYesNo("Are you sure that zero hours are desired?")
      If ans
        FreightHrs = -9.99
        Exit Do 
      End If 
    End If 
  Loop 
End Sub 
Sub ValidateCarrier(ScrapCode$,status,errmess$)
  status = 1
  errmess$ = ""
  If ScrapCode$[120,120] = "Y" ! Generic Carrier
    errmess$ = ScrapCode$[2,7] + " is a Generic Carrier and cannot be selected."
    status = 2
    Exit Sub 
  End If 
  If ScrapCode$[133,133] = "Y" ! Processor
    errmess$ = ScrapCode$[2,7] + " is a Processor and cannot be selected."
    status = 2
    Exit Sub 
  End If 
  If Trim$(ScrapCode$[92,97]) ! Cancelled
    errmess$ = "** Cancelled " + SAIDateDisplay$(ScrapCode$[92,97]) + " **"
    status = 2
    Exit Sub 
  End If 
  If Trim$(z$[616,618]) <> "" And Trim$(ScrapCode$[130,132]) <> "" And z$[616,618] <> ScrapCode$[130,132]
    errmess$ = "Carrier cannot be accessed from this Branch & Branch Group!"
    status = 2
    Exit Sub 
  End If 
  temp$ = RunDate$[5,6] + RunDate$[1,4]
  If Trim$(ScrapCode$[86,91])
    If temp$ > ScrapCode$[90,91] + ScrapCode$[86,89]
      If errmess$ = "" Let errmess$ = "Insurance Expired " + SAIDateDisplay$(ScrapCode$[86,91])
      If ScrapCode$[47,47] = "P" Exit Sub 
    End If 
  End If 
  If Trim$(ScrapCode$[48,53])
    If temp$ > ScrapCode$[52,53] + ScrapCode$[48,51]
      If errmess$ = "" Let errmess$ = "Liability Ins Expired " + SAIDateDisplay$(ScrapCode$[48,53])
      If ScrapCode$[47,47] = "P" Exit Sub 
    End If 
  End If 
  If Trim$(ScrapCode$[54,59])
    If temp$ > ScrapCode$[58,59] + ScrapCode$[54,57]
      If errmess$ = "" Let errmess$ = "Workers Comp Expired " + SAIDateDisplay$(ScrapCode$[54,59])
      If ScrapCode$[47,47] = "P" Exit Sub 
    End If 
  End If 
  If Trim$(ScrapCode$[60,65])
    If temp$ > ScrapCode$[64,65] + ScrapCode$[60,63]
      If errmess$ = "" Let errmess$ = "Oper. Auth. Expired " + SAIDateDisplay$(ScrapCode$[60,65])
      If ScrapCode$[47,47] = "P" Exit Sub 
    End If 
  End If 
  If Trim$(ScrapCode$[66,71])
    If temp$ > ScrapCode$[70,71] + ScrapCode$[66,69]
      If errmess$ = "" Let errmess$ = "Drug/Alcohol Expired " + SAIDateDisplay$(ScrapCode$[66,71])
      If ScrapCode$[47,47] = "P" Exit Sub 
    End If 
  End If 
  If errmess$ = "" Let status = 0
End Sub 
Sub CarrierSearch(k$,VehicleType$)
  icount = 0
  Clear ilistsel$[]
  If ilistcur > ilistmax
    ilistmax = ilistmax + 10
    Dim ilist$[ilistmax,ilistlen]
  End If 
  ilist$[ilistcur] = k$
  Print #chlist;PChr$(1,3);'WCDISABLE';
  Print #chlist;PChr$(30,29 + imax);'WCDELETE';
  Do 
CarrierSearchNext: !
    Search #ch_110Aro,3,1;k$,r,e
    If e Exit Do 
    If k$[1,1] <> "C" Exit Do 
    Call SAIReadRecord(ch_110Aro,recdef_110A.,"Y","U",r,ScrapCode$,ScrapCode[],e,errmess$)
    If e Goto CarrierSearchNext
    If Trim$(VehicleType$) And ScrapCode$[75,75] <> VehicleType$ Goto CarrierSearchNext
    Call ValidateCarrier(ScrapCode$,status,errmess$)
    opt = 2
    If status
      If status = 2 Goto CarrierSearchNext
      If ScrapCode$[47,47] = "P" Let opt = 1
      !      if ScrapCode$[47,47]<>"W" Let errmess$=""
    End If 
    temp$ = ScrapCode$[2,7] + " - " + ScrapCode$[15,34] + "  " + SAIFill$(errmess$,"R"," ",30)
    temp$ = Replace$(temp$,"&","&&")
    Print #chlist;PChr$(icount + 30,10,20 + (icount * 30),ilistw - 10,15 + (icount + 1) * 30,temp$,opt);'WCBUTTON';
    ilistsel$[icount] = ScrapCode$[2,7]
    icount = icount + 1
  Loop Until icount = imax
  Print #chlist;PChr$(1,3);'WCENABLE';
  If e Print #chlist;'2WCDISABLE';
  If ilistcur = 0 Print #chlist;'1WCDISABLE';
  Print #chlist;'3WCFOCUS';
End Sub 
Sub ListCarriers(k$,VehicleType$,CarrierNo$) ! List Generic Carriers
  imax = 8
  Clear ilist$[]
  ilistcur = 0
  ilistw = 940
  If Trim$(VehicleType$)
    temp$ = "List Carriers for Vehicle Type ''" + VehicleType$ + "''"
  Else 
    temp$ = "List Carriers for ALL Vehicle Types"
  End If 
  Call SAITouchButtonList(chlist,imax,ilistw,temp$,"Carr-CD   Carrier Name" + Rep$(" ",20) + "Warning")
  If Len(k$) = 7 Let k$[7,7] = Chr$(Asc(k$[7,7]) - 1)
  Call CarrierSearch(k$,VehicleType$)
  Do 
    Input #chlist; Len (1);w$
    Select Case w$
      Case 'F1' ! Previous
        If ilistcur > 0
          ilistcur = ilistcur - 1
          k$ = ilist$[ilistcur]
          Call CarrierSearch(k$,VehicleType$)
        End If 
      Case 'F2' ! Next
        ilistcur = ilistcur + 1
        Call CarrierSearch(k$,VehicleType$)
      Case 'F3' ! Cancel
        CarrierNo$ = ""
        Exit Do 
      Case 'F30' To 'F39'
        i = Asc(w$) - Asc('F30')
        CarrierNo$ = ilistsel$[i]
        Exit Do 
    End Select 
  Loop 
  Close #chlist
End Sub 
Sub GetCarrier(VehicleType$,CarrierNo$,status) ! Generic Carrier Selection
  CarrierNo$ = ""
  FreightHrs = 0
  chwin = SAIOpenWindow("Carrier Selection",820,260,1)
  If AllowEditFrequents$ = "Y"
    Print #chwin;PChr$(90,"Edit Frequent Carriers","");'WCMENU';
    Print #chwin;PChr$(61,"&Edit","");'WCMENUACTION';
    Print #chwin;'WCENDMENU';
  End If 
  Print #chwin;SAIArialFont$();
  Print #chwin;PChr$(bgcolor1);'BACKCOLOR CS';
  Print #chwin;'WCSETCOLOR';
  Print #chwin;'12FONTSIZE WCSETFONT';
  x0 = 10 \ y0 = 10
  x = x0 + 10 \ y = y0 + 20
  Print #chwin;'WCRESETCOLOR';
  !  print #chwin;PChr$(1,x,y,x+100,y+18,"Barcode",2);'WCRADIO';
  !  print #chwin;PChr$(1,x,y,x+100,y+18,"Number",2);'WCRADIO';
  !  print #chwin;PChr$(2,x+120,y,x+220,y+18,"Alpha",2);'WCRADIO';
  y = y + 15
  dx = 220
  Print #chwin;'EBOLD 12FONTSIZE WCSETFONT';
  KBParams.InputElement = 4
  Print #chwin;PChr$(KBParams.InputElement,x,y,x + dx,y + 18,"",2);'WCSTRING';
  Print #chwin;PChr$(5,x + dx + 5,y - 3,x + dx + 100,y + 21,"List",2);'WCBUTTON';
  y = y + 45
  Print #chwin;'10FONTSIZE BBOLD WCSETFONT WCSETCOLOR';
  Print #chwin;PChr$(200,x0,y0,x + 340,y,"Carrier Code:");'WCGROUP';
  x0 = x0 + 360
  Print #chwin;PChr$(201,x0,y0,810,y,"Frequent Carriers:");'WCGROUP';
  Print #chwin;'EBOLD WCSETFONT';
  xsav = x0 \ ysav = y0
  Call DisplayFreqEntityButtons(chwin,FreqCarrier.[],1)
  KBParams.StartX = 10
  KBParams.StartY = 100
  KBParams.ButtonHeight = 25
  KBParams.ButtonWidth = 50
  KBParams.FontSize1 = 14
  KBParams.FontSize2 = 12
  KBParams.IELength = 0
  KBParams.IEMaxChar = 0
  KBParams.FuncBtnLen = 0
  Call SAIDrawKeyboard(chwin,KBParams.,0)
  !  SupplierDir=1 ! Default to Number
  !  print #chwin;'1WCSELECT';"1"
  !  print #chwin;'0WCSELECT';
GetCarrier_InputLoop: !
  Print #chwin;PChr$(KBParams.InputElement);'WCFOCUS';
  ishift = 0
  istring$ = ""
  Do 
    Input #chwin; Len (1);w$
    Select Case w$
      Case 'F10' To 'F18' ! Frequent Carrier
        i = Asc(w$) - Asc('F9')
        If FreqCarrier.[i].EntityNo$
          CarrierNo$ = FreqCarrier.[i].EntityNo$
          Exit Do 
        End If 
      Case 'F5' ! List
        !      SupplierDir=SAIQueryRadio$(chwin,1,2,"12")
        k$ = "C" + Trim$(SAIQuery$(chwin,KBParams.InputElement))
        Call ListCarriers(k$,VehicleType$,CarrierNo$)
        If CarrierNo$ Exit Do 
      Case 'F61'
        Call EditFrequentEntities("Carrier",FreqCarrier.[],status)
        If status = 0
          x0 = xsav \ y0 = ysav
          Call DisplayFreqEntityButtons(chwin,FreqCarrier.[],1)
        End If 
      Case Else 
        Call SAIKeyBoardInput(chwin,chwin,KBParams.,ishift,w$,istring$,istatus)
        If istatus = -1
          CarrierNo$ = ""
          Exit Do 
        Else If istatus
          CarrierNo$ = SAISpaceFill$(UCase$(istring$),6)
          Exit Do 
          !        if Trim$(CarrierNo$)
          !          Exit Do
          !        else
          !          Call SAITouchWarning("You must enter a Carrier Code or Cancel.")
          !        endif
        End If 
    End Select 
  Loop 
  If Trim$(CarrierNo$)
    k$ = "C" + SAISpaceFill$(CarrierNo$,6)
    Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],status,errmess$)
    If status
      Call SAITouchError("Carrier not found.\15\Please re-enter.")
      Goto GetCarrier_InputLoop
    Else 
      If Trim$(VehicleType$) And VehicleType$ <> ScrapCode$[75,75]
        Call SAITouchError("Vehicle Type for this Carrier does not match!\15\Please try again.")
        Goto GetCarrier_InputLoop
      End If 
      Call ValidateCarrier(ScrapCode$,status,errmess$)
      If status
        If status = 2 Or ScrapCode$[47,47] = "P"
          Call SAITouchError(errmess$,"Invalid Carrier selected")
          Goto GetCarrier_InputLoop
        Else If ScrapCode$[47,47] = "W"
          ans = SAITouchYesNo(errmess$ + "\15\Do you still wish to select this Carrier?","Warning")
          If ans = 0 Goto GetCarrier_InputLoop
        End If 
      End If 
    End If 
    Call GetTripTicketNumber()
  Else 
    TicketHeader.TripTicketNo$ = ""
  End If 
  Close #chwin
  If CarrierNo$
    If Trim$(CarrierNo$)
      If FullPONo$ And FullPONo$ <> "UNKNOWN"
        If frt_hrs
          If ScrapSRecord$[111,111] = "Y" And Trim$(TicketHeader.TripTicketNo$) And ScrapCode$[116,116] <> "Y"
            ! Don't prompt
          Else 
            Call GetFreightHours(FreightHrs)
          End If 
        End If 
      End If 
    Else 
      CarrierNo$ = ""
    End If 
    status = 0
  Else 
    status = 1
  End If 
End Sub 
Sub ContractCarrierSearch(k$,VehicleType$,CarrierNo$) ! CarrierNo$ passed to list only 1215's for that carrier
  icount = 0
  Clear ilistsel$[]
  If ilistcur > ilistmax
    ilistmax = ilistmax + 10
    Dim ilist$[ilistmax,ilistlen]
  End If 
  ilist$[ilistcur] = k$
  Print #chlist;PChr$(1,3);'WCDISABLE';
  Print #chlist;PChr$(30,29 + imax);'WCDELETE';
  Do 
ContractCarrierSearchNext: !
    Search #ch_1215ro,3,1;k$,r,e
    If e Exit Do 
    If k$[1,Len(ksav$)] <> ksav$
      e = 1
      Exit Do 
    End If 
    Call SAIReadRecord(ch_1215ro,recdef_1215.,"Y","U",r,POFreight$,POFreight[],stat,errmess$)
    If stat Goto ContractCarrierSearchNext
    If CarrierNo$ And Trim$(POFreight$[33,38]) <> Trim$(CarrierNo$) Goto ContractCarrierSearchNext ! skip if wrong carrier
    If POFreight$[134,134] = "Y" Goto ContractCarrierSearchNext ! Flagged for deletion
    If POFreight$[268,268] = "Y" Goto ContractCarrierSearchNext ! Processor
    If POFreight$[273,273] = "Y" Goto ContractCarrierSearchNext ! Generic Carrier (should never happen at this point)
    If Trim$(VehicleType$) And POFreight$[45,45] <> VehicleType$ Goto ContractCarrierSearchNext
    If POFreight$[45,45] <> PODetail$[38,38] And POFreight$[45,45] <> PODetail$[48,48] Goto ContractCarrierSearchNext
    ktemp$ = "C" + POFreight$[33,38]
    Call SAIGetRecord(ch_110Aro,recdef_110A.,ktemp$,1,"Y","U",rec_110A,ScrapCode$,ScrapCode[],stat,errmess$)
    If stat Goto ContractCarrierSearchNext
    Call ValidateCarrier(ScrapCode$,status,errmess$)
    If status = 2 Goto ContractCarrierSearchNext
    If POFreight$[45,45] = "C" ! if Rail Car Carrier check for different size before listing (piggyback if same size)
      For n = 1 To icount
        If POFreight$[46,47] = ilistsel$[n - 1][7,8] Goto ContractCarrierSearchNext ! Same size already listed, so skip
      Next n
    End If 
    opt = 2
    If status And ScrapCode$[47,47] = "P" Let opt = 1
    temp$ = " " + POFreight$[20,21] + "    " + ScrapCode$[2,7] + "      " + POFreight$[45,45] + "      " + POFreight$[46,47] + "  " + ScrapCode$[15,34] + "   "
    temp$ = Replace$(temp$,"&","&&")
    Print #chlist;PChr$(icount + 30,10,20 + (icount * 30),ilistw - 10,15 + (icount + 1) * 30,temp$,opt);'WCBUTTON';
    ilistsel$[icount] = POFreight$[33,38] + POFreight$[46,47] + POFreight$[41,42] ! Carrier + Veh Size + E Rate UM
    icount = icount + 1
    !    if POFreight$[45,45]="C" ! Stop at first Rail Car Carrier
    !      e=1
    !      Exit Do
    !    endif
  Loop Until icount = imax
  Print #chlist;PChr$(1,3);'WCENABLE';
  If e Print #chlist;'2WCDISABLE';
  If ilistcur = 0 Print #chlist;'1WCDISABLE';
  If icount = 0
    Print #chlist;'3WCFOCUS';
  Else 
    Print #chlist;'30WCFOCUS';
  End If 
End Sub 
Sub ListContractCarriers(k$,VehicleType$,VehicleSize$,FreightHrs,CarrierNo$) ! CarrierNo$ passed to list only 1215's for that carrier
  imax = 8
  Clear ilist$[]
  ilistcur = 0
  ilistw = 800
  If Trim$(VehicleType$)
    temp$ = "List Carriers for PO #" + Trim$(FullPONo$[1,10]) + "-" + FullPONo$[11,12] + ", Vehicle Type ''" + VehicleType$ + "''"
  Else 
    temp$ = "List Carriers for  PO #" + Trim$(FullPONo$[1,10]) + "-" + FullPONo$[11,12] + ", ALL Vehicle Types"
  End If 
  If CarrierNo$ Let temp$ = temp$ + ", Carrier=" + CarrierNo$
  Call SAITouchButtonList(chlist,imax,ilistw,temp$," Seq # Carr-CD  Veh-Type Size Carrier Name")
  !             " XX    XXXXXX      X      XX  XXXXXXXXXXXXXXXXXXXX
  ksav$ = k$
  Call ContractCarrierSearch(k$,VehicleType$,CarrierNo$)
  Do 
    Input #chlist; Len (1);w$
    Select Case w$
      Case 'F1' ! Previous
        If ilistcur > 0
          ilistcur = ilistcur - 1
          k$ = ilist$[ilistcur]
          Call ContractCarrierSearch(k$,VehicleType$,CarrierNo$)
        End If 
      Case 'F2' ! Next
        ilistcur = ilistcur + 1
        Call ContractCarrierSearch(k$,VehicleType$,CarrierNo$)
      Case 'F3' ! Cancel
        If icount Let CarrierNo$ = ""
        Exit Do 
      Case 'F30' To 'F39'
        i = Asc(w$) - Asc('F30')
        CarrierNo$ = ilistsel$[i][1,6]
        VehicleSize$ = Trim$(ilistsel$[i][7,8])
        Call GetTripTicketNumber()
        If ilistsel$[i][9,10] = "HR"
          If ScrapSRecord$[111,111] = "Y" And Trim$(TicketHeader.TripTicketNo$) And ScrapCode$[116,116] <> "Y"
            ! Don't prompt
          Else 
            Call GetFreightHours(FreightHrs)
          End If 
        End If 
        Exit Do 
    End Select 
  Loop 
  Close #chlist
End Sub 
Sub CarrierOptions(VehicleType$,FullPONo$,k$,count) ! count=-1 for Generic, 0 for no carrier, or >0 for number of contract carriers found
  ! count=-2 for carriers found, but none valid
  k$ = ""
  If FullPONo$ = "" Or Trim$(FullPONo$) = "UNKNOWN"
    count = -1
    Exit Sub 
  End If 
  count = 0
  found = 0
  generic = 0
  frt_hrs = 0
  k1$ = "P" + FullPONo$ + Rep$(" ",6)
  ksav$ = k1$
  Do 
CarrierOptionsNext: !
    Search #ch_1215ro,3,1;k1$,r1,e1
    If e1 Exit Do 
    If k1$[1,Len(ksav$)] <> ksav$ Exit Do 
    Call SAIReadRecord(ch_1215ro,recdef_1215.,"Y","U",r1,POFreight$,POFreight[],stat,errmess$)
    If stat Goto CarrierOptionsNext
    If POFreight$[134,134] = "Y" Goto CarrierOptionsNext ! Flagged for deletion
    If POFreight$[268,268] = "Y" Goto CarrierOptionsNext ! Processor
    If Trim$(VehicleType$) And POFreight$[45,45] <> VehicleType$ Goto CarrierOptionsNext
    If POFreight$[45,45] <> PODetail$[38,38] And POFreight$[45,45] <> PODetail$[48,48] Goto CarrierOptionsNext
    If POFreight$[273,273] = "Y" ! Generic Carrier
      generic = 1
      If POFreight$[41,42] = "HR" Let frt_hrs = 1
    Else 
      ktemp$ = "C" + POFreight$[33,38]
      Call SAIGetRecord(ch_110Aro,recdef_110A.,ktemp$,1,"Y","U",rec_110A,ScrapCode$,ScrapCode[],stat,errmess$)
      If stat Goto CarrierOptionsNext
      found = found + 1
      Call ValidateCarrier(ScrapCode$,status,errmess$)
      If status <> 2
        If status = 0 Or ScrapCode$[47,47] <> "P"
          count = count + 1
          If count = 1 Let k$ = k1$
          If POFreight$[41,42] = "HR" Let frt_hrs = 1
          !          k$=k1$
          !          if POFreight$[45,45]="C" AND PODetail$[38,38]="C" ! Only one rail carrier allowed
          !            k$=k1$
          !            count=1
          !            Exit Sub
          !          else
          !            count=count+1
          !            if count=1 Let k$=k1$
          !          endif
        End If 
      End If 
    End If 
  Loop 
  If generic
    count = -1
  Else 
    If count = 0 And found > 0 Let count = -2
  End If 
End Sub 
Sub ListContractVehSizes(ilistsel$[],VehicleSize$)
  imax = 9
  ilistw = 500
  Call SAITouchButtonList(chlist,imax,ilistw,"Select Vehicle Size")
  Print #chlist;PChr$(1,3);'WCDISABLE';
  Print #chlist;PChr$(30,29 + imax);'WCDELETE';
  Map #ch_db;
  For i = 1 To count
    temp2$ = ""
    Try 
      Search #ch_db;"SELECT Description FROM Codes_Vehicle_Size WHERE VehicleType=" + SQLV$(VehicleType$) + " AND VehicleSize=" + SQLV$(Trim$(ilistsel$[i]))
      If Chf(ch_db) Read #ch_db;temp2$;
    Else 
    End Try 
    temp$ = SAISpaceFill$(ilistsel$[i],2) + " - " + SAISpaceFill$(temp2$,20)
    temp$ = Replace$(temp$,"&","&&")
    icount = i - 1
    Print #chlist;PChr$(icount + 30,10,5 + (icount * 30),ilistw - 10,(icount + 1) * 30,temp$,2);'WCBUTTON';
  Next i
  Print #chlist;'3WCENABLE 30WCFOCUS';
  Do 
    Input #chlist; Len (1);w$
    Select Case w$
      Case 'F3' ! Cancel
        Exit Do 
      Case 'F30' To 'F39'
        i = Asc(w$) - Asc('F30') + 1
        VehicleSize$ = ilistsel$[i]
        Exit Do 
    End Select 
  Loop 
  Close #chlist
End Sub 
Sub VehicleSizeRequired(FullPONo$,VehicleSize$)
  If FullPONo$ = "" Or Trim$(FullPONo$) = "UNKNOWN" Exit Sub 
  Clear ilistsel$[]
  count = 0
  k1$ = "P" + FullPONo$ + Rep$(" ",6)
  ksav$ = k1$
  Do 
FreightRecordsNext: !
    Search #ch_1215ro,3,1;k1$,r1,e1
    If e1 Exit Do 
    If k1$[1,Len(ksav$)] <> ksav$ Exit Do 
    Call SAIReadRecord(ch_1215ro,recdef_1215.,"Y","U",r1,POFreight$,POFreight[],stat,errmess$)
    If stat Goto FreightRecordsNext
    If POFreight$[134,134] = "Y" Goto FreightRecordsNext ! Flagged for deletion
    If POFreight$[268,268] = "Y" Goto FreightRecordsNext ! Processor
    If Trim$(VehicleType$) And POFreight$[45,45] <> VehicleType$ Goto FreightRecordsNext
    If POFreight$[45,45] <> PODetail$[38,38] And POFreight$[45,45] <> PODetail$[48,48] Goto FreightRecordsNext
    If POFreight$[273,273] <> "Y" Goto FreightRecordsNext ! Not Generic Carrier
    For i = 1 To count
      If ilistsel$[i] = POFreight$[46,47] Goto FreightRecordsNext
    Next i
    Try 
      Search #ch_db;"SELECT VehicleSize FROM Codes_Vehicle_Size WHERE VehicleType=" + SQLV$(VehicleType$) + " AND VehicleSize=" + SQLV$(Trim$(POFreight$[46,47]))
      If Chf(ch_db)
        count = count + 1
        ilistsel$[count] = POFreight$[46,47]
      End If 
    Else 
    End Try 
    If count = 9 Exit Do ! Limit to 9 choices
  Loop 
  If count = 0 Exit Sub 
  If count = 1 And Trim$(ilistsel$[1]) = "" Exit Sub 
  If TicketHeader.VehSize$
    For i = 1 To count
      If ilistsel$[i] = TicketHeader.VehSize$ Exit Sub 
    Next i
  End If 
  Call ListContractVehSizes(ilistsel$[],VehicleSize$)
End Sub 
Sub CarrierSelection(VehicleType$,VehicleSize$,FullPONo$,CarrierNo$,status) ! status=-1 for No Carrier, 0 for Carrier selected, or 1 for Cancel
  VehicleSize$ = ""
  CarrierNo$ = ""
  FreightHrs = 0
  If FullPONo$ = ""
    Call GetCarrier(VehicleType$,CarrierNo$,status)
    !    if CarrierNo$="" Let status=1 Else Let status=0
  Else 
    Call CarrierOptions(VehicleType$,FullPONo$,k$,count)
    If count = -2
      Call SAITouchWarning("There are no valid Carriers selectable for this Order.")
      CarrierNo$ = ""
      TicketHeader.TripTicketNo$ = ""
      status = -1
    Else If count = -1
      If TicketHeader.Noticed And TicketHeader.TktType$ <> "S" And TicketHeader.CarrierNo$ ! Allow generic carrier to be changed on a Sales Release
        CarrierNo$ = TicketHeader.CarrierNo$
        status = 0
      Else 
        Call GetCarrier(VehicleType$,CarrierNo$,status)
        If status = 0 Call VehicleSizeRequired(FullPONo$,VehicleSize$) ! Check if Vehicle size needs to be entered
        !      if CarrierNo$="" Let status=1 Else Let status=0
      End If 
    Else If count = 0
      CarrierNo$ = ""
      TicketHeader.TripTicketNo$ = ""
      status = -1
      !    else if count=1 ! Display message showing Carrier selected
      !      Call SAIGetRecord(ch_1215ro,recdef_1215.,k$,1,"Y","U",r,POFreight$,POFreight[],stat,errmess$)
      !      if stat=0
      !        Call SAITouchMessage("Carrier "+POFreight$[33,38]+" automattically selected.","Carrier Selection")
      !        CarrierNo$=POFreight$[33,38]
      !        status=0
      !      else
      !        Call SAITouchError("Unable to access Freight Header record for this order.")
      !        status=1
      !      endif
    Else 
CarrierSelection_Loop: !
      k$ = "P" + FullPONo$ + Rep$(" ",6)
      Call ListContractCarriers(k$,VehicleType$,VehicleSize$,FreightHrs,CarrierNo$)
      If CarrierNo$
        k$ = "C" + CarrierNo$
        Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],status,errmess$)
        If status
          Call SAITouchError("Carrier not found.\15\Please re-enter.")
          Goto CarrierSelection_Loop
        Else 
          If Trim$(VehicleType$) And VehicleType$ <> ScrapCode$[75,75]
            Call SAITouchError("Vehicle Type for this Carrier does not match!\15\Please try again.")
            Goto CarrierSelection_Loop
          End If 
          Call ValidateCarrier(ScrapCode$,status,errmess$)
          If status
            If status = 2 Or ScrapCode$[47,47] = "P"
              Call SAITouchError(errmess$,"Invalid Carrier selected")
            Else If ScrapCode$[47,47] = "W"
              ans = SAITouchYesNo(errmess$ + "\15\Do you still wish to select this Carrier?","Warning")
              If ans = 0 Goto CarrierSelection_Loop
            End If 
          End If 
        End If 
        status = 0
      Else 
        Call SAITouchWarning("You must select a Carrier.")
        Goto CarrierSelection_Loop
      End If 
    End If 
  End If 
  If status = 0
    TicketHeader.CarrierNo$ = Trim$(CarrierNo$)
    If VehicleSize$ Let TicketHeader.VehSize$ = Trim$(VehicleSize$)
    TicketHeader.FreightHrs = FreightHrs
  End If 
End Sub 
Sub VehTypeSearch(k$)
  icount = 0
  Clear ilistsel$[]
  If ilistcur > ilistmax
    ilistmax = ilistmax + 10
    Dim ilist$[ilistmax,ilistlen]
  End If 
  ilist$[ilistcur] = k$
  Print #chlist;PChr$(1,3);'WCDISABLE';
  Print #chlist;PChr$(30,29 + imax);'WCDELETE';
  Print #chlist;PChr$("Arial Mono for dl4");'FONTFACE 14FONTSIZE BBOLD WCSETFONT';
  Try 
    Search #ch_db;"SELECT " + SQLN$(CodesVehicleType.) + " FROM Codes_Vehicle_Type WHERE VehicleType > " + SQLV$(k$) + " ORDER BY VehicleType LIMIT " + Str$(imax)
    nr = Chf(ch_db)
    If nr
      Map Record #ch_db As Codes_Vehicle_Type
      For i = 1 To nr
        Read Record #ch_db;CodesVehicleType.
        temp$ = SAISpaceFill$(CodesVehicleType.VehicleType$,1) + " - " + SAISpaceFill$(CodesVehicleType.Description$,20)
        temp$ = Replace$(temp$,"&","&&")
        Print #chlist;PChr$(icount + 30,10,5 + (icount * 30),ilistw - 10,(icount + 1) * 30,temp$,2);'WCBUTTON';
        ilistsel$[icount] = CodesVehicleType.VehicleType$
        icount = icount + 1
      Next i
      k$ = CodesVehicleType.VehicleType$
    End If 
  Else 
    nr = 0
  End Try 
  Print #chlist;PChr$(1,3);'WCENABLE';
  If nr < imax Print #chlist;'2WCDISABLE';
  If ilistcur = 0 Print #chlist;'1WCDISABLE';
  If icount = 0
    Print #chlist;'3WCFOCUS';
  Else 
    Print #chlist;'30WCFOCUS';
  End If 
End Sub 
Sub ListVehType(VehType$,status)
  imax = 9
  Clear ilist$[]
  ilistcur = 0
  ilistw = 500
  Call SAITouchButtonList(chlist,imax,ilistw,"Select Vehicle Type")
  k$ = ""
  Call VehTypeSearch(k$)
  Do 
    Input #chlist; Len (1);w$
    Select Case w$
      Case 'F1' ! Previous
        If ilistcur > 0
          ilistcur = ilistcur - 1
          k$ = ilist$[ilistcur]
          Call VehTypeSearch(k$)
        End If 
      Case 'F2' ! Next
        ilistcur = ilistcur + 1
        Call VehTypeSearch(k$)
      Case 'F3' ! Cancel
        status = 1
        Exit Do 
      Case 'F30' To 'F39'
        i = Asc(w$) - Asc('F30')
        VehType$ = Trim$(ilistsel$[i])
        status = 0
        Exit Do 
    End Select 
  Loop 
  Close #chlist
End Sub 
Sub VehSizeSearch(k$)
  icount = 0
  Clear ilistsel$[]
  If ilistcur > ilistmax
    ilistmax = ilistmax + 10
    Dim ilist$[ilistmax,ilistlen]
  End If 
  ilist$[ilistcur] = k$
  Print #chlist;PChr$(1,3);'WCDISABLE';
  Print #chlist;PChr$(30,29 + imax);'WCDELETE';
  Print #chlist;PChr$("Arial Mono for dl4");'FONTFACE 14FONTSIZE BBOLD WCSETFONT';
  Try 
    Search #ch_db;"SELECT " + SQLN$(CodesVehicleSize.) + " FROM Codes_Vehicle_Size WHERE VehicleType=" + SQLV$(VehicleType$) + " AND VehicleSize >=" + SQLV$(k$) + " ORDER BY VehicleSize LIMIT " + Str$(imax)
    nr = Chf(ch_db)
    If nr
      Map Record #ch_db As Codes_Vehicle_Size
      For i = 1 To nr
        Read Record #ch_db;CodesVehicleSize.
        temp$ = SAISpaceFill$(CodesVehicleSize.VehicleSize$,2) + " - " + SAISpaceFill$(CodesVehicleSize.Description$,20)
        temp$ = Replace$(temp$,"&","&&")
        Print #chlist;PChr$(icount + 30,10,5 + (icount * 30),ilistw - 10,(icount + 1) * 30,temp$,2);'WCBUTTON';
        ilistsel$[icount] = CodesVehicleSize.VehicleSize$
        icount = icount + 1
      Next i
      k$ = CodesVehicleSize.VehicleSize$ + "!"
    End If 
  Else 
    nr = 0
  End Try 
  Print #chlist;PChr$(1,3);'WCENABLE';
  If nr < imax Print #chlist;'2WCDISABLE';
  If ilistcur = 0 Print #chlist;'1WCDISABLE';
  If icount = 0
    Print #chlist;'3WCFOCUS';
  Else 
    Print #chlist;'30WCFOCUS';
  End If 
End Sub 
Sub ListVehSize(VehSize$,status)
  imax = 9
  Clear ilist$[]
  ilistcur = 0
  ilistw = 500
  Call SAITouchButtonList(chlist,imax,ilistw,"Select Vehicle Size")
  k$ = ""
  Call VehSizeSearch(k$)
  Do 
    Input #chlist; Len (1);w$
    Select Case w$
      Case 'F1' ! Previous
        If ilistcur > 0
          ilistcur = ilistcur - 1
          k$ = ilist$[ilistcur]
          Call VehSizeSearch(k$)
        End If 
      Case 'F2' ! Next
        ilistcur = ilistcur + 1
        Call VehSizeSearch(k$)
      Case 'F3' ! Cancel
        status = 1
        Exit Do 
      Case 'F30' To 'F39'
        i = Asc(w$) - Asc('F30')
        VehicleSize$ = Trim$(ilistsel$[i])
        status = 0
        Exit Do 
    End Select 
  Loop 
  Close #chlist
End Sub 
Sub VehPrefixSearch(k$)
  icount = 0
  Clear ilistsel$[]
  If ilistcur > ilistmax
    ilistmax = ilistmax + 10
    Dim ilist$[ilistmax,ilistlen]
  End If 
  ilist$[ilistcur] = k$
  Print #chlist;PChr$(1,3);'WCDISABLE';
  Print #chlist;PChr$(30,29 + imax);'WCDELETE';
  Print #chlist;PChr$("Arial Mono for dl4");'FONTFACE 14FONTSIZE BBOLD WCSETFONT';
  SQL$ = "SELECT " + SQLN$(CodesVehiclePrefix.) + " FROM Codes_Vehicle_Prefix WHERE VehicleType=" + SQLV$(VehicleType$)
  If ValidateContainer$ = "V" Let SQL$ = SQL$ + " AND IsContainer=" + SQLV$(1)
  SQL$ = SQL$ + " AND VehiclePrefix >= " + SQLV$(k$) + " ORDER BY VehiclePrefix LIMIT " + Str$(imax)
  Try 
    Search #ch_db;SQL$
    nr = Chf(ch_db)
    If nr
      Map Record #ch_db As Codes_Vehicle_Prefix
      For i = 1 To nr
        Read Record #ch_db;CodesVehiclePrefix.
        temp$ = SAISpaceFill$(CodesVehiclePrefix.VehiclePrefix$,5) + " - " + SAISpaceFill$(CodesVehiclePrefix.Description$,20)
        temp$ = Replace$(temp$,"&","&&")
        Print #chlist;PChr$(icount + 30,10,5 + (icount * 30),ilistw - 10,(icount + 1) * 30,temp$,2);'WCBUTTON';
        ilistsel$[icount] = CodesVehiclePrefix.VehiclePrefix$
        icount = icount + 1
      Next i
      k$ = CodesVehiclePrefix.VehiclePrefix$ + "!"
    End If 
  Else 
    nr = 0
  End Try 
  Print #chlist;PChr$(1,3);'WCENABLE';
  If nr < imax Print #chlist;'2WCDISABLE';
  If ilistcur = 0 Print #chlist;'1WCDISABLE';
  If icount = 0
    Print #chlist;'3WCFOCUS';
  Else 
    Print #chlist;'30WCFOCUS';
  End If 
End Sub 
Sub ListVehPrefix(k$,VehPrefix$,status)
  imax = 9
  Clear ilist$[]
  ilistcur = 0
  ilistw = 500
  Call SAITouchButtonList(chlist,imax,ilistw,"Select Vehicle Prefix")
  Call VehPrefixSearch(k$)
  Do 
    Input #chlist; Len (1);w$
    Select Case w$
      Case 'F1' ! Previous
        If ilistcur > 0
          ilistcur = ilistcur - 1
          k$ = ilist$[ilistcur]
          Call VehPrefixSearch(k$)
        End If 
      Case 'F2' ! Next
        ilistcur = ilistcur + 1
        Call VehPrefixSearch(k$)
      Case 'F3' ! Cancel
        status = 1
        Exit Do 
      Case 'F30' To 'F39'
        i = Asc(w$) - Asc('F30')
        VehPrefix$ = Trim$(ilistsel$[i])
        status = 0
        Exit Do 
    End Select 
  Loop 
  Close #chlist
End Sub 
Sub GetVehPrefix(VehPrefix$,status)
  KBParams.StartX = 5
  KBParams.StartY = 55
  KBParams.ButtonHeight = 25
  KBParams.ButtonWidth = 50
  KBParams.FontSize1 = 14
  KBParams.FontSize2 = 12
  KBParams.InputElement = 10
  KBParams.IELength = 200
  KBParams.IEMaxChar = 8
  KBParams.IELabel$ = ""
  KBParams.FuncBtnLen = 100
  KBParams.FunctionBtn$ = "&List"
GetVehPrefix_InputLoop: !
  chwin2 = -1
  w$ = ""
  Do 
    Call SAIKeyBoard(chwin2,"Vehicle Prefix Selection",KBParams.,opt,w$,status)
    If status < 0 ! Cancel
      status = 1
      Exit Do 
    Else If status = 99 ! List
      If w$ Let k$ = w$ Else Let k$ = ""
      Call ListVehPrefix(k$,VehPrefix$,status)
      If status = 0
        Close #chwin2
        Exit Do 
      End If 
    Else 
      w$ = Trim$(w$)
      If w$
        Search #ch_db;"SELECT " + SQLN$(CodesVehiclePrefix.) + " FROM Codes_Vehicle_Prefix WHERE VehicleType=" + SQLV$(VehicleType$) + " AND VehiclePrefix= " + SQLV$(w$)
        nr = Chf(ch_db)
        If nr
          Map Record #ch_db As Codes_Vehicle_Prefix
          Read Record #ch_db;CodesVehiclePrefix.
          If ValidateContainer$ = "V" And CodesVehiclePrefix.IsContainer = 0
            Call SAITouchWarning("Entered Prefix is not a Container Prefix.\15\Please try again.")
            Goto GetVehPrefix_InputLoop
          End If 
          VehPrefix$ = w$
          status = 0
          Exit Do 
        Else 
          Call SAITouchWarning("Invalid Vehicle Prefix entered.\15\Please try again.")
          Goto GetVehPrefix_InputLoop
        End If 
      Else 
        Call SAITouchWarning("You must enter a valid Vehicle Prefix.")
        Goto GetVehPrefix_InputLoop
      End If 
    End If 
  Loop 
End Sub 
Sub ValidateContainerTareWt(ContainerTareWt,status,errmess$)
  Clear status,errmess$
  If gbl_um$ = "LB"
    If SalesRelease.ContainerSize$ = "20FT"
      If ContainerTareWt < 4000 Or ContainerTareWt > 8000
        status = 1
      End If 
    Else If SalesRelease.ContainerSize$ = "40FT"
      If ContainerTareWt < 7000 Or ContainerTareWt > 11000
        status = 1
      End If 
    End If 
    If status
      errmess$ = "Container Tare Wt is not within expected range of a " + SalesRelease.ContainerSize$ + " container."
    End If 
  End If 
  If status = 0 And Items.[1].TareWt
    If ContainerTareWt > Items.[1].TareWt
      status = 2
      errmess$ = "Container Tare Wt should not be greater than Vehicle Tare Wt."
    End If 
  End If 
End Sub 
Sub GetVehicleInfo(status)
  y = 250 \ ContainerTare = 0
  If TicketHeader.TktType$ = "S" And TicketHeader.BookingNo$ And SalesRelease.VehType$
    ContainerTare = 1
    y = 280
  End If 
  chvi = SAIOpenWindow("Vehicle Information",800,y,1)
  Print #chvi;PChr$("Arial");'FONTFACE';
  Print #chvi;PChr$(bgcolor1);'BACKCOLOR CS';
  Print #chvi;'WCSETCOLOR';
  Print #chvi;'12FONTSIZE BBOLD WCSETFONT';
  y = 10
  Print #chvi;PChr$(100,300,y,500,y + 18,"Vehicle Information");'WCLABEL';
  Print #chvi;'EBOLD WCSETFONT';
  dy = 30
  x0 = 50 \ x1 = 150 \ bw = 100
  y = y + dy \ d1 = 40 \ d2 = 410
  Print #chvi;PChr$(110,x0,y,x1,y + 14,"Type:");'WCLABEL';
  Print #chvi;PChr$(10,x1,y,x1 + d1,y + 14,"",0);'WCTEXT 10WCSELECT WCRESETCOLOR 0WCSELECT';
  x = x1 + d1 + 10
  Print #chvi;PChr$(210,x,y,x + d2,y + 14,"",0);'WCTEXT';
  x = x + d2 + 5
  Print #chvi;PChr$(30,x,y - 5,x + bw,y + 20,"Change",2);'WCBUTTON';
  If AllowVehTypeChange$ = "N" Print #chvi;'30WCDISABLE';
  y = y + dy \ d1 = 60 \ d2 = 390
  Print #chvi;PChr$(111,x0,y,x1,y + 14,"Size:");'WCLABEL';
  Print #chvi;PChr$(11,x1,y,x1 + d1,y + 14,"",0);'WCTEXT 11WCSELECT WCRESETCOLOR 0WCSELECT';
  x = x1 + d1 + 10
  Print #chvi;PChr$(211,x,y,x + d2,y + 14,"",0);'WCTEXT';
  x = x + d2 + 5
  Print #chvi;PChr$(31,x,y - 5,x + bw,y + 20,"Change",2);'WCBUTTON';
  y = y + dy \ d1 = 100 \ d2 = 350
  Print #chvi;PChr$(112,x0,y,x1,y + 14,"Prefix:");'WCLABEL';
  Print #chvi;PChr$(12,x1,y,x1 + d1,y + 14,"",0);'WCTEXT 12WCSELECT WCRESETCOLOR 0WCSELECT';
  x = x1 + d1 + 10
  Print #chvi;PChr$(212,x,y,x + d2,y + 14,"",0);'WCTEXT';
  x = x + d2 + 5
  Print #chvi;PChr$(32,x,y - 5,x + bw,y + 20,"Change",2);'WCBUTTON';
  y = y + dy \ dx = 200
  Print #chvi;PChr$(113,x0,y,x1,y + 14,"Number:");'WCLABEL';
  Print #chvi;PChr$(13,x1,y,x1 + dx,y + 14,"",2,11);'WCSTRING 13WCSELECT WCRESETCOLOR 0WCSELECT';
  Print #chvi;PChr$(33,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Keyboard",2);'WCBUTTON';
  If OTMFreight$ = "Y" And TicketHeader.CarrierRefNo$
    x = x1 + dx + 5 + bw + 60
    Print #chvi;PChr$(36,x,y - 5,x + 200,y + 20,"OTM Equipment No.",2);'WCBUTTON';
  End If 
  y = y + dy \ dx = 80
  Print #chvi;PChr$(114,x0 - 20,y,x1,y + 14,"Axle Count:");'WCLABEL';
  Print #chvi;PChr$(14,x1,y,x1 + dx,y + 14,"",0);'WCTEXT 14WCSELECT WCRESETCOLOR 0WCSELECT';
  Print #chvi;PChr$(34,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Change",2);'WCBUTTON';
  If TicketHeader.AxleCount Print #chvi;'14WCSELECT CU';Str$(TicketHeader.AxleCount);'0WCSELECT';
  AxleCount = TicketHeader.AxleCount
  If ContainerTare
    y = y + dy \ dx = 120
    Print #chvi;PChr$(115,x0 - 20,y - 5,x1,y + 19,"Container\15\Tare Wgt:");'WCLABEL';
    Print #chvi;PChr$(15,x1,y,x1 + dx,y + 14,"",0);'WCTEXT 15WCSELECT WCRESETCOLOR';Str$(TicketHeader.ContainerTareWt);'0WCSELECT';
    x = x1 + dx + 5
    Print #chvi;PChr$(215,x,y,x + 50,y + 14,"",0);'WCTEXT';
    Print #chvi;'215WCSELECT WCRESETCOLOR';DisplayUM$;'0WCSELECT';
    x = x + 55
    Print #chvi;PChr$(35,x,y - 5,x + bw,y + 20,"Change",2);'WCBUTTON';
  End If 
  ContainerTareWt = TicketHeader.ContainerTareWt
  Print #chvi;'WCRESETCOLOR WCSETFONT';
  y = y + dy + 20
  Call SAIButtons(chvi,2,1,"&&Submit~Cancel",800,y,25,100,20)
  ! Populate Fields
  If VehicleType$
    Search #ch_db;"SELECT " + SQLN$(CodesVehicleType.) + "FROM Codes_Vehicle_Type WHERE VehicleType=" + SQLV$(VehicleType$)
    If Chf(ch_db)
      Map Record #ch_db As Codes_Vehicle_Type
      Read Record #ch_db;CodesVehicleType.
      Print #chvi;'10WCSELECT CU';VehicleType$;'210WCSELECT CU';CodesVehicleType.Description$;'0WCSELECT';
    Else 
      VehicleType$ = ""
      UpdateVehTracking$ = ""
    End If 
  End If 
  If VehicleType$
    If VehicleSize$
      Search #ch_db;"SELECT Description FROM Codes_Vehicle_Size WHERE VehicleType=" + SQLV$(VehicleType$) + " AND VehicleSize=" + SQLV$(Trim$(VehicleSize$))
      If Chf(ch_db)
        Map #ch_db;
        Read #ch_db;temp$
        Print #chvi;'11WCSELECT CU';VehicleSize$;'211WCSELECT CU';Trim$(temp$);'0WCSELECT';
      Else 
        VehicleSize$ = "" ! Invalid Size
      End If 
    End If 
    VehPrefixLen = CalcVehPrefixLen(CodesVehicleType.TwoPartVehOverride$,ScrapSRecord$[133,133])
    If VehPrefixLen = 0
      Print #chvi;'112WCDISABLE 12WCDISABLE 32WCDISABLE';
      Print #chvi;'13WCSELECT CU';VehicleNo$;'0WCSELECT';
      VehPrefix$ = ""
      VehNum$ = VehicleNo$
    Else 
      Try Let VehPrefix$ = Trim$(VehicleNo$[1,VehPrefixLen]) Else Let VehPrefix$ = ""
      If VehPrefix$ = ""
        Call GetVehPrefix(VehPrefix$,status)
        If status Let VehPrefix$ = ""
      End If 
      If VehPrefix$
        Search #ch_db;"SELECT Description FROM Codes_Vehicle_Prefix WHERE VehicleType=" + SQLV$(VehicleType$) + " AND VehiclePrefix= " + SQLV$(VehPrefix$)
        If Chf(ch_db)
          Map #ch_db;
          Read #ch_db;temp$
          Print #chvi;'12WCSELECT CU';VehPrefix$;'212WCSELECT CU';temp$;'0WCSELECT';
        Else 
          VehPrefix$ = ""
        End If 
      End If 
      If Len(VehicleNo$) > VehPrefixLen
        VehNum$ = Trim$(VehicleNo$[VehPrefixLen + 1])
      Else 
        VehNum$ = ""
      End If 
      If VehNum$ Print #chvi;'13WCSELECT CU';VehNum$;'0WCSELECT';
      Print #chvi;'13BEGIN';
    End If 
  Else 
    Print #chvi;PChr$(31,33);'WCDISABLE';
    Print #chvi;'2WCFOCUS';
  End If 
  Do 
    Input #chvi; Len (1);w$
    Select Case w$
      Case 'F1' ! Submit
        VehNum$ = SAIQuery$(chvi,13)
        If RequireVehicleNo$ = "Y" And Trim$(VehNum$) = ""
          Call SAITouchWarning("Vehicle Number is required.")
          status = 1
        Else If VehPrefixLen
          If Trim$(VehPrefix$)
            status = 0
            If ValidateContainer$ = "V"
              temp$ = UCase$(VehPrefix$) + VehNum$
              Call SAIValidateContainerNo(temp$,status)
              If status Call SAITouchWarning("Vehicle Prefix + Number is not a valid Container Number.")
            End If 
            If status = 0 Let VehicleNo$ = SAISpaceFill$(VehPrefix$,VehPrefixLen) + SAISpaceFill$(VehNum$,11 - VehPrefixLen)
          Else 
            Call SAITouchWarning("You must enter a valid Vehicle Prefix.")
            status = 1
          End If 
        Else 
          VehicleNo$ = SAISpaceFill$(VehNum$,11)
          status = 0
        End If 
        If status = 0
          Try Let TicketHeader.AxleCount = AxleCount Else Rem
          If TicketHeader.AxleCount > 127 Let TicketHeader.AxleCount = 0
          Try Let TicketHeader.ContainerTareWt = ContainerTareWt Else Rem
          Exit Do 
        End If 
      Case 'F2' ! Cancel
        status = 1
        Exit Do 
      Case 'F30' ! Type
        Call ListVehType(VehicleType$,status)
        If status = 0
          Search #ch_db;"SELECT " + SQLN$(CodesVehicleType.) + "FROM Codes_Vehicle_Type WHERE VehicleType=" + SQLV$(VehicleType$)
          If Chf(ch_db)
            Map Record #ch_db As Codes_Vehicle_Type
            Read Record #ch_db;CodesVehicleType.
            Print #chvi;'10WCSELECT CU';VehicleType$;
            Print #chvi;'210WCSELECT CU';CodesVehicleType.Description$;
            If CodesVehicleType.UpdateVehTracking Let UpdateVehTracking$ = "Y" Else Let UpdateVehTracking$ = "N"
            VehPrefixLen = CalcVehPrefixLen(CodesVehicleType.TwoPartVehOverride$,ScrapSRecord$[133,133])
            Clear VehicleSize$,VehPrefix$,VehNum$,VehicleNo$
            Print #chvi;'11WCSELECT CU 211WCSELECT 12WCSELECT CU 212WCSELECT CU 13WCSELECT CU 213WCSELECT CU 0WCSELECT';
            If VehPrefixLen
              If ValidateContainer$ = "V" Let VehPrefix$ = "" Else Let VehPrefix$ = Trim$(CodesVehicleType.DefaultPrefix$)
              If VehPrefix$
                Search #ch_db;"SELECT Description FROM Codes_Vehicle_Prefix WHERE VehicleType=" + SQLV$(VehicleType$) + " AND VehiclePrefix=" + SQLV$(Trim$(VehPrefix$))
                If Chf(ch_db)
                  Map #ch_db;
                  Read #ch_db;temp$
                  Print #chvi;'12WCSELECT CU';VehPrefix$;'212WCSELECT CU';temp$;
                Else 
                  VehPrefix$ = ""
                End If 
              End If 
              Print #chvi;'0WCSELECT 12WCENABLE 112WCENABLE 32WCENABLE';
            End If 
            Print #chvi;'0WCSELECT';
            Print #chvi;'31WCENABLE 33WCENABLE';
          End If 
        End If 
      Case 'F31' ! Size
        If VehicleType$
          Call ListVehSize(VehicleSize$,status)
          If status = 0
            Search #ch_db;"SELECT Description FROM Codes_Vehicle_Size WHERE VehicleType=" + SQLV$(VehicleType$) + " AND VehicleSize=" + SQLV$(Trim$(VehicleSize$))
            If Chf(ch_db)
              Map #ch_db;
              Read #ch_db;temp$
              Print #chvi;'11WCSELECT CU';VehicleSize$;'211WCSELECT CU';Trim$(temp$);'0WCSELECT';
            Else 
              Print #chvi;'11WCSELECT CU 0WCSELECT';
              VehicleSize$ = "" ! Invalid Size
            End If 
          End If 
        End If 
      Case 'F32' ! Prefix
        Call GetVehPrefix(VehPrefix$,status)
        If status = 0
          Search #ch_db;"SELECT Description FROM Codes_Vehicle_Prefix WHERE VehicleType=" + SQLV$(VehicleType$) + " AND VehiclePrefix=" + SQLV$(Trim$(VehPrefix$))
          If Chf(ch_db)
            Map #ch_db;
            Read #ch_db;temp$
            Print #chvi;'12WCSELECT CU';VehPrefix$;'212WCSELECT CU';temp$;'0WCSELECT';
          End If 
        End If 
      Case 'F33' ! Number
        w$ = Trim$(VehNum$)
        Call SAIKeyBoardGen("Enter Vehicle Number",KBParams.alphacase,11 - VehPrefixLen,0,w$,status)
        If status = 0
          Print #chvi;'13WCSELECT CU';w$;'0WCSELECT';
          VehNum$ = w$
        End If 
      Case 'F34' ! Axle Count
        Call SAIKeyPad("Enter Total Axle Count",AxleCount,3,status)
        If status = 0 Print #chvi;'14WCSELECT CU';Str$(AxleCount);'0WCSELECT';
      Case 'F35' ! Container Tare
        Call SAIKeyPad("Enter Container Tare",ContainerTareWt,3,status)
        If status = 0
          Call ValidateContainerTareWt(ContainerTareWt,status,errmess$)
          If status
            ans = SAITouchYesNo(errmess$ + "\15\\15\Save anyway?")
            If ans Let status = 0
          End If 
          If status = 0
            Print #chvi;'15WCSELECT CU';Str$(ContainerTareWt);'0WCSELECT';
          Else 
            ContainerTareWt = TicketHeader.ContainerTareWt
          End If 
        End If 
      Case 'F36' ! OTM Equipment No.
        If OTMFreight$ = "Y" And TicketHeader.CarrierRefNo$
          SQL$ = "SELECT * FROM OTM_Freight_Interface WHERE"
          SQL$ = SQL$ + " OTMRefNo=" + SQLV$(TicketHeader.CarrierRefNo$)
          SQL$ = SQL$ + " AND TicketNo=" + SQLV$(TicketHeader.TicketNo$)
          Try 
            Search #ch_db;SQL$
            nr = Chf(ch_db)
          Else 
            nr = 0
          End Try 
          If nr
            Map Record #ch_db As OTM_Freight_Interface
            Read Record #ch_db;OTMFreightInterface.
            Do 
              w$ = OTMFreightInterface.EquipNo$
              Call SAIKeyBoardGen("Enter Equipment No.",KBParams.alphacase,25,0,w$,stat)
              If stat = 0
                If Trim$(w$)
                  OTMFreightInterface.EquipNo$ = Trim$(w$)
                  SQL$ = "UPDATE OTM_Freight_Interface SET"
                  SQL$ = SQL$ + " EquipNo=" + SQLV$(OTMFreightInterface.EquipNo$)
                  SQL$ = SQL$ + " WHERE OTMFrtInterfaceID=" + SQLV$(OTMFreightInterface.OTMFrtInterfaceID)
                  Try 
                    Search #ch_db;SQL$
                    stat = 0
                  Else 
                    Call SAITouchError("Error updating Status in OTM_Freight_Interface table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
                    stat = Spc(8)
                  End Try 
                  Exit Do 
                End If 
              Else If Trim$(OTMFreightInterface.EquipNo$)
                Exit Do 
              End If 
              Call SAITouchWarning("Equipment No. is required.")
            Loop 
          End If 
        End If 
    End Select 
  Loop 
  Close #chvi
End Sub 
Sub RetrieveAltAddress(AddressType$,EntityNo$,LocationCode$,AlternateAddress. As Alt_Address,stat)
  Clear AlternateAddress.
  SQL$ = "SELECT " + SQLN$(AltAddress.) + " FROM Alt_Address WHERE AddressType=" + SQLV$(AddressType$) + " AND EntityNo=" + SQLV$(Trim$(EntityNo$))
  If LocationCode$ Let SQL$ = SQL$ + " AND SeqNo=" + SQLV$(Trim$(LocationCode$))
  Search #ch_db;SQL$
  If Chf(ch_db)
    Map Record #ch_db As Alt_Address
    Read Record #ch_db;AlternateAddress.
    stat = 0
  Else 
    stat = 1
  End If 
End Sub 
Sub ValidatePO(PODetail$,MultLines$,stat)
  stat = 1
  If MultLines$ = "Y"
    If PODetail$[17,18] = "00" Exit Sub 
    ktemp$ = PODetail$[1,16] + "00" ! Verify the existance of a line 00
    Search #ch_1210ro,2,1;ktemp$,r1,e1
    If e1 Exit Sub 
  Else 
    If PODetail$[17,18] = "00"
      If PODetail$[50,51] <> "*M" Exit Sub ! Material not *MIX or *MULT on line 00
    Else 
      ktemp$ = PODetail$[1,16] + "00" ! Check for the existance of a line 00
      Search #ch_1210ro,2,1;ktemp$,r1,e1
      If e1 = 0
        Call SAIReadRecord(ch_1310ro,recdef_1310.,"Y","U",r,TempPODetail$,TempPODetail[],e1,errmess$)
        If e1 = 0 And TempPODetail$[49,49] <> "D" And TempPODetail$[49,49] <> "P" Exit Sub !line 00 flagged for delete
      End If 
    End If 
  End If 
  If PODetail$[208,208] = "E"
    If RunDate$[5,6] + RunDate$[1,4] > PODetail$[268,269] + PODetail$[264,267] Exit Sub ! PO Expired
  Else If PODetail$[208,208] <> " "
    Exit Sub ! Order flag not blank ('F'inished or 'C'ancelled)
  End If 
  If PODetail$[49,49] = "D" Or PODetail$[49,49] = "P" Exit Sub ! Status flag = "D"elete or "P"urge
  If PODetail$[165,165] = "Y" Or PODetail$[165,165] = "S" Exit Sub ! Hold flag
  If (ShowCurrentOrdersOnly$ = "Y" Or ShowCurrentOrdersOnly$ = "C") And Trim$(PODetail$[25,30]) <> ""
    If PODetail$[29,30] + PODetail$[25,28] < RunDate$[5,6] + RunDate$[1,4] Exit Sub ! PO Complete Date < RunDate
  End If 
  If ShowCurrentOrdersOnly$ = "C" And Trim$(PODetail$[19,24]) <> ""
    If PODetail$[23,24] + PODetail$[19,22] > RunDate$[5,6] + RunDate$[1,4] Exit Sub ! PO Setup Date > RunDate
  End If 
  If ShowCurrentCompanyOrdersOnly$ = "Y" And PODetail$[158,159] <> Branch$
    If Branch$ <> z$[642,643] And PODetail$[158,159] <> z$[642,643] Exit Sub 
  End If 
  If AllowVehTypeChange$ = "N"
    If DefaultVehType$ <> PODetail$[38,38] And DefaultVehType$ <> PODetail$[48,48] Exit Sub ! Veh Type not valid
  End If 
  If PODetail[1] >= PODetail[0] And PODetail$[201,201] = "N" Exit Sub ! Overshipped
  ktemp$ = "t" + PODetail$[156,157]
  Call SAIGetRecord(ch_110Aro,recdef_110A.,ktemp$,1,"Y","U",r1,ScrapCode$,ScrapCode[],e1,errmess$)
  If e1 Exit Sub ! Invalid Order Type
  If ScrapCode$[41,41] <> " " Exit Sub ! Non-blank brokerage order type
  ktemp$ = "Y" + PODetail$[35,35] + Branch$
  Call SAIGetRecord(ch_110Aro,recdef_110A.,ktemp$,1,"Y","U",r1,ScrapCode$,ScrapCode[],e1,errmess$)
  If e1 Exit Sub ! Invalid Yard Code
  If ScrapCode$[36,36] = "Y" Exit Sub ! Brokerage Yard
  If TicketHeader.Noticed And Trim$(TicketHeader.ShipFromTo$)
    If PODetail$[31,34] <> TicketHeader.ShipFromTo$ Exit Sub 
  End If 
  If OTMFreight$ = "Y" And TicketHeader.CarrierRefNo$ And Trim$(TicketHeader.ShipFromTo$)
    If PODetail$[31,34] <> TicketHeader.ShipFromTo$ Exit Sub 
  End If 
  Call RetrieveSupplier(PODetail$[1,6],Vendor.,stat)
  If stat = 0
    If ValidSupplier(z$,Vendor.) = 0 Let stat = 1
  End If 
End Sub 
Sub SupplierPOSearch(k1$)
  icount = 0
  y = ylist
  Clear ilistsel$[]
  If ilistcur > ilistmax
    ilistmax = ilistmax + 10
    Dim ilist$[ilistmax,ilistlen]
  End If 
  ilist$[ilistcur] = k1$
  Print #chlist;PChr$(1,6);'WCDISABLE';
  Print #chlist;PChr$(30,29 + imax);'WCDELETE';
  Do 
    Search #ch_1210ro,3,1;k1$,r,e
    If e Exit Do 
    If k1$[1,6] <> SAISpaceFill$(SupplierNo$,6)
      e = 1
      Exit Do 
    End If 
    Call SAIReadRecord(ch_1210ro,recdef_1210.,"Y","U",r,PODetail$,PODetail[],stat,errmess$)
    If stat = 0
      If k1$[Len(k1$) - 1,Len(k1$)] = "00"
        If PODetail$[49,49] <> "D" And PODetail$[49,49] <> "P" ! Status flag <> "D"elete or "P"urge
          k1$[Len(k1$) - 1,Len(k1$)] = "~~" ! Skip other lines of contract
        End If 
      End If 
      Call ValidatePO(PODetail$,"N",stat)
      If stat = 0 And SearchString$ <> ""
        If Pos(PODetail$[7,16], = SearchString$) = 0 Let stat = 1
      End If 
    End If 
    If stat = 0
      !      1112-01 11/01/04 2900L     L STEEL TURNINGS        T             0.00       -32.24"
      !                                   ORIENTAL ENTERPRISES  RICHMOND   DELIVERED           "
      !                                   123456789012345678901234567890                       "
      ! Line 1
      temp$ = PODetail$[7,16] + "-" + PODetail$[17,18] + " " + SAIDateDisplay$(PODetail$[25,30]) + " " + PODetail$[50,57] + "  "
      temp$ = temp$ + PODetail$[35,35] + " " + PODetail$[111,130] + "  " + PODetail$[38,38] ! Yard, Mat Desc, VehType
      If PODetail$[48,48] = " " ! VehType 2
        temp$ = temp$ + "     "
      Else 
        temp$ = temp$ + "," + PODetail$[48,48] + "   "
      End If 
      If Abs(PODetail[0]) > 999999
        temp$ = temp$ + PODetail[0] Using "----,---,--# "
        temp$ = temp$ + (PODetail[0] - PODetail[1]) Using "----,---,--#"
      Else 
        temp$ = temp$ + PODetail[0] Using "-,---,--#.## "
        temp$ = temp$ + (PODetail[0] - PODetail[1]) Using "-,---,--#.##"
      End If 
      ! Line 2
      temp$ = temp$ + "\15\" + Rep$(" ",14) + PODetail$[214,233] + " " ! Supplier S.O.#
      If PODetail$[31,34] = "0000"
        temp$ = temp$ + SAISpaceFill$(Supplier.Name$,20) + "  " + SAISpaceFill$(Supplier.City$,10)
      Else 
        Call RetrieveAltAddress("F",Supplier.SupplierNo$,PODetail$[31,34],AltAddress.,stat)
        If stat = 0
          temp$ = temp$ + SAISpaceFill$(AltAddress.Name$,20) + "  " + SAISpaceFill$(AltAddress.City$,10)
        Else 
          temp$ = temp$ + PODetail$[31,34] + Rep$(" ",28)
        End If 
      End If 
      ktemp$ = "B" + PODetail$[206,207] ! FOB (get desc)
      Call SAIGetRecord(ch_110Aro,recdef_110A.,ktemp$,1,"Y","U",r1,ScrapCode$,ScrapCode[],e1,errmess$)
      If e1 = 0
        temp$ = temp$ + " " + ScrapCode$[15,34]
      Else 
        temp$ = temp$ + Rep$(" ",21)
      End If 
      If Trim$(PODetail$[66,95])
        ! Line 3 (conditional)
        temp$ = temp$ + "\15\" + Rep$(" ",35) + PODetail$[66,95] + Rep$(" ",23) ! Shipping Instructions
        temp$ = Replace$(temp$,"&","&&")
        Print #chlist;PChr$(icount + 30,10,y,ilistw - 10,y + 32,temp$,2);'WCBUTTON';
        y = y + 35
      Else 
        Print #chlist;PChr$(icount + 30,10,y,ilistw - 10,y + 25,temp$,2);'WCBUTTON';
        y = y + 28
      End If 
      ilistsel$[icount] = PODetail$[1,18]
      icount = icount + 1
      If y > 254 Exit Do 
    End If 
  Loop Until icount = imax
  Print #chlist;PChr$(1,6);'WCENABLE';
  If e Print #chlist;'3WCDISABLE';
  If ilistcur = 0 Print #chlist;'2WCDISABLE';
  If icount = 0
    Print #chlist;'4WCFOCUS';
  Else 
    Print #chlist;'30WCFOCUS';
  End If 
End Sub 
Sub ListSupplierPOs(SupplierNo$,FullPONo$,status)
  imax = 9
  Clear ilist$[]
  ilistcur = 0
  ilistw = 920
  ilisth = 315
  chlist = SAIOpenWindow("Purchase Order Selection for Supplier: " + SupplierNo$,ilistw,ilisth,1)
  Print #chlist;PChr$("Arial");'FONTFACE 12FONTSIZE WCSETFONT';
  Print #chlist;PChr$(16777215);'BACKCOLOR CS'
  y = ilisth - 28
  Call SAIButtons(chlist,4,1,"Search~< Previous~Next >~Cancel",920,y,25,120,20)
  Print #chlist;PChr$(5,10,y,130,y + 25,"Unknown",2);'WCBUTTON';
  If PurchaseOrderRequired$ <> "Y" And Supplier.PORequired = 0
    Print #chlist;PChr$(6,790,y,910,y + 25,"None",2);'WCBUTTON';
  End If 
  Print #chlist;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE WCSETFONT';
  Print #chlist;PChr$(-1,SAIColorRGB(255,255,0));'WCSETCOLOR';
  y = 1
  temp$ = "      P.O.#-LN COMP-DT  MATERIAL YD DESCRIPTION          VEH TYP   ORDER QTY      QTY DUE"
  temp$ = temp$ + "\15\" + Rep$(" ",15) + "SUPPLIER S.O.#" + Rep$(" ",7) + "SHIP-FROM-NAME        CITY       FOB"
  temp$ = temp$ + "\15\" + Rep$(" ",36) + "SHIPPING INSTRUCTIONS"
  Print #chlist;PChr$(100,10,y,ilistw - 10,y + 30,temp$);'WCLABEL';
  Print #chlist;'WCRESETCOLOR';
  ylist = 33
  SearchString$ = ""
  k1$ = SAISpaceFill$(SupplierNo$,6)
  Call SupplierPOSearch(k1$)
  Do 
    Input #chlist; Len (1);w$
    Select Case w$
      Case 'F1' ! Search
        w$ = SearchString$
        Call SAIKeyBoardGen("Enter Search String",KBParams.alphacase,11,0,w$,status)
        Print #chinyd;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE WCSETFONT';
        If status = 0
          SearchString$ = w$
          Clear ilist$[]
          ilistcur = 0
          k1$ = SAISpaceFill$(SupplierNo$,6)
          Call SupplierPOSearch(k1$)
        End If 
      Case 'F2' ! Previous
        If ilistcur > 0
          ilistcur = ilistcur - 1
          k1$ = ilist$[ilistcur]
          Call SupplierPOSearch(k1$)
        End If 
      Case 'F3' ! Next
        ilistcur = ilistcur + 1
        Call SupplierPOSearch(k1$)
      Case 'F4' ! Cancel
        FullPONo$ = ""
        status = 1
        Exit Do 
      Case 'F5' ! UNKNOWN
        FullPONo$ = "UNKNOWN"
        status = 0
        Exit Do 
      Case 'F6' ! None
        If PurchaseOrderRequired$ <> "Y" And Supplier.PORequired = 0
          Clear FullPONo$,PODetail$,PODetail[]
          status = 0
          Exit Do 
        End If 
      Case 'F30' To 'F39'
        i = Asc(w$) - Asc('F30')
        k1$ = ilistsel$[i]
        Call SAIGetRecord(ch_1210ro,recdef_1210.,k1$,1,"Y","U",r,PODetail$,PODetail[],e,errmess$)
        If e
          Call SAITouchError("Error retrieving selected Purchase Order.")
          FullPONo$ = ""
          status = 1
        Else 
          If PODetail[1] >= PODetail[0] And PODetail$[201,201] = "W"
            Call SAITouchWarning("Accepting this load will cause the order to be overshipped!")
          End If 
          FullPONo$ = PODetail$[7,18]
          status = 0
        End If 
        Exit Do 
    End Select 
  Loop 
  Close #chlist
End Sub 
Sub POSearch(k1$,MultLines$)
  icount = 0
  y = ylist
  Clear ilistsel$[]
  If ilistcur > ilistmax
    ilistmax = ilistmax + 10
    Dim ilist$[ilistmax,ilistlen]
  End If 
  ilist$[ilistcur] = k1$
  Print #chlist;PChr$(1,3);'WCDISABLE';
  Print #chlist;PChr$(30,29 + imax);'WCDELETE';
  Do 
    Search #ch_1210ro,3,2;k1$,r,e
    If e Exit Do 
    If Len(FullPONo$) = 10 Or Len(FullPONo$) = 12
      If k1$[1,10] <> FullPONo$[1,10]
        e = 1
        Exit Do 
      End If 
    End If 
    Call SAIReadRecord(ch_1210ro,recdef_1210.,"Y","U",r,PODetail$,PODetail[],stat,errmess$)
    If stat = 0
      If SearchString$
        If Pos(PODetail$[214,233], = SearchString$) = 0 Let stat = 1
      End If 
      If stat = 0
        Call ValidatePO(PODetail$,MultLines$,stat)
        If stat
          If k1$[11,12] = "00" And MultLines$ <> "Y"
            If PODetail$[49,49] <> "D" And PODetail$[49,49] <> "P" ! Status flag <> "D"elete or "P"urge
              k1$[11,12] = "~~" ! Skip other lines of contract
            End If 
          End If 
        Else If Len(FullPONo$) < 10
          If Pos(PODetail$[7,16], = FullPONo$) = 0 Let stat = 1
        End If 
      End If 
    End If 
    If stat = 0
      temp$ = PODetail$[7,16] + "-" + PODetail$[17,18] + " " + SAIDateDisplay$(PODetail$[25,30]) + " " + PODetail$[50,57] + "  "
      !  temp$=temp$+PODetail$[35,35]+" "+PODetail$[111,130]+"  "+PODetail$[38,38]+PODetail$[48,48]+"  "+PODetail$[206,207]
      temp$ = temp$ + PODetail$[35,35] + " " + PODetail$[111,130] + "  " + PODetail$[38,38]
      If PODetail$[48,48] = " "
        temp$ = temp$ + "     "
      Else 
        temp$ = temp$ + "," + PODetail$[48,48] + "   "
      End If 
      If Abs(PODetail[0]) > 999999
        temp$ = temp$ + PODetail[0] Using "----,---,--# "
        temp$ = temp$ + (PODetail[0] - PODetail[1]) Using "----,---,--#"
      Else 
        temp$ = temp$ + PODetail[0] Using "-,---,--#.## "
        temp$ = temp$ + (PODetail[0] - PODetail[1]) Using "-,---,--#.##"
      End If 
      temp$ = temp$ + "\15\" + Rep$(" ",14) + PODetail$[214,233] + " " ! Supplier S.O.#
      If PODetail$[31,34] = "0000"
        Call RetrieveSupplier(PODetail$[1,6],Vendor.,stat)
        temp$ = temp$ + SAISpaceFill$(Vendor.Name$,20) + "  " + SAISpaceFill$(Vendor.City$,10)
      Else 
        Call RetrieveAltAddress("F",PODetail$[1,6],PODetail$[31,34],AltAddress.,stat)
        If stat = 0
          temp$ = temp$ + SAISpaceFill$(AltAddress.Name$,20) + "  " + SAISpaceFill$(AltAddress.City$,10)
        Else 
          temp$ = temp$ + PODetail$[31,34] + Rep$(" ",28)
        End If 
      End If 
      ktemp$ = "B" + PODetail$[206,207] ! FOB
      Call SAIGetRecord(ch_110Aro,recdef_110A.,ktemp$,1,"Y","U",r1,ScrapCode$,ScrapCode[],e1,errmess$)
      If e1 = 0
        temp$ = temp$ + " " + ScrapCode$[15,34]
      Else 
        temp$ = temp$ + Rep$(" ",21)
      End If 
      If Trim$(PODetail$[66,95])
        temp$ = temp$ + "\15\" + Rep$(" ",35) + PODetail$[66,95] + Rep$(" ",23) ! Shipping Instructions
        temp$ = Replace$(temp$,"&","&&")
        Print #chlist;PChr$(icount + 30,10,y,ilistw - 10,y + 32,temp$,2);'WCBUTTON';
        y = y + 35
      Else 
        temp$ = Replace$(temp$,"&","&&")
        Print #chlist;PChr$(icount + 30,10,y,ilistw - 10,y + 25,temp$,2);'WCBUTTON';
        y = y + 28
      End If 
      ilistsel$[icount] = k1$
      If k1$[11,12] = "00" And PODetail$[49,49] <> "D" And PODetail$[49,49] <> "P" ! Status flag <> "D"elete or "P"urge
        k1$[11,12] = "~~" ! Skip other lines of contract
      End If 
      icount = icount + 1
      If y > 254 Exit Do 
    End If 
  Loop Until icount = imax
  Print #chlist;PChr$(1,3);'WCENABLE';
  If e Print #chlist;'2WCDISABLE';
  If ilistcur = 0 Print #chlist;'1WCDISABLE';
  If icount = 0
    Print #chlist;'3WCFOCUS';
  Else 
    Print #chlist;'30WCFOCUS';
  End If 
End Sub 
Sub ListPOs(FullPONo$,MultLines$,status)
  imax = 9
  Clear ilist$[],ilistcur,SearchString$
  ilistw = 920
  ilisth = 315
  temp$ = "Purchase Order Selection"
  If SupplierNo$ Let temp$ = temp$ + " for Supplier:  " + SupplierNo$ + " - " + Supplier.Name$
  chlist = SAIOpenWindow(temp$,ilistw,ilisth,1)
  Print #chlist;PChr$("Arial");'FONTFACE 12FONTSIZE WCSETFONT';
  Print #chlist;PChr$(16777215);'BACKCOLOR CS'
  y = ilisth - 28
  Call SAIButtons(chlist,3,1,"< Previous~Next >~Cancel",920,y,25,120,20)
  Print #chlist;PChr$(5,10,y,180,y + 25,"Search\15\Supplier S.O.#",2);'WCBUTTON';
  Print #chlist;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE WCSETFONT';
  Print #chlist;PChr$(-1,SAIColorRGB(255,255,0));'WCSETCOLOR';
  y = 1
  temp$ = "      P.O.#-LN COMP-DT  MATERIAL YD DESCRIPTION          VEH TYP   ORDER QTY      QTY DUE"
  temp$ = temp$ + "\15\" + Rep$(" ",15) + "SUPPLIER S.O.#" + Rep$(" ",7) + "SHIP-FROM-NAME        CITY       FOB"
  temp$ = temp$ + "\15\" + Rep$(" ",36) + "SHIPPING INSTRUCTIONS"
  Print #chlist;PChr$(100,10,y,ilistw - 10,y + 30,temp$);'WCLABEL';
  Print #chlist;'WCRESETCOLOR';
  ylist = 33
  If Len(FullPONo$) < 10
    k1$ = ""
  Else 
    k1$ = FullPONo$
  End If 
  Call POSearch(k1$,MultLines$)
  Do 
    Input #chlist; Len (1);w$
    Select Case w$
      Case 'F1' ! Previous
        If ilistcur > 0
          ilistcur = ilistcur - 1
          k1$ = ilist$[ilistcur]
          Call POSearch(k1$,MultLines$)
        End If 
      Case 'F2' ! Next
        ilistcur = ilistcur + 1
        Call POSearch(k1$,MultLines$)
      Case 'F3' ! Cancel
        status = 1
        Exit Do 
      Case 'F5' ! Search
        w$ = SearchString$
        Call SAIKeyBoardGen("Enter Search String",KBParams.alphacase,11,0,w$,status)
        Print #chinyd;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE WCSETFONT';
        If status = 0
          SearchString$ = Trim$(w$)
          Clear ilist$[],ilistcur
          If Len(FullPONo$) < 10
            k1$ = ""
          Else 
            k1$ = FullPONo$
          End If 
          Call POSearch(k1$,MultLines$)
        End If 
      Case 'F30' To 'F39'
        i = Asc(w$) - Asc('F30')
        k1$ = ilistsel$[i]
        Call SAIGetRecord(ch_1210ro,recdef_1210.,k1$,2,"Y","U",r,PODetail$,PODetail[],e,errmess$)
        If e = 0
          If PODetail[1] >= PODetail[0] And PODetail$[201,201] = "W"
            Call SAITouchWarning("Accepting this load will cause the order to be overshipped!")
          End If 
          FullPONo$ = PODetail$[7,18]
          status = 0
          Exit Do 
        Else 
          Call SAITouchError("Error retrieving selected Purchase Order.\15\" + errmess$)
        End If 
    End Select 
  Loop 
  Close #chlist
End Sub 
Sub RetrievePO(FullPONo$,status)
  If Len(FullPONo$) <= 12
    If Len(FullPONo$) <= 10
      n = 10
    Else 
      n = 12
    End If 
    k1$ = SAIFill$(FullPONo$,"R"," ",n)
    Search #ch_1210ro,2,2;k1$,r,e
    If e = 0
      FullPONo$ = k1$[1,n]
    Else 
      FullPONo$ = DecodeContractNo$(FullPONo$)
    End If 
  Else If Len(FullPONo$) = 13
    FullPONo$ = DecodeContractNo$(FullPONo$)
  End If 
  If Len(FullPONo$) <> 10 And Len(FullPONo$) <> 12 And Len(FullPONo$) <> 18
    status = 1
    Exit Sub 
  End If 
  k1$ = FullPONo$
  Call SAIGetRecord(ch_1210ro,recdef_1210.,k1$,2,"Y","U",r,PODetail$,PODetail[],e,errmess$)
  If e
    status = 1
    Exit Sub 
  End If 
  Call ValidatePO(PODetail$,"N",e)
  If Len(FullPONo$) = 12
    If e
      status = 1
      Exit Sub 
    Else 
      temp$ = k1$
    End If 
  Else If Len(FullPONo$) = 10
    If e = 0
      count = 1
      temp$ = k1$
    Else 
      count = 0
      temp$ = ""
    End If 
    If k1$[11,12] <> "00"
      Do 
        Search #ch_1210ro,3,2;k1$,r,e
        If e Exit Do 
        If k1$[1,Len(FullPONo$)] <> FullPONo$ Exit Do 
        Call SAIReadRecord(ch_1210ro,recdef_1210.,"Y","U",r,PODetail$,PODetail[],e,errmess$)
        If e = 0
          Call ValidatePO(PODetail$,"N",e)
        End If 
        If e = 0
          count = count + 1
          temp$ = k1$
        End If 
        If count > 1 Exit Do 
      Loop 
    End If 
    If count = 0
      status = 1
      Exit Sub 
    Else If count > 1
      Call ListPOs(FullPONo$,"N",status)
      If status
        status = 2
        Exit Sub 
      Else 
        temp$ = FullPONo$
      End If 
    End If 
  End If 
  k1$ = temp$
  Call SAIGetRecord(ch_1210ro,recdef_1210.,k1$,2,"Y","U",r,PODetail$,PODetail[],e,errmess$)
  If e Call ValidatePO(PODetail$,"N",e)
  If e = 0
    Call RetrieveSupplier(PODetail$[1,6],Supplier.,stat)
    If stat = 0
      If ValidSupplier(z$,Supplier.) = 0 Let stat = 1
    End If 
    If stat = 0
      SupplierNo$ = Supplier.SupplierNo$
      FullPONo$ = PODetail$[7,18]
      status = 0
    Else 
      status = 1
    End If 
  Else 
    status = 1
  End If 
End Sub 
Sub GetMultPOLine(FullPONo$,status)
  k1$ = FullPONo$ ! Check for a single line *MULT contract
  Clear nlines,status,ktemp$,TempPODetail$
  Do 
    Search #ch_1210ro,3,2;k1$,r,e
    If e Exit Do 
    If k1$[1,10] <> FullPONo$[1,10] Exit Do 
    Call SAIReadRecord(ch_1210ro,recdef_1210.,"Y","U",r,PODetail$,PODetail[],stat,errmess$)
    If stat = 0
      Call ValidatePO(PODetail$,"Y",stat)
      If stat = 0
        nlines = nlines + 1
        ktemp$ = k1$
        TempPODetail$ = PODetail$
      End If 
    End If 
  Loop 
  If nlines = 1 And Trim$(TempPODetail$[50,57]) = "999"
    k1$ = ktemp$
    Call SAIGetRecord(ch_1210ro,recdef_1210.,k1$,2,"Y","U",r,PODetail$,PODetail[],e,errmess$)
    If e = 0
      status = 0
    Else 
      Call SAITouchError("Error retrieving selected Purchase Order.\15\" + errmess$)
      status = 1
    End If 
  Else 
    Call ListPOs(FullPONo$,"Y",status)
  End If 
End Sub 
Sub GetPO(FullPONo$,status)
  FullPONo$ = ""
  chpo = SAIOpenWindow("Enter Purchase Order No.",820,230,1)
  Print #chpo;PChr$("Arial");'FONTFACE';
  Print #chpo;PChr$(bgcolor1);'BACKCOLOR CS';
  Print #chpo;'WCSETCOLOR';
  Print #chpo;'12FONTSIZE WCSETFONT';
  x = 20 \ y = 20
  dx = 250
  !  if RFReader$[ReadScale]="" Let x=x+105
  Print #chpo;PChr$(200,x,y,x + 100,y + 18,"P.O. #");'WCLABEL';
  Print #chpo;'WCRESETCOLOR EBOLD WCSETFONT';
  x = x + 100
  KBParams.InputElement = 4
  Print #chpo;PChr$(KBParams.InputElement,x,y,x + dx,y + 18,"",2,13);'WCSTRING';
  x = x + dx + 5
  Print #chpo;PChr$(5,x,y - 3,x + 150,y + 21,"Search",2);'WCBUTTON';
  x = x + 210
  !  if RFReader$[ReadScale] print #chpo;PChr$(6,x,y-3,x+200,y+21,"Read RFID ("+Str$(ReadScale)+")",2);'WCBUTTON';
  KBParams.StartX = 15
  KBParams.StartY = 60
  KBParams.ButtonHeight = 25
  KBParams.ButtonWidth = 50
  KBParams.FontSize1 = 14
  KBParams.FontSize2 = 12
  KBParams.IELength = 0
  KBParams.IEMaxChar = 13
  KBParams.FuncBtnLen = 0
  Call SAIDrawKeyboard(chpo,KBParams.,0)
  Print #chpo;'0WCSELECT';
  !??  if ID$ print #chpo;PChr$(KBParams.InputElement);'WCSELECT CU';Trim$(ID$);'BEGIN 0WCSELECT';
  Print #chpo;PChr$(KBParams.InputElement);'WCFOCUS';
  ishift = 0
  istring$ = ""
  Do 
    Input #chpo; Len (1);w$
    Select Case w$
      Case 'F5' ! Search
        FullPONo$ = SAIQuery$(chpo,KBParams.InputElement)
        Call ListPOs(FullPONo$,"N",status)
        If status = 0
          Call RetrievePO(FullPONo$,status)
          If status
            Call SAITouchError("Cannot access selected Purchase Order.")
          Else 
            Exit Do 
          End If 
        End If 
      Case Else 
        Call SAIKeyBoardInput(chpo,chpo,KBParams.,ishift,w$,istring$,istatus)
        If istatus = -1
          status = 1
          Exit Do 
        Else If istatus
          If istring$ = ""
            status = 1
            Exit Do 
          End If 
          If Trim$(istring$) = ""
            Call SAITouchWarning("You must enter a Valid P.O.#")
          Else 
            FullPONo$ = istring$
            Call RetrievePO(FullPONo$,status)
            If status = 0
              If PODetail[1] >= PODetail[0] And PODetail$[201,201] = "W"
                Call SAITouchWarning("Accepting this load will cause the order to be overshipped!")
              End If 
              Exit Do 
            Else If status = 1
              Call SAITouchWarning("Invalid Purchase Order entered.  Please try again.")
            End If 
          End If 
        End If 
    End Select 
  Loop 
  Close #chpo
End Sub 
Sub ValidateMatReq(PODetail$,stat)
  stat = 1
  If PODetail$[208,208] = "E"
    If RunDate$[5,6] + RunDate$[1,4] > PODetail$[268,269] + PODetail$[264,267] Exit Sub ! PO Expired
  Else If PODetail$[208,208] <> " "
    Exit Sub ! Order flag not blank ('F'inished or 'C'ancelled)
  End If 
  If PODetail$[166,183] <> SODetail$[1,18] Exit Sub ! Brok Cust and Order No aren't the same
  If PODetail$[58,65] <> SODetail$[58,65] Exit Sub ! Inventory Codes don't match
  If PODetail$[158,159] <> Branch$
    If Branch$ <> z$[642,643] And PODetail$[158,159] <> z$[642,643] Exit Sub ! Not current company
  End If 
  If PODetail$[184,184] <> SODetail$[184,184] Exit Sub ! Weight Codes do not match
  stat = 0
End Sub 
Sub MatReqSearch(k1$)
  icount = 0
  y = 13
  Clear ilistsel$[]
  If ilistcur > ilistmax
    ilistmax = ilistmax + 10
    Dim ilist$[ilistmax,ilistlen]
  End If 
  ilist$[ilistcur] = k1$
  Print #chlist;PChr$(1,6);'WCDISABLE';
  Print #chlist;PChr$(30,29 + imax);'WCDELETE';
  Do 
    Search #ch_1246,3,1;k1$,r,e
    If e Exit Do 
    If k1$[1,18] <> SODetail$[1,18]
      e = 1
      Exit Do 
    End If 
    If k1$[31,36] = SAISpaceFill$(SupplierNo$,6) ! Yard Supplier No
      ktemp$ = k1$[31,36] + k1$[19,30]
      Call SAIGetRecord(ch_1210ro,recdef_1210.,ktemp$,1,"Y","U",r1,PODetail$,PODetail[],stat,errmess$)
      If stat = 0
        Call ValidateMatReq(PODetail$,stat)
        If stat = 0 And SearchString$ <> ""
          If Pos(PODetail$[7,16], = SearchString$) = 0 Let stat = 1
        End If 
      End If 
      If stat = 0
        temp$ = PODetail$[7,16] + "-" + PODetail$[17,18] + "  " + SAIDateDisplay$(PODetail$[25,30]) + "  " + PODetail$[50,57] + "   "
        temp$ = temp$ + PODetail$[35,35] + "  " + PODetail$[111,134] + "    "
        temp$ = Replace$(temp$,"&","&&")
        Print #chlist;PChr$(icount + 30,10,y,ilistw - 10,y + 25,temp$,2);'WCBUTTON';
        ilistsel$[icount] = PODetail$[1,18]
        icount = icount + 1
        y = y + 28
        If reqcount = 1
          e = 1
          Exit Do 
        End If 
      End If 
    End If 
  Loop Until icount = imax
  Print #chlist;PChr$(1,6);'WCENABLE';
  If e Print #chlist;'4WCDISABLE';
  If ilistcur = 0 Print #chlist;'3WCDISABLE';
  If icount = 0
    Print #chlist;'5WCFOCUS';
  Else 
    Print #chlist;'30WCFOCUS';
  End If 
End Sub 
Sub ListMaterialReqs(FullPONo$,reqcount,status)
  ktemp$ = "Y" + SAISpaceFill$(Material.YardCode$,1) + Branch$ ! Get Yard Code found for current Branch to get Yard Vendor
  Call SAIGetRecord(ch_110Aro,recdef_110A.,ktemp$,1,"Y","U",rec_110A,ScrapCode$,ScrapCode[],status,errmess$)
  If status = 0 And Trim$(ScrapCode$[57,62])
    SupplierNo$ = ScrapCode$[57,62]
  Else 
    SupplierNo$ = YardSupplierNo$
  End If 
  imax = 9
  Clear ilist$[]
  ilistcur = 0
  ilistw = 750
  ilisth = 300
  chlist = SAIOpenWindow("Material Requisition Selection for Yard Supplier: " + SupplierNo$,ilistw,ilisth,1)
  Print #chlist;PChr$("Arial");'FONTFACE 12FONTSIZE WCSETFONT';
  Print #chlist;PChr$(16777215);'BACKCOLOR CS'
  y = ilisth - 28
  Call SAIButtons(chlist,5,1,"Unknown~Search~< Previous~Next >~Cancel",ilistw,y,25,120,20)
  Print #chlist;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE WCSETFONT';
  Print #chlist;PChr$(-1,SAIColorRGB(255,255,0));'WCSETCOLOR';
  y = 2
  temp$ = "   MAT. REQ.#-LN  SETUP-DT  MATERIAL  YD  DESCRIPTION"
  Print #chlist;PChr$(100,10,y,ilistw - 10,y + 10,temp$);'WCLABEL';
  Print #chlist;'WCRESETCOLOR';
  y = y + 2
  ylist = y
  SearchString$ = ""
  If reqcount = 0
    Print #chlist;PChr$(2,4);'WCDISABLE'; ! Only allow Unknown and Cancel
    Print #chlist;'5WCFOCUS';
  Else 
    k1$ = SODetail$[1,18] ! 1246 key starts with Customer, Sales Order, Line
    Call MatReqSearch(k1$)
  End If 
  FullPONo$ = ""
  Do 
    Input #chlist; Len (1);w$
    Select Case w$
      Case 'F1' ! Unknown
        Clear PODetail$,PODetail[],FullPONo$
        status = 0
        Exit Do 
      Case 'F2' ! Search
        w$ = SearchString$
        Call SAIKeyBoardGen("Enter Search String",KBParams.alphacase,11,0,w$,status)
        Print #chinyd;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE WCSETFONT';
        If status = 0
          SearchString$ = w$
          Clear ilist$[]
          ilistcur = 0
          k1$ = SAISpaceFill$(SupplierNo$,6)
          Call MatReqSearch(k1$)
        End If 
      Case 'F3' ! Previous
        If ilistcur > 0
          ilistcur = ilistcur - 1
          k1$ = ilist$[ilistcur]
          Call MatReqSearch(k1$)
        End If 
      Case 'F4' ! Next
        ilistcur = ilistcur + 1
        Call MatReqSearch(k1$)
      Case 'F5' ! Cancel
        FullPONo$ = ""
        status = 1
        Exit Do 
      Case 'F30' To 'F39'
        i = Asc(w$) - Asc('F30')
        k1$ = ilistsel$[i]
        Call SAIGetRecord(ch_1210ro,recdef_1210.,k1$,1,"Y","U",r,PODetail$,PODetail[],e,errmess$)
        If e
          Call SAITouchError("Error retrieving selected Material Requisition.")
          FullPONo$ = ""
          status = 1
        Else 
          FullPONo$ = PODetail$[7,18]
          status = 0
        End If 
        Exit Do 
    End Select 
  Loop 
  Close #chlist
  SupplierNo$ = ""
End Sub 
Sub GetMaterialReqCount(PODetail$,SupplierNo$,reqcount)
  reqcount = 0
  klist$ = SODetail$[1,18] ! Customer, SO, Line
  ksav$ = klist$
  Do 
    Search #ch_1246,3,1;klist$,r,e
    If e Exit Do 
    If klist$[1,Len(ksav$)] <> ksav$
      Exit Do 
    End If 
    If klist$[31,36] = SAISpaceFill$(SupplierNo$,6) ! Yard Supplier No
      ktemp$ = klist$[31,36] + klist$[19,30]
      Call SAIGetRecord(ch_1210ro,recdef_1210.,ktemp$,1,"Y","U",r1,PODetail$,PODetail[],stat,errmess$)
      If stat = 0 Call ValidateMatReq(PODetail$,stat)
      If stat = 0
        reqcount = reqcount + 1
        If reqcount = 1 Let FullPONo$ = PODetail$[7,18]
      End If 
    End If 
  Loop Until reqcount > 1
End Sub 
Sub GetMaterialReq(FullPONo$,status)
  FullPONo$ = ""
  ktemp$ = "Y" + Material.YardCode$ + Branch$ ! Get Yard Code found for current Branch to get Yard Vendor
  Call SAIGetRecord(ch_110Aro,recdef_110A.,ktemp$,1,"Y","U",rec_110A,ScrapCode$,ScrapCode[],status,errmess$)
  If status = 0 And Trim$(ScrapCode$[57,62])
    SupplierNo$ = ScrapCode$[57,62]
  Else 
    SupplierNo$ = YardSupplierNo$
  End If 
  Call GetMaterialReqCount(PODetail$,SupplierNo$,reqcount)
  If reqcount = 0
    Call ListMaterialReqs(FullPONo$,reqcount,status) ! Don't search, put up empty selection window
  Else If reqcount = 1
    k1$ = SAISpaceFill$(SupplierNo$,6) + FullPONo$
    Call SAIGetRecord(ch_1210ro,recdef_1210.,k1$,1,"Y","U",r,PODetail$,PODetail[],stat,errmess$)
    If stat = 0
      status = 0
    Else 
      reqcount = -1
      Call ListMaterialReqs(FullPONo$,reqcount,status)
    End If 
  Else 
    Call ListMaterialReqs(FullPONo$,reqcount,status)
  End If 
  If status
    Clear FullSONo$,SODetail$,SODetail[]
    Clear FullPONo$,PODetail$,PODetail[]
  End If 
End Sub 
Sub ValidateSO(SODetail$,MultLines$,stat)
  stat = 1
  If MultLines$ = "Y"
    If SODetail$[17,18] = "00" Exit Sub 
    ktemp$ = SODetail$[1,16] + "00" ! Verify the existance of a line 00
    Search #ch_1310ro,2,1;ktemp$,r1,e1
    If e1 Exit Sub 
  Else 
    If SODetail$[17,18] = "00"
      If SODetail$[50,51] <> "*M" Exit Sub ! Material not *MIX or *MULT on line 00
    Else 
      ktemp$ = SODetail$[1,16] + "00" ! Check for the existance of a line 00
      Search #ch_1310ro,2,1;ktemp$,r1,e1
      If e1 = 0
        Call SAIReadRecord(ch_1310ro,recdef_1310.,"Y","U",r,TempSODetail$,TempSODetail[],e1,errmess$)
        If e1 = 0 And TempSODetail$[49,49] <> "D" And TempSODetail$[49,49] <> "P" Exit Sub !line 00 flagged for delete
      End If 
    End If 
  End If 
  If SODetail$[189,189] = "E"
    If RunDate$[5,6] + RunDate$[1,4] > SODetail$[268,269] + SODetail$[264,267] Exit Sub ! PO Expired
  Else If SODetail$[189,189] <> " "
    Exit Sub ! Order flag not blank ('F'inished or 'C'ancelled)
  End If 
  If SODetail$[49,49] = "D" Or SODetail$[49,49] = "P" Exit Sub ! Status flag = "D"elete or "P"urge
  If SODetail$[165,165] <> " " Exit Sub ! Order on Hold
  If (ShowCurrentOrdersOnly$ = "Y" Or ShowCurrentOrdersOnly$ = "C") And Trim$(SODetail$[25,30]) <> ""
    If SODetail$[29,30] + SODetail$[25,28] < RunDate$[5,6] + RunDate$[1,4] Exit Sub ! SO Complete Date < RunDate
  End If 
  If ShowCurrentOrdersOnly$ = "C" And Trim$(SODetail$[19,24]) <> ""
    If SODetail$[23,24] + SODetail$[19,22] > RunDate$[5,6] + RunDate$[1,4] Exit Sub ! SO Setup Date > RunDate
  End If 
  If ShowCurrentCompanyOrdersOnly$ = "Y" And SODetail$[158,159] <> Branch$
    If Branch$ <> z$[642,643] And SODetail$[158,159] <> z$[642,643] Exit Sub 
  End If 
  If AllowVehTypeChange$ = "N"
    If DefaultVehType$ <> SODetail$[38,38] And DefaultVehType$ <> SODetail$[48,48] Exit Sub ! Veh Type not valid
  End If 
  ktemp$ = "t" + SODetail$[156,157]
  Call SAIGetRecord(ch_110Aro,recdef_110A.,ktemp$,1,"Y","U",r1,ScrapCode$,ScrapCode[],e1,errmess$)
  If e1 Exit Sub ! Invalid Order Type
  If ScrapCode$[41,41] <> "R" Exit Sub ! Transaction type on Order type
  ktemp$ = "Y" + SODetail$[35,35] + Branch$
  Call SAIGetRecord(ch_110Aro,recdef_110A.,ktemp$,1,"Y","U",r1,ScrapCode$,ScrapCode[],e1,errmess$)
  If e1 !   Yard Code not found
    ktemp$ = "Y" + SODetail$[35,35] + SODetail$[158,159] ! virtual orders should use yard from SO
    Call SAIGetRecord(ch_110Aro,recdef_110A.,ktemp$,1,"Y","U",r1,ScrapCode$,ScrapCode[],e1,errmess$)
    If e1 Exit Sub ! Invalid Yard Code
  End If 
  If ScrapCode$[36,36] = "Y" Exit Sub ! Brokerage Yard
  If OTMFreight$ = "Y" And TicketHeader.CarrierRefNo$ And Trim$(TicketHeader.ShipFromTo$)
    If SODetail$[31,34] <> TicketHeader.ShipFromTo$ Exit Sub 
  End If 
  Call RetrieveCustomer(SODetail$[1,6],CustomerTemp.,stat)
  If stat = 0
    If ValidCustomer(z$,CustomerTemp.) = 0 Let stat = 1
  End If 
  If stat = 0 ! Check Branch Group on SO Header
    ktemp$ = SODetail$[1,16]
    Call SAIGetRecord(ch_1300,recdef_1300.,ktemp$,1,"Y","U",rtemp,SOHeaderTemp$,SOHeaderTemp[],e1,errmess$)
    If e1 = 0
      If Trim$(SOHeaderTemp$[164,166]) And SOHeaderTemp$[164,166] <> z$[616,618] Let stat = 1
    Else 
      stat = 1
    End If 
  End If 
End Sub 
Sub CustomerSOSearch(k1$)
  icount = 0
  y = ylist
  Clear ilistsel$[]
  If ilistcur > ilistmax
    ilistmax = ilistmax + 10
    Dim ilist$[ilistmax,ilistlen]
  End If 
  ilist$[ilistcur] = k1$
  Print #chlist;PChr$(1,6);'WCDISABLE';
  Print #chlist;PChr$(30,29 + imax);'WCDELETE';
  Do 
    Search #ch_1310ro,3,1;k1$,r,e
    If e Exit Do 
    If k1$[1,6] <> SAISpaceFill$(CustomerNo$,6)
      e = 1
      Exit Do 
    End If 
    Call SAIReadRecord(ch_1310ro,recdef_1310.,"Y","U",r,SODetail$,SODetail[],stat,errmess$)
    If stat = 0
      If k1$[Len(k1$) - 1,Len(k1$)] = "00"
        If SODetail$[49,49] <> "D" And SODetail$[49,49] <> "P" ! Status flag = "D"elete or "P"urge, treat as non-line 00
          k1$[Len(k1$) - 1,Len(k1$)] = "~~" ! Skip other lines of contract
        End If 
      End If 
      Call ValidateSO(SODetail$,"N",stat)
      If stat = 0 And SearchString$ <> ""
        If Pos(SODetail$[7,16], = SearchString$) = 0 Let stat = 1
      End If 
    End If 
    If stat = 0 And ShowOrdersWithMaterialReqsOnly$ = "Y"
      If Trim$(ScrapCode$[57,62])
        SupplierNo$ = ScrapCode$[57,62]
      Else 
        SupplierNo$ = YardSupplierNo$
      End If 
      Call GetMaterialReqCount(PODetail$,SupplierNo$,reqcount)
      FullPONo$ = ""
      If reqcount
        stat = 0
      Else 
        stat = 1
      End If 
    End If 
    If stat = 0
      temp$ = SODetail$[7,16] + "-" + SODetail$[17,18] + " " + SAIDateDisplay$(SODetail$[25,30]) + " " + SODetail$[50,57] + "  "
      !  temp$=temp$+SODetail$[35,35]+" "+SODetail$[111,130]+"  "+SODetail$[38,38]+SODetail$[48,48]+"  "+SODetail$[206,207]
      temp$ = temp$ + SODetail$[35,35] + " " + SODetail$[111,130] + "  " + SODetail$[38,38]
      If SODetail$[48,48] = " "
        temp$ = temp$ + "     "
      Else 
        temp$ = temp$ + "," + SODetail$[48,48] + "   "
      End If 
      temp$ = temp$ + SODetail[0] Using "-,---,--#.## "
      temp$ = temp$ + (SODetail[0] - SODetail[1]) Using "-,---,--#.##"
      temp$ = temp$ + "\15\" + Rep$(" ",14) + SODetail$[214,233] + " "
      If SODetail$[31,34] = "0000"
        temp$ = temp$ + SAISpaceFill$(Customer.Name$,20) + "  " + SAISpaceFill$(Customer.City$,10)
      Else 
        Call RetrieveAltAddress("T",CustomerNo$,SODetail$[31,34],AltAddress.,stat)
        If stat = 0
          temp$ = temp$ + SAISpaceFill$(AltAddress.Name$,20) + "  " + SAISpaceFill$(AltAddress.City$,10)
        Else 
          temp$ = temp$ + SODetail$[31,34] + Rep$(" ",28)
        End If 
      End If 
      ktemp$ = "B" + SODetail$[206,207] ! FOB
      Call SAIGetRecord(ch_110Aro,recdef_110A.,ktemp$,1,"Y","U",r1,ScrapCode$,ScrapCode[],e1,errmess$)
      If e1 = 0
        temp$ = temp$ + " " + ScrapCode$[15,34]
      Else 
        temp$ = temp$ + Rep$(" ",21)
      End If 
      If Trim$(SODetail$[66,95])
        temp$ = temp$ + "\15\" + Rep$(" ",35) + SODetail$[66,95] + Rep$(" ",23) ! Shipping Instructions
        temp$ = Replace$(temp$,"&","&&")
        Print #chlist;PChr$(icount + 30,10,y,ilistw - 10,y + 32,temp$,2);'WCBUTTON';
        y = y + 35
      Else 
        Print #chlist;PChr$(icount + 30,10,y,ilistw - 10,y + 25,temp$,2);'WCBUTTON';
        y = y + 28
      End If 
      ilistsel$[icount] = SODetail$[1,18]
      icount = icount + 1
      If y > 254 Exit Do 
    End If 
  Loop Until icount = imax
  Print #chlist;PChr$(1,6);'WCENABLE';
  If e Print #chlist;'3WCDISABLE';
  If ilistcur = 0 Print #chlist;'2WCDISABLE';
  If icount = 0
    Print #chlist;'4WCFOCUS';
  Else 
    Print #chlist;'30WCFOCUS';
  End If 
End Sub 
Sub ListCustomerSOs(CustomerNo$,SONo$,status)
  imax = 9
  Clear ilist$[]
  ilistcur = 0
  ilistw = 920
  ilisth = 315
  chlist = SAIOpenWindow("Sales Order Selection for Customer: " + CustomerNo$,ilistw,ilisth,1)
  Print #chlist;PChr$("Arial");'FONTFACE 12FONTSIZE WCSETFONT';
  Print #chlist;PChr$(16777215);'BACKCOLOR CS'
  y = ilisth - 28
  Call SAIButtons(chlist,4,1,"Search~< Previous~Next >~Cancel",920,y,25,120,20)
  If SalesOrderRequired$ <> "Y"
    Print #chlist;PChr$(5,10,y,130,y + 25,"Unknown",2);'WCBUTTON';
  End If 
  Print #chlist;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE WCSETFONT';
  Print #chlist;PChr$(-1,SAIColorRGB(255,255,0));'WCSETCOLOR';
  y = 2
  temp$ = "      S.O.#-LN COMP-DT  MATERIAL YD DESCRIPTION          VEH TYP   ORDER QTY      QTY DUE"
  temp$ = temp$ + "\15\" + Rep$(" ",15) + "CUSTOMER P.O.#" + Rep$(" ",7) + "SHIP-TO-NAME          CITY       FOB"
  temp$ = temp$ + "\15\" + Rep$(" ",36) + "SHIPPING INSTRUCTIONS"
  Print #chlist;PChr$(100,10,y,ilistw - 10,y + 30,temp$);'WCLABEL';
  Print #chlist;'WCRESETCOLOR';
  ylist = 33
  SearchString$ = ""
  k1$ = SAISpaceFill$(CustomerNo$,6)
  Call CustomerSOSearch(k1$)
  Do 
    Input #chlist; Len (1);w$
    Select Case w$
      Case 'F1' ! Search
        w$ = SearchString$
        Call SAIKeyBoardGen("Enter Search String",KBParams.alphacase,11,0,w$,status)
        Print #chinyd;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE WCSETFONT';
        If status = 0
          SearchString$ = w$
          Clear ilist$[]
          ilistcur = 0
          k1$ = SAISpaceFill$(CustomerNo$,6)
          Call CustomerSOSearch(k1$)
        End If 
      Case 'F2' ! Previous
        If ilistcur > 0
          ilistcur = ilistcur - 1
          k1$ = ilist$[ilistcur]
          Call CustomerSOSearch(k1$)
        End If 
      Case 'F3' ! Next
        ilistcur = ilistcur + 1
        Call CustomerSOSearch(k1$)
      Case 'F4' ! Cancel
        SONo$ = ""
        status = 1
        Exit Do 
      Case 'F5' ! UNKNOWN
        If SalesOrderRequired$ <> "Y"
          SONo$ = ""
          SODetail$ = ""
          Clear SODetail[]
          status = 0
          Exit Do 
        End If 
      Case 'F30' To 'F39'
        i = Asc(w$) - Asc('F30')
        k1$ = ilistsel$[i]
        Call SAIGetRecord(ch_1310ro,recdef_1310.,k1$,1,"Y","U",r,SODetail$,SODetail[],e,errmess$)
        If e
          Call SAITouchError("Error retrieving selected Sales Order.")
          SONo$ = ""
          status = 1
        Else 
          SONo$ = SODetail$[7,18]
          status = 0
        End If 
        Exit Do 
    End Select 
  Loop 
  Close #chlist
End Sub 
Sub SOSearch(k1$,MultLines$)
  icount = 0
  y = ylist
  Clear ilistsel$[]
  If ilistcur > ilistmax
    ilistmax = ilistmax + 10
    Dim ilist$[ilistmax,ilistlen]
  End If 
  ilist$[ilistcur] = k1$
  Print #chlist;PChr$(1,3);'WCDISABLE';
  Print #chlist;PChr$(30,29 + imax);'WCDELETE';
  Do 
    Search #ch_1310ro,3,2;k1$,r,e
    If e Exit Do 
    If Len(FullSONo$) = 10
      If k1$[1,10] <> FullSONo$
        e = 1
        Exit Do 
      End If 
    End If 
    Call SAIReadRecord(ch_1310ro,recdef_1310.,"Y","U",r,SODetail$,SODetail[],stat,errmess$)
    If stat = 0
      If SearchString$
        If Pos(SODetail$[214,233], = SearchString$) = 0 Let stat = 1
      End If 
      If stat = 0
        Call ValidateSO(SODetail$,MultLines$,stat)
        If stat
          If k1$[11,12] = "00" And MultLines$ <> "Y"
            If SODetail$[49,49] <> "D" And SODetail$[49,49] <> "P" ! Status flag <> "D"elete or "P"urge
              k1$[11,12] = "~~" ! Skip other lines of contract
            End If 
          End If 
        Else If Len(FullSONo$) < 10
          If Pos(SODetail$[7,16], = FullSONo$) = 0 Let stat = 1
        End If 
      End If 
    End If 
    If stat = 0
      temp$ = SODetail$[7,16] + "-" + SODetail$[17,18] + " " + SAIDateDisplay$(SODetail$[25,30]) + " " + SODetail$[50,57] + "  "
      !  temp$=temp$+SODetail$[35,35]+" "+SODetail$[111,130]+"  "+SODetail$[38,38]+SODetail$[48,48]+"  "+SODetail$[206,207]
      temp$ = temp$ + SODetail$[35,35] + " " + SODetail$[111,130] + "  " + SODetail$[38,38]
      If SODetail$[48,48] = " "
        temp$ = temp$ + "     "
      Else 
        temp$ = temp$ + "," + SODetail$[48,48] + "   "
      End If 
      If Abs(SODetail[0]) > 999999
        temp$ = temp$ + SODetail[0] Using "----,---,--# "
        temp$ = temp$ + (SODetail[0] - SODetail[1]) Using "-,---,--#.##"
      Else 
        temp$ = temp$ + SODetail[0] Using "-,---,--#.## "
        temp$ = temp$ + (SODetail[0] - SODetail[1]) Using "----,---,--#"
      End If 
      temp$ = temp$ + "\15\" + Rep$(" ",14) + SODetail$[214,233] + " " ! Customer P.O.#
      If SODetail$[31,34] = "0000"
        Call RetrieveCustomer(SODetail$[1,6],CustomerTemp.,stat)
        temp$ = temp$ + SAISpaceFill$(CustomerTemp.Name$,20) + "  " + SAISpaceFill$(CustomerTemp.City$,10)
      Else 
        Call RetrieveAltAddress("T", + SODetail$[1,6],SODetail$[31,34],AltAddress.,stat)
        If stat = 0
          temp$ = temp$ + SAISpaceFill$(AltAddress.Name$,20) + "  " + SAISpaceFill$(AltAddress.City$,10)
        Else 
          temp$ = temp$ + SODetail$[31,34] + Rep$(" ",28)
        End If 
      End If 
      ktemp$ = "B" + SODetail$[206,207] ! FOB
      Call SAIGetRecord(ch_110Aro,recdef_110A.,ktemp$,1,"Y","U",r1,ScrapCode$,ScrapCode[],e1,errmess$)
      If e1 = 0
        temp$ = temp$ + " " + ScrapCode$[15,34]
      Else 
        temp$ = temp$ + Rep$(" ",21)
      End If 
      If Trim$(SODetail$[66,95])
        temp$ = temp$ + "\15\" + Rep$(" ",35) + SODetail$[66,95] + Rep$(" ",23) ! Shipping Instructions
        temp$ = Replace$(temp$,"&","&&")
        Print #chlist;PChr$(icount + 30,10,y,ilistw - 10,y + 32,temp$,2);'WCBUTTON';
        y = y + 35
      Else 
        temp$ = Replace$(temp$,"&","&&")
        Print #chlist;PChr$(icount + 30,10,y,ilistw - 10,y + 25,temp$,2);'WCBUTTON';
        y = y + 28
      End If 
      ilistsel$[icount] = k1$
      If k1$[11,12] = "00" And SODetail$[49,49] <> "D" And SODetail$[49,49] <> "P" ! Status flag <> "D"elete or "P"urge
        k1$[11,12] = "~~" ! Skip other lines of contract
      End If 
      icount = icount + 1
      If y > 254 Exit Do 
    End If 
  Loop Until icount = imax
  Print #chlist;PChr$(1,3);'WCENABLE';
  If e Print #chlist;'2WCDISABLE';
  If ilistcur = 0 Print #chlist;'1WCDISABLE';
  If icount = 0
    Print #chlist;'3WCFOCUS';
  Else 
    Print #chlist;'30WCFOCUS';
  End If 
End Sub 
Sub ListSOs(FullSONo$,MultLines$,status)
  imax = 9
  Clear ilist$[],ilistcur,SearchString$
  ilistw = 920
  ilisth = 315
  temp$ = "Sales Order Selection"
  If CustomerNo$ Let temp$ = temp$ + " for Customer:  " + CustomerNo$ + " - " + Customer.Name$
  chlist = SAIOpenWindow(temp$,ilistw,ilisth,1)
  Print #chlist;PChr$("Arial");'FONTFACE 12FONTSIZE WCSETFONT';
  Print #chlist;PChr$(16777215);'BACKCOLOR CS'
  y = ilisth - 28
  Call SAIButtons(chlist,3,1,"< Previous~Next >~Cancel",920,y,25,120,20)
  Print #chlist;PChr$(5,10,y,180,y + 25,"Search\15\Customer P.O.#",2);'WCBUTTON';
  Print #chlist;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE WCSETFONT';
  Print #chlist;PChr$(-1,SAIColorRGB(255,255,0));'WCSETCOLOR';
  y = 2
  temp$ = "      S.O.#-LN COMP-DT  MATERIAL YD DESCRIPTION          VEH TYP   ORDER QTY      QTY DUE"
  temp$ = temp$ + "\15\" + Rep$(" ",15) + "CUSTOMER P.O.#" + Rep$(" ",7) + "SHIP-TO-NAME          CITY       FOB"
  temp$ = temp$ + "\15\" + Rep$(" ",36) + "SHIPPING INSTRUCTIONS"
  Print #chlist;PChr$(100,10,y,ilistw - 10,y + 30,temp$);'WCLABEL';
  Print #chlist;'WCRESETCOLOR';
  ylist = 33
  If Len(FullSONo$) < 10
    k1$ = ""
  Else 
    k1$ = FullSONo$
  End If 
  Call SOSearch(k1$,MultLines$)
  Do 
    Input #chlist; Len (1);w$
    Select Case w$
      Case 'F1' ! Previous
        If ilistcur > 0
          ilistcur = ilistcur - 1
          k1$ = ilist$[ilistcur]
          Call SOSearch(k1$,MultLines$)
        End If 
      Case 'F2' ! Next
        ilistcur = ilistcur + 1
        Call SOSearch(k1$,MultLines$)
      Case 'F3' ! Cancel
        status = 1
        Exit Do 
      Case 'F5' ! Search
        w$ = SearchString$
        Call SAIKeyBoardGen("Enter Search String",KBParams.alphacase,11,0,w$,status)
        Print #chinyd;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE WCSETFONT';
        If status = 0
          SearchString$ = Trim$(w$)
          Clear ilist$[],ilistcur
          If Len(FullSONo$) < 10
            k1$ = ""
          Else 
            k1$ = FullSONo$
          End If 
          Call SOSearch(k1$,MultLines$)
        End If 
      Case 'F30' To 'F39'
        i = Asc(w$) - Asc('F30')
        k1$ = ilistsel$[i]
        Call SAIGetRecord(ch_1310ro,recdef_1310.,k1$,2,"Y","U",r,SODetail$,SODetail[],e,errmess$)
        If e = 0
          FullSONo$ = SODetail$[7,18]
          status = 0
          Exit Do 
        Else 
          Call SAITouchError("Error retrieving selected Sales Order.\15\" + errmess$)
        End If 
    End Select 
  Loop 
  Close #chlist
End Sub 
Sub RetrieveSO(FullSONo$,status)
  If Len(FullSONo$) <= 12
    If Len(FullSONo$) <= 10
      n = 10
    Else 
      n = 12
    End If 
    k1$ = SAIFill$(FullSONo$,"R"," ",n)
    Search #ch_1210ro,2,2;k1$,r,e
    If e = 0
      FullSONo$ = k1$[1,n]
    Else 
      FullSONo$ = DecodeContractNo$(FullSONo$)
    End If 
  Else If Len(FullSONo$) = 13
    FullSONo$ = DecodeContractNo$(FullSONo$)
  End If 
  If Len(FullSONo$) <> 10 And Len(FullSONo$) <> 12 And Len(FullSONo$) <> 18
    status = 1
    Exit Sub 
  End If 
  k1$ = FullSONo$
  Search #ch_1310ro,2,2;k1$,r,e
  If e = 0
    Call SAIReadRecord(ch_1310ro,recdef_1310.,"Y","U",r,SODetail$,SODetail[],e,errmess$)
  Else 
    status = 1
    Exit Sub 
  End If 
  Call ValidateSO(SODetail$,"N",e)
  If Len(FullSONo$) = 12
    If e
      status = 1
      Exit Sub 
    Else 
      temp$ = k1$
    End If 
  Else If Len(FullSONo$) = 10
    If e = 0
      count = 1
      temp$ = k1$
    Else 
      count = 0
      temp$ = ""
    End If 
    If k1$[11,12] <> "00"
      Do 
        Search #ch_1310ro,3,2;k1$,r,e
        If e Exit Do 
        If k1$[1,Len(FullSONo$)] <> FullSONo$ Exit Do 
        Call SAIReadRecord(ch_1310ro,recdef_1310.,"Y","U",r,SODetail$,SODetail[],e,errmess$)
        If e = 0
          Call ValidateSO(SODetail$,"N",e)
        End If 
        If e = 0
          count = count + 1
          temp$ = k1$
        End If 
        If count > 1 Exit Do 
      Loop 
    End If 
    If count = 0
      status = 1
      Exit Sub 
    Else If count > 1
      Call ListSOs(FullSONo$,"N",status)
      If status
        status = 2
        Exit Sub 
      Else 
        temp$ = FullSONo$
      End If 
    End If 
  End If 
  k1$ = temp$
  Call SAIGetRecord(ch_1310ro,recdef_1310.,k1$,2,"Y","U",r,SODetail$,SODetail[],e,errmess$)
  If e Call ValidateSO(SODetail$,"N",e)
  If e = 0
    Call RetrieveCustomer(SODetail$[1,6],Customer.,stat)
    If stat = 0
      If ValidCustomer(z$,Customer.) = 0 Let stat = 1
    End If 
    If stat = 0
      CustomerNo$ = Customer.CustomerNo$
      FullSONo$ = SODetail$[7,18]
      status = 0
    Else 
      status = 1
    End If 
  Else 
    status = 1
  End If 
End Sub 
Sub OutBoundTransferOrderCheck(CustomerNo$,icount)
  icount = 0
  k1$ = SAISpaceFill$(CustomerNo$,6)
  ksav$ = k1$
  Do 
    Search #ch_1310ro,3,1;k1$,r,e
    If e Exit Do 
    If k1$[1,Len(ksav$)] <> ksav$ Exit Do 
    Call SAIReadRecord(ch_1310ro,recdef_1310.,"Y","U",r,SODetail$,SODetail[],stat,errmess$)
    If stat = 0
      If k1$[Len(k1$) - 1,Len(k1$)] = "00"
        If SODetail$[49,49] <> "D" And SODetail$[49,49] <> "P" ! Status flag <> "D"elete or "P"urge
          k1$[Len(k1$) - 1,Len(k1$)] = "~~" ! Skip other lines of contract
        End If 
      End If 
      Call ValidateSO(SODetail$,"N",stat)
      If stat = 0
        icount = 1
        Exit Do 
      End If 
    End If 
  Loop 
End Sub 
Sub AdjCodeSearch(klist$)
  icount = 0
  Clear ilistsel$[]
  If ilistcur > ilistmax
    ilistmax = ilistmax + 10
    Dim ilist$[ilistmax,ilistlen]
  End If 
  ilist$[ilistcur] = klist$
  Print #chlist;PChr$(1,3);'WCDISABLE';
  Print #chlist;PChr$(30,29 + imax);'WCDELETE';
  Print #chlist;PChr$("Arial Mono for dl4");'FONTFACE 14FONTSIZE BBOLD WCSETFONT';
  Try 
    Search #ch_db;"SELECT " + SQLN$(CodesWgtAdj.) + " FROM Codes_Weight_Adjustment WHERE WeightAdjCode > " + SQLV$(klist$) + " AND Type<>" + SQLV$("R") + " ORDER BY WeightAdjCode LIMIT " + Str$(imax)
    nr = Chf(ch_db)
    If nr
      Map Record #ch_db As Codes_Weight_Adjustment
      For i = 1 To nr
        Read Record #ch_db;CodesWgtAdj.
        temp$ = CodesWgtAdj.WeightAdjCode$ + " - " + SAISpaceFill$(CodesWgtAdj.Description$,15)
        temp$ = Replace$(temp$,"&","&&")
        Print #chlist;PChr$(icount + 30,10,5 + (icount * 30),ilistw - 10,(icount + 1) * 30,temp$,2);'WCBUTTON';
        ilistsel$[icount] = CodesWgtAdj.WeightAdjCode$
        icount = icount + 1
      Next i
      klist$ = CodesWgtAdj.WeightAdjCode$
    End If 
  Else 
    nr = 0
  End Try 
  Print #chlist;PChr$(1,3);'WCENABLE';
  If nr < imax Print #chlist;'2WCDISABLE';
  If ilistcur = 0 Print #chlist;'1WCDISABLE';
  If icount = 0
    Print #chlist;'3WCFOCUS';
  Else 
    Print #chlist;'30WCFOCUS';
  End If 
End Sub 
Sub ChangeAdjCode(status)
  imax = 9
  Clear ilist$[]
  ilistcur = 0
  ilistw = 500
  Call SAITouchButtonList(chlist,imax,ilistw,"Select Adjustment Code")
  klist$ = ""
  Call AdjCodeSearch(klist$)
  Do 
    Input #chlist; Len (1);w$
    Select Case w$
      Case 'F1' ! Previous
        If ilistcur > 0
          ilistcur = ilistcur - 1
          klist$ = ilist$[ilistcur]
          Call AdjCodeSearch(klist$)
        End If 
      Case 'F2' ! Next
        ilistcur = ilistcur + 1
        Call AdjCodeSearch(klist$)
      Case 'F3' ! Cancel
        status = 1
        Exit Do 
      Case 'F30' To 'F39'
        i = Asc(w$) - Asc('F30')
        TicketDetail.AdjCode$ = ilistsel$[i]
        status = 0
        Exit Do 
    End Select 
  Loop 
  Close #chlist
End Sub 
Sub UMSearch(klist$)
  icount = 0
  Clear ilistsel$[]
  If ilistcur > ilistmax
    ilistmax = ilistmax + 10
    Dim ilist$[ilistmax,ilistlen]
  End If 
  ilist$[ilistcur] = klist$
  Print #chlist;PChr$(1,3);'WCDISABLE';
  Print #chlist;PChr$(30,29 + imax);'WCDELETE';
  Print #chlist;SAIMonoFont$();'14FONTSIZE BBOLD WCSETFONT';
  Try 
    Search #ch_db;"SELECT " + SQLN$(CodesUM.) + " FROM Codes_UM WHERE UM_Code > " + SQLV$(klist$) + " ORDER BY UM_Code LIMIT " + Str$(imax)
    nr = Chf(ch_db)
    If nr
      Map Record #ch_db As Codes_UM
      For i = 1 To nr
        Read Record #ch_db;CodesUM.
        temp$ = SAISpaceFill$(CodesUM.UM_Code$,2) + " - " + SAISpaceFill$(CodesUM.Description$,20)
        temp$ = Replace$(temp$,"&","&&")
        Print #chlist;PChr$(icount + 30,10,5 + (icount * 30),ilistw - 10,(icount + 1) * 30,temp$,2);'WCBUTTON';
        ilistsel$[icount] = CodesUM.UM_Code$
        icount = icount + 1
      Next i
      klist$ = CodesUM.UM_Code$
    End If 
  Else 
    nr = 0
  End Try 
  Print #chlist;PChr$(1,3);'WCENABLE';
  If nr < imax Print #chlist;'2WCDISABLE';
  If ilistcur = 0 Print #chlist;'1WCDISABLE';
  If icount = 0
    Print #chlist;'3WCFOCUS';
  Else 
    Print #chlist;'30WCFOCUS';
  End If 
End Sub 
Sub ChangeUM(UM$,status)
  imax = 9
  Clear ilist$[]
  ilistcur = 0
  ilistw = 500
  Call SAITouchButtonList(chlist,imax,ilistw,"Select Unit of Measure")
  klist$ = ""
  Call UMSearch(klist$)
  Do 
    Input #chlist; Len (1);w$
    Select Case w$
      Case 'F1' ! Previous
        If ilistcur > 0
          ilistcur = ilistcur - 1
          klist$ = ilist$[ilistcur]
          Call UMSearch(klist$)
        End If 
      Case 'F2' ! Next
        ilistcur = ilistcur + 1
        Call UMSearch(klist$)
      Case 'F3' ! Cancel
        status = 1
        Exit Do 
      Case 'F30' To 'F39'
        i = Asc(w$) - Asc('F30')
        UM$ = ilistsel$[i]
        status = 0
        Exit Do 
    End Select 
  Loop 
  Close #chlist
End Sub 
Sub StateSearch(klist$)
  icount = 0
  Clear ilistsel$[]
  If ilistcur > ilistmax
    ilistmax = ilistmax + 10
    Dim ilist$[ilistmax,ilistlen]
  End If 
  ilist$[ilistcur] = klist$
  Print #chlist;PChr$(1,3);'WCDISABLE';
  Print #chlist;PChr$(30,29 + imax);'WCDELETE';
  Print #chlist;PChr$("Arial Mono for dl4");'FONTFACE 14FONTSIZE BBOLD WCSETFONT';
  SQL$ = "SELECT " + SQLN$(CodesState.) + " FROM Codes_State"
  If ilistcur = 0 And klist$
    SQL$ = SQL$ + " WHERE State >= " + SQLV$(klist$)
  Else 
    SQL$ = SQL$ + " WHERE State > " + SQLV$(klist$)
  End If 
  SQL$ = SQL$ + " ORDER BY State LIMIT " + Str$(imax)
  Try 
    Search #ch_db;SQL$
    nr = Chf(ch_db)
    If nr
      Map Record #ch_db As Codes_State
      For i = 1 To nr
        Read Record #ch_db;CodesState.
        temp$ = SAISpaceFill$(CodesState.State$,3) + " - " + SAISpaceFill$(CodesState.Description$,30)
        temp$ = Replace$(temp$,"&","&&")
        Print #chlist;PChr$(icount + 30,10,5 + (icount * 30),ilistw - 10,(icount + 1) * 30,temp$,2);'WCBUTTON';
        ilistsel$[icount] = CodesState.State$
        icount = icount + 1
      Next i
      klist$ = CodesState.State$
    End If 
  Else 
    nr = 0
  End Try 
  Print #chlist;PChr$(1,3);'WCENABLE';
  If nr < imax Print #chlist;'2WCDISABLE';
  If ilistcur = 0 Print #chlist;'1WCDISABLE';
  If icount = 0
    Print #chlist;'3WCFOCUS';
  Else 
    Print #chlist;'30WCFOCUS';
  End If 
End Sub 
Sub ListStates(klist$,w$)
  imax = 9
  Clear ilist$[]
  ilistcur = 0
  ilistw = 640
  Call SAITouchButtonList(chlist,imax,ilistw,"List States" + w$)
  Call StateSearch(klist$)
  Do 
    Input #chlist; Len (1);w$
    Select Case w$
      Case 'F1' ! Previous
        If ilistcur > 0
          ilistcur = ilistcur - 1
          klist$ = ilist$[ilistcur]
          Call StateSearch(klist$)
        End If 
      Case 'F2' ! Next
        ilistcur = ilistcur + 1
        Call StateSearch(klist$)
      Case 'F3' ! Cancel
        w$ = ""
        Exit Do 
      Case 'F30' To 'F39'
        i = Asc(w$) - Asc('F30')
        w$ = ilistsel$[i]
        Exit Do 
    End Select 
  Loop 
  Close #chlist
End Sub 
Sub ValidateStockPile(Inventory$,status)
  status = 1
  If Inventory$[1,2] = "*M"
    Exit Sub 
  Else If Inventory$[209,209] = "Y" ! Inactive Flag
    Exit Sub 
  Else If Inventory$[108,108] <> "A" ! Not an active Stock Pile detail record
    Exit Sub 
  Else 
    status = 0
  End If 
End Sub 
Sub StockPileSearch(k1$,Skip$,type$)
  icount = 0
  If ilistcur > ilistmax
    ilistmax = ilistmax + 10
    Dim ilist$[ilistmax,ilistlen]
  End If 
  ilist$[ilistcur] = k1$
  If BrYd Let ksav$ = k1$[1,7] Else Let ksav$ = k1$[1,5]
  Print #chlist;PChr$(1,3);'WCDISABLE';
  Print #chlist;PChr$(30,29 + imax);'WCDELETE';
  Do 
    Search #ch_1600,3,2;k1$,r,e
    If e Exit Do 
    If k1$[1,Len(ksav$)] <> ksav$
      e = 1
      Exit Do 
    End If 
    Call SAIReadRecord(ch_1600,recdef_1600.,"Y","U",r,Inventory$,Inventory[],status,errmess$)
    If status = 0
      Call ValidateStockPile(Inventory$,status)
      If status = 0 And Inventory$[6,8] = Skip$ Let status = 1
      If status = 0 And type$ And Inventory$[208,208] <> " " ! Receive or Deplete mode of stockpile
        If Inventory$[208,208] <> type$ Let status = 1
      End If 
      If status = 0
        temp$ = "  " + Inventory$[6,8] + "  -  " + SAIInventoryDesc$(BrYd,Inventory$)
        temp$ = Replace$(temp$,"&","&&")
        Print #chlist;PChr$(icount + 30,10,20 + (icount * 30),ilistw - 10,15 + (icount + 1) * 30,temp$,2);'WCBUTTON';
        ilistsel$[icount] = k1$
        icount = icount + 1
      End If 
    End If 
  Loop Until icount = imax
  Print #chlist;PChr$(1,3);'WCENABLE';
  If e Print #chlist;'2WCDISABLE';
  If ilistcur = 0 Print #chlist;'1WCDISABLE';
  If icount = 0
    Print #chlist;'3WCFOCUS';
  Else 
    Print #chlist;'30WCFOCUS';
  End If 
End Sub 
Sub SelectStockPile(InventoryCode$,YardCode$,InvBranch$,StockPile$,Skip$,type$,ExitStatus)
  StockPile$ = ""
  If Len(InventoryCode$) > 4 And InventoryCode$[5,5] = "-"
    temp$ = SAISpaceFill$(InventoryCode$[1,4],8)
  Else 
    temp$ = InventoryCode$
  End If 
  k1$ = SAICreateInventoryKey$(BrYd,2,temp$,YardCode$,InvBranch$)
  imax = 8
  Clear ilist$[]
  ilistcur = 0
  ilistw = 650
  Call SAITouchButtonList(chlist,imax + 1,ilistw,"Select StockPile for Inventory Code " + InventoryCode$[1,4],"Stock Pile  Description")
  Print #chlist;PChr$(1,3);'WCDELETE'; ! Delete buttons and redraw
  Print #chlist;PChr$("Arial");'FONTFACE WCSETFONT';
  Call SAIButtons(chlist,2,1,"Previous~Next",ilistw,290,25,120,20)
  Print #chlist;PChr$(3,515,290,635,315,"Cancel",2);'WCBUTTON';
  Print #chlist;PChr$(4,15,290,135,315,"Unknown",2);'WCBUTTON';
  Print #chlist;PChr$("Arial Mono for dL4");'FONTFACE WCSETFONT';
  Call StockPileSearch(k1$,Skip$,type$)
  Do 
    Input #chlist; Len (1);w$
    Select Case w$
      Case 'F1' ! Previous
        If ilistcur > 0
          ilistcur = ilistcur - 1
          k1$ = ilist$[ilistcur]
          Call StockPileSearch(k1$,Skip$,type$)
        End If 
      Case 'F2' ! Next
        ilistcur = ilistcur + 1
        Call StockPileSearch(k1$,Skip$,type$)
      Case 'F3' ! Cancel
        ExitStatus = 1
        Exit Do 
      Case 'F4' ! Unknown
        ExitStatus = 0
        StockPile$ = ""
        !  InventoryCode$[5,8]=Rep$(" ",4)
        InventoryCode$ = Trim$(InventoryCode$[1,4])
        Exit Do 
      Case 'F30' To 'F39'
        i = Asc(w$) - Asc('F30')
        k1$ = ilistsel$[i]
        Call SAIGetRecord(ch_1600,recdef_1600.,k1$,2,"Y","U",r,Inventory$,Inventory[],status,errmess$)
        If status
          ExitStatus = 1
        Else 
          StockPile$ = Trim$(Inventory$[6,8])
          InventoryCode$ = Trim$(Inventory$[1,8])
          ExitStatus = 0
        End If 
        Exit Do 
    End Select 
  Loop 
  Close #chlist
End Sub 
Sub InventorySearch(k1$)
  icount = 0
  Clear ilistsel$[]
  If ilistcur > ilistmax
    ilistmax = ilistmax + 10
    Dim ilist$[ilistmax,ilistlen]
  End If 
  ilist$[ilistcur] = k1$
  If BrYd Let ksav$ = k1$[1,3] Else Let ksav$ = k1$[1,1]
  Print #chlist;PChr$(1,3);'WCDISABLE';
  Print #chlist;PChr$(30,29 + imax);'WCDELETE';
  Do 
NextInventoryRecord: !
    Search #ch_1600,3,2;k1$,r,e
    If e Exit Do 
    If k1$[1,Len(ksav$)] <> ksav$
      e = 1
      Exit Do 
    End If 
    Call SAIReadRecord(ch_1600,recdef_1600.,"Y","U",r,Inventory$,Inventory[],e,errmess$)
    If e
      Call SAITouchError(errmess$)
    Else 
      If Inventory$[1,4] = "*MUL" Goto NextInventoryRecord ! Skip *MULT
      If Inventory$[209,209] = "Y" Goto NextInventoryRecord ! Inactive Flag
      If ScrapSRecord$[130,130] = "Y" And (Inventory$[108,108] <> "X" And Inventory$[108,108] <> " ") Goto NextInventoryRecord ! Not Stock Pile Header
      temp$ = Inventory$[1,8] + " - " + SAIInventoryDesc$(BrYd,Inventory$)
      temp$ = Replace$(temp$,"&","&&")
      Print #chlist;PChr$(icount + 30,10,5 + (icount * 30),ilistw - 10,(icount + 1) * 30,temp$,2);'WCBUTTON';
      ilistsel$[icount] = k1$
      icount = icount + 1
    End If 
  Loop Until icount = imax
  Print #chlist;PChr$(1,3);'WCENABLE';
  If e Print #chlist;'2WCDISABLE';
  If ilistcur = 0 Print #chlist;'1WCDISABLE';
  If icount = 0
    Print #chlist;'3WCFOCUS';
  Else 
    Print #chlist;'30WCFOCUS';
  End If 
End Sub 
Sub ListInventory(w$)
  imax = 9
  Clear ilist$[]
  ilistcur = 0
  ilistw = 640
  Call SAITouchButtonList(chlist,imax,ilistw,"List Inventory")
  If BrYd
    k1$ = TicketHeader.SrcYard$ + TicketHeader.SrcBranch$
  Else 
    k1$ = TicketHeader.SrcYard$
  End If 
  Call InventorySearch(k1$)
  Do 
    Input #chlist; Len (1);w$
    Select Case w$
      Case 'F1' ! Previous
        If ilistcur > 0
          ilistcur = ilistcur - 1
          k1$ = ilist$[ilistcur]
          Call InventorySearch(k1$)
        End If 
      Case 'F2' ! Next
        ilistcur = ilistcur + 1
        Call InventorySearch(k1$)
      Case 'F3' ! Cancel
        w$ = ""
        Exit Do 
      Case 'F30' To 'F39'
        i = Asc(w$) - Asc('F30')
        k1$ = ilistsel$[i]
        Call SAIGetRecord(ch_1600,recdef_1600.,k1$,2,"Y","U",r,Inventory$,Inventory[],e,errmess$)
        If e
          w$ = ""
        Else 
          w$ = Trim$(Inventory$[1,8]) + ": " + Trim$(SAIInventoryDesc$(BrYd,Inventory$))
        End If 
        Exit Do 
    End Select 
  Loop 
  Close #chlist
End Sub 
Sub YardSearch(k1$)
  icount = 0
  Clear ilistsel$[]
  If ilistcur > ilistmax
    ilistmax = ilistmax + 10
    Dim ilist$[ilistmax,ilistlen]
  End If 
  ilist$[ilistcur] = k1$
  Print #chlist;PChr$(1,3);'WCDISABLE';
  Print #chlist;PChr$(30,29 + imax);'WCDELETE';
  Do 
    Search #ch_110Aro,3,1;k1$,r,e
    If e Exit Do 
    If k1$[1,1] <> "Y"
      e = 1
      Exit Do 
    End If 
    Call SAIReadRecord(ch_110Aro,recdef_110A.,"Y","U",r,ScrapCode$,ScrapCode[],e,errmess$)
    If e
      Call SAITouchError(errmess$)
    Else 
      If ScrapCode$[3,4] = TicketHeader.SrcBranch$
        If ScrapCode$[36,36] <> "Y" And ScrapCode$[69,69] <> "Y" And ScrapCode$[83,83] <> "Y" And Trim$(ScrapCode$[57,62]) <> "" ! Not Brokerage, Not Consumption, Not Virtual, with Internal Supplier
          temp$ = ScrapCode$[2,2] + " - " + ScrapCode$[15,34]
          temp$ = Replace$(temp$,"&","&&")
          Print #chlist;PChr$(icount + 30,10,5 + (icount * 30),ilistw - 10,(icount + 1) * 30,temp$,2);'WCBUTTON';
          ilistsel$[icount] = k1$
          icount = icount + 1
        End If 
      End If 
    End If 
  Loop Until icount = imax
  Print #chlist;PChr$(1,3);'WCENABLE';
  If e Print #chlist;'2WCDISABLE';
  If ilistcur = 0 Print #chlist;'1WCDISABLE';
  If icount = 0
    Print #chlist;'3WCFOCUS';
  Else 
    Print #chlist;'30WCFOCUS';
  End If 
End Sub 
Sub ListYards(w$)
  imax = 9
  Clear ilist$[]
  ilistcur = 0
  ilistw = 500
  Call SAITouchButtonList(chlist,imax,ilistw,"List Yards")
  k1$ = "Y"
  Call YardSearch(k1$)
  Do 
    Input #chlist; Len (1);w$
    Select Case w$
      Case 'F1' ! Previous
        If ilistcur > 0
          ilistcur = ilistcur - 1
          k1$ = ilist$[ilistcur]
          Call YardSearch(k1$)
        End If 
      Case 'F2' ! Next
        ilistcur = ilistcur + 1
        Call YardSearch(k1$)
      Case 'F3' ! Cancel
        w$ = ""
        Exit Do 
      Case 'F30' To 'F39'
        i = Asc(w$) - Asc('F30')
        k1$ = ilistsel$[i]
        Call SAIGetRecord(ch_110Aro,recdef_110A.,k1$,1,"Y","U",r,ScrapCode$,ScrapCode[],e,errmess$)
        If e
          w$ = ""
        Else 
          w$ = ScrapCode$[2,2] + ": " + Trim$(ScrapCode$[15,34])
        End If 
        Exit Do 
    End Select 
  Loop 
  Close #chlist
End Sub 
Sub BranchSearch(k1$)
  icount = 0
  Clear ilistsel$[]
  If ilistcur > ilistmax
    ilistmax = ilistmax + 10
    Dim ilist$[ilistmax,ilistlen]
  End If 
  ilist$[ilistcur] = k1$
  Print #chlist;PChr$(1,3);'WCDISABLE';
  Print #chlist;PChr$(30,29 + imax);'WCDELETE';
  Print #chlist;SAIMonoFont$();'14FONTSIZE BBOLD WCSETFONT';
  Try 
    SQL$ = "SELECT " + SQLN$(CodesBranch.) + " FROM Codes_Branch WHERE Branch > " + SQLV$(k1$)
    If ValidTransferBranches$
      SQL$ = SQL$ + " AND Branch IN("
      p = 1
      Do 
        temp$ = ValidTransferBranches$[p] To ","
        If temp$
          If p = 1
            SQL$ = SQL$ + SQLV$(Trim$(temp$))
          Else 
            SQL$ = SQL$ + "," + SQLV$(Trim$(temp$))
          End If 
          p = p + Len(temp$) + 1
          If p >= Len(ValidTransferBranches$) Exit Do 
        Else 
          Exit Do 
        End If 
      Loop 
      SQL$ = SQL$ + ")"
    End If 
    SQL$ = SQL$ + " ORDER BY Branch LIMIT " + Str$(imax)
    Search #ch_db;SQL$
    nr = Chf(ch_db)
    If nr
      Map Record #ch_db As Codes_Branch
      For i = 1 To nr
        Read Record #ch_db;CodesBranch.
        temp$ = SAISpaceFill$(CodesBranch.Branch$,2) + " - " + SAISpaceFill$(CodesBranch.Description$,30)
        temp$ = Replace$(temp$,"&","&&")
        Print #chlist;PChr$(icount + 30,10,5 + (icount * 30),ilistw - 10,(icount + 1) * 30,temp$,2);'WCBUTTON';
        ilistsel$[icount] = CodesBranch.Branch$
        icount = icount + 1
      Next i
      k1$ = CodesBranch.Branch$
    End If 
  Else 
    nr = 0
  End Try 
  Print #chlist;PChr$(1,3);'WCENABLE';
  If nr < imax Print #chlist;'2WCDISABLE';
  If ilistcur = 0 Print #chlist;'1WCDISABLE';
  If icount = 0
    Print #chlist;'3WCFOCUS';
  Else 
    Print #chlist;'30WCFOCUS';
  End If 
End Sub 
Sub ListBranches(w$)
  imax = 9
  Clear ilist$[]
  ilistcur = 0
  ilistw = 640
  Call SAITouchButtonList(chlist,imax,ilistw,"List Branches")
  k1$ = ""
  Call BranchSearch(k1$)
  Do 
    Input #chlist; Len (1);w$
    Select Case w$
      Case 'F1' ! Previous
        If ilistcur > 0
          ilistcur = ilistcur - 1
          k1$ = ilist$[ilistcur]
          Call BranchSearch(k1$)
        End If 
      Case 'F2' ! Next
        ilistcur = ilistcur + 1
        Call BranchSearch(k1$)
      Case 'F3' ! Cancel
        w$ = ""
        Exit Do 
      Case 'F30' To 'F39'
        i = Asc(w$) - Asc('F30')
        Try 
          Search #ch_db;"SELECT " + SQLN$(CodesBranch.) + "FROM Codes_Branch WHERE Branch=" + SQLV$(Trim$(ilistsel$[i]))
          nr = Chf(ch_db)
          If nr
            Map Record #ch_db As Codes_Branch
            Read Record #ch_db;CodesBranch.
          End If 
        Else 
          nr = 0
        End Try 
        If nr
          w$ = SAISpaceFill$(CodesBranch.Branch$,2) + ": " + CodesBranch.Description$
        Else 
          w$ = ""
        End If 
        Exit Do 
    End Select 
  Loop 
  Close #chlist
End Sub 
Sub ReasonSearch(ReasonType$,klist$,Require$)
  icount = 0
  Clear ilistsel$[]
  If ilistcur > ilistmax
    ilistmax = ilistmax + 10
    Dim ilist$[ilistmax,ilistlen]
  End If 
  ilist$[ilistcur] = klist$
  Print #chlist;PChr$(1,3);'WCDISABLE';
  Print #chlist;PChr$(30,29 + imax);'WCDELETE';
  Print #chlist;SAIMonoFont$();'14FONTSIZE BBOLD WCSETFONT';
  SQL$ = "SELECT " + SQLN$(CodesReason.) + " FROM Codes_Reason WHERE ReasonType=" + SQLV$(ReasonType$)
  If SearchString$
    SQL$ = SQL$ + " AND ReasonCode = " + SQLV$(SearchString$)
  Else 
    SQL$ = SQL$ + " AND ReasonCode > " + SQLV$(klist$)
  End If 
  SQL$ = SQL$ + " LIMIT " + Str$(imax)
  Try 
    Search #ch_db;SQL$
    nr = Chf(ch_db)
    If nr
      Map Record #ch_db As Codes_Reason
      For i = 1 To nr
        Read Record #ch_db;CodesReason.
        temp$ = SAISpaceFill$(CodesReason.ReasonCode$,2) + " - " + SAISpaceFill$(CodesReason.Description$,30)
        temp$ = Replace$(temp$,"&","&&")
        Print #chlist;PChr$(icount + 30,10,5 + (icount * 30),ilistw - 10,(icount + 1) * 30,temp$,2);'WCBUTTON';
        ilistsel$[icount] = CodesReason.ReasonCode$
        icount = icount + 1
      Next i
      If klist$ = "" Let CodesExist = 1
      klist$ = CodesReason.ReasonCode$
    End If 
  Else 
    nr = 0
  End Try 
  If Require$ = "Y"
    Print #chlist;PChr$(1,2);'WCENABLE';
  Else 
    Print #chlist;PChr$(1,3);'WCENABLE';
  End If 
  If nr < imax Print #chlist;'2WCDISABLE';
  If ilistcur = 0 Print #chlist;'1WCDISABLE';
  If icount = 0
    If ilistcur = 0
      Print #chlist;'3WCFOCUS'; ! Cancel
    Else 
      Print #chlist;'1WCFOCUS'; ! Previous
    End If 
  Else 
    Print #chlist;'30WCFOCUS';
  End If 
End Sub 
Sub ListReasons(ReasonType$,Require$,w$)
  If Require$ = "N"
    w$ = ""
    Exit Sub 
  End If 
  imax = 9
  Clear ilist$[]
  CodesExist = 0
  ilistcur = 0
  ilistw = 750 ! Needs to be this wide to allow for Search button
  Select Case ReasonType$
    Case "MANUALWT"
      temp$ = "Select Manual Weight Reason Code"
    Case "VOIDPMT"
      temp$ = "Select Void Payment Reason Code"
    Case "VOIDTKT"
      temp$ = "Select Void Ticket Reason Code"
    Case Else 
      temp$ = "Select Reason Code"
  End Select 
  If Require$ = "Y" Let temp$ = temp$ + " - REQUIRED"
  Call SAITouchButtonList(chlist,imax,ilistw,temp$)
  Print #chlist;PChr$(4,10,280,110,305,"Search",2);'WCBUTTON';
  SearchString$ = ""
  klist$ = ""
  Call ReasonSearch(ReasonType$,klist$,Require$)
  If Require$ = "Y"
    If icount Print #chlist;'3WCDISABLE';
  End If 
  Do 
    Input #chlist; Len (1);w$
    Select Case w$
      Case 'F1' ! Previous
        If ilistcur > 0
          ilistcur = ilistcur - 1
          klist$ = ilist$[ilistcur]
          Call ReasonSearch(ReasonType$,klist$,Require$)
        End If 
      Case 'F2' ! Next
        ilistcur = ilistcur + 1
        Call ReasonSearch(ReasonType$,klist$,Require$)
      Case 'F3' ! Cancel
        If Require$ = "Y" And CodesExist
          Call SAITouchWarning("A Reason Code is REQUIRED.")
        Else 
          w$ = ""
          Exit Do 
        End If 
      Case 'F4' ! Search
        w$ = SearchString$
        Call SAIKeyBoardGen("Enter Search String",KBParams.alphacase,1,0,w$,status)
        If status = 0
          SearchString$ = w$
          Clear ilist$[]
          ilistcur = 0
          klist$ = ""
          Call ReasonSearch(ReasonType$,klist$,Require$)
        End If 
      Case 'F30' To 'F39'
        i = Asc(w$) - Asc('F30')
        w$ = ilistsel$[i]
        Exit Do 
    End Select 
  Loop 
  Close #chlist
End Sub 
Sub PopulateMaterialDetail()
  TicketDetail.MaterialCode$ = Material.MaterialCode$
  TicketDetail.InventoryCode$ = Material.InventoryCode$
  TicketDetail.StockPile$ = Material.StockPile$
  TicketDetail.StkPileReq = Material.StockPileFlag
  TicketDetail.MaterialDesc$ = Trim$(Material.MaterialDesc$)
  TicketDetail.MaterialCmt1$ = Material.MaterialCmt1$
  TicketDetail.MaterialCmt2$ = Material.MaterialCmt2$
  TicketDetail.YardCode$ = Material.YardCode$
  TicketDetail.CFCFlag = Material.CFCFlag
  TicketDetail.DirtFlag = Material.DirtFlag
  TicketDetail.RedFlag = Material.RedFlag
  TicketDetail.RedType$ = Material.RedType$
  TicketDetail.RedMat$ = Material.RedMat$
  TicketDetail.RedRate = Material.RedRate
  TicketDetail.Price = Material.Price
  TicketDetail.PriceUM$ = Material.PriceUM$
End Sub 
Sub CheckRedemption(ShipmentDate#)
  Material.RedFlag = 0
  If ScrapSRecord$[69,70] <> "CA" Exit Sub 
  If Material.RedType$ = "" Exit Sub 
  If Material.RedMat$ = "" Exit Sub 
  If TicketHeader.EntityNo$[1,3] <> "CP0"
    k$ = "1" + SAISpaceFill$(TicketHeader.EntityNo$,6) ! Check if Supplier is a Recycler
    Call SAIGetRecord(ch_2402,recdef_2402.,k$,1,"Y","U",r,Recycler$,stat,errmess$)
    If stat = 0 Exit Sub 
    !    k$="Y"+TicketDetail.YardCode$ ! Check if yard is marked as Recycler (not needed per Gail 9/12/07)
    !    Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
    !    if stat<>0 Exit Sub
    !    if ScrapCode$[70,70]<>"Y" Exit Sub
  End If 
  temp2$ = SAIConvertYear$(0,SAISafeDateUsing$(ShipmentDate#,"YYYY")) + SAISafeDateUsing$(ShipmentDate#,"MMDD")
  ktemp$ = SAISpaceFill$(Material.RedMat$,15) + "~~~~~~" ! Get Reimbursement Rates
  Do 
    Search #ch_2401,6,1;ktemp$,rtemp,e
    If e Exit Sub 
    If Trim$(ktemp$[1,15]) <> Material.RedMat$ Exit Sub 
  Loop While temp2$ < ktemp$[16,21]
  Call SAIReadRecord(ch_2401,recdef_2401.,"Y","U",rtemp,Reimbursement$,Reimbursement[],stat,errmess$)
  If stat Exit Sub 
  Select Case Material.RedType$
    Case "SW" ! Segregated Rate
      Material.RedFlag = 1 ! Weight
      Material.RedRate = Reimbursement[0]
    Case "CO" ! Comingled Rate
      Material.RedFlag = 1 ! Weight
      Material.RedRate = Reimbursement[1]
    Case "CS" ! Segregated Rate EA
      Material.RedFlag = 2 ! Count
      Material.RedRate = Reimbursement[5]
    Case "CT" ! Segregated Rate EA < 24oz
      Material.RedFlag = 2 ! Count
      Material.RedRate = Reimbursement[7]
    Case "CU" ! Segregated Rate EA > 24oz
      Material.RedFlag = 2 ! Count
      Material.RedRate = Reimbursement[8]
    Case Else 
  End Select 
End Sub 
Sub ValidateMaterialCode(PMatPrice. As Purchase_Material_Price,ShipDate#,status)
  status = 1
  If PMatPrice.MaterialCode$[1,1] = "*" And PMatPrice.MaterialCode$[1,2] <> "*M" ! Material Code starts with "*"
    Exit Sub 
  Else If PMatPrice.Inactive$ = "Y" And PMatPrice.MaterialCode$ <> LevyMatl$ ! Inactive Flag
    Exit Sub 
  Else If gbl.MultiCurrency$ = "Y" And PMatPrice.MaterialCode$[1,2] <> "*M"
    If PMatPrice.FundsType$ <> TicketHeader.FundsType$ Exit Sub 
  End If 
  If PMatPrice.ExpirationDate#
    If SAISafeDateUsing$(ShipDate#,"YYYYMMDD") > SAISafeDateUsing$(PMatPrice.ExpirationDate#,"YYYYMMDD") ! Price has expired
      If PMatPrice.SupplierNo$ <> "CP000*" Exit Sub ! Invalid for all but CP000*
    End If 
  End If 
  ktemp$ = "Y" + PMatPrice.YardCode$ + Branch$ ! Check Yard Code found for current Branch
  Call SAIGetRecord(ch_110Aro,recdef_110A.,ktemp$,1,"Y","U",rec_110A,ScrapCode$,ScrapCode[],stat,errmess$)
  If stat Exit Sub 
  If ScrapCode$[36,36] = "Y" ! Check if Brokerage yard
    Exit Sub 
  Else If ScrapCode$[83,83] = "Y" ! Virtual yard
    Exit Sub 
  Else If ScrapCode$[69,69] = "Y" And TicketHeader.TktMode$ <> "T" ! Consumption yard only valid for Transfers
    Exit Sub 
  End If 
  ! Check Inventory Master
  ktemp$ = SAICreateInventoryKey$(BrYd,1,PMatPrice.InventoryCode$,PMatPrice.YardCode$,Branch$)
  Call SAIGetRecord(ch_1600,recdef_1600.,ktemp$,1,"Y","U",r,Inventory$,Inventory[],stat,errmess$)
  If stat Exit Sub 
  If Inventory$[209,209] = "Y" Exit Sub ! Inactive Flag
  status = 0
End Sub 
Sub RetrievePurchaseMaterial(SuppNo$,MaterialCode$,stat)
  SQL$ = "SELECT * FROM Purchase_Material_Price"
  SQL$ = SQL$ + " WHERE SupplierNo=" + SQLV$(SuppNo$)
  SQL$ = SQL$ + " AND MaterialCode=" + SQLV$(MaterialCode$)
  SQL$ = SQL$ + " AND Branch=" + SQLV$(Branch$)
  !  if gbl.MultiCurrency$="Y" AND MaterialCode$[1,2]<>"*M"
  !    SQL$=SQL$+" AND FundsType="+SQLV$(TicketHeader.FundsType$)
  !  endif
  Search #ch_db;SQL$
  If Chf(ch_db)
    Map Record #ch_db As Purchase_Material_Price
    Read Record #ch_db;PMatPrice.
    stat = 0
  Else 
    stat = 1
  End If 
End Sub 
Sub CheckMaterial(SuppNo$,MaterialCode$,status)
  Call RetrievePurchaseMaterial(SuppNo$,MaterialCode$,stat)
  If stat
    status = 1
    Exit Sub 
  End If 
  If TicketHeader.ShipmentDate#
    ShipmentDate# = TicketHeader.ShipmentDate#
  Else 
    ShipmentDate# = RunDate#
  End If 
  ShipmentDate$ = SAISafeDateUsing$(ShipmentDate#,"YYYYMMDD")
  Call ValidateMaterialCode(PMatPrice.,ShipmentDate#,status)
  If status Exit Sub 
  Clear Material.
  Material.MaterialCode$ = PMatPrice.MaterialCode$
  Material.InventoryCode$ = PMatPrice.InventoryCode$
  Material.YardCode$ = PMatPrice.YardCode$
  Material.MaterialDesc$ = PMatPrice.MaterialDesc$
  Material.MaterialCmt1$ = PMatPrice.Comment1$
  Material.MaterialCmt2$ = PMatPrice.Comment2$
  Material.PriceUM$ = PMatPrice.CurrentPriceUM$ ! Default to current UM
  Material.RedType$ = PMatPrice.RedType$
  Material.RedMat$ = PMatPrice.RedMaterial$
  Call CheckRedemption(ShipmentDate#)
  If PMatPrice.Dirt_CFC_Levy$ = "Y"
    Material.DirtFlag = 1
  Else If PMatPrice.Dirt_CFC_Levy$ = "C" Or Inventory$[113,113] <> " "
    Material.CFCFlag = 1
    If Supplier.SignatureOnFile$ = "Y"
      If Not(Supplier.CFCFormDate#)
        Material.CFCFlag = 2
      Else If ShipmentDate$ > DateUsing$(Supplier.CFCFormDate#,"YYYYMMDD")
        Material.CFCFlag = 2
      Else 
        Material.CFCFlag = 0
      End If 
    End If 
  End If 
  If ScrapSRecord$[130,130] = "Y" And Inventory$[108,108] = "X"
    Material.StockPileFlag = 1
  Else 
    Material.StockPileFlag = 0
  End If 
  Material.CarBody$ = PMatPrice.CarBody$
  Material.Price = 0
  Material.PriceTolerance = PMatPrice.PriceTolerance
  Material.PriceToleranceType$ = PMatPrice.PriceToleranceType$
  If PMatPrice.ExpirationDate#
    If ShipmentDate$ > DateUsing$(PMatPrice.ExpirationDate#,"YYYYMMDD") ! Price has expired
      If PMatPrice.SupplierNo$ = "CP000*"
        status = 0 ! leave price at 0
      Else 
        Clear Material.
        status = 1
      End If 
      Exit Sub 
    End If 
  End If 
  status = 0
  Try 
    If ShipmentDate$ >= DateUsing$(PMatPrice.CurrentPriceEffDate#,"YYYYMMDD")
      Material.Price = PMatPrice.CurrentPrice
      Material.PriceUM$ = PMatPrice.CurrentPriceUM$
    Else If ShipmentDate$ >= DateUsing$(PMatPrice.Price1EffDate#,"YYYYMMDD")
      Material.Price = PMatPrice.Price1
      Material.PriceUM$ = PMatPrice.Price1UM$
    Else If ShipmentDate$ >= DateUsing$(PMatPrice.Price2EffDate#,"YYYYMMDD")
      Material.Price = PMatPrice.Price2
      Material.PriceUM$ = PMatPrice.Price2UM$
    Else If ShipmentDate$ >= DateUsing$(PMatPrice.Price3EffDate#,"YYYYMMDD")
      Material.Price = PMatPrice.Price3
      Material.PriceUM$ = PMatPrice.Price3UM$
      ! prices beyond the first 4 may not have UMs, so use CurrentUM
    Else If ShipmentDate$ >= DateUsing$(PMatPrice.Price4EffDate#,"YYYYMMDD")
      Material.Price = PMatPrice.Price4
      If PMatPrice.Price4UM$ Let Material.PriceUM$ = PMatPrice.Price4UM$
    Else If ShipmentDate$ >= DateUsing$(PMatPrice.Price5EffDate#,"YYYYMMDD")
      Material.Price = PMatPrice.Price5
      If PMatPrice.Price5UM$ Let Material.PriceUM$ = PMatPrice.Price5UM$
    Else If ShipmentDate$ >= DateUsing$(PMatPrice.Price6EffDate#,"YYYYMMDD")
      Material.Price = PMatPrice.Price6
      If PMatPrice.Price6UM$ Let Material.PriceUM$ = PMatPrice.Price6UM$
    Else If ShipmentDate$ >= DateUsing$(PMatPrice.Price7EffDate#,"YYYYMMDD")
      Material.Price = PMatPrice.Price7
      If PMatPrice.Price7UM$ Let Material.PriceUM$ = PMatPrice.Price7UM$
    Else If ShipmentDate$ >= DateUsing$(PMatPrice.Price8EffDate#,"YYYYMMDD")
      Material.Price = PMatPrice.Price8
      If PMatPrice.Price8UM$ Let Material.PriceUM$ = PMatPrice.Price8UM$
    Else If ShipmentDate$ >= DateUsing$(PMatPrice.Price9EffDate#,"YYYYMMDD")
      Material.Price = PMatPrice.Price9
      If PMatPrice.Price9UM$ Let Material.PriceUM$ = PMatPrice.Price9UM$
    Else If ShipmentDate$ >= DateUsing$(PMatPrice.Price10EffDate#,"YYYYMMDD")
      Material.Price = PMatPrice.Price10
      If PMatPrice.Price10UM$ Let Material.PriceUM$ = PMatPrice.Price10UM$
    Else If ShipmentDate$ >= DateUsing$(PMatPrice.Price11EffDate#,"YYYYMMDD")
      Material.Price = PMatPrice.Price11
      If PMatPrice.Price11UM$ Let Material.PriceUM$ = PMatPrice.Price11UM$
    Else If ShipmentDate$ >= DateUsing$(PMatPrice.Price12EffDate#,"YYYYMMDD")
      Material.Price = PMatPrice.Price12
      If PMatPrice.Price12UM$ Let Material.PriceUM$ = PMatPrice.Price12UM$
    Else If ShipmentDate$ >= DateUsing$(PMatPrice.Price13EffDate#,"YYYYMMDD")
      Material.Price = PMatPrice.Price13
      If PMatPrice.Price13UM$ Let Material.PriceUM$ = PMatPrice.Price13UM$
    Else If ShipmentDate$ >= DateUsing$(PMatPrice.Price14EffDate#,"YYYYMMDD")
      Material.Price = PMatPrice.Price14
      If PMatPrice.Price14UM$ Let Material.PriceUM$ = PMatPrice.Price14UM$
    Else 
      status = 1
    End If 
  Else 
    status = 1
  End Try 
  If status
    If PMatPrice.SupplierNo$ = "CP000*"
      status = 0 ! Leave price at 0 and return
    Else 
      Clear Material.
      status = 1
    End If 
  End If 
End Sub 
Sub GetMaterialPrice(MaterialCode$,status)
  Clear PMatPrice.,Material.
  ! Check Supplier Specific Price
  Call CheckMaterial(Supplier.SupplierNo$,MaterialCode$,status)
  If status = 0 Exit Sub 
  If Supplier.SupplierNo$ <> "CP000*"
    ! Check Supplier Class Price
    If SAIAltPriceClassMaterial(ch_db,MaterialCode$,Branch$)
      temp$ = Trim$(Supplier.AltPriceClass$)
    Else 
      temp$ = Trim$(Supplier.PriceClass$)
    End If 
    If temp$
      Call CheckMaterial("CP000" + temp$,MaterialCode$,status)
      If status = 0 Exit Sub 
    End If 
    ! Check CP000* Price
    Call CheckMaterial("CP000*",MaterialCode$,status)
    If status = 0 Exit Sub 
  End If 
  ! No Pricing found
  status = 1
End Sub 
Sub DetermineLevyMaterial(MaterialCode$,LevyItem)
  LevyItem = 0
  If gbl.LevyMode$ = "Y"
    LevyMatl$ = MaterialCode$ ! Set levy material mode
    Call GetMaterialPrice(MaterialCode$,status)
    LevyMatl$ = "" ! Reset levy material mode
    If status = 0
      If PMatPrice.MaterialCode$ = PMatPrice.RedMaterial$ Let LevyItem = 1
    End If 
  End If 
End Sub 
Sub MaterialSearch(k$,Dirt$)
  icount = 0
  If ilistcur > ilistmax
    ilistmax = ilistmax + 10
    Dim ilist$[ilistmax,ilistlen]
  End If 
  ilist$[ilistcur] = k$
  Print #chlist;PChr$(1,3);'WCDISABLE';
  Print #chlist;PChr$(30,29 + imax);'WCDELETE';
  SQL$ = "SELECT * FROM Purchase_Material_Price WHERE SupplierNo=" + SQLV$("CP000*") + " AND Branch=" + SQLV$(Branch$)
  If ilistcur = 0 And k$
    SQL$ = SQL$ + " AND MaterialCode >= " + SQLV$(k$)
  Else 
    SQL$ = SQL$ + " AND MaterialCode > " + SQLV$(k$)
  End If 
  If SearchString$
    Select Case SessionDefault$
      Case "CODE",""
        SQL$ = SQL$ + "  AND UPPER(MaterialCode) LIKE " + SQLV$(UCase$(SearchString$) + "%")
      Case "DESCRIPTION"
        SQL$ = SQL$ + "  AND UPPER(MaterialDesc) LIKE " + SQLV$("%" + UCase$(SearchString$) + "%")
    End Select 
  End If 
  If Dirt$ = "Y"
    SQL$ = SQL$ + " AND Dirt_CFC_Levy=" + SQLV$("Y")
  Else 
    SQL$ = SQL$ + " AND Dirt_CFC_Levy<>" + SQLV$("Y")
  End If 
  If gbl.MultiCurrency$ = "Y"
    SQL$ = SQL$ + " AND FundsType=" + SQLV$(TicketHeader.FundsType$)
  End If 
  SQL$ = SQL$ + " ORDER BY MaterialCode"
  Search #ch_db;SQL$
  nr = Chf(ch_db)
  If nr
    Map Record #ch_db As Purchase_Material_Price
    For i = 1 To nr
      Read Record #ch_db;PMatPrice.
      Call ValidateMaterialCode(PMatPrice.,TicketHeader.ShipmentDate#,status)
      If status = 0 And PMatPrice.MaterialCode$[1,2] <> "*M"
        temp$ = SAISpaceFill$(PMatPrice.MaterialCode$,8) + " - " + SAISpaceFill$(PMatPrice.MaterialDesc$,30)
        temp$ = Replace$(temp$,"&","&&")
        opt = 2
        If PMatPrice.MaterialCode$ <> "999" ! Unknown material
          For j = 1 To ItemCount
            If Trim$(Items.[j].MaterialCode$) = PMatPrice.MaterialCode$
              opt = 1
              Exit For 
            End If 
          Next j
        End If 
        Print #chlist;PChr$(icount + 30,10,5 + (icount * 30),ilistw - 10,(icount + 1) * 30,temp$,opt);'WCBUTTON';
        ilistsel$[icount] = PMatPrice.MaterialCode$
        icount = icount + 1
      End If 
      If icount = imax Exit For 
    Next i
    k$ = PMatPrice.MaterialCode$
  End If 
  Print #chlist;PChr$(1,3);'WCENABLE';
  If i >= nr Print #chlist;'2WCDISABLE';
  If ilistcur = 0 Print #chlist;'1WCDISABLE';
  Print #chlist;'3WCFOCUS';
End Sub 
Sub ListMaterials(k$,Dirt$)
  imax = 9
  Clear ilist$[]
  ilistcur = 0
  ilistw = 700
  If Dirt$ = "Y" Let temp$ = "List Dirt Materials" Else Let temp$ = "List Materials"
  Call SAITouchButtonList(chlist,imax,ilistw,temp$)
  Call MaterialSearch(k$,Dirt$)
  Do 
    Input #chlist; Len (1);w$
    Select Case w$
      Case 'F1' ! Previous
        If ilistcur > 0
          ilistcur = ilistcur - 1
          k$ = ilist$[ilistcur]
          Call MaterialSearch(k$,Dirt$)
        End If 
      Case 'F2' ! Next
        ilistcur = ilistcur + 1
        Call MaterialSearch(k$,Dirt$)
      Case 'F3' ! Cancel
        MaterialCode$ = ""
        Exit Do 
      Case 'F30' To 'F39'
        i = Asc(w$) - Asc('F30')
        MaterialCode$ = ilistsel$[i]
        Exit Do 
    End Select 
  Loop 
  Close #chlist
End Sub 
Sub GetMaterial(Material. As Material,Dirt$)
  Clear Material.
  KBParams.alphacase = 1
  KBParams.StartX = 5
  KBParams.StartY = 90
  KBParams.ButtonHeight = 25
  KBParams.ButtonWidth = 50
  KBParams.FontSize1 = 14
  KBParams.FontSize2 = 12
  KBParams.InputElement = 10
  KBParams.IELength = 0
  KBParams.IEMaxChar = 100
  KBParams.IELabel$ = ""
  KBParams.FuncBtnLen = 0
  KBParams.FunctionBtn$ = ""
  ww = 820 \ wh = 250
  If Dirt$ = "Y" Let temp$ = "Dirt Material Selection" Else Let temp$ = "Material Selection"
  chwin2 = SAIOpenWindow(temp$,ww,wh,1)
  Print #chwin2;PChr$("Arial");'FONTFACE';
  Print #chwin2;PChr$(-2);'BACKCOLOR CS';
  Print #chwin2;'WCSETCOLOR';
  Print #chwin2;'12FONTSIZE WCSETFONT';
  x = (ww / 2 - (420 / 2)) \ y = 20
  dx = 160
  Print #chwin2;PChr$(SAIColorRGB(193,74,40));'BACKCOLOR WCSETCOLOR';
  Print #chwin2;PChr$(1,x,y + 2,x + dx,y + 27,"Code",2 + 4);'WCRADIO';
  x = x + dx + 105
  Print #chwin2;PChr$(2,x,y + 2,x + dx,y + 27,"Description",2 + 4);'WCRADIO';
  Print #chwin;'WCRESETCOLOR';
  x = (ww / 2 - (450 / 2)) \ dx = 350 \ y = y + 35
  Print #chwin2;'WCRESETCOLOR EBOLD WCSETFONT';
  Print #chwin2;PChr$(KBParams.InputElement,x,y,x + dx,y + 18,"",2,30);'WCSTRING';
  x = x + dx + 5
  Print #chwin2;PChr$(5,x,y - 3,x + 100,y + 21,"List",2);'WCBUTTON';
  Print #chwin2;PChr$(-2);'BACKCOLOR WCSETCOLOR';
  Print #chwin2;PChr$(305,x - 365,y - 50,x + 110,y + 25,"Search By");'WCGROUP';
  Print #chwin2;'WCRESETCOLOR EBOLD WCSETFONT';
  Call SAIDrawKeyboard(chwin2,KBParams.,0)
  If SessionDefault$ = "CODE" Or SessionDefault$ = ""
    Print #chwin2;'1WCSELECT CU';"1";'0WCSELECT';
    SessionDefault$ = "CODE"
  Else 
    Print #chwin2;'2WCSELECT CU';"1";'0WCSELECT';
  End If 
GetMaterial_InputLoop: !
  Print #chwin2;PChr$(KBParams.InputElement);'WCFOCUS';
  ishift = 0
  istring$ = ""
  Do 
    Input #chwin2; Len (1);w$
    Select Case w$
      Case 'F1'
        SessionDefault$ = "CODE"
      Case 'F2'
        SessionDefault$ = "DESCRIPTION"
      Case 'F5' !List
        SearchString$ = ""
        ktemp$ = SAIQuery$(chwin2,KBParams.InputElement)
        SearchString$ = ktemp$
        If SessionDefault$ = "DESCRIPTION" Let ktemp$ = ""
        Call ListMaterials(ktemp$,Dirt$)
        If MaterialCode$ Exit Do 
      Case Else 
        Call SAIKeyBoardInput(chwin2,chwin2,KBParams.,ishift,w$,istring$,istatus)
        If istatus < 0
          MaterialCode$ = ""
          Clear Material.
          Close #chwin2
          Exit Do 
        Else If istatus
          If Trim$(istring$) = ""
            Call SAITouchError("You must enter a material")
          Else 
            MaterialCode$ = Trim$(istring$)
            Exit Do 
          End If 
        End If 
    End Select 
  Loop 
  If MaterialCode$
    Call GetMaterialPrice(MaterialCode$,status)
    If status
      Call SAITouchWarning("Invalid Material Entered (" + MaterialCode$ + ")!\15\Please try again.")
      MaterialCode$ = ""
    Else 
      If Dirt$ = "Y"
        If Material.DirtFlag = 0
          Call SAITouchWarning("You have selected a Material that is not ''DIRT''.\15\Please try again.")
          MaterialCode$ = ""
        End If 
      Else If TicketHeader.TktMode$ <> "T"
        If Material.DirtFlag
          Call SAITouchWarning("You have selected a ''DIRT'' Material.\15\Please try again.")
          MaterialCode$ = ""
        End If 
      End If 
      If MaterialCode$ And MaterialCode$ <> "999"
        If MaterialCode$[1,4] = "*MIX"
          If TicketHeader.OrderNo$ And TicketHeader.OrderNo$ <> "UNKNOWN"
            Call SAITouchWarning("Cannot enter *MIX on a contract purchase.")
            MaterialCode$ = ""
          Else If (TicketHeader.OrderLine$ = "00" Or (ItemNo > 0 And ItemCount > 1) Or (ItemNo = 0 And ItemCount > 0))
            Call SAITouchWarning("*MIX is not valid on a multiple item ticket.")
            MaterialCode$ = ""
          End If 
        Else 
          For j = 1 To ItemCount
            If UCase$(Items.[j].MaterialCode$) = UCase$(MaterialCode$)
              Call SAITouchWarning("This Ticket already contains an item of this Material (" + MaterialCode$ + ")!")
              MaterialCode$ = ""
              Exit For 
            End If 
          Next j
        End If 
      End If 
    End If 
    If MaterialCode$ = ""
      Print #chwin2;PChr$(KBParams.InputElement);'WCSELECT CU 0WCSELECT';
      Clear Material.
      Goto GetMaterial_InputLoop
    Else 
      Close #chwin2
    End If 
  End If 
End Sub 
Sub LoadMaterials(PriceSet,SuppNo$,kmat$,Dirt$)
  Clear MatButtons.[]
  nbuttons = 0
  If PriceSet = 2 ! Frequent Set
    n = kmat$
    If n = 0 Let n = 1
    For i = 1 To 16
      If n > FreqMaterialMax Exit For 
      MatButtons.[i] = FreqMaterial.[n]
      If MatButtons.[i].MaterialCode$ And Trim$(MatButtons.[i].MaterialDesc$) = ""
        Call GetMaterialPrice(MatButtons.[i].MaterialCode$,status)
        If status = 0 Let MatButtons.[i].MaterialDesc$ = Material.MaterialDesc$
        Clear Material.
      End If 
      nbuttons = nbuttons + 1
      n = n + 1
    Next i
    If nbuttons = 16
      If n >= FreqMaterialMax
        imore = 0
      Else 
        imore = 1
        kmat$ = Str$(n)
      End If 
    Else 
      imore = 0
    End If 
  Else 
    SQL$ = "SELECT * FROM Purchase_Material_Price WHERE SupplierNo=" + SQLV$(SuppNo$) + " AND Branch=" + SQLV$(Branch$)
    SQL$ = SQL$ + " AND MaterialCode > " + SQLV$(kmat$)
    If Dirt$ = "Y"
      SQL$ = SQL$ + " AND Dirt_CFC_Levy=" + SQLV$("Y")
    Else 
      SQL$ = SQL$ + " AND Dirt_CFC_Levy<>" + SQLV$("Y")
    End If 
    If gbl.MultiCurrency$ = "Y"
      SQL$ = SQL$ + " AND FundsType=" + SQLV$(TicketHeader.FundsType$)
    End If 
    SQL$ = SQL$ + " ORDER BY MaterialCode"
    Search #ch_db;SQL$
    nr = Chf(ch_db)
    If nr
      Map Record #ch_db As Purchase_Material_Price
      For i = 1 To nr
        Read Record #ch_db;PMatPrice.
        If PriceSet = 1 Let PMatPrice.SupplierNo$ = "CP000*" ! Don't check for expired price in validate routine
        Call ValidateMaterialCode(PMatPrice.,TicketHeader.ShipmentDate#,status)
        If status = 0 And PMatPrice.MaterialCode$[1,2] <> "*M"
          nbuttons = nbuttons + 1
          MatButtons.[nbuttons].MaterialCode$ = PMatPrice.MaterialCode$
          MatButtons.[nbuttons].MaterialDesc$ = PMatPrice.MaterialDesc$
          If PriceSet = 1 And PMatPrice.ExpirationDate#
            If SAISafeDateUsing$(TicketHeader.ShipmentDate#,"YYYYMMDD") > SAISafeDateUsing$(PMatPrice.ExpirationDate#,"YYYYMMDD") ! Price has expired
              MatButtons.[nbuttons].Expired = 1
            End If 
          End If 
        End If 
        If nbuttons = 16 Exit For 
      Next i
      kmat$ = PMatPrice.MaterialCode$
    End If 
    imore = 0
    If nbuttons = 16 And i < nr ! Look ahead to see if there is really more
      Do 
        Try Read Record #ch_db;PMatPrice. Else Exit Do 
        If PriceSet = 1 Let PMatPrice.SupplierNo$ = "CP000*" ! Don't check for expired price in validate routine
        Call ValidateMaterialCode(PMatPrice.,TicketHeader.ShipmentDate#,status)
        If status = 0
          imore = 1
          Exit Do 
        End If 
      Loop 
    End If 
  End If 
End Sub 
Sub MaterialButtons(PriceSet,kmat$,Dirt$)
  icycle = 0
  Do 
    If PriceSet > 5
      PriceSet = 1
      kmat$ = ""
    Else If PriceSet = 2
      If Dirt$ = "Y" Let PriceSet = 3
    End If 
    istart = 0
    If kmat$ = ""
      istart = 1
      If PriceSet = 3
        If Supplier.PriceClass$ = "" Let PriceSet = 4
      End If 
      If PriceSet = 4
        If Supplier.AltPriceClass$ = "" Let PriceSet = 5
      End If 
      If PriceSet = 1
        k$ = Supplier.SupplierNo$
      Else If PriceSet = 3
        k$ = "CP000" + Supplier.PriceClass$
      Else If PriceSet = 4
        k$ = "CP000" + Supplier.AltPriceClass$
      Else If PriceSet = 5
        k$ = "CP000*"
      End If 
    End If 
    Call LoadMaterials(PriceSet,k$,kmat$,Dirt$)
    If nbuttons
      Exit Do 
    Else 
      PriceSet = PriceSet + 1
      kmat$ = ""
    End If 
    icycle = icycle + 1
    If icycle > 5
      Call SAITouchWarning("No valid Materials for this Supplier!")
      Exit Sub 
    End If 
  Loop 
  Print #chwin;PChr$(10,25);'WCDELETE 42WCDELETE 43WCDELETE';
  Print #chwin;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE BBOLD WCSETFONT';
  bw = 410 \ bh = 25 \ dy = bh + 5
  x0 = 10 \ x1 = x0 + bw + 10 \ y = 10 - dy
  For i = 1 To nbuttons
    If nbuttons = 17 Exit For 
    If i Mod 2
      x = x0
      y = y + dy
    Else 
      x = x1
    End If 
    temp$ = SAISpaceFill$(MatButtons.[i].MaterialCode$,8) + ": " + SAISpaceFill$(MatButtons.[i].MaterialDesc$,30)
    temp$ = Replace$(temp$,"&","&&")
    If MatButtons.[i].Expired Let temp$ = temp$ + "\15\" + Rep$(" ",10) + "(PRICE EXPIRED)" + Rep$(" ",15)
    opt = 2
    If MatButtons.[i].MaterialCode$
      If Trim$(MatButtons.[i].MaterialCode$) <> "999" ! Unknown material
        For j = 1 To ItemCount
          If Trim$(Items.[j].MaterialCode$) = Trim$(MatButtons.[i].MaterialCode$)
            opt = 1
            Exit For 
          End If 
        Next j
      End If 
    Else 
      opt = 1
    End If 
    If MatButtons.[i].BtnColor > 0
      Print #chwin;PChr$(-1,MatButtons.[i].BtnColor);'WCSETCOLOR';
      Print #chwin;PChr$(i + 9,x,y,x + bw,y + bh,temp$,opt);'WCCOLORBTN';
      Print #chwin;PChr$(-1,-2);'WCSETCOLOR';
    Else 
      Print #chwin;PChr$(i + 9,x,y,x + bw,y + bh,temp$,opt);'WCBUTTON';
    End If 
  Next i
  Print #chwin;PChr$("Arial");'FONTFACE 12FONTSIZE EBOLD WCSETFONT';
  If istart
    If imore
      Print #chwin;PChr$(42,375,260,475,285,"&More...",2);'WCBUTTON';
    Else 
      kmat$ = ""
    End If 
  Else 
    If imore
      Print #chwin;PChr$(42,375,260,475,285,"&More...",2);'WCBUTTON';
      Print #chwin;PChr$(43,485,260,585,285,"&Top",2);'WCBUTTON';
    Else 
      Print #chwin;PChr$(43,375,260,475,285,"&Top",2);'WCBUTTON';
      kmat$ = ""
    End If 
  End If 
  Call SAIWindowTitle(chwin,ButtonDesc$[PriceSet])
End Sub 
Sub DisplayMaterialGroup(MaterialCode$,w$)
  n = Pos(MatGroups$[], = MaterialCode$)
  If n <= 0 Or MatGroupNum[n] = 0
    Call SAITouchWarning("No Materials have been defined for this Material Group.")
    MaterialCode$ = ""
    Exit Sub 
  End If 
  chmgrp = SAIOpenWindow("Material Group Selection - " + w$,850,290,1)
  Print #chwin;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE BBOLD WCSETFONT';
  bw = 410 \ bh = 25 \ dy = bh + 5
  x0 = 10 \ x1 = x0 + bw + 10 \ y = 10 - dy
  For i = 1 To MatGroupNum[n]
    If i Mod 2
      x = x0
      y = y + dy
    Else 
      x = x1
    End If 
    temp2$ = Trim$(GroupMaterial.[n,i].MaterialDesc$)
    If GroupMaterial.[n,i].MaterialCode$ And temp2$ = ""
      Call GetMaterialPrice(GroupMaterial.[n,i].MaterialCode$,status)
      If status = 0 Let temp2$ = Material.MaterialDesc$
      Clear Material.
    End If 
    temp$ = SAISpaceFill$(GroupMaterial.[n,i].MaterialCode$,8) + ": " + SAISpaceFill$(temp2$,30)
    temp$ = Replace$(temp$,"&","&&")
    opt = 2
    If GroupMaterial.[n,i].MaterialCode$
      If Trim$(GroupMaterial.[n,i].MaterialCode$) <> "999" ! Unknown material
        For j = 1 To ItemCount
          If Trim$(Items.[j].MaterialCode$) = Trim$(GroupMaterial.[n,i].MaterialCode$)
            opt = 1
            Exit For 
          End If 
        Next j
      End If 
    Else 
      opt = 1
    End If 
    If GroupMaterial.[n,i].BtnColor > 0
      Print #chmgrp;PChr$(-1,GroupMaterial.[n,i].BtnColor);'WCSETCOLOR';
      Print #chmgrp;PChr$(i + 9,x,y,x + bw,y + bh,temp$,opt);'WCCOLORBTN';
      Print #chmgrp;PChr$(-1,-2);'WCSETCOLOR';
    Else 
      Print #chmgrp;PChr$(i + 9,x,y,x + bw,y + bh,temp$,opt);'WCBUTTON';
    End If 
  Next i
  Print #chmgrp;PChr$("Arial");'FONTFACE 12FONTSIZE EBOLD WCSETFONT';
  Call SAIButtons(chmgrp,1,1,"&&&Cancel",850,260,25,100,20)
  Print #chmgrp;'1WCFOCUS';
  Do 
    Input #chmgrp; Len (1);w$
    Select Case w$
      Case 'F1' ! Cancel
        MaterialCode$ = ""
        Exit Do 
      Case 'F10' To 'F25'
        i = Asc(w$) - Asc('F9')
        MaterialCode$ = GroupMaterial.[n,i].MaterialCode$
        Exit Do 
    End Select 
  Loop 
  Close #chmgrp
End Sub 
Sub MaterialSelection(SupplierNo$,Material. As Material,Dirt$)
  Clear Material.
  If SupplierNo$ = ""
    Call SAITouchMessage("You must first select a Supplier.")
    Exit Sub 
  End If 
  Clear ButtonDesc$[]
  If Dirt$ = "Y" Let temp$ = "Dirt " Else Let temp$ = ""
  ButtonDesc$[1] = temp$ + "Material Selection - Special"
  ButtonDesc$[2] = temp$ + "Material Selection - Frequent"
  ButtonDesc$[3] = temp$ + "Material Selection - Class"
  ButtonDesc$[4] = temp$ + "Material Selection - Alt Class"
  ButtonDesc$[5] = temp$ + "Material Selection - Other"
  If SupplierNo$[1,3] = "CP0"
    If Dirt$ = "Y" Let PriceSet = 5 Else Let PriceSet = 2
  Else 
    PriceSet = 1
  End If 
  chwin = SAIOpenWindow(ButtonDesc$[PriceSet],850,290,1)
  If AllowEditFrequents$ = "Y"
    Print #chwin;PChr$(90,"Edit Frequent Materials","");'WCMENU';
    Print #chwin;PChr$(61,"&Edit","");'WCMENUACTION';
    Print #chwin;'WCENDMENU';
  End If 
  Print #chwin;PChr$(bgcolor1);'BACKCOLOR CS';
  Print #chwin;'12FONTSIZE EBOLD';PChr$("Arial");'FONTFACE EBOLD WCSETFONT';
  Print #chwin;PChr$(40,10,260,110,285,"&Next Set",2);'WCBUTTON';
  Print #chwin;PChr$(41,120,260,220,285,"&Other",2);'WCBUTTON';
  If Dirt$ <> "Y" Print #chwin;PChr$(49,230,260,330,285,"*MIX",2);'WCBUTTON';
  Print #chwin;PChr$(50,740,260,840,285,"E&xit",2);'WCBUTTON';
  If TicketHeader.OrderNo$ And TicketHeader.OrderNo$ <> "UNKNOWN"
    Print #chwin;'49WCDISABLE';
  Else If ItemNo
    If ItemCount > 1 Print #chwin;'49WCDISABLE';
  Else 
    If ItemCount Print #chwin;'49WCDISABLE';
  End If 
  kmat$ = ""
  Call MaterialButtons(PriceSet,kmat$,Dirt$)
  If nbuttons = 0
    Close #chwin
    Exit Sub 
  End If 
  Print #chwin;'40WCFOCUS';
MaterialSelectionInputLoop: !
  Do 
    Input #chwin; Len (1);w$
    Select Case w$
      Case 'F10' To 'F25'
        i = Asc(w$) - Asc('F9')
        MaterialCode$ = MatButtons.[i].MaterialCode$
        If PriceSet = 2 And NumMatGroups > 0 ! Frequent Materials only
          If IsMaterialGroup(MaterialCode$)
            w$ = MatButtons.[i].MaterialDesc$ ! Send Description of Mat Group
            Call DisplayMaterialGroup(MaterialCode$,w$)
          End If 
        End If 
        If MaterialCode$
          Call GetMaterialPrice(MaterialCode$,status)
          If status = 0
            If Dirt$ = "Y"
              If Material.DirtFlag = 0
                Call SAITouchError("You have selected a Material that is not ''DIRT''.\15\Please try again.")
                MaterialCode$ = ""
              Else 
                Exit Do 
              End If 
            Else If TicketHeader.TktMode$ <> "T"
              If Material.DirtFlag
                Call SAITouchError("You have selected a ''DIRT'' Material.\15\Please try again.")
                MaterialCode$ = ""
              Else 
                Exit Do 
              End If 
            Else 
              Exit Do 
            End If 
          Else 
            Call SAITouchWarning("No valid Pricing found for this Material (" + MaterialCode$ + ")!")
            Print #chwin;PChr$(i + 9);'WCDISABLE';
          End If 
        End If 
      Case 'F40' ! Next Set
        PriceSet = PriceSet + 1
        kmat$ = ""
        Call MaterialButtons(PriceSet,kmat$,Dirt$)
      Case 'F41' ! Other Material
        Call GetMaterial(Material.,Dirt$)
        If Material.MaterialCode$ Exit Do 
      Case 'F42' ! More
        Call MaterialButtons(PriceSet,kmat$,Dirt$)
      Case 'F43' ! Top
        kmat$ = ""
        Call MaterialButtons(PriceSet,kmat$,Dirt$)
      Case 'F49' ! *MIX
        MaterialCode$ = "*MIX"
        Call GetMaterialPrice(MaterialCode$,status)
        If status = 0
          Exit Do 
        Else 
          Call SAITouchWarning("No valid Price Record found for *MIX!")
          Print #chwin;'49WCDISABLE';
        End If 
      Case 'F50' ! Exit
        Exit Do 
      Case 'F61'
        Call EditFreqMaterial(status)
        If status = 0 And PriceSet = 2
          kmat$ = ""
          Call MaterialButtons(PriceSet,kmat$,Dirt$)
        End If 
    End Select 
  Loop 
  ! Check for StockPile
  If MaterialCode$
    If MaterialCode$ <> "999"
      For j = 1 To ItemCount
        If Items.[j].MaterialCode$ = MaterialCode$
          Call SAITouchWarning("This Ticket already contains an item of this Material (" + MaterialCode$ + ")!")
          MaterialCode$ = ""
          Clear Material.
          Goto MaterialSelectionInputLoop
        End If 
      Next j
    End If 
    If Material.StockPileFlag
      Call SelectStockPile(Material.InventoryCode$,Material.YardCode$,Branch$,Material.StockPile$,"","R",ExitStatus)
      If ExitStatus
        MaterialCode$ = ""
        Clear Material.
        Goto MaterialSelectionInputLoop
      End If 
    End If 
    If TicketHeader.TktMode$ = "T"
      If TicketHeader.SrcBranch$ = Branch$ And TicketHeader.SrcYard$ = Material.YardCode$ And TicketHeader.SrcInvCode$ = Material.InventoryCode$
        Call SAITouchWarning("Source Branch, Yard, and Inventory cannot equal Destination.\15\Please choose a different material.")
        MaterialCode$ = ""
        Clear Material.
        Goto MaterialSelectionInputLoop
      End If 
      If AllowIBTransferInvMismatch$ <> "Y"
        stat = 0
        If Material.StockPileFlag And Material.InventoryCode$[5,5] = "-" Or TicketHeader.SrcInvCode$[5,5] = "-"
          If TicketHeader.SrcInvCode$[1,4] <> Material.InventoryCode$[1,4] Let stat = 1
        Else 
          If Trim$(TicketHeader.SrcInvCode$) <> Trim$(Material.InventoryCode$) Let stat = 1
        End If 
        If stat
          Call SAITouchWarning("Source and Destination Inventory Code cannot be different.\15\(Source Inventory Code=" + Trim$(TicketHeader.SrcInvCode$) + ")\15\Please choose a different material.")
          MaterialCode$ = ""
          Clear Material.
          Goto MaterialSelectionInputLoop
        End If 
        If TicketHeader.SrcInvCode$[1,2] = "*M" And MaterialCode$ <> "*MIX"
          Call SAITouchWarning("You must select *MIX as the material because the source ticket was created as a mixed load.")
          MaterialCode$ = ""
          Clear Material.
          Goto MaterialSelectionInputLoop
        End If 
      End If 
    End If 
    If Material.CFCFlag = 2
      Call SAITouchWarning("CFC Signature Expired on " + SAISafeDateUsing$(Supplier.CFCFormDate#,dateformat$) + " for this Supplier.")
    Else If Material.CFCFlag
      If z$[644,646] = "342" !Sadoff custom screen message
        Call SAITouchWarning("        Load Inspection Required!\15\   Give Supplier CFC Contract for Signature\15\If Items Were Used For Refrigeration Purposes!")
      Else 
        Call SAITouchWarning("        Load Inspection Required!\15\Give Supplier CFC Contract for Signature!")
      End If 
    End If 
    If Material.CarBody$ = "Y" And (RequireVINonCarBodyMaterial$ = "Y" Or RequireVINonCarBodyMaterial$ = "W")
      Call SAITouchWarning("This material requires VIN detail entry.")
    End If 
  Else 
    Clear Material.
  End If 
  Close #chwin
End Sub 
!===================================================================
Sub ValidateSalesMaterialCode(SMatPrice. As Sales_Material_Price,ShipDate#,SalesBranch$,status)
  status = 1
  If SMatPrice.MaterialCode$[1,1] = "*" And SMatPrice.MaterialCode$[1,2] <> "*M" ! Material Code starts with "*"
    Exit Sub 
  Else If SMatPrice.Inactive$ = "Y" ! Inactive Flag
    Exit Sub 
  Else If gbl.MultiCurrency$ = "Y" And SMatPrice.MaterialCode$[1,2] <> "*M"
    If SMatPrice.FundsType$ <> TicketHeader.FundsType$ Exit Sub 
  End If 
  If SMatPrice.ExpirationDate#
    If SAISafeDateUsing$(ShipDate#,"YYYYMMDD") > DateUsing$(SMatPrice.ExpirationDate#,"YYYYMMDD") ! Price has expired
      If SMatPrice.CustomerNo$ <> "CP000*" Exit Sub ! Invalid for all but CP000*
    End If 
  End If 
  ktemp$ = "Y" + SMatPrice.YardCode$ + SalesBranch$ ! Check Yard Code found for Sales Branch
  Call SAIGetRecord(ch_110Aro,recdef_110A.,ktemp$,1,"Y","U",rec_110A,ScrapCode$,ScrapCode[],stat,errmess$)
  If stat Exit Sub 
  If ScrapCode$[36,36] = "Y" ! Check if Brokerage yard
    Exit Sub 
  Else If ScrapCode$[83,83] = "Y" And TicketHeader.TktMode$ = "T" ! No virtual yard on transfer
    Exit Sub 
  End If 
  ! Check Inventory Master (if built)
  ktemp$ = SAICreateInventoryKey$(BrYd,1,SMatPrice.InventoryCode$,SMatPrice.YardCode$,SalesBranch$)
  Call SAIGetRecord(ch_1600,recdef_1600.,ktemp$,1,"Y","U",r,Inventory$,Inventory[],stat,errmess$)
  If stat = 0 And Inventory$[209,209] = "Y" Exit Sub ! Inventory Inactive
  status = 0
End Sub 
Sub RetrieveSalesMaterial(CustNo$,MaterialCode$,SalesBranch$,stat)
  SQL$ = "SELECT * FROM Sales_Material_Price"
  SQL$ = SQL$ + " WHERE CustomerNo=" + SQLV$(CustNo$)
  SQL$ = SQL$ + " AND MaterialCode=" + SQLV$(MaterialCode$)
  SQL$ = SQL$ + " AND Branch=" + SQLV$(SalesBranch$)
  !  if gbl.MultiCurrency$="Y" AND MaterialCode$[1,2]<>"*M"
  !    SQL$=SQL$+" AND FundsType="+SQLV$(TicketHeader.FundsType$)
  !  endif
  Search #ch_db;SQL$
  If Chf(ch_db)
    Map Record #ch_db As Sales_Material_Price
    Read Record #ch_db;SMatPrice.
    stat = 0
  Else 
    stat = 1
  End If 
End Sub 
Sub GetSalesMatDesc(CustNo$,MaterialCode$,SalesBranch$,MaterialDesc$,status)
  Call RetrieveSalesMaterial(CustNo$,MaterialCode$,SalesBranch$,stat)
  If stat Call RetrieveSalesMaterial("CP000*",MaterialCode$,SalesBranch$,stat)
  If stat = 0
    MaterialDesc$ = SMatPrice.MaterialDesc$
    status = 0
  Else 
    status = 1
  End If 
End Sub 
Sub CheckSalesMaterial(CustNo$,MaterialCode$,SalesBranch$,status)
  Call RetrieveSalesMaterial(CustNo$,MaterialCode$,SalesBranch$,stat)
  If stat
    status = 1
    Exit Sub 
  End If 
  If TicketHeader.ShipmentDate#
    ShipmentDate# = TicketHeader.ShipmentDate#
  Else 
    ShipmentDate# = RunDate#
  End If 
  Call ValidateSalesMaterialCode(SMatPrice.,ShipmentDate#,SalesBranch$,status)
  If status Exit Sub 
  Clear Material.
  Material.MaterialCode$ = SMatPrice.MaterialCode$
  Material.InventoryCode$ = SMatPrice.InventoryCode$
  Material.YardCode$ = SMatPrice.YardCode$
  Material.MaterialDesc$ = SMatPrice.MaterialDesc$
  Material.MaterialCmt1$ = SMatPrice.Comment1$
  Material.MaterialCmt2$ = SMatPrice.Comment2$
  Material.PriceUM$ = SMatPrice.CurrentPriceUM$ ! Default to current UM
  If ScrapSRecord$[130,130] = "Y" And Inventory$[108,108] = "X"
    Material.StockPileFlag = 1
  Else 
    Material.StockPileFlag = 0
  End If 
  Material.Price = 0
  ShipmentDate$ = SAISafeDateUsing$(ShipmentDate#,"YYYYMMDD")
  If SMatPrice.ExpirationDate#
    If ShipmentDate$ > DateUsing$(SMatPrice.ExpirationDate#,"YYYYMMDD") ! Price has expired
      If SMatPrice.CustomerNo$ = "CP000*"
        status = 0 ! leave price at 0
      Else 
        Clear Material.
        status = 1
      End If 
      Exit Sub 
    End If 
  End If 
  status = 0
  Try 
    If ShipmentDate$ >= DateUsing$(SMatPrice.CurrentPriceEffDate#,"YYYYMMDD")
      Material.Price = SMatPrice.CurrentPrice
      Material.PriceUM$ = SMatPrice.CurrentPriceUM$
    Else If ShipmentDate$ >= DateUsing$(SMatPrice.Price1EffDate#,"YYYYMMDD")
      Material.Price = SMatPrice.Price1
      Material.PriceUM$ = SMatPrice.Price1UM$
    Else If ShipmentDate$ >= DateUsing$(SMatPrice.Price2EffDate#,"YYYYMMDD")
      Material.Price = SMatPrice.Price2
      Material.PriceUM$ = SMatPrice.Price2UM$
    Else If ShipmentDate$ >= DateUsing$(SMatPrice.Price3EffDate#,"YYYYMMDD")
      Material.Price = SMatPrice.Price3
      Material.PriceUM$ = SMatPrice.Price3UM$
      ! prices beyond the first 4 may not have UMs, so use CurrentUM
    Else If ShipmentDate$ >= DateUsing$(SMatPrice.Price4EffDate#,"YYYYMMDD")
      Material.Price = SMatPrice.Price4
      If SMatPrice.Price4UM$ Let Material.PriceUM$ = SMatPrice.Price4UM$
    Else If ShipmentDate$ >= DateUsing$(SMatPrice.Price5EffDate#,"YYYYMMDD")
      Material.Price = SMatPrice.Price5
      If SMatPrice.Price5UM$ Let Material.PriceUM$ = SMatPrice.Price5UM$
    Else If ShipmentDate$ >= DateUsing$(SMatPrice.Price6EffDate#,"YYYYMMDD")
      Material.Price = SMatPrice.Price6
      If SMatPrice.Price6UM$ Let Material.PriceUM$ = SMatPrice.Price6UM$
    Else If ShipmentDate$ >= DateUsing$(SMatPrice.Price7EffDate#,"YYYYMMDD")
      Material.Price = SMatPrice.Price7
      If SMatPrice.Price7UM$ Let Material.PriceUM$ = SMatPrice.Price7UM$
    Else If ShipmentDate$ >= DateUsing$(SMatPrice.Price8EffDate#,"YYYYMMDD")
      Material.Price = SMatPrice.Price8
      If SMatPrice.Price8UM$ Let Material.PriceUM$ = SMatPrice.Price8UM$
    Else If ShipmentDate$ >= DateUsing$(SMatPrice.Price9EffDate#,"YYYYMMDD")
      Material.Price = SMatPrice.Price9
      If SMatPrice.Price9UM$ Let Material.PriceUM$ = SMatPrice.Price9UM$
    Else If ShipmentDate$ >= DateUsing$(SMatPrice.Price10EffDate#,"YYYYMMDD")
      Material.Price = SMatPrice.Price10
      If SMatPrice.Price10UM$ Let Material.PriceUM$ = SMatPrice.Price10UM$
    Else If ShipmentDate$ >= DateUsing$(SMatPrice.Price11EffDate#,"YYYYMMDD")
      Material.Price = SMatPrice.Price11
      If SMatPrice.Price11UM$ Let Material.PriceUM$ = SMatPrice.Price11UM$
    Else If ShipmentDate$ >= DateUsing$(SMatPrice.Price12EffDate#,"YYYYMMDD")
      Material.Price = SMatPrice.Price12
      If SMatPrice.Price12UM$ Let Material.PriceUM$ = SMatPrice.Price12UM$
    Else If ShipmentDate$ >= DateUsing$(SMatPrice.Price13EffDate#,"YYYYMMDD")
      Material.Price = SMatPrice.Price13
      If SMatPrice.Price13UM$ Let Material.PriceUM$ = SMatPrice.Price13UM$
    Else If ShipmentDate$ >= DateUsing$(SMatPrice.Price14EffDate#,"YYYYMMDD")
      Material.Price = SMatPrice.Price14
      If SMatPrice.Price14UM$ Let Material.PriceUM$ = SMatPrice.Price14UM$
    Else 
      status = 1
    End If 
  Else 
    status = 1
  End Try 
  If status
    If SMatPrice.CustomerNo$ = "CP000*"
      status = 0 ! Leave price at 0 and return
    Else 
      Clear Material.
      status = 1
    End If 
  End If 
End Sub 
Sub GetSalesMaterialPrice(MaterialCode$,SalesBranch$,status)
  Clear SMatPrice.,Material.
  ! Check Customer Specific Price
  Call CheckSalesMaterial(Customer.CustomerNo$,MaterialCode$,SalesBranch$,status)
  If status = 0 Exit Sub 
  If Customer.CustomerNo$ <> "CP000*"
    ! No longer use customer price class ("CP000"+Customer.PriceClass$)
    ! Check CP000* Price
    Call CheckSalesMaterial("CP000*",MaterialCode$,SalesBranch$,status)
    If status = 0 Exit Sub 
  End If 
  ! No Pricing found
  status = 1
End Sub 
Sub SalesMaterialSearch(k$)
  icount = 0
  If ilistcur > ilistmax
    ilistmax = ilistmax + 10
    Dim ilist$[ilistmax,ilistlen]
  End If 
  ilist$[ilistcur] = k$
  Print #chlist;PChr$(1,3);'WCDISABLE';
  Print #chlist;PChr$(30,29 + imax);'WCDELETE';
  SQL$ = "SELECT * FROM Sales_Material_Price WHERE CustomerNo=" + SQLV$("CP000*") + " AND Branch=" + SQLV$(Branch$)
  If ilistcur = 0 And k$
    SQL$ = SQL$ + " AND MaterialCode >= " + SQLV$(k$)
  Else 
    SQL$ = SQL$ + " AND MaterialCode > " + SQLV$(k$)
  End If 
  If SearchString$
    Select Case SessionDefault$
      Case "CODE",""
        SQL$ = SQL$ + "  AND UPPER(MaterialCode) LIKE " + SQLV$(UCase$(SearchString$) + "%")
      Case "DESCRIPTION"
        SQL$ = SQL$ + "  AND UPPER(MaterialDesc) LIKE " + SQLV$("%" + UCase$(SearchString$) + "%")
    End Select 
  End If 
  If gbl.MultiCurrency$ = "Y"
    SQL$ = SQL$ + " AND FundsType=" + SQLV$(TicketHeader.FundsType$)
  End If 
  SQL$ = SQL$ + " ORDER BY MaterialCode"
  Search #ch_db;SQL$
  nr = Chf(ch_db)
  If nr
    Map Record #ch_db As Sales_Material_Price
    For i = 1 To nr
      Read Record #ch_db;SMatPrice.
      Call ValidateSalesMaterialCode(SMatPrice.,TicketHeader.ShipmentDate#,Branch$,status)
      If status = 0 And SMatPrice.MaterialCode$[1,2] <> "*M"
        temp$ = SAISpaceFill$(SMatPrice.MaterialCode$,8) + " - " + SAISpaceFill$(SMatPrice.MaterialDesc$,30)
        temp$ = Replace$(temp$,"&","&&")
        opt = 2
        If SMatPrice.MaterialCode$ <> "999" ! Unknown material
          For j = 1 To ItemCount
            If Trim$(Items.[j].MaterialCode$) = SMatPrice.MaterialCode$
              opt = 1
              Exit For 
            End If 
          Next j
        End If 
        Print #chlist;PChr$(icount + 30,10,5 + (icount * 30),ilistw - 10,(icount + 1) * 30,temp$,opt);'WCBUTTON';
        ilistsel$[icount] = SMatPrice.MaterialCode$
        icount = icount + 1
      End If 
      If icount = imax Exit For 
    Next i
    k$ = SMatPrice.MaterialCode$
  End If 
  Print #chlist;PChr$(1,3);'WCENABLE';
  If i >= nr Print #chlist;'2WCDISABLE';
  If ilistcur = 0 Print #chlist;'1WCDISABLE';
  Print #chlist;'3WCFOCUS';
End Sub 
Sub ListSalesMaterials(k$)
  imax = 9
  Clear ilist$[]
  ilistcur = 0
  ilistw = 700
  Call SAITouchButtonList(chlist,imax,ilistw,"List Materials")
  Call SalesMaterialSearch(k$)
  Do 
    Input #chlist; Len (1);w$
    Select Case w$
      Case 'F1' ! Previous
        If ilistcur > 0
          ilistcur = ilistcur - 1
          k$ = ilist$[ilistcur]
          Call SalesMaterialSearch(k$)
        End If 
      Case 'F2' ! Next
        ilistcur = ilistcur + 1
        Call SalesMaterialSearch(k$)
      Case 'F3' ! Cancel
        MaterialCode$ = ""
        Exit Do 
      Case 'F30' To 'F39'
        i = Asc(w$) - Asc('F30')
        MaterialCode$ = ilistsel$[i]
        Exit Do 
    End Select 
  Loop 
  Close #chlist
End Sub 
Sub GetSalesMaterial(Material. As Material)
  Clear Material.
  KBParams.alphacase = 1
  KBParams.StartX = 5
  KBParams.StartY = 90
  KBParams.ButtonHeight = 25
  KBParams.ButtonWidth = 50
  KBParams.FontSize1 = 14
  KBParams.FontSize2 = 12
  KBParams.InputElement = 10
  KBParams.IELength = 0
  KBParams.IEMaxChar = 100
  KBParams.IELabel$ = ""
  KBParams.FuncBtnLen = 0
  KBParams.FunctionBtn$ = ""
  ww = 820 \ wh = 250
  chwin2 = SAIOpenWindow("Material Selection",ww,wh,1)
  Print #chwin2;PChr$("Arial");'FONTFACE';
  Print #chwin2;PChr$(-2);'BACKCOLOR CS';
  Print #chwin2;'WCSETCOLOR';
  Print #chwin2;'12FONTSIZE WCSETFONT';
  x = (ww / 2 - (420 / 2)) \ y = 20
  dx = 160
  Print #chwin2;PChr$(SAIColorRGB(193,74,40));'BACKCOLOR WCSETCOLOR';
  Print #chwin2;PChr$(1,x,y + 2,x + dx,y + 27,"Code",2 + 4);'WCRADIO';
  x = x + dx + 105
  Print #chwin2;PChr$(2,x,y + 2,x + dx,y + 27,"Description",2 + 4);'WCRADIO';
  Print #chwin;'WCRESETCOLOR';
  x = (ww / 2 - (450 / 2)) \ dx = 350 \ y = y + 35
  Print #chwin2;'WCRESETCOLOR EBOLD WCSETFONT';
  Print #chwin2;PChr$(KBParams.InputElement,x,y,x + dx,y + 18,"",2,30);'WCSTRING';
  x = x + dx + 5
  Print #chwin2;PChr$(5,x,y - 3,x + 100,y + 21,"List",2);'WCBUTTON';
  Print #chwin2;PChr$(-2);'BACKCOLOR WCSETCOLOR';
  Print #chwin2;PChr$(305,x - 365,y - 50,x + 110,y + 25,"Search By");'WCGROUP';
  Print #chwin2;'WCRESETCOLOR EBOLD WCSETFONT';
  Call SAIDrawKeyboard(chwin2,KBParams.,0)
  If SessionDefault$ = "CODE" Or SessionDefault$ = ""
    Print #chwin2;'1WCSELECT CU';"1";'0WCSELECT';
    SessionDefault$ = "CODE"
  Else 
    Print #chwin2;'2WCSELECT CU';"1";'0WCSELECT';
  End If 
GetSalesMaterial_InputLoop: !
  Print #chwin2;PChr$(KBParams.InputElement);'WCFOCUS';
  ishift = 0
  istring$ = ""
  Do 
    Input #chwin2; Len (1);w$
    Select Case w$
      Case 'F1'
        SessionDefault$ = "CODE"
      Case 'F2'
        SessionDefault$ = "DESCRIPTION"
      Case 'F5' !List
        SearchString$ = ""
        ktemp$ = SAIQuery$(chwin2,KBParams.InputElement)
        SearchString$ = ktemp$
        If SessionDefault$ = "DESCRIPTION" Let ktemp$ = ""
        Call ListSalesMaterials(ktemp$)
        If MaterialCode$ Exit Do 
      Case Else 
        Call SAIKeyBoardInput(chwin2,chwin2,KBParams.,ishift,w$,istring$,istatus)
        If istatus < 0
          MaterialCode$ = ""
          Clear Material.
          Close #chwin2
          Exit Do 
        Else If istatus
          If Trim$(istring$) = ""
            Call SAITouchError("You must enter a material")
          Else 
            MaterialCode$ = Trim$(istring$)
            Exit Do 
          End If 
        End If 
    End Select 
  Loop 
  If MaterialCode$
    Call GetSalesMaterialPrice(MaterialCode$,Branch$,status)
    If status
      Call SAITouchError("Invalid Material Entered (" + MaterialCode$ + ")!\15\Please try again.")
      MaterialCode$ = ""
    Else 
      For j = 1 To ItemCount
        If Trim$(Items.[j].MaterialCode$) = MaterialCode$
          Call SAITouchError("This Ticket already contains an item of this Material (" + MaterialCode$ + ")!")
          MaterialCode$ = ""
          Exit For 
        End If 
      Next j
    End If 
    If MaterialCode$ = ""
      Print #chwin2;PChr$(KBParams.InputElement);'WCSELECT CU 0WCSELECT';
      Goto GetSalesMaterial_InputLoop
    Else 
      Close #chwin2
    End If 
  End If 
End Sub 
Sub LoadSalesMaterials(PriceSet,CustNo$,kmat$)
  Clear MatButtons.[]
  nbuttons = 0
  SQL$ = "SELECT * FROM Sales_Material_Price WHERE CustomerNo=" + SQLV$(CustNo$) + " AND Branch=" + SQLV$(Branch$)
  SQL$ = SQL$ + " AND MaterialCode > " + SQLV$(kmat$)
  If gbl.MultiCurrency$ = "Y"
    SQL$ = SQL$ + " AND FundsType=" + SQLV$(TicketHeader.FundsType$)
  End If 
  SQL$ = SQL$ + " ORDER BY MaterialCode"
  Search #ch_db;SQL$
  nr = Chf(ch_db)
  If nr
    Map Record #ch_db As Sales_Material_Price
    For i = 1 To nr
      Read Record #ch_db;SMatPrice.
      Call ValidateSalesMaterialCode(SMatPrice.,TicketHeader.ShipmentDate#,Branch$,status)
      If status = 0 And SMatPrice.MaterialCode$[1,2] <> "*M"
        nbuttons = nbuttons + 1
        MatButtons.[nbuttons].MaterialCode$ = SMatPrice.MaterialCode$
        MatButtons.[nbuttons].MaterialDesc$ = SMatPrice.MaterialDesc$
      End If 
      If nbuttons = 16 Exit For 
    Next i
    kmat$ = SMatPrice.MaterialCode$
  End If 
  imore = 0
  If nbuttons = 16 And i < nr ! Look ahead to see if there is really more
    Do 
      Try Read Record #ch_db;SMatPrice. Else Exit Do 
      Call ValidateSalesMaterialCode(SMatPrice.,TicketHeader.ShipmentDate#,Branch$,status)
      If status = 0
        imore = 1
        Exit Do 
      End If 
    Loop 
  End If 
End Sub 
Sub SalesMaterialButtons(PriceSet,kmat$)
  icycle = 0
  Do 
    If PriceSet > 2
      PriceSet = 1
      kmat$ = ""
    End If 
    istart = 0
    If kmat$ = ""
      istart = 1
      If PriceSet = 1
        k$ = Customer.CustomerNo$
        !      else if PriceSet=2 ! No longer doing customer price class
        !        kmat$="CP000"+Customer.PriceClass$
      Else If PriceSet = 2
        k$ = "CP000*"
      End If 
    End If 
    Call LoadSalesMaterials(PriceSet,k$,kmat$)
    If nbuttons
      Exit Do 
    Else 
      PriceSet = PriceSet + 1
      kmat$ = ""
    End If 
    icycle = icycle + 1
    If icycle > 2
      Call SAITouchWarning("No valid Materials for this Customer!")
      Exit Sub 
    End If 
  Loop 
  Print #chwin;PChr$(10,25);'WCDELETE 42WCDELETE';
  Print #chwin;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE BBOLD WCSETFONT';
  bw = 410 \ bh = 25 \ dy = bh + 5
  x0 = 10 \ x1 = x0 + bw + 10 \ y = 10 - dy
  For i = 1 To nbuttons
    If nbuttons = 17 Exit For 
    If i Mod 2
      x = x0
      y = y + dy
    Else 
      x = x1
    End If 
    temp$ = SAISpaceFill$(MatButtons.[i].MaterialCode$,8) + ": " + SAISpaceFill$(MatButtons.[i].MaterialDesc$,30)
    temp$ = Replace$(temp$,"&","&&")
    opt = 2
    If MatButtons.[i].MaterialCode$
      For j = 1 To ItemCount
        If Trim$(Items.[j].MaterialCode$) = Trim$(MatButtons.[i].MaterialCode$)
          opt = 1
          Exit For 
        End If 
      Next j
    Else 
      opt = 1
    End If 
    Print #chwin;PChr$(i + 9,x,y,x + bw,y + bh,temp$,opt);'WCBUTTON';
  Next i
  If istart
    If imore
      temp$ = "&More..."
    Else 
      temp$ = ""
      kmat$ = ""
    End If 
  Else 
    If imore
      temp$ = "&More..."
    Else 
      temp$ = "&Top"
      kmat$ = ""
    End If 
  End If 
  Call SAIWindowTitle(chwin,ButtonDesc$[PriceSet])
  Print #chwin;PChr$("Arial");'FONTFACE 12FONTSIZE EBOLD WCSETFONT';
  If temp$ Print #chwin;PChr$(42,375,260,475,285,temp$,2);'WCBUTTON';
End Sub 
Sub SalesMaterialSelection(CustomerNo$,Material. As Material)
  Clear Material.
  If CustomerNo$ = ""
    Call SAITouchMessage("You must first select a Customer.")
    Exit Sub 
  End If 
  Clear ButtonDesc$[]
  ButtonDesc$[1] = "Material Selection - Special"
  !  ButtonDesc$[2]="Material Selection - Class"
  ButtonDesc$[2] = "Material Selection - Other"
  If CustomerNo$[1,3] = "CP0"
    PriceSet = 2
  Else 
    PriceSet = 1
  End If 
  chwin = SAIOpenWindow(ButtonDesc$[PriceSet],850,290,1)
  Print #chwin;PChr$(bgcolor1);'BACKCOLOR CS';
  Print #chwin;'12FONTSIZE EBOLD';PChr$("Arial");'FONTFACE EBOLD WCSETFONT';
  Print #chwin;PChr$(40,10,260,110,285,"&Next Set",2);'WCBUTTON';
  Print #chwin;PChr$(41,120,260,220,285,"&Other",2);'WCBUTTON';
  Print #chwin;PChr$(49,230,260,330,285,"*MIX",2);'WCBUTTON';
  Print #chwin;PChr$(50,740,260,840,285,"E&xit",2);'WCBUTTON';
  If TicketHeader.OrderNo$
    Print #chwin;'49WCDISABLE';
  End If 
  kmat$ = ""
  Call SalesMaterialButtons(PriceSet,kmat$)
  If nbuttons = 0
    Close #chwin
    Exit Sub 
  End If 
  Print #chwin;'40WCFOCUS';
SalesMaterialSelectionInputLoop: !
  Do 
    Input #chwin; Len (1);w$
    Select Case w$
      Case 'F10' To 'F25'
        i = Asc(w$) - Asc('F9')
        MaterialCode$ = MatButtons.[i].MaterialCode$
        Call GetSalesMaterialPrice(MaterialCode$,Branch$,status)
        If status = 0
          Exit Do 
        Else 
          Call SAITouchWarning("No valid Pricing found for this Material (" + MaterialCode$ + ")!")
          Print #chwin;PChr$(i + 9);'WCDISABLE';
        End If 
      Case 'F40' ! Next Set
        PriceSet = PriceSet + 1
        kmat$ = ""
        Call SalesMaterialButtons(PriceSet,kmat$)
      Case 'F41' ! Other Material
        Call GetSalesMaterial(Material.)
        If Material.MaterialCode$ Exit Do 
      Case 'F42' ! More
        Call SalesMaterialButtons(PriceSet,kmat$)
      Case 'F49' ! *MIX
        MaterialCode$ = "*MIX"
        Call GetSalesMaterialPrice(MaterialCode$,Branch$,status)
        If status = 0
          Exit Do 
        Else 
          Call SAITouchWarning("No valid Price Record found for *MIX!")
          Print #chwin;'49WCDISABLE';
        End If 
      Case 'F50' ! Exit
        Exit Do 
    End Select 
  Loop 
  ! Check for StockPile
  If MaterialCode$ And Material.StockPileFlag
    Call SelectStockPile(Material.InventoryCode$,Material.YardCode$,Branch$,Material.StockPile$,"","D",ExitStatus)
    If ExitStatus
      MaterialCode$ = ""
      Clear Material.
      Goto SalesMaterialSelectionInputLoop
    End If 
  End If 
  If TicketHeader.TktMode$ = "T"
    If TicketHeader.SrcBranch$ = Branch$ And TicketHeader.SrcYard$ = Material.YardCode$ And TicketHeader.SrcInvCode$ = Material.InventoryCode$
      Call SAITouchWarning("Source Branch, Yard, and Inventory cannot equal Destination.\15\Please choose a different material.")
      MaterialCode$ = ""
      Clear Material.
      Goto SalesMaterialSelectionInputLoop
    End If 
  End If 
  Close #chwin
End Sub 
!===================================================================
Sub ScaleCamera(Scale$,ScaleCamera$,GrossTare$,Weight)
  Clear FieldName$[],FieldValue$[] \ NumFields = 0
  If Scale$ = "M" Or Scale$ = " "
    man_flag = 1
  Else 
    man_flag = 0
  End If 
  NumFields = NumFields + 1 \ FieldName$[NumFields] = "event_code"
  If GrossTare$ = "G"
    FieldValue$[NumFields] = "GROSS"
  Else If GrossTare$ = "T"
    FieldValue$[NumFields] = "TARE"
  Else If GrossTare$ = "A"
    FieldValue$[NumFields] = "ADJUSTMENT"
  Else If GrossTare$ = "C"
    FieldValue$[NumFields] = "MATERIALCHG"
  Else If GrossTare$ = "M"
    FieldValue$[NumFields] = "MANUALOVERRIDE"
  Else 
    FieldValue$[NumFields] = "WEIGHT"
  End If 
  NumFields = NumFields + 1 \ FieldName$[NumFields] = "camera_name" \ FieldValue$[NumFields] = ScaleCamera$
  NumFields = NumFields + 1 \ FieldName$[NumFields] = "ticket_nbr" \ FieldValue$[NumFields] = TicketHeader.TicketNo$
  NumFields = NumFields + 1 \ FieldName$[NumFields] = "app_date_time" \ FieldValue$[NumFields] = DateUsing$(Tim#(0),"YYYY-MM-DD HH:NN:SS")
  NumFields = NumFields + 1 \ FieldName$[NumFields] = "location" \ FieldValue$[NumFields] = Branch$
  NumFields = NumFields + 1 \ FieldName$[NumFields] = "branch_code" \ FieldValue$[NumFields] = Branch$
  NumFields = NumFields + 1 \ FieldName$[NumFields] = "cust_nbr" \ FieldValue$[NumFields] = TicketHeader.EntityNo$
  If z$[644,646] = "323" And TicketHeader.EntityNo$[1,3] = "CP0" ! SA Recycling - Peddler
    NumFields = NumFields + 1 \ FieldName$[NumFields] = "cust_name" \ FieldValue$[NumFields] = ""
  Else 
    NumFields = NumFields + 1 \ FieldName$[NumFields] = "cust_name" \ FieldValue$[NumFields] = Trim$(TicketHeader.Name$)
  End If 
  NumFields = NumFields + 1 \ FieldName$[NumFields] = "cmdy_nbr" \ FieldValue$[NumFields] = TicketDetail.MaterialCode$
  NumFields = NumFields + 1 \ FieldName$[NumFields] = "cmdy_name" \ FieldValue$[NumFields] = Trim$(TicketDetail.MaterialDesc$)
  NumFields = NumFields + 1 \ FieldName$[NumFields] = "weight" \ FieldValue$[NumFields] = Str$(Weight)
  NumFields = NumFields + 1 \ FieldName$[NumFields] = "man_weight_flag" \ FieldValue$[NumFields] = Str$(man_flag)
  If TicketHeader.TktType$ = "R"
    NumFields = NumFields + 1 \ FieldName$[NumFields] = "transaction_type" \ FieldValue$[NumFields] = "P"
  Else 
    NumFields = NumFields + 1 \ FieldName$[NumFields] = "transaction_type" \ FieldValue$[NumFields] = TicketHeader.TktType$
  End If 
  NumFields = NumFields + 1 \ FieldName$[NumFields] = "initials" \ FieldValue$[NumFields] = WeighMaster$
  Call SAIJPeggerCommand("capture",Branch$,JPServer$,NumFields,FieldName$[],FieldValue$[],stat)
  If stat = 0 Let TicketHeader.Photo = 1
End Sub 
Sub PaymentPhotoCapture(PaymentType$,PaymentCamera$)
  Clear FieldName$[],FieldValue$[] \ NumFields = 0
  NumFields = NumFields + 1 \ FieldName$[NumFields] = "event_code" \ FieldValue$[NumFields] = "PAYMENT"
  NumFields = NumFields + 1 \ FieldName$[NumFields] = "camera_name" \ FieldValue$[NumFields] = PaymentCamera$
  NumFields = NumFields + 1 \ FieldName$[NumFields] = "ticket_nbr" \ FieldValue$[NumFields] = TicketHeader.TicketNo$
  NumFields = NumFields + 1 \ FieldName$[NumFields] = "app_date_time" \ FieldValue$[NumFields] = DateUsing$(Tim#(0),"YYYY-MM-DD HH:NN:SS")
  NumFields = NumFields + 1 \ FieldName$[NumFields] = "location" \ FieldValue$[NumFields] = Branch$
  NumFields = NumFields + 1 \ FieldName$[NumFields] = "branch_code" \ FieldValue$[NumFields] = Branch$
  NumFields = NumFields + 1 \ FieldName$[NumFields] = "cust_nbr" \ FieldValue$[NumFields] = TicketHeader.EntityNo$
  If z$[644,646] = "323" And TicketHeader.EntityNo$[1,3] = "CP0" ! SA Recycling - Peddler
    NumFields = NumFields + 1 \ FieldName$[NumFields] = "cust_name" \ FieldValue$[NumFields] = ""
    NumFields = NumFields + 1 \ FieldName$[NumFields] = "bank_code" \ FieldValue$[NumFields] = Branch$
    NumFields = NumFields + 1 \ FieldName$[NumFields] = "payment_type" \ FieldValue$[NumFields] = "PAID"
    NumFields = NumFields + 1 \ FieldName$[NumFields] = "receipt_nbr" \ FieldValue$[NumFields] = TicketHeader.PaymentNo$
  Else 
    NumFields = NumFields + 1 \ FieldName$[NumFields] = "cust_name" \ FieldValue$[NumFields] = Trim$(TicketHeader.Name$)
    NumFields = NumFields + 1 \ FieldName$[NumFields] = "bank_code" \ FieldValue$[NumFields] = TicketHeader.BankCode$
    NumFields = NumFields + 1 \ FieldName$[NumFields] = "payment_type" \ FieldValue$[NumFields] = PaymentType$
    NumFields = NumFields + 1 \ FieldName$[NumFields] = "receipt_nbr" \ FieldValue$[NumFields] = TicketHeader.PaymentNo$
    NumFields = NumFields + 1 \ FieldName$[NumFields] = "amount" \ FieldValue$[NumFields] = Str$(TicketTotals.TotalPaid)
  End If 
  NumFields = NumFields + 1 \ FieldName$[NumFields] = "initials" \ FieldValue$[NumFields] = WeighMaster$
  Call SAIJPeggerCommand("capture",Branch$,JPServer$,NumFields,FieldName$[],FieldValue$[],stat)
  If stat = 0
    TicketHeader.Photo = 1
  Else 
    Call SAITouchError("Error sending Payment Photo Capture command.")
  End If 
End Sub 
Sub CalcExtPrice()
  If ((TicketHeader.TktType$ = "P" Or TicketHeader.TktType$ = "R") And (TicketDetail.TareWt <> 0 Or TicketHeader.VehType$ = "B")) Or (TicketHeader.TktType$ = "S" And TicketDetail.GrossWt <> 0)
    PaidWeight = TicketDetail.NetWt + TicketDetail.AdjWt
    Call SAICalcPriceExt(ch_110Aro,PaidWeight,gbl_um$,TicketDetail.Price,SAISpaceFill$(TicketDetail.PriceUM$,2),2,TicketDetail.MatExt,stat)
    TicketDetail.UnPriced = 0
    If TicketDetail.MaterialCode$ = "*MIX"
      TicketDetail.UnPriced = 1
    Else If TicketDetail.MatExt = 0
      k$ = "U" + SAISpaceFill$(TicketDetail.PriceUM$,2)
      Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
      If ScrapCode$[133,133] <> "*" Let TicketDetail.UnPriced = 1
    End If 
    If TicketHeader.TktType$ <> "S" And TicketDetail.RedFlag = 1
      TicketDetail.RedCount = 0
      TicketDetail.RedNetWt = PaidWeight
      TicketDetail.RedExt = Round(PaidWeight * TicketDetail.RedRate,2)
    End If 
  Else 
    PaidWeight = 0
    TicketDetail.MatExt = 0
    TicketDetail.UnPriced = 1
  End If 
End Sub 
Sub UpdateWeightFields()
  !  if TicketDetail.RedFlag=2 ! Count
  !    print #chwin1;'12WCSELECT CU';Str$(TicketDetail.RedCount)
  !    TicketDetail.RedExt=TicketDetail.RedCount*TicketDetail.RedRate
  !    print #chwin1;'20WCSELECT CU';"$";Trim$(TicketDetail.RedExt Using "-,---,---,--#.##")
  !    print #chwin1;'0WCSELECT';
  !    if Reimbursement[0]<>0 AND TicketDetail.RedRate<>0
  !      TicketDetail.GrossWt=Round(TicketDetail.RedCount / (Reimbursement[0] / TicketDetail.RedRate),1)
  !      TicketDetail.NetWt=TicketDetail.GrossWt
  !    endif
  !    Exit Sub
  !  endif
  If Dirt$ = "Y"
    If TicketDetail.GrossWt
      TicketDetail.NetWt = TicketDetail.GrossWt - TicketDetail.TareWt
      If TicketDetail.AdjPercent Let TicketDetail.AdjWt = Round(TicketDetail.NetWt * TicketDetail.AdjPercent / -100,0)
      Call CalcExtPrice()
    Else 
      TicketDetail.NetWt = 0
      TicketDetail.MatExt = 0
    End If 
  Else If TicketHeader.TktMode$ = "T" And TicketDetail.GrossWt = 0
    TicketDetail.NetWt = 0
  Else 
    TicketDetail.NetWt = TicketDetail.GrossWt - TicketDetail.TareWt
    If TicketDetail.AdjPercent Let TicketDetail.AdjWt = Round(TicketDetail.NetWt * TicketDetail.AdjPercent / -100,0)
    Call CalcExtPrice()
  End If 
  Print #chwin1;'15WCSELECT CU';Str$(TicketDetail.GrossWt);
  Print #chwin1;'16WCSELECT CU';Str$(TicketDetail.TareWt);
  Print #chwin1;'17WCSELECT CU';Str$(TicketDetail.NetWt);
  Print #chwin1;'18WCSELECT CU';Str$(TicketDetail.AdjWt);
  If TicketHeader.TktMode$ = "T" Or TicketHeader.Noticed
    Print #chwin1;'315WCSELECT CU 316WCSELECT CU 317WCSELECT CU 318WCSELECT CU';
    If TicketHeader.OriginGrossWt And TicketDetail.GrossWt Print #chwin1;'315WCSELECT CU';DisplayNumber$(TicketDetail.GrossWt - TicketHeader.OriginGrossWt,bgcolor1);
    If TicketHeader.OriginTareWt And TicketDetail.TareWt Print #chwin1;'316WCSELECT CU';DisplayNumber$(TicketDetail.TareWt - TicketHeader.OriginTareWt,bgcolor1);
    If TicketHeader.OriginNetWt And TicketDetail.NetWt Print #chwin1;'317WCSELECT CU';DisplayNumber$(TicketDetail.NetWt - TicketHeader.OriginNetWt,bgcolor1);
    If Source.AdjWt Or TicketDetail.AdjWt Print #chwin1;'318WCSELECT CU';DisplayNumber$(TicketDetail.AdjWt - Source.AdjWt,bgcolor1);
  End If 
  If TicketHeader.TktMode$ = "T"
    TicketDetail.Price = 0
    TicketDetail.MatExt = 0
    PaidWeight = 0
    !    TicketDetail.PriceUM$="  "
    TicketDetail.UnPriced = 1
  Else 
    If (DisplayPrice$ = "Y" Or DisplayPrice$ = "P") And Supplier.PrintPriceAtScale$ = ""
      If TicketDetail.Price < 1000
        Print #chwin1;'13WCSELECT CU';"$";Trim$(TicketDetail.Price Using "---,---,--#.####");
      Else 
        Print #chwin1;'13WCSELECT CU';"$";Trim$(TicketDetail.Price Using "---,---,--#.##");
      End If 
      Print #chwin1;'14WCSELECT CU';UMDesc$(ch_110Aro,TicketDetail.PriceUM$);
    End If 
  End If 
  Print #chwin1;'0WCSELECT';
End Sub 
Sub UpdateSalesWeightFields()
  If TicketDetail.GrossWt
    TicketDetail.NetWt = TicketDetail.GrossWt - TicketDetail.TareWt
    If TicketDetail.AdjPercent Let TicketDetail.AdjWt = Round(TicketDetail.NetWt * TicketDetail.AdjPercent / -100,0)
    Call CalcExtPrice()
  Else 
    TicketDetail.NetWt = 0
    TicketDetail.MatExt = 0
  End If 
  Print #chwin1;'15WCSELECT CU';Str$(TicketDetail.GrossWt);
  Print #chwin1;'16WCSELECT CU';Str$(TicketDetail.TareWt);
  Print #chwin1;'17WCSELECT CU';Str$(TicketDetail.NetWt);
  Print #chwin1;'18WCSELECT CU';Str$(TicketDetail.AdjWt);
  If Inventory$[114,114] = "C" And EstCarBodyWt > 0 And TicketDetail.CarBodies = 0 And TicketDetail.NetWt > 0
    TicketDetail.CarBodies = Round(TicketDetail.NetWt / EstCarBodyWt,0)
    Print #chwin1;'20WCSELECT CU';Str$(TicketDetail.CarBodies);
  End If 
  If TicketHeader.TktMode$ = "T" Or WeightOnly
    TicketDetail.Price = 0
    TicketDetail.MatExt = 0
    PaidWeight = 0
    TicketDetail.PriceUM$ = "  "
    TicketDetail.UnPriced = 1
  Else 
    If DisplayPrice$ = "Y" Or DisplayPrice$ = "S"
      If TicketDetail.Price < 1000
        Print #chwin1;'13WCSELECT CU';"$";Trim$(TicketDetail.Price Using "---,---,--#.####");
      Else 
        Print #chwin1;'13WCSELECT CU';"$";Trim$(TicketDetail.Price Using "---,---,--#.##");
      End If 
      Print #chwin1;'14WCSELECT CU';UMDesc$(ch_110Aro,TicketDetail.PriceUM$);
    End If 
  End If 
  Print #chwin1;'0WCSELECT';
End Sub 
Sub ReadScaleSensor(WeightType$,ReadScale,status)
  Clear ScaleSensorLog.
  ScaleSensorLog.TicketNo$ = TicketHeader.TicketNo$
  If ItemNo
    ScaleSensorLog.ItemNo = ItemNo
  Else 
    ScaleSensorLog.ItemNo = ItemCount + 1
  End If 
  ScaleSensorLog.ScaleID$ = ScaleNames$[ReadScale,ReadScale]
  ScaleSensorLog.WeightType$ = WeightType$
  ScaleSensorLog.ScaleSenorIPAddress$ = ScaleSensorAddr$[ReadScale]
  ScaleSensorLog.WeighMaster$ = WeighMaster$
ReadDAQDevice: !
  ScaleSensorLog.EventDateTime# = Tim#(0)
  Call SAIReadDAQDevice(ScaleSensorAddr$[ReadScale],InputStates$[],Counts$[],status,errmess$)
  If status = 0
    If InputStates$[1] = "0" ! Turned off
      ScaleSensorLog.IsScaleSensorOn = 0
    Else If InputStates$[1] = "1"
      ScaleSensorLog.IsScaleSensorOn = 1
      If InputStates$[2] = "1" ! Beam is broken
        ScaleSensorLog.IsScaleSensorBroken = 1
        w$ = SAITouchGeneric$("Scale Sensor Warning","Scale sensor beam is broken.",3,"&&&Retry~&Ignore~&Cancel","RIC")
        Select Case w$
          Case "R"
            Goto ReadDAQDevice
          Case "I"
            ScaleSensorLog.WasScaleSensorIgnored = 1
          Case "C"
            status = 1
            Exit Sub 
        End Select 
      Else If InputStates$[2] <> "0"
        ScaleSensorLog.IsScaleSensorOn = 3
      End If 
    Else 
      ScaleSensorLog.IsScaleSensorOn = 3
    End If 
  Else 
    ScaleSensorLog.IsScaleSensorOn = 2
    !    select case Status
    !    case 1 ! Could not connect
    !      TicketAudit.Event$="Scale sensor could not connect to "+ScaleSensorAddr$[ReadScale]
    !    case 2 ! No response
    !      TicketAudit.Event$="Scale sensor no response from "+ScaleSensorAddr$[ReadScale]
    !    case 99 ! Invalid device address
    !      TicketAudit.Event$="Scale sensor invalid address - "+ScaleSensorAddr$[ReadScale]
    !    case else
    !      TicketAudit.Event$="Scale sensor unknown error: "+errmess$
    !    end select
  End If 
  SQL$ = "UPDATE Scale_Sensor_Log SET " + SQLNV$(ScaleSensorLog.)
  SQL$ = SQL$ + " WHERE TicketNo=" + SQLV$(ScaleSensorLog.TicketNo$)
  SQL$ = SQL$ + " AND ItemNo=" + SQLV$(ScaleSensorLog.ItemNo)
  SQL$ = SQL$ + " AND ScaleID=" + SQLV$(ScaleSensorLog.ScaleID$)
  SQL$ = SQL$ + " AND WeightType=" + SQLV$(ScaleSensorLog.WeightType$)
  Try 
    Search #ch_db;SQL$
    If Chf(ch_db) = 0
      Search #ch_db;"INSERT INTO Scale_Sensor_Log (" + SQLN$(ScaleSensorLog.) + ") VALUES (" + SQLV$(ScaleSensorLog.) + ")"
    End If 
  Else 
    Call SAITouchError("Error creating entry in Scale_Sensor_Log table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
  End Try 
  status = 0
End Sub 
Sub DrawScaleSelection(ch)
  Print #ch;PChr$(145,x0,y,x1,y + 14,gbl_scale$ + ":");'WCLABEL';
  If NumScales
    x = x1
    Print #ch;PChr$(SAIColorRGB(193,74,40));'BACKCOLOR WCSETCOLOR';
    For i = 1 To NumScales
      If ScaleIndicators$[i,i] <> "-"
        Print #ch;PChr$(44 + i,x,y - 5,x + dx + 20,y + 20,"  " + ScaleNames$[i,i] + "  ",2 + 4);'WCRADIO';
      End If 
      x = x + dx + 40
    Next i
    Print #ch;PChr$(bgcolor1);'BACKCOLOR WCSETCOLOR';
    If ReadScale
      Print #ch;PChr$(44 + ReadScale);'WCSELECT';"1"
      Print #ch;'0WCSELECT';
    End If 
  Else 
    Print #ch;PChr$(44,x1,y,x1 + dx,y + 14,"None");'WCLABEL';
    x = x1 + dx + 40
  End If 
  Print #ch;'10FONTSIZE WCSETFONT';
  Print #ch;PChr$(53,x,y - 5,x + 150,y + 20,"Change " + gbl_WeighMaster$,2);'WCBUTTON';
  Print #ch;'12FONTSIZE WCSETFONT';
End Sub 
Sub ReadScaleScanner(ReadScale,ScaleScannerAddr$,status,errmess$)
  Call SAIReadScaleScanner(ScaleNames$[ReadScale,ReadScale],ScaleScannerAddr$,temp$,temp2$,status,errmess$)
  If status = 0
    If temp$ Let TicketHeader.PUBarcode$ = temp$
    If TicketHeader.TrailerBarcode$ And temp2$
      If TicketHeader.TrailerBarcode$ <> temp2$
        ans = SAITouchYesNo("Trailer Barcode does not match original value.\15\\15\Overwrite original value?")
        If ans Let TicketHeader.TrailerBarcode$ = temp2$
      End If 
    Else 
      If temp2$ Let TicketHeader.TrailerBarcode$ = temp2$
    End If 
  End If 
End Sub 
Sub ReadWeight(WeightType$,ReadScale,num,status)
  num = 0
  If ScaleIndicators$[ReadScale,ReadScale] = " "
    status = 1
    Exit Sub 
  End If 
  If ScaleSensorAddr$[ReadScale]
    Call ReadScaleSensor(WeightType$,ReadScale,status)
    If status Exit Sub 
  End If 
  Do 
    If ScaleAddr$[ReadScale]
      Call SAIReadScale(ScaleNames$[ReadScale,ReadScale],ScaleAddr$[ReadScale],ReturnToZero$,gbl_scale$,num,status,errmess$)
    Else 
      Call SAIReadScale(ReadScale,ScaleIndicators$,ReturnToZero$,gbl_scale$,num,status,errmess$)
    End If 
    If status = 0
      Exit Do 
    Else If ReturnToZero$ = "Y" And status = 1 ! Ignore return to zero on retry if scale in motion on first read
      Do 
        w$ = SAITouchGeneric$("Error reading weight: Suspend RTZ",errmess$,2,"&&&Retry~&Cancel","RC")
        If w$ = "C" Exit Do 
        If ScaleAddr$[ReadScale]
          Call SAIReadScale(ScaleNames$[ReadScale,ReadScale],ScaleAddr$[ReadScale],"N",gbl_scale$,num,status,errmess$)
        Else 
          Call SAIReadScale(ReadScale,ScaleIndicators$,"N",gbl_scale$,num,status,errmess$)
        End If 
        If status = 0 Exit Do 
      Loop 
      Exit Do 
    Else 
      w$ = SAITouchGeneric$("Error reading weight",errmess$,2,"&&&Retry~&Cancel","RC")
      If w$ = "C" Exit Do 
    End If 
  Loop 
End Sub 
Sub ReadScaleBG(ReadScale,Weight,status)
  If ScaleIndicators$ <> "demo" And ScaleIndicators$[ReadScale,ReadScale] <> " "
    If ScaleAddr$[ReadScale]
      Call SAIReadScaleBG(ScaleNames$[ReadScale,ReadScale],ScaleAddr$[ReadScale],Weight,status,errmess$)
    Else 
      Call SAIReadScaleBG(ReadScale,ScaleIndicators$,Weight,status,errmess$)
    End If 
    !    Call SAITouchMessage("Weight="+Str$(Weight)+"\15\Status="+Str$(Status)+"\15\errmess="+errmess$)
  End If 
End Sub 
Sub GetSplitWeight(WeightType$,ReadScale,num,status)
  num = 0
  If ScaleIndicators$[ReadScale,ReadScale] <> " "
    If DisableManualSplitWt$ = "Y"
      w$ = SAITouchGeneric$("Split Weight","Please select ''Read'' button when ready.",2,"Read~Cancel","RC")
      If w$ = "C"
        status = 1
        Exit Sub 
      End If 
    Else 
      w$ = SAITouchGeneric$("Split Weight","Please select method of adding additional split weight.",3,"Read~Manual~Cancel","RMC")
      If w$ = "C"
        status = 1
        Exit Sub 
      Else If w$ = "M" And (DisableManualWt$ = "A" Or DisableManualSplitWt$ = "A")
        Call ManualWeightAuthorization(status)
        If status Exit Sub 
        w$ = "M" ! Reset choice to manual
      End If 
    End If 
  Else 
    If DisableManualSplitWt$ = "Y"
      Call SAITouchWarning("Split Weights cannot be accepted for the selected scale.")
      status = 1
      Exit Sub 
    Else 
      w$ = "M"
    End If 
  End If 
  Select Case w$
    Case "R"
      ksav$ = ReturnToZero$
      ReturnToZero$ = "N" ! Disable Return to Zero feature on split weight
      Call ReadWeight(WeightType$,ReadScale,num,status)
      ReturnToZero$ = ksav$
    Case "M"
      Call SAIKeyPad("Enter Additional Split Weight",num,2,status)
  End Select 
End Sub 
Sub UpdateWarnings()
  Print '81WCSELECT CU 82WCSELECT CU';
  If Supplier.SignatureOnFile$ = "Y"
    If Not(Supplier.CFCFormDate#)
      Print '81WCSELECT';"CFC CONTRACT EXPIRED."
    Else If RunDate# > Supplier.CFCFormDate#
      Print '81WCSELECT';"CFC CONTRACT EXPIRED."
    End If 
  Else 
    Print '81WCSELECT';"CFC CONTRACT NOT ON FILE."
  End If 
  !  for i=1 to ItemCount
  !    if Items.[i].CFCFlag=2
  !      print '81WCSELECT';"CFC CONTRACT EXPIRED."
  !      Exit For
  !    else if Items.[i].CFCFlag
  !      print '81WCSELECT';"CFC CONTRACT REQUIRED."
  !      Exit For
  !    endif
  !  next i
  Print '0WCSELECT';
End Sub 
Sub DisplayMaterialComments()
  Print #chwin1;'212WCSELECT CU';
  If Trim$(TicketDetail.MaterialCmt1$)
    Print #chwin1;TicketDetail.MaterialCmt1$;
    If Trim$(TicketDetail.MaterialCmt2$) Print #chwin1;" / ";TicketDetail.MaterialCmt2$;
  Else If Trim$(TicketDetail.MaterialCmt2$)
    Print #chwin1;TicketDetail.MaterialCmt2$
  End If 
  Print #chwin1;'0WCSELECT';
End Sub 
Sub PurchaseItemCountWindow(ItemNo)
  ysize = 200
  chwin1 = SAIOpenWindow(temp$,800,ysize,1)
  Print #chwin1;PChr$(bgcolor1);'BACKCOLOR CS WCSETCOLOR';
  Print #chwin1;PChr$("Arial");'FONTFACE 12FONTSIZE EBOLD WCSETFONT';
  x0 = 20 \ x1 = 150 \ bw = 100
  y = 10 \ dy = 30
  dx = 500
  Print #chwin1;PChr$(111,x0,y,x1,y + 14,"Material:");'WCLABEL';
  Print #chwin1;PChr$(11,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chwin1;'11WCSELECT';PChr$(-1,16777215);'WCSETCOLOR';Trim$(TicketDetail.MaterialCode$);": ";Trim$(TicketDetail.MaterialDesc$);'0WCSELECT';
  Print #chwin1;PChr$(31,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Change",2);'WCBUTTON';
  y = y + dy \ dx = 150
  Print #chwin1;PChr$(112,x0,y,x1,y + 14,"Count:");'WCLABEL';
  Print #chwin1;PChr$(12,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chwin1;'12WCSELECT';PChr$(-1,16777215);'WCSETCOLOR 0WCSELECT';
  x = x1 + dx + 5
  Print #chwin1;PChr$(44,x,y - 5,x + bw,y + 20,"Change",2);'WCBUTTON';
  If (DisplayPrice$ = "Y" Or DisplayPrice$ = "P") And Supplier.PrintPriceAtScale$ = ""
    y = y + dy \ dx = 145
    Print #chwin1;PChr$(118,x0,y,x1,y + 14,"Red. Price:");'WCLABEL';
    Print #chwin1;PChr$(18,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
    Print #chwin1;'18WCSELECT';PChr$(-1,16777215);'WCSETCOLOR';
    Print #chwin1;"$";Trim$(TicketDetail.RedRate Using "---,---,--#.###");'0WCSELECT';
    x = x1 + dx + 5 \ dx = 50
    Print #chwin1;PChr$(19,x,y,x + dx,y + 14,"",0);'WCTEXT';
    Print #chwin1;'19WCSELECT';PChr$(-1,16777215);'WCSETCOLOR';
    Print #chwin1;"EA";'0WCSELECT';
    y = y + dy \ dx = 200
    Print #chwin1;PChr$(120,x0,y,x1,y + 14,"Red. Ext:");'WCLABEL';
    Print #chwin1;PChr$(20,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
    Print #chwin1;'20WCSELECT';PChr$(-1,16777215);'WCSETCOLOR 0WCSELECT';
  End If 
  Print #chwin1;PChr$(1,290,ysize - 30,390,ysize - 5,"&Submit",2);'WCBUTTON';
  If ItemNo
    Print #chwin1;PChr$(3,420,ysize - 30,520,ysize - 5,"&Delete",2);'WCBUTTON';
  Else 
    Print #chwin1;PChr$(2,420,ysize - 30,520,ysize - 5,"&Another",2);'WCBUTTON';
  End If 
  Print #chwin1;PChr$(50,690,ysize - 30,790,ysize - 5,"&Cancel",2);'WCBUTTON';
  Print #chwin1;'49WCFOCUS';
End Sub 
Sub TransferItemDetailWindow(ItemNo,WeightMode$)
  If ItemNo = 0 Let temp$ = "Transfer:  Add Item" Else Let temp$ = "Transfer:  Edit Item"
  temp$ = temp$ + " on Ticket No. " + TicketHeader.TicketNo$ + ", ID=" + TicketHeader.InYardID$
  temp$ = temp$ + Rep$(" ",10) + NTEPCert$
  ysize = 315
  chwin1 = SAIOpenWindow(temp$,850,ysize,1)
  Print #chwin1;PChr$(bgcolor1);'BACKCOLOR CS WCSETCOLOR';
  Print #chwin1;PChr$("Arial");'FONTFACE 12FONTSIZE EBOLD WCSETFONT';
  y = 10 \ dy = 28 \ dx = 50
  x0 = 10 \ x1 = 180 \ bw = 100
  Call DrawScaleSelection(chwin1)
  y = y + dy - 2
  Print #chwin1;PChr$(108,x0,y,x1,y + 14,"Source Branch:");'WCLABEL';
  Print #chwin1;PChr$(8,x1,y,x1 + 300,y + 14,"",0);'WCTEXT';
  Print #chwin1;'8WCSELECT';SAICodesTableDesc$(ch_db,"Codes_Branch","Branch",TicketHeader.SrcBranch$);'0WCSELECT';
  x = x1 + 310
  Print #chwin1;PChr$(109,x,y,x + 50,y + 14,"Yard:");'WCLABEL';
  x = x + 60
  Print #chwin1;PChr$(9,x,y,x + 290,y + 14,"",0);'WCTEXT';
  ktemp$ = "Y" + TicketHeader.SrcYard$ + TicketHeader.SrcBranch$
  Call SAIGetRecord(ch_110Aro,recdef_110A.,ktemp$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
  Print #chwin1;'9WCSELECT';Trim$(ScrapCode$[15,34]);'0WCSELECT';
  y = y + 18 \ dx = 500
  Print #chwin1;PChr$(113,x0,y,x1,y + 14,"Source Inventory:");'WCLABEL';
  Print #chwin1;PChr$(13,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  ktemp$ = SAICreateInventoryKey$(BrYd,1,TicketHeader.SrcInvCode$,TicketHeader.SrcYard$,TicketHeader.SrcBranch$)
  Call SAIGetRecord(ch_1600,recdef_1600.,ktemp$,1,"Y","U",r,Inventory$,Inventory[],stat,errmess$)
  Print #chwin1;'13WCSELECT';Trim$(TicketHeader.SrcInvCode$) + ": " + Trim$(SAIInventoryDesc$(BrYd,Inventory$));'0WCSELECT';
  y = y + dy \ dx = 150
  Print #chwin1;PChr$(110,x0,y,x1,y + 14,"Material Code:");'WCLABEL';
  Print #chwin1;PChr$(10,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chwin1;'10WCSELECT WCRESETCOLOR';Trim$(TicketDetail.MaterialCode$);'0WCSELECT';
  Print #chwin1;PChr$(30,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Change",2);'WCBUTTON';
  If ScrapSRecord$[130,130] = "Y"
    Print #chwin1;PChr$(111,500,y,610,y + 14,"Stock Pile:");'WCLABEL';
    Print #chwin1;PChr$(11,610,y,680,y + 14,"",0);'WCTEXT 11WCSELECT WCRESETCOLOR 0WCSELECT';
    Print #chwin1;PChr$(31,685,y - 5,785,y + 20,"Change",2);'WCBUTTON';
    If TicketDetail.StkPileReq
      Print #chwin1;'11WCSELECT';Trim$(TicketDetail.StockPile$);'0WCSELECT';
    Else 
      Print #chwin1;'111WCDISABLE 11WCDISABLE 31WCDISABLE';
    End If 
  End If 
  y = y + dy \ dx = 500
  Print #chwin1;PChr$(112,x0,y,x1,y + 14,"Material Desc:");'WCLABEL';
  DisableMatDesc = 0
  If EditMaterialDesc$ <> "Y" Let DisableMatDesc = 1
  If DisableMatDesc = 0
    Print #chwin1;PChr$(12,x1,y - 1,x1 + dx,y + 15,"",2,30);'WCSTRING';
    Print #chwin1;'12WCSELECT WCRESETCOLOR';Trim$(TicketDetail.MaterialDesc$);'0WCSELECT';
    Print #chwin1;PChr$(32,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Keyboard",2);'WCBUTTON';
  Else 
    Print #chwin1;PChr$(12,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
    Print #chwin1;'12WCSELECT WCRESETCOLOR';Trim$(TicketDetail.MaterialDesc$);'0WCSELECT';
  End If 
  y = y + dy \ dx = 120
  Print #chwin1;PChr$(115,x0,y,x1,y + 14,"Gross Weight:");'WCLABEL';
  Print #chwin1;PChr$(215,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chwin1;'8FONTSIZE WCSETFONT';PChr$(415,x1,y - 9,x1 + dx,y,"Source (" + DisplayUM$ + ")");'WCLABEL 12FONTSIZE WCSETFONT';
  If TicketHeader.OriginGrossWt Print #chwin1;'215WCSELECT CU';Str$(TicketHeader.OriginGrossWt);'0WCSELECT';
  x = x1 + dx + 5
  Print #chwin1;PChr$(15,x,y,x + dx,y + 14,"",0);'WCTEXT 15WCSELECT WCRESETCOLOR 0WCSELECT';
  Print #chwin1;'8FONTSIZE WCSETFONT';PChr$(416,x,y - 9,x + dx,y,"Weight (" + DisplayUM$ + ")");'WCLABEL 12FONTSIZE WCSETFONT';
  x = x + dx + 5
  Print #chwin1;PChr$(315,x,y,x + dx,y + 14,"",0);'WCTEXT';
  Print #chwin1;'8FONTSIZE WCSETFONT';PChr$(417,x,y - 9,x + dx,y,"Difference (" + DisplayUM$ + ")");'WCLABEL 12FONTSIZE WCSETFONT';
  x = x + dx + 5
  If WeightMode$ <> "O" And NumScales > 0
    Print #chwin1;PChr$(35,x,y - 5,x + bw,y + 20,"Read",2);'WCBUTTON';
    If DisableManualWt$ <> "Y" Or TicketNo$[1,1] = "M" Or AllowTransferManualWt$ = "Y"
      x = x + bw + 5
      Print #chwin1;PChr$(36,x,y - 5,x + bw,y + 20,"Manual",2);'WCBUTTON';
    End If 
    If AllowSplitWt$ = "Y"
      x = x + bw + 5
      Print #chwin1;PChr$(51,x,y - 5,x + bw / 2,y + 20,"+",2);'WCBUTTON';
    End If 
  End If 
  y = y + dy
  Print #chwin1;PChr$(116,x0,y,x1,y + 14,"Tare Weight:");'WCLABEL';
  Print #chwin1;PChr$(216,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  If TicketHeader.OriginTareWt Print #chwin1;'216WCSELECT CU';Str$(TicketHeader.OriginTareWt);'0WCSELECT';
  x = x1 + dx + 5
  Print #chwin1;PChr$(16,x,y,x + dx,y + 14,"",0);'WCTEXT 16WCSELECT WCRESETCOLOR 0WCSELECT';
  x = x + dx + 5
  Print #chwin1;PChr$(316,x,y,x + dx,y + 14,"",0);'WCTEXT';
  x = x + dx + 5
  If WeightMode$ <> "I" And NumScales > 0
    Print #chwin1;PChr$(37,x,y - 5,x + bw,y + 20,"Read",2);'WCBUTTON';
    x = x + bw + 5
    If DisableManualWt$ <> "Y" Or TicketNo$[1,1] = "M" Or AllowTransferManualWt$ = "Y"
      Print #chwin1;PChr$(38,x,y - 5,x + bw,y + 20,"Manual",2);'WCBUTTON';
      x = x + bw + 5
    End If 
    If AllowSplitWt$ = "Y"
      Print #chwin1;PChr$(52,x,y - 5,x + bw / 2,y + 20,"+",2);'WCBUTTON';
      x = x + bw / 2 + 5
    End If 
  End If 
  If Dirt$ <> "Y" And Supplier.UseAutoTare$ = "Y"
    Call GetAutoTare(num,status)
    If status = 0 And x < 850
      xx = x + bw
      If xx > 850 Let xx = 850
      Print #chwin1;PChr$(54,x,y - 5,xx,y + 20,"Auto Tare",2);'WCBUTTON';
      x = x + bw + 5
    End If 
  End If 
  y = y + dy
  Print #chwin1;PChr$(117,x0,y,x1,y + 14,"Net Weight:");'WCLABEL';
  Print #chwin1;PChr$(217,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  If TicketHeader.OriginNetWt Print #chwin1;'217WCSELECT CU';Str$(TicketHeader.OriginNetWt);'0WCSELECT';
  x = x1 + dx + 5
  Print #chwin1;PChr$(17,x,y,x + dx,y + 14,"",0);'WCTEXT 17WCSELECT WCRESETCOLOR 0WCSELECT';
  x = x + dx + 5
  Print #chwin1;PChr$(317,x,y,x + dx,y + 14,"",0);'WCTEXT';
  If ScaleCodes$[67,67] = "Y" ! Car Bodies
    x = x + dx + 10 \ dx = 110
    Print #chwin1;PChr$(120,x,y,x + dx,y + 14,"Car Bodies:");'WCLABEL';
    x = x + dx + 10 \ dx = 50
    Print #chwin1;PChr$(20,x,y,x + dx,y + 14,"",0);'WCTEXT';
    Print #chwin1;'20WCSELECT WCRESETCOLOR';Str$(TicketDetail.CarBodies);'0WCSELECT';
    x = x + dx + 5
    Print #chwin1;PChr$(43,x,y - 5,x + bw,y + 20,"Change",2);'WCBUTTON';
  End If 
  y = y + dy
  Print #chwin1;PChr$(118,x0,y,x1,y + 14,"Adjustment:");'WCLABEL';
  Print #chwin1;PChr$(218,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  If TicketHeader.OriginNetWt Print #chwin1;'218WCSELECT CU';Str$(Source.AdjWt);'0WCSELECT';
  x = x1 + dx + 5
  Print #chwin1;PChr$(18,x,y,x + dx,y + 14,"",0);'WCTEXT 18WCSELECT WCRESETCOLOR 0WCSELECT';
  x = x + dx + 5
  Print #chwin1;PChr$(318,x,y,x + dx,y + 14,"",0);'WCTEXT';
  If AllowAdjustment$ = "Y"
    x = x + dx + 5
    !    print #chwin1;PChr$(39,x,y-5,x+bw,y+20,"Read",2);'WCBUTTON';
    !    x=x+bw+5
    Print #chwin1;PChr$(40,x,y - 5,x + bw,y + 20,"Manual",2);'WCBUTTON';
    x = x + bw + 5
    Print #chwin1;PChr$(41,x,y - 5,x + bw / 2,y + 20,"%",2);'WCBUTTON';
  End If 
  y = y + dy \ dx = 200
  Print #chwin1;PChr$(119,x0,y,x1,y + 14,"Adj Code:");'WCLABEL';
  Print #chwin1;PChr$(219,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  If Trim$(Source.AdjCode$) Print #chwin1;'219WCSELECT CU';SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",Source.AdjCode$);'0WCSELECT';
  x = x1 + dx + 5
  Print #chwin1;PChr$(19,x,y,x + dx,y + 14,"",0);'WCTEXT 19WCSELECT WCRESETCOLOR 0WCSELECT';
  x = x + dx + 5
  If AllowAdjustment$ = "Y" Print #chwin1;PChr$(42,x,y - 5,x + bw,y + 20,"Select",1);'WCBUTTON';
  If ReadScale = 0
    Print #chwin1;PChr$(35,38);'WCDISABLE';PChr$(51,52);'WCDISABLE'; !'35WCDISABLE 37WCDISABLE 39WCDISABLE';
  Else 
    If ScaleIndicators$[ReadScale,ReadScale] = " "
      Print #chwin1;'35WCDISABLE 37WCDISABLE'; ! 39WCDISABLE';
    End If 
  End If 
  If ItemNo And ItemNo = ItemCount And ItemCount <> 1
    Print #chwin1;PChr$(1,290,ysize - 30,390,ysize - 5,"&Submit",2);'WCBUTTON';
    Print #chwin1;PChr$(3,420,ysize - 30,520,ysize - 5,"&Delete",2);'WCBUTTON';
  Else 
    Print #chwin1;PChr$(1,350,ysize - 30,450,ysize - 5,"&Submit",2);'WCBUTTON';
  End If 
  Print #chwin1;PChr$(50,690,ysize - 30,790,ysize - 5,"&Cancel",2);'WCBUTTON';
  xWM = 10 \ yWM = ysize - 15
  Print #chwin1;'8FONTSIZE';@xWM,yWM;"On Duty:  ";WMName$;'12FONTSIZE';
  Print #chwin1;'0WCFOCUS';
End Sub 
Sub NoticedPurchaseDetailWindow(ItemNo,WeightMode$)
  chwin1 = SAIOpenWindow("NOTICED PURCHASE:  " + temp$,850,ysize,1)
  Print #chwin1;PChr$(bgcolor1);'BACKCOLOR CS WCSETCOLOR';
  Print #chwin1;PChr$("Arial");'FONTFACE 12FONTSIZE EBOLD WCSETFONT';
  y = 10 \ dy = 28 \ dx = 50
  x0 = 10 \ x1 = 180 \ bw = 100
  Call DrawScaleSelection(chwin1)
  y = y + dy - 2
  Print #chwin1;PChr$(108,x0,y,x1,y + 14,"Supplier:");'WCLABEL';
  Print #chwin1;PChr$(8,x1,y,x1 + 600,y + 14,"",0);'WCTEXT';
  Print #chwin1;'8WCSELECT';Supplier.SupplierNo$ + ": " + Supplier.Name$;'0WCSELECT';
  y = y + 18
  Print #chwin1;PChr$(109,x0,y,x1,y + 14,"Purchase Order:");'WCLABEL';
  Print #chwin1;PChr$(9,x1,y,x1 + 200,y + 14,"",0);'WCTEXT';
  If Trim$(TicketHeader.OrderNo$)
    Print #chwin1;'9WCSELECT';
    If Trim$(TicketHeader.OrderNo$) = "UNKNOWN"
      Print #chwin1;"UNKNOWN";
    Else 
      Print #chwin1;TicketHeader.OrderNo$;"-";TicketHeader.OrderLine$;
    End If 
    Print #chwin1;'0WCSELECT';
  End If 
  y = y + dy \ dx = 150
  Print #chwin1;PChr$(110,x0,y,x1,y + 14,"Material Code:");'WCLABEL';
  Print #chwin1;PChr$(10,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  !  print #chwin1;'10WCSELECT';PChr$(-1,16777215);'WCSETCOLOR';Trim$(TicketDetail.MaterialCode$);'0WCSELECT';
  Print #chwin1;'10WCSELECT WCRESETCOLOR';Trim$(TicketDetail.MaterialCode$);'0WCSELECT';
  If (Trim$(TicketHeader.OrderNo$) = "" Or AllowMaterialChange$ = "Y") And TicketHeader.TktType$ <> "R"
    Print #chwin1;PChr$(30,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Change",2);'WCBUTTON';
  End If 
  If ScrapSRecord$[130,130] = "Y"
    Print #chwin1;PChr$(111,500,y,610,y + 14,"Stock Pile:");'WCLABEL';
    Print #chwin1;PChr$(11,610,y,680,y + 14,"",0);'WCTEXT 11WCSELECT WCRESETCOLOR 0WCSELECT';
    Print #chwin1;PChr$(31,685,y - 5,785,y + 20,"Change",2);'WCBUTTON';
    If TicketDetail.StkPileReq
      Print #chwin1;'11WCSELECT';Trim$(TicketDetail.StockPile$);'0WCSELECT';
    Else 
      Print #chwin1;'111WCDISABLE 11WCDISABLE 31WCDISABLE';
    End If 
  End If 
  y = y + dy \ dx = 500
  Print #chwin1;PChr$(112,x0,y,x1,y + 14,"Material Desc:");'WCLABEL';
  DisableMatDesc = 0
  If EditMaterialDesc$ <> "Y" Let DisableMatDesc = 1
  If DisableMatDesc = 0
    !    print #chwin1;PChr$(12,x1,y-1,x1+dx,y+15,"",2,30);'WCSTRING';
    Print #chwin1;PChr$(12,x1,y - 5,x1 + dx,y + 11,"",2,30);'WCSTRING';
    Print #chwin1;'12WCSELECT WCRESETCOLOR';Trim$(TicketDetail.MaterialDesc$);'0WCSELECT';
    Print #chwin1;PChr$(32,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Keyboard",2);'WCBUTTON';
  Else 
    !    print #chwin1;PChr$(12,x1,y,x1+dx,y+14,"",0);'WCTEXT';
    Print #chwin1;PChr$(12,x1,y - 5,x1 + dx,y + 9,"",0);'WCTEXT';
    Print #chwin1;'12WCSELECT WCRESETCOLOR';Trim$(TicketDetail.MaterialDesc$);'0WCSELECT';
  End If 
  Print #chwin1;'8FONTSIZE WCSETFONT';
  Print #chwin1;PChr$(212,x1,y + 11,x1 + dx,y + 21,"",0);'WCTEXT';
  Print #chwin1;'12FONTSIZE WCSETFONT';
  Call DisplayMaterialComments()
  If (DisplayPrice$ = "Y" Or DisplayPrice$ = "P") And Supplier.PrintPriceAtScale$ = ""
    y = y + dy \ dx = 150
    If TicketDetail.RedFlag = 1 Let temp$ = "Mat. Price:" Else Let temp$ = "Price:"
    If gbl.MultiCurrency$ = "Y" And TicketHeader.FundsType$ <> gbl.BranchFundsType$
      temp$ = temp$ + " (" + GetCurrencyCode$(TicketHeader.FundsType$) + ")"
    End If 
    Print #chwin1;PChr$(113,x0,y,x1,y + 14,temp$);'WCLABEL';
    Print #chwin1;PChr$(13,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
    Print #chwin1;'13WCSELECT WCRESETCOLOR';"$";Trim$(TicketDetail.Price Using "---,---,--#.###");'0WCSELECT';
    x = x1 + dx + 5 \ dx = 240
    Print #chwin1;PChr$(14,x,y,x + dx,y + 14,"",0);'WCTEXT';
    Print #chwin1;'14WCSELECT WCRESETCOLOR';UMDesc$(ch_110Aro,TicketDetail.PriceUM$);'0WCSELECT';
    If EditPrice$ = "Y" Or EditPrice$ = "P" Or (EditPrice$ = "PEDDLER" And TicketHeader.EntityNo$[1,3] = "CP0")
      x = x + dx + 5
      Print #chwin1;PChr$(33,x,y - 5,x + bw,y + 20,"Edit",2);'WCBUTTON';
      x = x + bw + 5
      Print #chwin1;PChr$(34,x,y - 5,x + bw,y + 20,"Change\15\UM",2);'WCBUTTON';
    End If 
  End If 
  y = y + dy + 5 \ dx = 120
  Print #chwin1;'8FONTSIZE WCSETFONT';
  x = x1
  Print #chwin1;PChr$(415,x,y - 9,x + dx,y,"Source (" + DisplayUM$ + ")");'WCLABEL';
  x = x + dx + 5
  Print #chwin1;PChr$(416,x,y - 9,x + dx,y,"Weight (" + DisplayUM$ + ")");'WCLABEL';
  x = x + dx + 5
  Print #chwin1;PChr$(417,x,y - 9,x + dx,y,"Difference (" + DisplayUM$ + ")");'WCLABEL';
  Print #chwin1;'12FONTSIZE WCSETFONT';
  Print #chwin1;PChr$(115,x0,y,x1,y + 14,"Gross Weight:");'WCLABEL';
  If TicketHeader.OriginWtSrc$ = "INYARD" Or TicketHeader.OriginWtSrc$ = "SCALE"
    Print #chwin1;PChr$(215,x1,y,x1 + dx,y + 14,"",6);'WCNUMBER';
    Print #chwin1;PChr$(215,1,'F20');'WCACTION';
    Print #chwin1;'215WCSELECT WCRESETCOLOR';
    If TicketHeader.OriginGrossWt Print #chwin1;Str$(TicketHeader.OriginGrossWt);
    Print #chwin1;'0WCSELECT';
  Else 
    Print #chwin1;PChr$(215,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
    If TicketHeader.OriginNetWt Print #chwin1;'215WCSELECT CU';Str$(TicketHeader.OriginGrossWt);'0WCSELECT';
  End If 
  x = x1 + dx + 5
  Print #chwin1;PChr$(15,x,y,x + dx,y + 14,"",0);'WCTEXT 15WCSELECT WCRESETCOLOR 0WCSELECT';
  x = x + dx + 5
  Print #chwin1;PChr$(315,x,y,x + dx,y + 14,"",0);'WCTEXT';
  x = x + dx + 5
  If WeightMode$ <> "O" And NumScales > 0
    Print #chwin1;PChr$(35,x,y - 5,x + bw,y + 20,"Read",2);'WCBUTTON';
    If DisableManualWt$ <> "Y" Or TicketNo$[1,1] = "M"
      x = x + bw + 5
      Print #chwin1;PChr$(36,x,y - 5,x + bw,y + 20,"Manual",2);'WCBUTTON';
    End If 
    If AllowSplitWt$ = "Y"
      x = x + bw + 5
      Print #chwin1;PChr$(51,x,y - 5,x + bw / 2,y + 20,"+",2);'WCBUTTON';
    End If 
  End If 
  y = y + dy
  Print #chwin1;PChr$(116,x0,y,x1,y + 14,"Tare Weight:");'WCLABEL';
  If TicketHeader.OriginWtSrc$ = "INYARD" Or TicketHeader.OriginWtSrc$ = "SCALE"
    Print #chwin1;PChr$(216,x1,y,x1 + dx,y + 14,"",6);'WCNUMBER';
    Print #chwin1;PChr$(216,1,'F20');'WCACTION';
    Print #chwin1;'216WCSELECT WCRESETCOLOR';
    If TicketHeader.OriginTareWt Print #chwin1;Str$(TicketHeader.OriginTareWt);
    Print #chwin1;'0WCSELECT';
  Else 
    Print #chwin1;PChr$(216,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
    If TicketHeader.OriginNetWt Print #chwin1;'216WCSELECT CU';Str$(TicketHeader.OriginTareWt);'0WCSELECT';
  End If 
  x = x1 + dx + 5
  Print #chwin1;PChr$(16,x,y,x + dx,y + 14,"",0);'WCTEXT 16WCSELECT WCRESETCOLOR 0WCSELECT';
  x = x + dx + 5
  Print #chwin1;PChr$(316,x,y,x + dx,y + 14,"",0);'WCTEXT';
  x = x + dx + 5
  If WeightMode$ <> "I" And NumScales > 0
    Print #chwin1;PChr$(37,x,y - 5,x + bw,y + 20,"Read",2);'WCBUTTON';
    x = x + bw + 5
    If DisableManualWt$ <> "Y" Or TicketNo$[1,1] = "M"
      Print #chwin1;PChr$(38,x,y - 5,x + bw,y + 20,"Manual",2);'WCBUTTON';
      x = x + bw + 5
    End If 
    If AllowSplitWt$ = "Y"
      Print #chwin1;PChr$(52,x,y - 5,x + bw / 2,y + 20,"+",2);'WCBUTTON';
      x = x + bw / 2 + 5
    End If 
  End If 
  If Dirt$ <> "Y" And Supplier.UseAutoTare$ = "Y"
    Call GetAutoTare(num,status)
    If status = 0
      Print #chwin1;PChr$(54,x,y - 5,x + bw,y + 20,"Auto Tare",2);'WCBUTTON';
      x = x + bw + 5
    End If 
  End If 
  y = y + dy
  Print #chwin1;PChr$(117,x0,y,x1,y + 14,"Net Weight:");'WCLABEL';
  Print #chwin1;PChr$(217,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  If TicketHeader.OriginNetWt Or TicketHeader.OriginWtSrc$ = "INYARD" Or TicketHeader.OriginWtSrc$ = "SCALE" Print #chwin1;'217WCSELECT CU';Str$(TicketHeader.OriginNetWt);'0WCSELECT';
  x = x1 + dx + 5
  Print #chwin1;PChr$(17,x,y,x + dx,y + 14,"",0);'WCTEXT 17WCSELECT WCRESETCOLOR 0WCSELECT';
  x = x + dx + 5
  Print #chwin1;PChr$(317,x,y,x + dx,y + 14,"",0);'WCTEXT';
  y = y + dy
  Print #chwin1;PChr$(118,x0,y,x1,y + 14,"Adjustment:");'WCLABEL';
  Print #chwin1;PChr$(218,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  !  if TicketHeader.OriginNetWt OR TicketHeader.OriginWtSrc$="INYARD" print #chwin1;'218WCSELECT CU';Str$(Source.AdjWT);'0WCSELECT';
  x = x1 + dx + 5
  Print #chwin1;PChr$(18,x,y,x + dx,y + 14,"",0);'WCTEXT 18WCSELECT WCRESETCOLOR 0WCSELECT';
  x = x + dx + 5
  Print #chwin1;PChr$(318,x,y,x + dx,y + 14,"",0);'WCTEXT';
  If AllowAdjustment$ = "Y"
    x = x + dx + 5
    !    print #chwin1;PChr$(39,x,y-5,x+bw,y+20,"Read",2);'WCBUTTON';
    !    x=x+bw+5
    Print #chwin1;PChr$(40,x,y - 5,x + bw,y + 20,"Manual",2);'WCBUTTON';
    x = x + bw + 5
    Print #chwin1;PChr$(41,x,y - 5,x + bw / 2,y + 20,"%",2);'WCBUTTON';
  End If 
  y = y + dy \ dx = 200
  Print #chwin1;PChr$(119,x0,y,x1,y + 14,"Adj Code:");'WCLABEL';
  Print #chwin1;PChr$(219,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  !  if Trim$(Source.AdjCode$) print #chwin1;'219WCSELECT CU';SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",Source.AdjCode$);'0WCSELECT';
  x = x1 + dx + 5
  Print #chwin1;PChr$(19,x,y,x + dx,y + 14,"",0);'WCTEXT 19WCSELECT WCRESETCOLOR 0WCSELECT';
  x = x + dx + 5
  If AllowAdjustment$ = "Y" Print #chwin1;PChr$(42,x,y - 5,x + bw,y + 20,"Select",1);'WCBUTTON';
  If NumScales = 0 Or DefScale = 0
    Print #chwin1;'35WCDISABLE 37WCDISABLE'; ! 39WCDISABLE';
  Else If DefScale
    If ScaleIndicators$[ReadScale,ReadScale] = " "
      Print #chwin1;'35WCDISABLE 37WCDISABLE'; ! 39WCDISABLE';
    End If 
  End If 
  If ItemNo And ItemNo = ItemCount And ItemCount <> 1
    Print #chwin1;PChr$(1,290,ysize - 30,390,ysize - 5,"&Submit",2);'WCBUTTON';
    Print #chwin1;PChr$(3,420,ysize - 30,520,ysize - 5,"&Delete",2);'WCBUTTON';
  Else 
    Print #chwin1;PChr$(1,350,ysize - 30,450,ysize - 5,"&Submit",2);'WCBUTTON';
  End If 
  Print #chwin1;PChr$(50,690,ysize - 30,790,ysize - 5,"&Cancel",2);'WCBUTTON';
  xWM = 10 \ yWM = ysize - 15
  Print #chwin1;'8FONTSIZE';@xWM,yWM;"On Duty:  ";WMName$;'12FONTSIZE';
  Print #chwin1;'0WCFOCUS';
End Sub 
Sub PurchaseItemDetailWindow(ItemNo,WeightMode$)
  If TicketHeader.TktMode$ = "T"
    Call TransferItemDetailWindow(ItemNo,WeightMode$)
    Exit Sub 
  End If 
  temp$ = ""
  If Dirt$ = "Y"
    If WeightMode$ = "I"
      temp$ = "Weigh Out Dirt"
    Else If WeightMode$ = "O"
      temp$ = "Weigh In Dirt"
    Else If WeightMode$ = "E"
      temp$ = "Edit Dirt"
    End If 
  Else 
    If WeightMode$ = "I"
      temp$ = "Weigh In"
      If Dirt$ = "Y" Let WeightMode$ = "O"
    Else If WeightMode$ = "O"
      temp$ = "Weigh Out"
      If Dirt$ = "Y" Let WeightMode$ = "I"
    Else If WeightMode$ = "E"
      temp$ = "Edit"
    End If 
  End If 
  temp$ = temp$ + " Item on Ticket No. " + TicketHeader.TicketNo$ + ", ID=" + TicketHeader.InYardID$
  temp$ = temp$ + Rep$(" ",10) + NTEPCert$
  If TicketDetail.RedFlag = 0
    ysize = 335
    y = 10 \ dy = 28 \ dx = 50
  Else If TicketDetail.RedFlag = 1 ! By Weight
    ysize = 340
    y = 10 \ dy = 28 \ dx = 50
  Else If TicketDetail.RedFlag = 2 ! By Count
    !  Call PurchaseItemCountWindow(ItemNo)
    Call SAITouchWarning("Materials by Count are not valid at the Truck Scale.")
    Exit Sub 
  End If 
  If (DisplayPrice$ <> "Y" And DisplayPrice$ <> "P") Or Supplier.PrintPriceAtScale$ Let ysize = ysize - dy
  If TicketHeader.Noticed
    Call NoticedPurchaseDetailWindow(ItemNo,WeightMode$)
    Exit Sub 
  End If 
  chwin1 = SAIOpenWindow("PURCHASE:  " + temp$,850,ysize,1)
  Print #chwin1;PChr$(bgcolor1);'BACKCOLOR CS WCSETCOLOR';
  Print #chwin1;PChr$("Arial");'FONTFACE 12FONTSIZE EBOLD WCSETFONT';
  x0 = 10 \ x1 = 180 \ bw = 100
  Call DrawScaleSelection(chwin1)
  y = y + dy - 2
  Print #chwin1;PChr$(108,x0,y,x1,y + 14,"Supplier:");'WCLABEL';
  Print #chwin1;PChr$(8,x1,y,x1 + 600,y + 14,"",0);'WCTEXT';
  Print #chwin1;'8WCSELECT';TicketHeader.EntityNo$ + ": " + TicketHeader.Name$;'0WCSELECT';
  y = y + 22 \ dx = 200
  Print #chwin1;PChr$(109,x0,y,x1,y + 14,"Purchase Order:");'WCLABEL';
  Print #chwin1;PChr$(9,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  If TicketHeader.OrderNo$
    Print #chwin1;'9WCSELECT';
    If TicketHeader.OrderNo$ = "UNKNOWN"
      Print #chwin1;"UNKNOWN";
    Else If TicketHeader.OrderLine$ = "00"
      Print #chwin1;TicketHeader.OrderNo$;"-";TicketDetail.DetailOrderLine$;'0WCSELECT';
      If TicketDetail.DetailOrderLine$ <> "00" ! Don't allow change on *MIX (only on a *MULT)
        Print #chwin1;PChr$(29,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Change",2);'WCBUTTON';
      End If 
    Else 
      Print #chwin1;TicketHeader.OrderNo$;"-";TicketHeader.OrderLine$;
    End If 
    Print #chwin1;'0WCSELECT';
  End If 
  y = y + dy \ dx = 150
  Print #chwin1;PChr$(110,x0,y,x1,y + 14,"Material Code:");'WCLABEL';
  Print #chwin1;PChr$(10,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chwin1;'10WCSELECT WCRESETCOLOR';Trim$(TicketDetail.MaterialCode$);'0WCSELECT';
  If (Trim$(TicketHeader.OrderNo$) = "" Or AllowMaterialChange$ = "Y") And TicketHeader.TktType$ <> "R"
    If TicketHeader.OrderNo$ And TicketDetail.DetailOrderLine$ = "00"
      ! Do not allow change
    Else 
      Print #chwin1;PChr$(30,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Change",2);'WCBUTTON';
    End If 
  End If 
  If ScrapSRecord$[130,130] = "Y"
    Print #chwin1;PChr$(111,500,y,610,y + 14,"Stock Pile:");'WCLABEL';
    Print #chwin1;PChr$(11,610,y,680,y + 14,"",0);'WCTEXT 11WCSELECT WCRESETCOLOR 0WCSELECT';
    Print #chwin1;PChr$(31,685,y - 5,785,y + 20,"Change",2);'WCBUTTON';
    If TicketDetail.StkPileReq
      Print #chwin1;'11WCSELECT';Trim$(TicketDetail.StockPile$);'0WCSELECT';
    Else 
      Print #chwin1;'111WCDISABLE 11WCDISABLE 31WCDISABLE';
    End If 
  End If 
  y = y + dy \ dx = 500
  Print #chwin1;PChr$(112,x0,y,x1,y + 14,"Material Desc:");'WCLABEL';
  DisableMatDesc = 0
  If EditMaterialDesc$ <> "Y" Let DisableMatDesc = 1
  If DisableMatDesc = 0
    !    print #chwin1;PChr$(12,x1,y-1,x1+dx,y+15,"",2,30);'WCSTRING';
    Print #chwin1;PChr$(12,x1,y - 5,x1 + dx,y + 11,"",2,30);'WCSTRING';
    Print #chwin1;'12WCSELECT WCRESETCOLOR';Trim$(TicketDetail.MaterialDesc$);'0WCSELECT';
    Print #chwin1;PChr$(32,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Keyboard",2);'WCBUTTON';
  Else 
    !    print #chwin1;PChr$(12,x1,y,x1+dx,y+14,"",0);'WCTEXT';
    Print #chwin1;PChr$(12,x1,y - 5,x1 + dx,y + 9,"",0);'WCTEXT';
    Print #chwin1;'12WCSELECT WCRESETCOLOR';Trim$(TicketDetail.MaterialDesc$);'0WCSELECT';
  End If 
  Print #chwin1;'8FONTSIZE WCSETFONT';
  Print #chwin1;PChr$(212,x1,y + 11,x1 + dx,y + 21,"",0);'WCTEXT';
  Print #chwin1;'12FONTSIZE WCSETFONT';
  Call DisplayMaterialComments()
  If (DisplayPrice$ = "Y" Or DisplayPrice$ = "P") And Supplier.PrintPriceAtScale$ = ""
    y = y + dy \ dx = 150
    If TicketDetail.RedFlag = 1 Let temp$ = "Mat. Price:" Else Let temp$ = "Price:"
    If gbl.MultiCurrency$ = "Y" And TicketHeader.FundsType$ <> gbl.BranchFundsType$
      temp$ = temp$ + " (" + GetCurrencyCode$(TicketHeader.FundsType$) + ")"
    End If 
    Print #chwin1;PChr$(113,x0,y,x1,y + 14,temp$);'WCLABEL';
    Print #chwin1;PChr$(13,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
    Print #chwin1;'13WCSELECT WCRESETCOLOR';"$";Trim$(TicketDetail.Price Using "---,---,--#.###");'0WCSELECT';
    x = x1 + dx + 5 \ dx = 240
    Print #chwin1;PChr$(14,x,y,x + dx,y + 14,"",0);'WCTEXT';
    Print #chwin1;'14WCSELECT WCRESETCOLOR';UMDesc$(ch_110Aro,TicketDetail.PriceUM$);'0WCSELECT';
    If EditPrice$ = "Y" Or EditPrice$ = "P" Or (EditPrice$ = "PEDDLER" And TicketHeader.EntityNo$[1,3] = "CP0")
      If TicketHeader.OrderNo$ And TicketHeader.OrderNo$ <> "UNKNOWN" And (PODetail$[47,47] <> " " And PODetail$[204,204] <> "Y") ! Estimated, not price file
        ! Don't edit price
      Else 
        x = x + dx + 5
        Print #chwin1;PChr$(33,x,y - 5,x + bw,y + 20,"Edit",2);'WCBUTTON';
        x = x + bw + 5
        Print #chwin1;PChr$(34,x,y - 5,x + bw,y + 20,"Change\15\UM",2);'WCBUTTON';
      End If 
    End If 
  End If 
  y = y + dy \ dx = 150
  Print #chwin1;PChr$(115,x0,y,x1,y + 14,"Gross Weight:");'WCLABEL';
  Print #chwin1;PChr$(15,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chwin1;'15WCSELECT WCRESETCOLOR 0WCSELECT';
  x = x1 + dx + 5 \ dx = 50
  Print #chwin1;PChr$(215,x,y,x + dx,y + 14,"",0);'WCTEXT';
  Print #chwin1;'215WCSELECT WCRESETCOLOR';DisplayUM$;'0WCSELECT';
  If WeightMode$ <> "O" And ItemCount < 2 And NumScales > 0
    x = x + dx + 5
    Print #chwin1;PChr$(35,x,y - 5,x + bw,y + 20,"Read",2);'WCBUTTON';
    If DisableManualWt$ <> "Y" Or TicketNo$[1,1] = "M" Or (Dirt$ = "Y" And AllowDirtManualWt$ = "Y")
      x = x + bw + 5
      Print #chwin1;PChr$(36,x,y - 5,x + bw,y + 20,"Manual",2);'WCBUTTON';
    End If 
    If AllowSplitWt$ = "Y"
      x = x + bw + 5
      Print #chwin1;PChr$(51,x,y - 5,x + bw / 2,y + 20,"+",2);'WCBUTTON';
    End If 
  End If 
  y = y + dy \ dx = 150
  Print #chwin1;PChr$(116,x0,y,x1,y + 14,"Tare Weight:");'WCLABEL';
  Print #chwin1;PChr$(16,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chwin1;'16WCSELECT WCRESETCOLOR 0WCSELECT';
  x = x1 + dx + 5 \ dx = 50
  Print #chwin1;PChr$(216,x,y,x + dx,y + 14,"",0);'WCTEXT';
  Print #chwin1;'216WCSELECT WCRESETCOLOR';DisplayUM$;'0WCSELECT';
  x = x + dx + 5
  If (WeightMode$ <> "I" Or TicketHeader.VehType$ = "B") And NumScales > 0
    If ItemNo = 0 Or ItemNo = ItemCount
      Print #chwin1;PChr$(37,x,y - 5,x + bw,y + 20,"Read",2);'WCBUTTON';
      x = x + bw + 5
      If DisableManualWt$ <> "Y" Or TicketNo$[1,1] = "M" Or (Dirt$ = "Y" And (AllowDirtManualWt$ = "Y" Or AllowDirtManualWt$ = "T"))
        Print #chwin1;PChr$(38,x,y - 5,x + bw,y + 20,"Manual",2);'WCBUTTON';
        x = x + bw + 5
      End If 
      If AllowSplitWt$ = "Y"
        Print #chwin1;PChr$(52,x,y - 5,x + bw / 2,y + 20,"+",2);'WCBUTTON';
        x = x + bw / 2 + 5
      End If 
    End If 
  End If 
  If Dirt$ <> "Y" And Supplier.UseAutoTare$ = "Y"
    Call GetAutoTare(num,status)
    If status = 0
      Print #chwin1;PChr$(54,x,y - 5,x + bw,y + 20,"Auto Tare",2);'WCBUTTON';
      x = x + bw + 5
    End If 
  End If 
  If ItemNo = 0 And ItemCount And AllowItemSplit$ = "Y"
    x = x + 20
    Print #chwin1;PChr$(55,x,y - 5,x + bw,y + 20,"Split Item",2);'WCBUTTON';
  End If 
  y = y + dy \ dx = 150
  Print #chwin1;PChr$(117,x0,y,x1,y + 14,"Net Weight:");'WCLABEL';
  Print #chwin1;PChr$(17,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chwin1;'17WCSELECT WCRESETCOLOR 0WCSELECT';
  x = x1 + dx + 5 \ dx = 50
  Print #chwin1;PChr$(217,x,y,x + dx,y + 14,"",0);'WCTEXT';
  Print #chwin1;'217WCSELECT WCRESETCOLOR';DisplayUM$;'0WCSELECT';
  If ScaleCodes$[67,67] = "Y" ! Car Bodies
    x = x + dx + 105 \ dx = 120
    Print #chwin1;PChr$(120,x,y,x + dx,y + 14,"Car Bodies:");'WCLABEL';
    x = x + dx + 10 \ dx = 60
    Print #chwin1;PChr$(20,x,y,x + dx,y + 14,"",0);'WCTEXT';
    Print #chwin1;'20WCSELECT WCRESETCOLOR';Str$(TicketDetail.CarBodies);'0WCSELECT';
    x = x + dx + 5
    Print #chwin1;PChr$(43,x,y - 5,x + bw,y + 20,"Change",2);'WCBUTTON';
  End If 
  y = y + dy \ dx = 150
  Print #chwin1;PChr$(118,x0,y,x1,y + 14,"Adjustment:");'WCLABEL';
  Print #chwin1;PChr$(18,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chwin1;'18WCSELECT WCRESETCOLOR 0WCSELECT';
  x = x1 + dx + 5 \ dx = 50
  Print #chwin1;PChr$(218,x,y,x + dx,y + 14,"",0);'WCTEXT';
  Print #chwin1;'218WCSELECT WCRESETCOLOR';DisplayUM$;'0WCSELECT';
  If AllowAdjustment$ = "Y"
    x = x + dx + 5
    !    print #chwin1;PChr$(39,x,y-5,x+bw,y+20,"Read",2);'WCBUTTON';
    !    x=x+bw+5
    Print #chwin1;PChr$(40,x,y - 5,x + bw,y + 20,"Manual",2);'WCBUTTON';
    x = x + bw + 5
    Print #chwin1;PChr$(41,x,y - 5,x + bw / 2,y + 20,"%",2);'WCBUTTON';
  End If 
  y = y + dy \ dx = 305
  Print #chwin1;PChr$(119,x0,y,x1,y + 14,"Adj Code:");'WCLABEL';
  Print #chwin1;PChr$(19,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chwin1;'19WCSELECT WCRESETCOLOR 0WCSELECT';
  If AllowAdjustment$ = "Y" Print #chwin1;PChr$(42,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Select",1);'WCBUTTON';
  If ReadScale = 0
    Print #chwin1;PChr$(35,38);'WCDISABLE';PChr$(51,52);'WCDISABLE'; !'35WCDISABLE 37WCDISABLE 39WCDISABLE';
  Else 
    If ScaleIndicators$[ReadScale,ReadScale] = " "
      Print #chwin1;'35WCDISABLE 37WCDISABLE'; ! 39WCDISABLE';
    End If 
  End If 
  If ItemNo And ItemNo = ItemCount And ItemCount <> 1
    Print #chwin1;PChr$(1,290,ysize - 30,390,ysize - 5,"&Submit",2);'WCBUTTON';
    Print #chwin1;PChr$(3,420,ysize - 30,520,ysize - 5,"&Delete",2);'WCBUTTON';
  Else 
    Print #chwin1;PChr$(1,350,ysize - 30,450,ysize - 5,"&Submit",2);'WCBUTTON';
    !    print #chwin1;PChr$(2,420,ysize-30,520,ysize-5,"&Another",2);'WCBUTTON';
  End If 
  Print #chwin1;PChr$(50,690,ysize - 30,790,ysize - 5,"&Cancel",2);'WCBUTTON';
  xWM = 10 \ yWM = ysize - 15
  Print #chwin1;'8FONTSIZE';@xWM,yWM;"On Duty:  ";WMName$;'12FONTSIZE';
  Print #chwin1;'0WCFOCUS';
End Sub 
Sub UpdateInYardInUse(status)
  SQL$ = "UPDATE InYard_Hdr SET "
  SQL$ = SQL$ + "InUse=" + SQLV$(TicketHeader.InUse)
  SQL$ = SQL$ + ",InUseBy=" + SQLV$(TicketHeader.InUseBy$)
  SQL$ = SQL$ + ",InUsePort=" + SQLV$(TicketHeader.InUsePort$)
  SQL$ = SQL$ + " WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$)
  Try 
    Search #ch_db;SQL$
    If Chf(ch_db) = 1
      status = 0
    Else 
      status = 1
      Call SAITouchWarning("Unable to locate Ticket No. " + TicketHeader.TicketNo$ + " in In-Yard table.")
    End If 
  Else 
    status = 1
    errmess$ = "Error updating Ticket No. " + TicketHeader.TicketNo$ + " in In-Yard table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10))
    Call WriteLogFile(errmess$)
    Call SAITouchError(errmess$)
  End Try 
End Sub 
Sub UpdateInYard(stat)
  count = 0
  Try 
    Search #ch_db;"UPDATE InYard_Hdr SET " + SQLNV$(TicketHeader.) + " WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$)
    If Chf(ch_db) = 0
      Call SAITouchError("Unable to update InYard_Hdr table for TicketNo=" + TicketHeader.TicketNo$)
      stat = 1
    Else 
      stat = 0
    End If 
  Else 
    If count = 0
      count = 1
      Try Close #ch_db Else Rem
      Call SAIOpenDatabase(ch_db,e,errmess$)
      If e = 0
        DBConnectionTime# = Tim#(0)
        Call WriteLogFile("Database connection re-established in UpdateInYard routine.")
        Retry 
      Else 
        Call WriteLogFile("Database connection COULD NOT be re-established in UpdateInYard routine.")
        Call SAITouchError("Unable to access database.  Ticket cannot be updated.")
        DBConnectionTime# = Tim#(0) - 36000 ! Force a re-open in main loop
        stat = 1
      End If 
    Else 
      Call SAITouchError("Error updating entry in InYard_Hdr table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
      stat = 1
    End If 
  End Try 
End Sub 
Sub CheckPriceLimits(stat)
  stat = 0
  k$ = "U" + SAISpaceFill$(TicketDetail.PriceUM$,2)
  Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
  If stat
    Call SAITouchWarning("Unable to obtain Unit of Measure record for this item.\15\" + errmess$)
  Else 
    If ScrapCode[5] And Abs(TicketDetail.Price) > ScrapCode[5]
      Call SAITouchWarning("Price entered exceeds maximum price allowed for this unit of measure.")
      stat = 1
    End If 
  End If 
  If stat Exit Sub 
  Call GetMaterialPrice(TicketDetail.MaterialCode$,status)
  If status = 0 And Material.PriceTolerance
    If Trim$(TicketHeader.OrderNo$) And Trim$(TicketHeader.OrderNo$) <> "UNKNOWN"
      If TicketHeader.OrderLine$ = "00" ! Get Contract Line
        k$ = SAISpaceFill$(TicketHeader.EntityNo$,6) + SAIFill$(TicketHeader.OrderNo$,"R"," ",10) + SAISpaceFill$(TicketDetail.DetailOrderLine$,2)
        Call SAIGetRecord(ch_1210ro,recdef_1210.,k$,1,"Y","U",r,PODetail$,PODetail[],e,errmess$)
      End If 
      If PODetail$[204,204] <> "Y" And PODetail[2] <> 0
        If Material.PriceUM$ <> Trim$(PODetail$[42,43])
          cf = SAIUMConvFactor(ch_110Aro,PODetail$[42,43],Material.PriceUM$)
          If cf Let Material.Price = PODetail[2] / cf
        Else 
          Material.Price = PODetail[2]
        End If 
      End If 
    End If 
    If Material.PriceToleranceType$ = "$"
      ! Material.PriceTolerance Already Set In  GetMaterialPrice(), if dollars
    Else 
      Material.PriceTolerance = Material.Price * Material.PriceTolerance / 100 ! Convert from % to a number
    End If 
    If TicketDetail.PriceUM$ <> Material.PriceUM$
      cf = SAIUMConvFactor(ch_110Aro,Material.PriceUM$,TicketDetail.PriceUM$)
      If cf
        Material.Price = Material.Price / cf
        Material.PriceTolerance = Material.PriceTolerance / cf
      Else 
        Material.PriceTolerance = 0
      End If 
    End If 
    If Material.PriceTolerance !AND Material.Price
      If TicketDetail.Price > Material.Price + Material.PriceTolerance
        If PriceToleranceAction$ = "P" And (EditPrice$ = "Y" Or EditPrice$ = "P" Or (EditPrice$ = "PEDDLER" And TicketHeader.EntityNo$[1,3] = "CP0")) ! Prevent
          errmess$ = "Price Tolerance Exceeded.\15\Maximum allowable price = " + Trim$(Material.Price + Material.PriceTolerance Using "--,---,--#.####") + " / " + TicketDetail.PriceUM$
          Call SAITouchWarning(errmess$)
          stat = 1
        Else ! Warn
          ans = SAITouchConfirm("Price Tolerance Exceeded. Please confirm.")
          If ans = 0 Let stat = 1
        End If 
      End If 
    End If 
  End If 
End Sub 
Sub SubmitPurchaseItem(stat)
  stat = 0
  If DisableMatDesc = 0
    w$ = Trim$(SAIQuery$(chwin1,12))
    If w$ = ""
      Call SAITouchWarning("You must enter a Material Description.")
      stat = 1
      Exit Sub 
    Else 
      If w$ <> Trim$(TicketDetail.MaterialDesc$)
        TicketDetail.MaterialDesc$ = w$
        TicketDetail.MatDescChg = 1
      End If 
    End If 
  End If 
  If TicketDetail.AdjWt <> 0 And Trim$(TicketDetail.AdjCode$) = ""
    Call SAITouchWarning("You must enter an Adjustment Code.")
    stat = 1
  Else If TicketDetail.RedFlag = 2 And TicketDetail.RedCount = 0
    Call SAITouchWarning("You cannot submit an item with a zero count!")
    stat = 1
  Else If TicketDetail.NetWt < 0 And TicketDetail.RedFlag <> 2
    Call SAITouchWarning("Net Weight cannot be negative!")
    stat = 1
  Else If TicketDetail.NetWt + TicketDetail.AdjWt < 0 And TicketDetail.RedFlag <> 2
    Call SAITouchWarning("Adjusted Net Weight cannot be negative!")
    stat = 1
  Else If TicketDetail.NetWt = 0 And Dirt$ <> "Y" And TicketDetail.RedFlag <> 2
    If TicketDetail.AdjWt
      Call SAITouchWarning("You cannot have an Adjustment Weight on a zero Net Weight item.")
      stat = 1
    Else 
      ans = SAITouchConfirm("Net Weight is zero!","Warning")
      If ans = 0 Let stat = 1
    End If 
  End If 
  If stat Exit Sub 
  If TicketDetail.NetWt <> 0 And Inventory$[114,114] = "C" And TicketDetail.CarBodies = 0
    Call SAITouchWarning("You must enter a Car Body count!")
    stat = 1
  Else If TicketHeader.TktMode$ <> "T" And Trim$(TicketDetail.PriceUM$) ! Check U/M Max Price and Supplier Price Tolerance
    Call CheckPriceLimits(stat)
  End If 
  If stat Exit Sub 
  If TicketHeader.Noticed And (TicketHeader.OriginWtSrc$ = "INYARD" Or TicketHeader.OriginWtSrc$ = "SCALE")
    TicketHeader.OriginGrossWt = SAIQuery$(chwin1,215)
    TicketHeader.OriginTareWt = SAIQuery$(chwin1,216)
    TicketHeader.OriginNetWt = TicketHeader.OriginGrossWt - TicketHeader.OriginTareWt
    If TicketHeader.OriginGrossWt < 0 Let stat = 1
    If TicketHeader.OriginTareWt < 0 Let stat = 1
    If TicketHeader.OriginNetWt < 0 Let stat = 1
    If stat
      Call SAITouchWarning("Source Weights cannot be negative!")
    Else 
      Call UpdateInYard(stat)
    End If 
  End If 
  If stat Exit Sub 
  If TicketDetail.OrigMaterialCode$ = "" Let TicketDetail.OrigMaterialCode$ = TicketDetail.MaterialCode$
  If ItemNo = 0 ! Add Item
    AddNewItem = 1
    ItemCount = ItemCount + 1
    ItemNo = ItemCount
    TicketDetail.ItemNo = ItemNo
    Items.[ItemNo] = TicketDetail.
    Try 
      Search #ch_db;"INSERT INTO InYard_Dtl (" + SQLN$(TicketDetail.) + ") VALUES (" + SQLV$(TicketDetail.) + ")"
    Else 
      errmess$ = "Error creating item number " + Str$(ItemNo) + " in InYard_Dtl table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10))
      Call WriteLogFile(errmess$)
      Call SAITouchError(errmess$)
      stat = 1
      Exit Sub 
    End Try 
  Else ! Edit Item
    AddNewItem = 0
    Items.[ItemNo] = TicketDetail.
    Try 
      Search #ch_db;"UPDATE InYard_Dtl SET " + SQLNV$(TicketDetail.) + " WHERE TicketNo=" + SQLV$(TicketDetail.TicketNo$) + " AND ItemNo=" + SQLV$(TicketDetail.ItemNo)
    Else 
      errmess$ = "Error updating item number " + Str$(ItemNo) + " in InYard_Dtl table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10))
      Call WriteLogFile(errmess$)
      Call SAITouchError(errmess$)
    End Try 
  End If 
  If TicketAudit
    Call LoadTicketAudit()
    If AddNewItem
      TicketAudit.Event$ = "Item Added"
    Else 
      TicketAudit.Event$ = "Item Edited"
    End If 
    Call WriteTicketAudit()
  End If 
  stat = 0
End Sub 
Sub SplitItem(stat)
  !  Check Material Description
  If DisableMatDesc = 0
    w$ = Trim$(SAIQuery$(chwin1,12))
    If w$ = ""
      Call SAITouchWarning("You must enter a Material Description.")
      stat = 1
      Exit Sub 
    End If 
  End If 
  !  Check Price Tolerances
  If Trim$(TicketDetail.PriceUM$) ! Check U/M Max Price and Supplier Price Tolerance
    Call CheckPriceLimits(stat)
    If stat Exit Sub 
  End If 
  chwin2 = SAIOpenWindow("PURCHASE:  Split Item on Ticket No. " + TicketHeader.TicketNo$ + ", ID=" + TicketHeader.InYardID$,850,200,1)
  Print #chwin2;PChr$(bgcolor1);'BACKCOLOR CS WCSETCOLOR';
  Print #chwin2;PChr$("Arial");'FONTFACE 12FONTSIZE EBOLD WCSETFONT';
  Clear Items.[0]
  TicketDetailTmp. = TicketDetail.
  Items.[0].NetWt = Items.[1].GrossWt - Items.[ItemCount].TareWt + Items.[1].AdjWt
  x0 = 10 \ x1 = 200 \ bw = 100 \ dy = 28
  y = 10 \ dx = 150
  Print #chwin2;PChr$(110,x0,y,x1,y + 14,"Overall Net Weight:");'WCLABEL';
  Print #chwin2;PChr$(10,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chwin2;'10WCSELECT WCRESETCOLOR';Str$(Items.[0].NetWt);'0WCSELECT';
  x = x1 + dx + 5 \ dx = 50
  Print #chwin2;PChr$(210,x,y,x + dx,y + 14,"",0);'WCTEXT';
  Print #chwin2;'210WCSELECT WCRESETCOLOR';DisplayUM$;'0WCSELECT';
  y = y + dy \ dx = 500
  Print #chwin2;PChr$(111,x0,y,x1,y + 14,"New Material:");'WCLABEL';
  Print #chwin2;PChr$(11,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chwin2;'11WCSELECT WCRESETCOLOR';Trim$(TicketDetail.MaterialCode$ + ": " + TicketDetail.MaterialDesc$);'0WCSELECT';
  y = y + dy \ dx = 150
  Print #chwin2;PChr$(112,x0,y,x1,y + 14,"New Item Weight:");'WCLABEL';
  Print #chwin2;PChr$(12,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chwin2;'12WCSELECT WCRESETCOLOR 0WCSELECT';
  x = x1 + dx + 5 \ dx = 50
  Print #chwin2;PChr$(212,x,y,x + dx,y + 14,"",0);'WCTEXT';
  Print #chwin2;'212WCSELECT WCRESETCOLOR';DisplayUM$;'0WCSELECT';
  x = x + dx + 5
  Print #chwin2;PChr$(40,x,y - 5,x + bw,y + 20,"Manual",2);'WCBUTTON';
  x = x + bw + 5
  Print #chwin2;PChr$(41,x,y - 5,x + bw / 2,y + 20,"%",2);'WCBUTTON';
  y = 160
  Print #chwin2;PChr$(1,350,y,450,y + 25,"&Submit",2);'WCBUTTON';
  Print #chwin2;PChr$(2,690,y,790,y + 25,"&Cancel",2);'WCBUTTON';
  Do 
    Print #chwin2;'0WCFOCUS';
    Input #chwin2; Len (1);w$
    Select Case w$
      Case 'F1' ! Submit
        If Items.[0].AdjWt > 0
          TicketDetail.NetWt = Items.[0].AdjWt
          TicketDetail.TareWt = Items.[ItemCount].TareWt
          TicketDetail.TareWtTime# = Items.[ItemCount].TareWtTime#
          TicketDetail.TareWtScale$ = Items.[ItemCount].TareWtScale$
          TicketDetail.TareWtWM$ = Items.[ItemCount].TareWtWM$
          TicketDetail.TareWt_BGRead = Items.[ItemCount].TareWt_BGRead
          TicketDetail.TareWt_BGStatus = Items.[ItemCount].TareWt_BGStatus
          TicketDetail.GrossWt = TicketDetail.TareWt + TicketDetail.NetWt
          TicketDetail.GrossWtTime# = Tim#(0)
          TicketDetail.GrossWtScale$ = "M"
          TicketDetail.GrossWtWM$ = WeighMaster$
          TicketDetail.GrossWt_BGRead = 0
          TicketDetail.GrossWt_BGStatus = 0
          TicketDetail.AdjWt = 0
          TicketDetail.AdjPercent = 0
          TicketDetail.AdjCode$ = ""
          Call CalcExtPrice()
          Items.[ItemCount + 1] = TicketDetail.
          Items.[ItemCount + 1].ItemNo = ItemCount + 1
          If Trim$(Items.[ItemCount + 1].OrigMaterialCode$) = "" Let Items.[ItemCount + 1].OrigMaterialCode$ = Items.[ItemCount + 1].MaterialCode$
          Items.[1].NetWt = Items.[1].NetWt - Items.[0].AdjWt
          Items.[1].AdjPercent = 0 ! ??
          Items.[1].TareWt = Items.[1].GrossWt - Items.[1].NetWt
          Items.[1].TareWtTime# = Tim#(0)
          Items.[1].TareWtScale$ = "M"
          Items.[1].TareWtWM$ = WeighMaster$
          Items.[1].TareWt_BGRead = 0
          Items.[1].TareWt_BGStatus = 0
          If Trim$(TicketDetail.MaterialDesc$) <> Trim$(TicketDetailTmp.MaterialDesc$) Let TicketDetail.MatDescChg = 1
          TicketDetail. = Items.[1]
          Call CalcExtPrice()
          Items.[1] = TicketDetail.
          For n = 2 To ItemCount
            Items.[n].GrossWt = Items.[n - 1].TareWt
            Items.[n].GrossWtTime# = Items.[n - 1].TareWtTime#
            Items.[n].GrossWtScale$ = Items.[n - 1].TareWtScale$
            Items.[n].GrossWtWM$ = Items.[n - 1].TareWtWM$
            Items.[n].GrossWt_BGRead = 0
            Items.[n].GrossWt_BGStatus = 0
            Items.[n].TareWt = Items.[n].GrossWt - Items.[n].NetWt
            Items.[n].TareWtTime# = Tim#(0)
            Items.[n].TareWtScale$ = "M"
            Items.[n].TareWtWM$ = WeighMaster$
            Items.[n].TareWt_BGRead = 0
            Items.[n].TareWt_BGStatus = 0
            Items.[n].AdjPercent = 0 ! ??
            TicketDetail. = Items.[n]
            Call CalcExtPrice()
            Items.[n] = TicketDetail.
          Next n
          Try 
            Search #ch_db;"START TRANSACTION"
            Search #ch_db;"INSERT INTO InYard_Dtl (" + SQLN$(Items.[ItemCount + 1]) + ") VALUES (" + SQLV$(Items.[ItemCount + 1]) + ")"
            TicketDetail. = Items.[ItemCount + 1]
            ItemNo = ItemCount + 1
            Call LoadTicketAudit()
            TicketAudit.Event$ = "Item Added (Split)"
            Call WriteTicketAudit()
            For n = 1 To ItemCount
              Search #ch_db;"UPDATE InYard_Dtl SET " + SQLNV$(Items.[n]) + " WHERE TicketNo=" + SQLV$(Items.[n].TicketNo$) + " AND ItemNo=" + SQLV$(Items.[n].ItemNo)
              TicketDetail. = Items.[n]
              ItemNo = n
              Call LoadTicketAudit()
              TicketAudit.Event$ = "Item Edited (Split)"
              Call WriteTicketAudit()
            Next n
            Search #ch_db;"COMMIT"
            ItemCount = ItemCount + 1
            stat = 0
            Exit Do 
          Else 
            Search #ch_db;"ROLLBACK"
            errmess$ = "Error creating item number " + Str$(ItemCount) + " in InYard_Dtl table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10))
            Call WriteLogFile(errmess$)
            Call SAITouchError(errmess$)
            Call RetrieveInYardItems()
            TicketDetail. = TicketDetailTmp.
            ItemNo = 0
            stat = 1
            Exit Do 
          End Try 
        Else 
          Call SAITouchWarning("You must enter a New Item Weight.")
        End If 
      Case 'F2' ! Cancel
        TicketDetail. = TicketDetailTmp.
        stat = 1
        Exit Do 
      Case 'F40' ! Manual Weight Entry
        Call SAIKeyPad("Enter Weight",num,3,status)
        If status = 0
          If num < Items.[1].NetWt + Items.[1].AdjWt
            Items.[0].AdjWt = num
            Print #chwin2;'12WCSELECT CU';Str$(Items.[0].AdjWt);'0WCSELECT';
          Else 
            Call SAITouchWarning("New Item Weight cannot exceed Item 1 Adjusted Net Weight.")
          End If 
        End If 
      Case 'F41' ! Adjustment Weight Percentage
        Call SAIKeyPad("Enter Adjustment Percentage",num,1,status)
        If status = 0
          If Abs(num) < 1 Let num = num * 100
          num = Round(Items.[0].NetWt * num / 100,1)
          If num < Items.[1].NetWt + Items.[1].AdjWt
            Items.[0].AdjWt = num
            Print #chwin2;'12WCSELECT CU';Str$(Items.[0].AdjWt);'0WCSELECT';
          Else 
            Call SAITouchWarning("New Item Weight cannot exceed Item 1 Adjusted Net Weight.")
          End If 
        End If 
    End Select 
  Loop 
  Clear Items.[0],TicketDetailTmp.
  Close #chwin2
End Sub 
Sub PurchaseItem(ItemNo,WeightMode$,status)
  Try 
    If ItemNo ! Edit existing item
      TicketDetail. = Items.[ItemNo]
      If Trim$(TicketHeader.OrderNo$) And Trim$(TicketHeader.OrderNo$) <> "UNKNOWN" And Trim$(TicketDetail.MaterialCode$) = "999"
        Call MaterialSelection(SupplierNo$,Material.,Dirt$)
        If Material.MaterialCode$
          Call PopulateMaterialDetail()
        End If 
      End If 
    Else ! Add new item
PurchaseItem_new: !
      Clear TicketDetail.
      If MaterialCode$ = ""
        If Trim$(TicketHeader.OrderNo$) = "UNKNOWN"
          FullPONo$ = ""
        Else If Trim$(TicketHeader.OrderNo$)
          FullPONo$ = SAIFill$(TicketHeader.OrderNo$,"R"," ",10) + SAISpaceFill$(TicketHeader.OrderLine$,2)
        Else 
          FullPONo$ = ""
        End If 
        If FullPONo$ And TicketHeader.OrderLine$ = "00" ! Get Contract Line
          Call GetMultPOLine(FullPONo$,status)
          If status
            status = 1
            Exit Sub 
          Else 
            FullPONo$ = PODetail$[7,18]
            TicketDetail.DetailOrderLine$ = Trim$(PODetail$[17,18])
            MaterialCode$ = Trim$(PODetail$[50,57])
            If ItemCount
              For i = 1 To ItemCount
                If MaterialCode$ = Items.[i].MaterialCode$
                  MaterialCode$ = ""
                  ans = SAITouchYesNo("This Ticket already contains an item of this Material!\15\" + Rep$(" ",5) + "Do you wish to select a different P.O. Line?")
                  If ans
                    Goto PurchaseItem_new
                  Else 
                    Goto PurchaseItem_material
                  End If 
                End If 
              Next i
            End If 
            Call GetMaterialPrice(MaterialCode$,status)
            If status
              Call SAITouchWarning("No valid Pricing found for contracted material: " + MaterialCode$)
              MaterialCode$ = ""
              Clear Material.
            Else 
              If Material.StockPileFlag ! Check for StockPile
                Call SelectStockPile(Material.InventoryCode$,Material.YardCode$,Branch$,Material.StockPile$,"","R",ExitStatus)
                If ExitStatus
                  MaterialCode$ = ""
                  Clear Material.
                End If 
              End If 
              If MaterialCode$
                If PODetail$[204,204] <> "Y" ! Use contract pricing instead of price file
                  If PODetail$[47,47] <> " "
                    Material.Price = 0 ! Estimated price - zero out
                  Else 
                    Material.Price = PODetail[2]
                  End If 
                  Material.PriceUM$ = Trim$(PODetail$[42,43])
                End If 
                If Trim$(PODetail$[111,140]) Let Material.MaterialDesc$ = Trim$(PODetail$[111,140])
              End If 
            End If 
          End If 
        End If 
PurchaseItem_material: !
        If MaterialCode$ = ""
          If ItemCount And Greeter$ = "Y"
            Clear GreeterQueueItem.
            Try 
              Search #ch_db;"SELECT * FROM Greeter_Queue_Item WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$)
              If Chf(ch_db)
                Map Record #ch_db As Greeter_Queue_Item
                Read Record #ch_db;GreeterQueueItem.
                If Trim$(GreeterQueueItem.MaterialCode$) Let MaterialCode$ = GreeterQueueItem.MaterialCode$
                Try Search #ch_db;"DELETE FROM Greeter_Queue_Item WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) Else Rem
              End If 
            Else 
            End Try 
            If MaterialCode$
              Call GetMaterialPrice(MaterialCode$,status)
              If status
                Call SAITouchWarning("No valid Pricing found for Greeter selected material: " + Trim$(MaterialCode$))
                MaterialCode$ = "" \ Clear Material.
              Else 
                If GreeterQueueItem.Price And GreeterQueueItem.PriceUM$
                  Material.Price = GreeterQueueItem.Price
                  Material.PriceUM$ = SAISpaceFill$(GreeterQueueItem.PriceUM$,2)
                End If 
                If Material.StockPileFlag ! Check for StockPile
                  Do 
                    Call SelectStockPile(Material.InventoryCode$,Material.YardCode$,Branch$,Material.StockPile$,"","R",ExitStatus)
                  Loop Until ExitStatus = 0
                End If 
              End If 
            End If 
          End If 
          If MaterialCode$ = ""
            Call MaterialSelection(SupplierNo$,Material.,Dirt$)
            If Material.MaterialCode$ = ""
              If ItemCount = 0
                ans = SAITouchYesNo("Are you sure you wish to exit without selecting a material?")
                If ans = 0 Goto PurchaseItem_material
              End If 
              status = 1
              Exit Sub 
            End If 
          End If 
        End If 
      End If 
      TicketDetail.TicketNo$ = TicketHeader.TicketNo$
      TicketDetail.ShipmentNo$ = TicketHeader.TicketNo$
      Call PopulateMaterialDetail()
      If ItemCount
        TicketDetail.GrossWt = Items.[ItemCount].TareWt
        TicketDetail.GrossWtTime# = Items.[ItemCount].TareWtTime#
        TicketDetail.GrossWtScale$ = Items.[ItemCount].TareWtScale$
        TicketDetail.GrossWtWM$ = Items.[ItemCount].TareWtWM$
      End If 
      If TicketHeader.TktMode$ = "T" ! Check for Auto-Shrinkage on Consumption Yard Transfer
        k$ = "Y" + TicketHeader.SrcYard$ + Branch$
        Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
        If stat = 0
          If ScrapCode$[77,77] = TicketDetail.YardCode$ And Trim$(ScrapCode$[78,80]) = TicketDetail.StockPile$
            If ScrapCode$[81,81] <> " " And ScrapCode[0] <> 0
              TicketDetail.AdjCode$ = Trim$(ScrapCode$[81,81])
              TicketDetail.AdjPercent = ScrapCode[0]
            End If 
          End If 
        End If 
      End If 
    End If 
    !  Call CheckRedemption(RedFlag)
    If TicketDetail.RedFlag = 2 ! By Count
      Call SAITouchWarning("Materials by Count are not valid at the Truck Scale.")
      status = 1
      Exit Sub 
    End If 
    ! Get Inventory Record (to be able to check for count item)
    ktemp$ = SAICreateInventoryKey$(BrYd,1,TicketDetail.InventoryCode$,TicketDetail.YardCode$,Branch$)
    Call SAIGetRecord(ch_1600,recdef_1600.,ktemp$,1,"Y","U",r,Inventory$,Inventory[],stat,errmess$)
    Call PurchaseItemDetailWindow(ItemNo,WeightMode$)
    Call UpdateWeightFields()
    If Trim$(TicketDetail.AdjCode$) Print #chwin1;'19WCSELECT CU';SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",TicketDetail.AdjCode$);'0WCSELECT';
    If TicketDetail.AdjWt And AllowAdjustment$ = "Y" Print #chwin1;'42WCENABLE';
    Do 
PurchaseItem_input: !
      Print #chwin1;'0WCFOCUS';
      Input #chwin1; Len (1);w$
      Select Case w$
        Case 'F1' ! Submit
          Call SubmitPurchaseItem(stat)
          If stat Goto PurchaseItem_input
          status = 0
          Exit Do 
        Case 'F3' ! Delete
          If ItemNo
            If ItemNo <> ItemCount
              Call SAITouchWarning("You cannot delete an item in the middle of a multi-item load!")
              ans = 0
            Else 
              ans = SAITouchConfirm("Are you sure you want to delete this item?")
            End If 
          Else 
            ans = 0
          End If 
          If ans
            If TicketAudit
              Call LoadTicketAudit()
              TicketAudit.Event$ = "Item Deleted"
              Call WriteTicketAudit()
            End If 
            Try 
              Search #ch_db;"DELETE FROM InYard_Dtl WHERE TicketNo=" + SQLV$(TicketDetail.TicketNo$) + " AND ItemNo=" + SQLV$(ItemNo)
            Else 
              errmess$ = "Error deleting item number " + Str$(ItemNo) + " in InYard_Dtl table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10))
              Call WriteLogFile(errmess$)
              Call SAITouchError(errmess$)
            End Try 
            Clear Items.[ItemCount]
            ItemCount = ItemCount - 1
            status = 0
            Exit Do 
          End If 
        Case 'F20' ! Change in Notice Weights
          TicketHeader.OriginGrossWt = SAIQuery$(chwin1,215)
          TicketHeader.OriginTareWt = SAIQuery$(chwin1,216)
          TicketHeader.OriginNetWt = TicketHeader.OriginGrossWt - TicketHeader.OriginTareWt
          Print #chwin1;'217WCSELECT CU';Str$(TicketHeader.OriginNetWt);'0WCSELECT';
          Call UpdateWeightFields()
        Case 'F29' ! Change PO
          If TicketHeader.OrderLine$ = "00"
            FullPONo$ = SAIFill$(TicketHeader.OrderNo$,"R"," ",10)
            Call ListPOs(FullPONo$,"Y",status)
            If status = 0 And Trim$(FullPONo$[11,12]) <> TicketDetail.DetailOrderLine$
              MaterialCode$ = Trim$(PODetail$[50,57])
              For i = 1 To ItemCount
                If i <> ItemNo
                  If MaterialCode$ = Items.[i].MaterialCode$
                    Call SAITouchWarning("Material Code (" + MaterialCode$ + ") specified on the selected contract\15\is already an item on this Ticket.\15\Material Code not changed!")
                    MaterialCode$ = ""
                    Exit For 
                  End If 
                End If 
              Next i
              If MaterialCode$
                Call GetMaterialPrice(MaterialCode$,status)
                If status
                  Call SAITouchWarning("No valid Pricing found for contracted material: " + MaterialCode$)
                  Clear MaterialCode$,Material.
                Else 
                  If Material.StockPileFlag ! Check for StockPile
                    Do 
                      Call SelectStockPile(Material.InventoryCode$,Material.YardCode$,Branch$,Material.StockPile$,"","R",ExitStatus)
                      If ExitStatus = 0
                        Exit Do 
                      Else 
                        Call SAITouchWarning("You must select a Stock Pile.")
                      End If 
                    Loop 
                  End If 
                  If MaterialCode$
                    If PODetail$[204,204] <> "Y" ! Use contract pricing instead of price file
                      If PODetail$[47,47] <> " "
                        Material.Price = 0 ! Estimated price - zero out
                      Else 
                        Material.Price = PODetail[2]
                      End If 
                      Material.PriceUM$ = Trim$(PODetail$[42,43])
                    End If 
                    If Trim$(PODetail$[111,140]) Let Material.MaterialDesc$ = Trim$(PODetail$[111,140])
                    Call PopulateMaterialDetail()
                    !  Call CheckRedemption(RedFlag)
                    Call CalcExtPrice()
                    Clear MaterialCode$,Material.
                  End If 
                End If 
              End If 
              TicketDetail.DetailOrderLine$ = Trim$(PODetail$[17,18])
              Call UpdateWeightFields()
              TicketDetail.MatCodeChg = 1
              Print #chwin1;'9WCSELECT CU';TicketHeader.OrderNo$;"-";TicketDetail.DetailOrderLine$;
              Print #chwin1;'10WCSELECT CU';TicketDetail.MaterialCode$;'12WCSELECT CU';TicketDetail.MaterialDesc$;'0WCSELECT';
              Call DisplayMaterialComments()
              If TicketDetail.StkPileReq
                Print #chwin1;'111WCENABLE 11WCENABLE 31WCENABLE';
                Print #chwin1;'11WCSELECT CU';Trim$(TicketDetail.StockPile$);'0WCSELECT';
              Else 
                Print #chwin1;'11WCSELECT CU';PChr$(-1,-2);'WCSETCOLOR 0WCSELECT 111WCDISABLE 11WCDISABLE 31WCDISABLE';
              End If 
              If TicketDetail.GrossWt And ScaleCamera$[ReadScale] And CapturePhotoOnMaterialChange$ = "Y"
                Call ScaleCamera(TicketDetail.GrossWtScale$,ScaleCamera$[ReadScale],"C",TicketDetail.GrossWt)
              End If 
            End If 
          Else 
            Call SAITouchWarning("You can only change the PO No. from Ticket Info.")
          End If 
        Case 'F30' ! Change Material
          SaveRedFlag = TicketDetail.RedFlag
          Call MaterialSelection(SupplierNo$,Material.,Dirt$)
          If Material.MaterialCode$
            Call PopulateMaterialDetail()
            Print #chwin1;'10WCSELECT CU';Trim$(TicketDetail.MaterialCode$);'12WCSELECT CU';TicketDetail.MaterialDesc$;'0WCSELECT';
            Call DisplayMaterialComments()
            If TicketDetail.StkPileReq
              Print #chwin1;'111WCENABLE 11WCENABLE 31WCENABLE';
              Print #chwin1;'11WCSELECT CU';Trim$(TicketDetail.StockPile$);'0WCSELECT';
            Else 
              Print #chwin1;'11WCSELECT CU';PChr$(-1,-2);'WCSETCOLOR 0WCSELECT 111WCDISABLE 11WCDISABLE 31WCDISABLE';
            End If 
            If TicketDetail.RedFlag <> SaveRedFlag
              Select Case TicketDetail.RedFlag
                Case 0
                  TicketDetail.RedCount = 0
                  TicketDetail.RedNetWt = 0
                  TicketDetail.RedRate = 0
                  TicketDetail.RedExt = 0
                  If SaveRedFlag = 2
                    TicketDetail.GrossWt = 0
                    TicketDetail.NetWt = 0
                  End If 
                Case 1
                  If SaveRedFlag = 2
                    TicketDetail.GrossWt = 0
                    TicketDetail.NetWt = 0
                    TicketDetail.MatExt = 0
                    TicketDetail.RedCount = 0
                  End If 
                Case 2
                  TicketDetail.GrossWt = 0
                  TicketDetail.TareWt = 0
                  TicketDetail.AdjWt = 0
                  TicketDetail.NetWt = 0
                  TicketDetail.MatExt = 0
                  TicketDetail.GrossWtScale$ = ""
                  TicketDetail.TareWtScale$ = ""
                  TicketDetail.RedNetWt = 0
              End Select 
              Close #chwin1
              Call PurchaseItemDetailWindow(ItemNo,WeightMode$)
            End If 
            If TicketHeader.TktMode$ = "T" ! Check for Auto-Shrinkage on Consumption Yard Transfer
              k$ = "Y" + TicketHeader.SrcYard$ + Branch$
              Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
              If stat = 0
                If ScrapCode$[81,81] <> " " And ScrapCode[0] <> 0
                  If ScrapCode$[77,77] = TicketDetail.YardCode$ And ScrapCode$[78,80] = TicketDetail.StockPile$
                    TicketDetail.AdjCode$ = ScrapCode$[81,81]
                    TicketDetail.AdjPercent = ScrapCode[0]
                    Print #chwin1;'19WCSELECT CU';SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",TicketDetail.AdjCode$);'0WCSELECT';
                  Else 
                    TicketDetail.AdjCode$ = ""
                    TicketDetail.AdjPercent = 0
                    TicketDetail.AdjWt = 0
                    Print #chwin1;'19WCSELECT CU 0WCSELECT';
                  End If 
                End If 
              End If 
            End If 
            Call UpdateWeightFields()
            TicketDetail.MatCodeChg = 1
            TicketDetail.PriceChg = 0
            TicketDetail.MatDescChg = 0
            If TicketDetail.GrossWt And ScaleCamera$[ReadScale] And CapturePhotoOnMaterialChange$ = "Y"
              Call ScaleCamera(TicketDetail.GrossWtScale$,ScaleCamera$[ReadScale],"C",TicketDetail.GrossWt)
            End If 
          End If 
        Case 'F31' ! Change StockPile
          Call SelectStockPile(TicketDetail.InventoryCode$,TicketDetail.YardCode$,Branch$,TicketDetail.StockPile$,"","R",ExitStatus)
          If ExitStatus = 0
            Print #chwin1;'11WCSELECT CU';Trim$(TicketDetail.StockPile$);'0WCSELECT';
          End If 
        Case 'F32' ! Change Material Description
          w$ = Trim$(TicketDetail.MaterialDesc$)
          Call SAIKeyBoardGen("Enter Material Description",KBParams.alphacase,28,0,w$,status)
          If status = 0
            Print #chwin1;'12WCSELECT CU';w$;'0WCSELECT';
            TicketDetail.MaterialDesc$ = w$
            TicketDetail.MatDescChg = 1
          End If 
        Case 'F33' ! Edit Price
          If TicketDetail.MaterialCode$ = "*MIX"
            Call SAITouchWarning("You cannot change the Price on a MIXed material load.")
            status = 1
          Else If EnterPriceInAltCurrency$ = "Y"
            Try 
              Search #ch_db;"SELECT ExchangeRate FROM Exchange_Rate WHERE FromCurrencyCode=" + SQLV$(AltCurrencyCode$) + " AND EffectiveDate=" + SQLD$(TicketHeader.ShipmentDate#)
              Read #ch_db;ExchangeRate;
            Else 
              ExchangeRate = 0
            End Try 
            If ExchangeRate = 0
              errmess$ = "Exchange Rate not found for Currency Code " + AltCurrencyCode$ + " and Shipment Date of " + DateUsing$(TicketHeader.ShipmentDate#,dateformat$) + "."
              errmess$ = errmess$ + "\15\\15\Price cannot be edited."
              Call SAITouchWarning(errmess$)
              Goto PurchaseItem_input
            End If 
            Call SAIKeyPad("Enter Price in " + AltCurrencyCode$,num,0,status)
            If status = 0 Let num = Round(num * ExchangeRate,4)
          Else 
            Call SAIKeyPad("Enter Price",num,0,status)
          End If 
          If status = 0
            num = Round(num,4)
            k$ = "U" + SAISpaceFill$(TicketDetail.PriceUM$,2)
            Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
            If stat
              Call SAITouchWarning("Unable to obtain Unit of Measure record.\15\" + errmess$)
            Else 
              If ScrapCode[5] And Abs(num) > ScrapCode[5]
                Call SAITouchWarning("Price entered exceeds maximum price allowed for this unit of measure.\15\\15\" + Rep$(" ",13) + "You will not be able to 'Submit' this item.")
              End If 
            End If 
            TicketDetail.Price = num
            Call UpdateWeightFields()
            TicketDetail.PriceChg = 1
          End If 
        Case 'F34' ! Change UM
          If TicketDetail.MaterialCode$ = "*MIX"
            Call SAITouchWarning("You cannot change the Unit of Measure on a MIXed material load.")
            status = 1
          Else 
            Call ChangeUM(TicketDetail.PriceUM$,status)
          End If 
          If status = 0
            k$ = "U" + SAISpaceFill$(TicketDetail.PriceUM$,2)
            Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
            If stat
              Call SAITouchWarning("Unable to obtain Unit of Measure record.\15\" + errmess$)
            Else 
              If ScrapCode[5] And TicketDetail.Price > ScrapCode[5]
                Call SAITouchWarning("Price entered exceeds maximum price allowed for this unit of measure.\15\\15\" + Rep$(" ",13) + "You will not be able to 'Submit' this item.")
              End If 
            End If 
            Call UpdateWeightFields()
            TicketDetail.PriceChg = 1
          End If 
        Case 'F35' ! Read Gross Weight
          If ScaleIndicators$ = "demo"
            num = Int(Rnd(50000))
            status = 0
          Else 
            Call ReadWeight("G",ReadScale,num,status)
          End If 
          If status = 0
            TicketDetail.GrossWt = num
            TicketDetail.GrossWtTime# = Tim#(0)
            TicketDetail.GrossWtScale$ = ScaleNames$[ReadScale,ReadScale]
            TicketDetail.GrossWtWM$ = WeighMaster$
            Call UpdateWeightFields()
            If ScaleCamera$[ReadScale] Call ScaleCamera(Str$(ReadScale),ScaleCamera$[ReadScale],"G",num)
          End If 
          If RFReader$[ReadScale] And RFAutoRead$ = "Y" Call SAIReadRFID(RFReader$[ReadScale],temp$,RFIDAge,status,errmess$)
          If ScaleScannerAddr$[ReadScale] Call ReadScaleScanner(ReadScale,ScaleScannerAddr$[ReadScale],status,errmess$)
          If EnableOccupantCount$ = "Y"
            Do 
              Call SAIKeyPad("Enter Vehicle Occupant Count",TicketHeader.OccupantCount,3,status)
            Loop Until status = 0
          End If 
        Case 'F36' ! Manual Gross Weight
          If TicketDetail.GrossWt <> 0 And TicketDetail.GrossWtScale$ <> "M"
            ans = SAITouchConfirm("Are you sure you want to manually override the displayed weight?")
            If ans = 0 Goto PurchaseItem_input
          End If 
          If DisableManualWt$ = "A"
            Call ManualWeightAuthorization(status)
            If status Goto PurchaseItem_input
          End If 
          Call SAIKeyPad("Enter Gross Weight",num,3,status)
          If status = 0
            Call ListReasons("MANUALWT",PurchaseManualReason$,w$)
            If w$ Let TicketDetail.ManReason$ = w$
            TicketDetail.GrossWt = num
            TicketDetail.GrossWtTime# = Tim#(0)
            TicketDetail.GrossWtScale$ = "M"
            TicketDetail.GrossWtWM$ = WeighMaster$
            Call UpdateWeightFields()
            If ScaleCamera$[ReadScale] Call ScaleCamera("M",ScaleCamera$[ReadScale],"G",num)
            If ReadScaleOnManualWt$ = "Y" Call ReadScaleBG(ReadScale,TicketDetail.GrossWt_BGRead,TicketDetail.GrossWt_BGStatus)
          End If 
          If RFReader$[ReadScale] And RFAutoRead$ = "Y" Call SAIReadRFID(RFReader$[ReadScale],temp$,RFIDAge,status,errmess$)
          If ScaleScannerAddr$[ReadScale] Call ReadScaleScanner(ReadScale,ScaleScannerAddr$[ReadScale],status,errmess$)
          If EnableOccupantCount$ = "Y"
            Do 
              Call SAIKeyPad("Enter Vehicle Occupant Count",TicketHeader.OccupantCount,3,status)
            Loop Until status = 0
          End If 
        Case 'F37' ! Read Tare Weight
          If ScaleIndicators$ = "demo"
            num = TicketDetail.GrossWt - 2000
            status = 0
          Else 
            Call ReadWeight("T",ReadScale,num,status)
          End If 
          If status = 0
            TicketDetail.TareWt = num
            TicketDetail.TareWtScale$ = ScaleNames$[ReadScale,ReadScale]
            TicketDetail.TareWtWM$ = WeighMaster$
            TicketDetail.TareWtTime# = Tim#(0)
            Call UpdateWeightFields()
            If ScaleCamera$[ReadScale] Call ScaleCamera(Str$(ReadScale),ScaleCamera$[ReadScale],"T",num)
          End If 
          If RFReader$[ReadScale] And RFAutoRead$ = "Y" Call SAIReadRFID(RFReader$[ReadScale],temp$,RFIDAge,status,errmess$)
          If ScaleScannerAddr$[ReadScale] Call ReadScaleScanner(ReadScale,ScaleScannerAddr$[ReadScale],status,errmess$)
          If EnableOccupantCount$ = "Y"
            Do 
              Call SAIKeyPad("Enter Vehicle Occupant Count",num,3,status)
              If num <> TicketHeader.OccupantCount
                Call SAITouchWarning("Occupant Count for Gross Weight was " + Str$(TicketHeader.OccupantCount) + "\15\You entered " + Str$(num))
              End If 
            Loop Until status = 0
          End If 
        Case 'F38' ! Manual Tare Weight
          If TicketDetail.TareWt <> 0 And TicketDetail.TareWtScale$ <> "M"
            ans = SAITouchConfirm("Are you sure you want to manually override the displayed weight?")
            If ans = 0 Goto PurchaseItem_input
          End If 
          If DisableManualWt$ = "A"
            Call ManualWeightAuthorization(status)
            If status Goto PurchaseItem_input
          End If 
          Call SAIKeyPad("Enter Tare Weight",num,3,status)
          If status = 0
            Call ListReasons("MANUALWT",PurchaseManualReason$,w$)
            If w$ Let TicketDetail.ManReason$ = w$
            TicketDetail.TareWt = num
            TicketDetail.TareWtScale$ = "M"
            TicketDetail.TareWtWM$ = WeighMaster$
            TicketDetail.TareWtTime# = Tim#(0)
            Call UpdateWeightFields()
            If ScaleCamera$[ReadScale] Call ScaleCamera("M",ScaleCamera$[ReadScale],"T",num)
            If ReadScaleOnManualWt$ = "Y" Call ReadScaleBG(ReadScale,TicketDetail.TareWt_BGRead,TicketDetail.TareWt_BGStatus)
          End If 
          If RFReader$[ReadScale] And RFAutoRead$ = "Y" Call SAIReadRFID(RFReader$[ReadScale],temp$,RFIDAge,status,errmess$)
          If ScaleScannerAddr$[ReadScale] Call ReadScaleScanner(ReadScale,ScaleScannerAddr$[ReadScale],status,errmess$)
          If EnableOccupantCount$ = "Y"
            Do 
              Call SAIKeyPad("Enter Vehicle Occupant Count",num,3,status)
              If num <> TicketHeader.OccupantCount
                Call SAITouchWarning("Occupant Count for Gross Weight was " + Str$(TicketHeader.OccupantCount) + "\15\You entered " + Str$(num))
              End If 
            Loop Until status = 0
          End If 
        Case 'F39' ! Read Adjustment Weight
          Call ReadWeight("A",ReadScale,num,status)
          If status = 0
            TicketDetail.AdjWt = - num
            TicketDetail.AdjWt = Round( - num,0) ! Round to nearest whole number
            TicketDetail.AdjPercent = 0 ! Zero out percentage
            Call UpdateWeightFields()
            If ScaleCamera$[ReadScale] Call ScaleCamera(Str$(ReadScale),ScaleCamera$[ReadScale],"A",num)
          End If 
          If TicketDetail.AdjWt
            Print #chwin1;'42WCENABLE';
            Call ChangeAdjCode(status)
            If status = 0
              Print #chwin1;'19WCSELECT CU';SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",TicketDetail.AdjCode$)
              Print #chwin1;'0WCSELECT';
            End If 
          Else 
            Print #chwin1;'42WCDISABLE';
            Print #chwin1;'19WCSELECT CU 0WCSELECT';
            TicketDetail.AdjCode$ = ""
          End If 
        Case 'F40' ! Manual Adjustment Weight
          Call SAIKeyPad("Enter Weight",num,2,status)
          If status = 0
            If num < 0
              ans = SAITouchConfirm("You are about to add weight?")
            Else 
              ans = 1
            End If 
            If ans
              TicketDetail.AdjWt = - num
              TicketDetail.AdjPercent = 0 ! Zero out percentage
              Call UpdateWeightFields()
              If TicketDetail.AdjWt
                Print #chwin1;'42WCENABLE';
                Call ChangeAdjCode(status)
                If status = 0
                  Print #chwin1;'19WCSELECT CU';SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",TicketDetail.AdjCode$)
                  Print #chwin1;'0WCSELECT';
                End If 
              Else 
                Print #chwin1;'42WCDISABLE';
                Print #chwin1;'19WCSELECT CU 0WCSELECT';
                TicketDetail.AdjCode$ = ""
              End If 
            End If 
          End If 
        Case 'F41' ! Adjustment Weight Percentage
          Call SAIKeyPad("Enter Adjustment Percentage",num,0,status)
          If status = 0
            If num < 0
              ans = SAITouchConfirm("You are about to add weight?")
            Else 
              ans = 0
            End If 
            If ans = 0
              If Abs(num) < 1 Let num = num * 100
              TicketDetail.AdjPercent = num
            End If 
            Call UpdateWeightFields()
            If TicketDetail.AdjWt
              Print #chwin1;'42WCENABLE';
              Call ChangeAdjCode(status)
              If status = 0
                Print #chwin1;'19WCSELECT CU';SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",TicketDetail.AdjCode$)
                Print #chwin1;'0WCSELECT';
              End If 
            Else 
              Print #chwin1;'42WCDISABLE';
              Print #chwin1;'19WCSELECT CU 0WCSELECT';
              TicketDetail.AdjCode$ = ""
            End If 
          End If 
        Case 'F42' ! Select Adjustment Code
          Call ChangeAdjCode(status)
          If status = 0
            Print #chwin1;'19WCSELECT CU';SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",TicketDetail.AdjCode$)
            Print #chwin1;'0WCSELECT';
          End If 
        Case 'F43' ! Car Bodies
          Call SAIKeyPad("Enter Number of Car Bodies",num,3,status)
          If status = 0
            TicketDetail.CarBodies = num
            Print #chwin1;'20WCSELECT CU';Str$(TicketDetail.CarBodies);'0WCSELECT';
          End If 
        Case 'F44' ! Count
          Call SAIKeyPad("Enter Count",num,3,status)
          If status = 0
            TicketDetail.RedCount = num
            Call UpdateWeightFields()
          End If 
        Case 'F45' To 'F49' ! Change in Scale
          ReadScale = Asc(w$) - Asc('F44')
          If ReadScale > 0 And ReadScale <= NumScales
            If DisableManualWt$ <> "Y" Or TicketNo$[1,1] = "M" Print #chwin1;'36WCENABLE 38WCENABLE'; ! Manual Weight buttons
            If AllowSplitWt$ = "Y" Print #chwin1;PChr$(51,52);'WCENABLE'; ! Split Weight buttons
            If ScaleIndicators$[ReadScale,ReadScale] = " "
              Print #chwin1;'35WCDISABLE 37WCDISABLE'; ! 39WCDISABLE';
            Else 
              Print #chwin1;'35WCENABLE 37WCENABLE'; ! 39WCENABLE';
            End If 
          End If 
        Case 'F50' ! Cancel
          If ItemCount = 0
            ans = SAITouchYesNo("There will be no items created for this ticket.\15\Are you sure you want to Cancel?")
            If ans = 0 Goto PurchaseItem_input
          End If 
          status = 1
          Exit Do 
        Case 'F51' ! Add split weight to Gross
          Call GetSplitWeight("G",ReadScale,num,status)
          If status = 0
            TicketDetail.GrossWt = Round(TicketDetail.GrossWt + num,0) ! Round to nearest whole number
            TicketDetail.GrossWtTime# = Tim#(0)
            TicketDetail.GrossWtScale$ = "M"
            TicketDetail.GrossWtWM$ = WeighMaster$
            Call UpdateWeightFields()
            If ScaleCamera$[ReadScale] Call ScaleCamera("M",ScaleCamera$[ReadScale],"G",num)
          End If 
        Case 'F52' ! Add split weight to Tare
          Call GetSplitWeight("T",ReadScale,num,status)
          If status = 0
            TicketDetail.TareWt = Round(TicketDetail.TareWt + num,0) ! Round to nearest whole number
            TicketDetail.TareWtScale$ = "M"
            TicketDetail.TareWtWM$ = WeighMaster$
            TicketDetail.TareWtTime# = Tim#(0)
            Call UpdateWeightFields()
            If ScaleCamera$[ReadScale] Call ScaleCamera("M",ScaleCamera$[ReadScale],"T",num)
          End If 
        Case 'F53' ! Change WeighMaster
          Call ChangeWeighMaster(status)
          If status = 0 Print #chwin1;'8FONTSIZE';@xWM,yWM;"On Duty:  ";WMName$;'12FONTSIZE';
        Case 'F54' ! Auto Tare
          If TicketDetail.TareWt <> 0 And TicketDetail.TareWtScale$ <> "M"
            ans = SAITouchConfirm("Are you sure you want to manually override the displayed weight?")
            If ans = 0 Goto PurchaseItem_input
          End If 
          Call GetAutoTare(num,status)
          If status = 0
            TicketDetail.TareWt = num
            TicketDetail.TareWtScale$ = "M"
            TicketDetail.TareWtWM$ = WeighMaster$
            TicketDetail.TareWtTime# = Tim#(0)
            Call UpdateWeightFields()
            If ScaleCamera$[ReadScale] Call ScaleCamera("M",ScaleCamera$[ReadScale],"T",num)
          End If 
        Case 'F55' ! Split Item
          If AllowItemSplit$ = "Y"
            Call SplitItem(stat)
            If stat = 0 Exit Do 
          End If 
      End Select 
    Loop 
    Close #chwin1
    If DefScale = 0 Let ReadScale = DefScale
  Else 
    status = Spc(8)
    errmess$ = "Sub Error " + Str$(Spc(8)) + " at line " + Str$(Spc(10)) + " in program " + Msc$(4) + ".\15\" + Msc$(2)
    Try Let errmess$ = errmess$ + "\15\" + "Actual Line: " + Str$(Msc(46)) Else Rem
    Call WriteLogFile(errmess$)
    Pause 5 ! Pause half a second
    Error status ! Throw same error to get trapped in calling routine
  End Try 
End Sub 
Sub SalesItemDetailWindow(ItemNo,WeightMode$)
  If TicketHeader.TktMode$ = "T"
    temp$ = "TRANSFER:  "
  Else If WeightOnly
    temp$ = "WEIGHT ONLY TICKET:  "
  Else 
    temp$ = "SALE:  "
  End If 
  If WeightMode$ = "I"
    temp$ = temp$ + "Weigh In"
  Else If WeightMode$ = "O"
    temp$ = temp$ + "Weigh Out"
  Else If WeightMode$ = "E"
    temp$ = temp$ + "Edit"
  End If 
  temp$ = temp$ + " Item on Ticket No. " + TicketHeader.TicketNo$ + ", ID=" + TicketHeader.InYardID$
  temp$ = temp$ + Rep$(" ",10) + NTEPCert$
  ysize = 335
  y = 10 \ dy = 28 \ dx = 50
  If (DisplayPrice$ <> "Y" And DisplayPrice$ <> "S") Or TicketHeader.TktMode$ = "T" Or WeightOnly <> 0 Let ysize = ysize - dy
  If WeightOnly And WeightOnlyMaterial$ = "N" Let ysize = ysize - dy
  chwin1 = SAIOpenWindow(temp$,850,ysize,1)
  Print #chwin1;PChr$(bgcolor1);'BACKCOLOR CS WCSETCOLOR';
  Print #chwin1;PChr$("Arial");'FONTFACE 12FONTSIZE EBOLD WCSETFONT';
  x0 = 10 \ x1 = 180 \ bw = 100
  Call DrawScaleSelection(chwin1)
  y = y + dy - 2
  Print #chwin1;PChr$(107,x0,y,x1,y + 14,"Customer:");'WCLABEL';
  Print #chwin1;PChr$(7,x1,y,x1 + 600,y + 14,"",0);'WCTEXT';
  Print #chwin1;'7WCSELECT';Customer.CustomerNo$ + ": " + Customer.Name$;'0WCSELECT';
  If WeightOnly = 0
    y = y + 22 \ dx = 200
    Print #chwin1;PChr$(108,x0,y,x1,y + 14,"Sales Order:");'WCLABEL';
    Print #chwin1;PChr$(8,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
    If Trim$(TicketHeader.OrderNo$)
      Print #chwin1;'8WCSELECT';
      If Trim$(TicketHeader.OrderNo$) = ""
        Print #chwin1;"UNKNOWN";
      Else 
        Print #chwin1;TicketHeader.OrderNo$;"-";TicketHeader.OrderLine$;
      End If 
      Print #chwin1;'0WCSELECT';
    End If 
    x = x1 + dx + 50
    Print #chwin1;PChr$(109,x,y,x + 150,y + 14," Material Req:");'WCLABEL';
    x = x + 150
    Print #chwin1;PChr$(9,x,y,x + dx,y + 14,"",0);'WCTEXT';
    If Trim$(TicketHeader.MatReqNo$)
      Print #chwin1;'9WCSELECT';TicketHeader.MatReqNo$;"-";TicketHeader.MatReqLine$;'0WCSELECT';
    End If 
  End If 
  If WeightOnly = 0 Or WeightOnlyMaterial$ = "Y"
    y = y + dy \ dx = 150
    Print #chwin1;PChr$(110,x0,y,x1,y + 14,"Material Code:");'WCLABEL';
    Print #chwin1;PChr$(10,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
    Print #chwin1;'10WCSELECT WCRESETCOLOR';Trim$(TicketDetail.MaterialCode$);'0WCSELECT';
    If TicketHeader.Noticed = 0 And TicketHeader.SplitLoad = 0 ! Not a split load
      If TicketDetail.MaterialCode$ = "*MIX" And TicketHeader.OrderLine$ = "00"
        ! Cannot change material on a *MIX contract
      Else 
        If Trim$(TicketHeader.OrderNo$) = "" Or AllowMaterialChange$ = "Y"
          Print #chwin1;PChr$(30,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Change",2);'WCBUTTON';
        End If 
      End If 
    End If 
    If ScrapSRecord$[130,130] = "Y"
      Print #chwin1;PChr$(111,500,y,610,y + 14,"Stock Pile:");'WCLABEL';
      Print #chwin1;PChr$(11,610,y,680,y + 14,"",0);'WCTEXT 11WCSELECT WCRESETCOLOR 0WCSELECT';
      Print #chwin1;PChr$(31,685,y - 5,785,y + 20,"Change",2);'WCBUTTON';
      If TicketDetail.StkPileReq
        Print #chwin1;'11WCSELECT';Trim$(TicketDetail.StockPile$);'0WCSELECT';
      Else 
        Print #chwin1;'111WCDISABLE 11WCDISABLE 31WCDISABLE';
      End If 
    End If 
    y = y + dy \ dx = 500
    Print #chwin1;PChr$(112,x0,y,x1,y + 14,"Material Desc:");'WCLABEL';
    DisableMatDesc = 0
    If EditMaterialDesc$ <> "Y"
      DisableMatDesc = 1
    Else 
      If TicketHeader.Noticed And TicketHeader.SplitLoad ! Split Load
        DisableMatDesc = 1
      End If 
    End If 
    If DisableMatDesc = 0
      !    print #chwin1;PChr$(12,x1,y-1,x1+dx,y+15,"",2,30);'WCSTRING';
      Print #chwin1;PChr$(12,x1,y - 5,x1 + dx,y + 11,"",2,30);'WCSTRING';
      Print #chwin1;'12WCSELECT WCRESETCOLOR';Trim$(TicketDetail.MaterialDesc$);'0WCSELECT';
      Print #chwin1;PChr$(32,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Keyboard",2);'WCBUTTON';
    Else 
      !    print #chwin1;PChr$(12,x1,y,x1+dx,y+14,"",0);'WCTEXT';
      Print #chwin1;PChr$(12,x1,y - 5,x1 + dx,y + 9,"",0);'WCTEXT';
      Print #chwin1;'12WCSELECT WCRESETCOLOR';Trim$(TicketDetail.MaterialDesc$);'0WCSELECT';
    End If 
    Print #chwin1;'8FONTSIZE WCSETFONT';
    Print #chwin1;PChr$(212,x1,y + 11,x1 + dx,y + 21,"",0);'WCTEXT';
    Print #chwin1;'12FONTSIZE WCSETFONT';
    Call DisplayMaterialComments()
  End If 
  If (DisplayPrice$ = "Y" Or DisplayPrice$ = "S") And TicketHeader.TktMode$ <> "T" And WeightOnly = 0 !AND Supplier.PrintPriceAtScale$=""
    y = y + dy \ dx = 150
    temp$ = "Price:"
    If gbl.MultiCurrency$ = "Y" And TicketHeader.FundsType$ <> gbl.BranchFundsType$
      temp$ = temp$ + " (" + GetCurrencyCode$(TicketHeader.FundsType$) + ")"
    End If 
    Print #chwin1;PChr$(113,x0,y,x1,y + 14,temp$);'WCLABEL';
    Print #chwin1;PChr$(13,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
    Print #chwin1;'13WCSELECT WCRESETCOLOR';"$";Trim$(TicketDetail.Price Using "---,---,--#.###");'0WCSELECT';
    x = x1 + dx + 5 \ dx = 240
    Print #chwin1;PChr$(14,x,y,x + dx,y + 14,"",0);'WCTEXT';
    Print #chwin1;'14WCSELECT WCRESETCOLOR';UMDesc$(ch_110Aro,TicketDetail.PriceUM$);'0WCSELECT';
    If EditPrice$ = "Y" Or EditPrice$ = "S"
      x = x + dx + 5
      Print #chwin1;PChr$(33,x,y - 5,x + bw,y + 20,"Edit",2);'WCBUTTON';
      x = x + bw + 5
      Print #chwin1;PChr$(34,x,y - 5,x + bw,y + 20,"Change\15\UM",2);'WCBUTTON';
    End If 
  End If 
  y = y + dy \ dx = 150
  Print #chwin1;PChr$(115,x0,y,x1,y + 14,"Gross Weight:");'WCLABEL';
  Print #chwin1;PChr$(15,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chwin1;'15WCSELECT WCRESETCOLOR 0WCSELECT';
  x = x1 + dx + 5 \ dx = 50
  Print #chwin1;PChr$(215,x,y,x + dx,y + 14,"",0);'WCTEXT';
  Print #chwin1;'215WCSELECT WCRESETCOLOR';DisplayUM$;'0WCSELECT';
  If WeightMode$ <> "I" And NumScales > 0
    If ItemNo = 0 Or ItemNo = ItemCount
      x = x + dx + 5
      Print #chwin1;PChr$(35,x,y - 5,x + bw,y + 20,"Read",2);'WCBUTTON';
      If DisableManualWt$ <> "Y" Or TicketNo$[1,1] = "M" Or (TicketHeader.TktMode$ = "T" And AllowTransferManualWt$ = "Y") Or (TicketHeader.TktType$ = "S" And AllowSalesManualWt$ = "Y")
        x = x + bw + 5
        Print #chwin1;PChr$(36,x,y - 5,x + bw,y + 20,"Manual",2);'WCBUTTON';
      End If 
      If AllowSplitWt$ = "Y"
        x = x + bw + 5
        Print #chwin1;PChr$(51,x,y - 5,x + bw / 2,y + 20,"+",2);'WCBUTTON';
      End If 
    End If 
  End If 
  y = y + dy \ dx = 150
  Print #chwin1;PChr$(116,x0,y,x1,y + 14,"Tare Weight:");'WCLABEL';
  Print #chwin1;PChr$(16,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chwin1;'16WCSELECT WCRESETCOLOR 0WCSELECT';
  x = x1 + dx + 5 \ dx = 50
  Print #chwin1;PChr$(216,x,y,x + dx,y + 14,"",0);'WCTEXT';
  Print #chwin1;'216WCSELECT WCRESETCOLOR';DisplayUM$;'0WCSELECT';
  If WeightMode$ <> "O" And ItemCount < 2 And NumScales > 0
    x = x + dx + 5
    Print #chwin1;PChr$(37,x,y - 5,x + bw,y + 20,"Read",2);'WCBUTTON';
    If DisableManualWt$ <> "Y" Or TicketNo$[1,1] = "M" Or (TicketHeader.TktMode$ = "T" And AllowTransferManualWt$ = "Y") Or (TicketHeader.TktType$ = "S" And (AllowSalesManualWt$ = "Y" Or AllowSalesManualWt$ = "T"))
      x = x + bw + 5
      Print #chwin1;PChr$(38,x,y - 5,x + bw,y + 20,"Manual",2);'WCBUTTON';
    End If 
    If AllowSplitWt$ = "Y"
      x = x + bw + 5
      Print #chwin1;PChr$(52,x,y - 5,x + bw / 2,y + 20,"+",2);'WCBUTTON';
    End If 
  End If 
  y = y + dy \ dx = 150
  Print #chwin1;PChr$(117,x0,y,x1,y + 14,"Net Weight:");'WCLABEL';
  Print #chwin1;PChr$(17,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chwin1;'17WCSELECT WCRESETCOLOR 0WCSELECT';
  x = x1 + dx + 5 \ dx = 50
  Print #chwin1;PChr$(217,x,y,x + dx,y + 14,"",0);'WCTEXT';
  Print #chwin1;'217WCSELECT WCRESETCOLOR';DisplayUM$;'0WCSELECT';
  x = x + dx + 105 \ dx = 120 \ x_carbodies = x \ y_carbodies = y ! save x & y values
  If Inventory$[114,114] = "C" ! Car Bodies
    Print #chwin1;PChr$(120,x,y,x + dx,y + 14,"Car Bodies:");'WCLABEL';
    x = x + dx + 10 \ dx = 60
    Print #chwin1;PChr$(20,x,y,x + dx,y + 14,"",0);'WCTEXT';
    Print #chwin1;'20WCSELECT WCRESETCOLOR';Str$(TicketDetail.CarBodies);'0WCSELECT';
    x = x + dx + 5
    Print #chwin1;PChr$(43,x,y - 5,x + bw,y + 20,"Change",2);'WCBUTTON';
  End If 
  y = y + dy \ dx = 150
  Print #chwin1;PChr$(118,x0,y,x1,y + 14,"Adjustment:");'WCLABEL';
  Print #chwin1;PChr$(18,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chwin1;'18WCSELECT WCRESETCOLOR 0WCSELECT';
  x = x1 + dx + 5 \ dx = 50
  Print #chwin1;PChr$(218,x,y,x + dx,y + 14,"",0);'WCTEXT';
  Print #chwin1;'218WCSELECT WCRESETCOLOR';DisplayUM$;'0WCSELECT';
  If AllowAdjustment$ = "Y"
    x = x + dx + 5
    !    print #chwin1;PChr$(39,x,y-5,x+bw,y+20,"Read",2);'WCBUTTON';
    !    x=x+bw+5
    Print #chwin1;PChr$(40,x,y - 5,x + bw,y + 20,"Manual",2);'WCBUTTON';
    x = x + bw + 5
    Print #chwin1;PChr$(41,x,y - 5,x + bw / 2,y + 20,"%",2);'WCBUTTON';
  End If 
  y = y + dy \ dx = 305
  Print #chwin1;PChr$(119,x0,y,x1,y + 14,"Adj Code:");'WCLABEL';
  Print #chwin1;PChr$(19,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chwin1;'19WCSELECT WCRESETCOLOR 0WCSELECT';
  If AllowAdjustment$ = "Y" Print #chwin1;PChr$(42,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Select",1);'WCBUTTON';
  If ReadScale = 0
    Print #chwin1;PChr$(35,38);'WCDISABLE';PChr$(51,52);'WCDISABLE'; !'35WCDISABLE 37WCDISABLE 39WCDISABLE';
  Else 
    If ScaleIndicators$[ReadScale,ReadScale] = " "
      Print #chwin1;'35WCDISABLE 37WCDISABLE'; ! 39WCDISABLE';
    End If 
  End If 
  Print #chwin1;PChr$(1,350,ysize - 30,450,ysize - 5,"&Submit",2);'WCBUTTON';
  Print #chwin1;PChr$(50,690,ysize - 30,790,ysize - 5,"&Cancel",2);'WCBUTTON';
  xWM = 10 \ yWM = ysize - 15
  Print #chwin1;'8FONTSIZE';@xWM,yWM;"On Duty:  ";WMName$;'12FONTSIZE';
  Print #chwin1;'0WCFOCUS';
End Sub 
! Check if ticket is multi-sales split load
Sub SplitLoadCheck()
  ktemp$ = SAISpaceFill$(TicketHeader.TicketNo$,6) + SAISpaceFill$(TicketHeader.EntityNo$,6) + SAISpaceFill$(TicketDetail.MaterialCode$,8) + SAISpaceFill$(Branch$,2) ! Check 8530 file
  Search #ch_8530ro,2,1;ktemp$,r,e
  If e = 0
    Call SAIReadRecord(ch_8530ro,recdef_8530.,"Y","U",r,RetailSales$,RetailSales[],stat,errmess$)
    If RetailSales$[167,167] <> " " And RetailSales$[167,167] <> "N" ! multi-sales header flagged as a split-load
      TicketHeader.SplitLoad = 1 ! Flag inyard as a split-load
    End If 
  End If 
End Sub 
! Perform check weight against 8530 multi-sales details
Sub MultiSalesCheckWt(status)
  tot_sls_net = 0 !clear totals variable
  status = -1
  If TicketDetail.MaterialCode$[1,2] <> "*M" Exit Sub ! Only check multi-sales loads
  If MultiSalesCheckWtTolerance = 0 Exit Sub !OR TicketHeader.TktMode$="T" Exit Sub
  If TicketDetail.GrossWt = 0 Or TicketDetail.TareWt = 0 Exit Sub 
  ktemp$ = SAISpaceFill$(TicketHeader.TicketNo$,6) + SAISpaceFill$(TicketHeader.EntityNo$,6) + SAISpaceFill$(TicketDetail.MaterialCode$,8) + Branch$ ! Check 8530 file
  Search #ch_8530ro,2,1;ktemp$,r,e
  If e
    If TicketHeader.TktMode$ = "T"
      Exit Sub 
    Else 
      Call SAITouchWarning("Multi-Sales Load Details Not Entered Yet.\15\Check Weight Logic Not Performed.")
      status = 1
      Exit Sub 
    End If 
  End If 
  Call SAIReadRecord(ch_8530ro,recdef_8530.,"Y","U",r,RetailSales$,RetailSales[],stat,errmess$)
  If stat = 0
    TicketHeader.ShipmentNo$ = Trim$(RetailSales$[56,61]) !Plug 8530 shipment# into inyard
    TicketDetail.ShipmentNo$ = TicketHeader.ShipmentNo$ !Plug 8530 shipment# into TicketDetail structure
    Items.[1].ShipmentNo$ = TicketHeader.ShipmentNo$ !Plug 8530 shipment# into Items structure
    If Abs(TicketDetail.NetWt - RetailSales[3]) > MultiSalesCheckWtTolerance !inyard net vs. sort gross outside of tolerance (for current company)
      If TicketHeader.SplitLoad !search all *Ms for split load ticket
        branch_net = RetailSales[3]
        ktemp$ = RetailSales$[1,20] ! Check 8530 file
        ksav$ = ktemp$
        Do 
          Search #ch_8530ro,3,1;ktemp$,r,e
          If e Exit Do 
          If ktemp$[1,Len(ksav$)] <> ksav$ Exit Do !diff tkt/mat code
          Call SAIReadRecord(ch_8530ro,recdef_8530.,"Y","U",r,RetailSales$,RetailSales[],stat,errmess$)
          tot_sls_net = tot_sls_net + RetailSales[3] !add net wt of all *M records on ticket
        Loop 
        If Abs(TicketDetail.NetWt - tot_sls_net) > MultiSalesCheckWtTolerance !inyard net vs. all yards nets outside of 100 lb tolerance (for current company)
          !          Call SAITouchWarning("Weight Difference Over "+Str$(MultiSalesCheckWtTolerance)+" "+gbl_um$+"s.\15\Truck Net Wt="+Str$(TicketDetail.NetWt)+".\15\Branch Sort Wt="+Str$(RetailSales[3])+".\15\Total Split Load Sort Wt="+Str$(tot_sls_net)+".")
          If branch_net = tot_sls_net
            Call SAITouchWarning("Weight Difference Over " + Str$(MultiSalesCheckWtTolerance) + " " + gbl_um$ + "s.\15\\15\Difference = " + Str$(TicketDetail.NetWt - branch_net) + " " + gbl_um$ + "s.")
          Else 
            Call SAITouchWarning("Weight Difference Over " + Str$(MultiSalesCheckWtTolerance) + " " + gbl_um$ + "s.\15\\15\    Branch Difference = " + Str$(TicketDetail.NetWt - branch_net) + " " + gbl_um$ + "s.\15\Total Load Difference = " + Str$(TicketDetail.NetWt - tot_sls_net) + " " + gbl_um$ + "s.")
          End If 
          status = 1
        Else 
          status = 0 !within tolerance
        End If 
      Else 
        !        Call SAITouchWarning("Weight Difference Over "+Str$(MultiSalesCheckWtTolerance)+" "+gbl_um$+"s.\15\Truck Net Wt="+Str$(TicketDetail.NetWt)+".\15\Sorted Wt="+Str$(RetailSales[3])+".")
        Call SAITouchWarning("Weight Difference Over " + Str$(MultiSalesCheckWtTolerance) + " " + gbl_um$ + "s.\15\\15\Difference = " + Str$(TicketDetail.NetWt - RetailSales[3]) + " " + gbl_um$ + "s.")
        status = 1
      End If 
    Else 
      status = 0 !within tolerance
    End If 
  End If 
End Sub 
Sub SubmitSalesItem(stat)
  stat = 0
  If DisableMatDesc = 0 And (TicketHeader.TktType$ <> "W" Or WeightOnlyMaterial$ = "Y")
    w$ = Trim$(SAIQuery$(chwin1,12))
    If w$ = ""
      Call SAITouchWarning("You must enter a Material Description.")
      stat = 1
      Exit Sub 
    Else 
      If w$ <> Trim$(TicketDetail.MaterialDesc$)
        TicketDetail.MaterialDesc$ = w$
        TicketDetail.MatDescChg = 1
      End If 
    End If 
  End If 
  If TicketDetail.AdjWt <> 0 And Trim$(TicketDetail.AdjCode$) = ""
    Call SAITouchWarning("You must enter an Adjustment Code.")
    stat = 1
  Else If TicketDetail.GrossWt <> 0 And TicketDetail.NetWt < 0
    Call SAITouchWarning("Net Weight cannot be negative!")
    stat = 1
  Else If TicketDetail.GrossWt <> 0 And TicketDetail.NetWt + TicketDetail.AdjWt < 0
    Call SAITouchWarning("Adjusted Net Weight cannot be negative!")
    stat = 1
  Else If TicketDetail.NetWt <> 0 And Inventory$[114,114] = "C" And TicketDetail.CarBodies = 0
    Call SAITouchWarning("You must enter a Car Body count!")
    stat = 1
  Else If WeightOnly = 0 And TicketDetail.PriceUM$ And TicketDetail.PriceChg = 1
    k$ = "U" + SAISpaceFill$(TicketDetail.PriceUM$,2)
    Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
    If stat
      Call SAITouchWarning("Unable to obtain Unit of Measure record for this item.\15\" + errmess$)
    Else 
      If ScrapCode[5] And Abs(TicketDetail.Price) > ScrapCode[5]
        Call SAITouchWarning("Price entered exceeds maximum price allowed for this unit of measure.")
        stat = 1
      End If 
    End If 
  Else If TicketDetail.GrossWt = 0 And TicketDetail.TareWt = 0
    ans = SAITouchConfirm("No Weights entered!","Warning")
    If ans = 0 Let stat = 1
  End If 
  If stat Exit Sub 
  Call SplitLoadCheck() !check if ticket is multi-sales split load
  Call MultiSalesCheckWt(status) !Perform check weight against 8530 multi-sales details once both wts entered
  If TicketDetail.OrigMaterialCode$ = "" Let TicketDetail.OrigMaterialCode$ = TicketDetail.MaterialCode$
  If ItemNo = 0 ! Add Item
    AddNewItem = 1
    ItemCount = ItemCount + 1
    ItemNo = ItemCount
    TicketDetail.ItemNo = ItemNo
    Items.[ItemNo] = TicketDetail.
    Try 
      Search #ch_db;"INSERT INTO InYard_Dtl (" + SQLN$(TicketDetail.) + ") VALUES (" + SQLV$(TicketDetail.) + ")"
    Else 
      errmess$ = "Error creating item number " + Str$(ItemNo) + " in InYard_Dtl table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10))
      Call WriteLogFile(errmess$)
      Call SAITouchError(errmess$)
      stat = 1
      Exit Sub 
    End Try 
  Else ! Edit Item
    AddNewItem = 0
    Items.[ItemNo] = TicketDetail.
    Try 
      Search #ch_db;"UPDATE InYard_Dtl SET " + SQLNV$(TicketDetail.) + " WHERE TicketNo=" + SQLV$(TicketDetail.TicketNo$) + " AND ItemNo=" + SQLV$(TicketDetail.ItemNo)
    Else 
      errmess$ = "Error updating item number " + Str$(ItemNo) + " in InYard_Dtl table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10))
      Call WriteLogFile(errmess$)
      Call SAITouchError(errmess$)
    End Try 
  End If 
  If TicketAudit
    Call LoadTicketAudit()
    If AddNewItem
      TicketAudit.Event$ = "Item Added"
    Else 
      TicketAudit.Event$ = "Item Edited"
    End If 
    Call WriteTicketAudit()
  End If 
  stat = 0
End Sub 
Sub SalesItem(ItemNo,WeightMode$,status)
  If ItemNo ! Edit existing item
    TicketDetail. = Items.[ItemNo]
  Else ! Add new item
    Clear TicketDetail.
    If MaterialCode$ = ""
      If WeightOnly And WeightOnlyMaterial$ = "N"
        Clear Material.
      Else 
        Call SalesMaterialSelection(TicketHeader.EntityNo$,Material.)
        If Material.MaterialCode$ = ""
          status = 1
          Exit Sub 
        End If 
      End If 
    End If 
    TicketDetail.TicketNo$ = TicketNo$
    TicketDetail.ShipmentNo$ = TicketNo$
    TicketDetail.MaterialCode$ = Material.MaterialCode$
    TicketDetail.MaterialCmt1$ = Material.MaterialCmt1$
    TicketDetail.MaterialCmt2$ = Material.MaterialCmt2$
    TicketDetail.InventoryCode$ = Material.InventoryCode$
    TicketDetail.StockPile$ = Material.StockPile$
    TicketDetail.StkPileReq = Material.StockPileFlag
    TicketDetail.MaterialDesc$ = Trim$(Material.MaterialDesc$)
    TicketDetail.YardCode$ = Material.YardCode$
    TicketDetail.Price = Material.Price
    TicketDetail.PriceUM$ = Material.PriceUM$
  End If 
  ! Get Inventory Record (to be able to check for count item)
  ktemp$ = SAICreateInventoryKey$(BrYd,1,TicketDetail.InventoryCode$,TicketDetail.YardCode$,Branch$)
  Call SAIGetRecord(ch_1600,recdef_1600.,ktemp$,1,"Y","U",r,Inventory$,Inventory[],stat,errmess$)
  Call SalesItemDetailWindow(ItemNo,WeightMode$)
  Call UpdateSalesWeightFields()
  If Trim$(TicketDetail.AdjCode$) Print #chwin1;'19WCSELECT CU';SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",TicketDetail.AdjCode$);'0WCSELECT';
  If TicketDetail.AdjWt And AllowAdjustment$ = "Y" Print #chwin1;'42WCENABLE';
  Do 
SalesItem_input: !
    Print #chwin1;'0WCFOCUS';
    Input #chwin1; Len (1);w$
    Select Case w$
      Case 'F1' ! Submit
        Call SubmitSalesItem(stat)
        If stat Goto SalesItem_input
        status = 0
        Exit Do 
      Case 'F30' ! Change Material
        If TicketDetail.MaterialCode$ = "*MIX" And TicketHeader.OrderLine$ = "00"
          Call SAITouchWarning("You cannot change the Material on a MIXed material load.")
        Else 
          ! Re-read Inventory Record (to be able to check for count item)
          ktemp$ = SAICreateInventoryKey$(BrYd,1,TicketDetail.InventoryCode$,TicketDetail.YardCode$,Branch$)
          Call SAIGetRecord(ch_1600,recdef_1600.,ktemp$,1,"Y","U",r,Inventory$,Inventory[],stat,errmess$)
          SavedValue$ = Inventory$[114,114] ! Car Bodies flag
          Material.MaterialCode$ = TicketDetail.MaterialCode$
          Material.InventoryCode$ = TicketDetail.InventoryCode$
          Call SalesMaterialSelection(CustomerNo$,Material.)
          If Material.MaterialCode$
            ktemp$ = SAICreateInventoryKey$(BrYd,1,TicketDetail.InventoryCode$,TicketDetail.YardCode$,Branch$)
            Call SAIGetRecord(ch_1600,recdef_1600.,ktemp$,1,"Y","U",r,Inventory$,Inventory[],stat,errmess$)
            If Inventory$[114,114] = "C" And SavedValue$ <> "C" ! Car Bodies
              x = x_carbodies \ dx = 120 \ y = y_carbodies \ bw = 100
              Print #chwin1;PChr$(120,x,y,x + dx,y + 14,"Car Bodies:");'WCLABEL';
              x = x + dx + 10 \ dx = 60
              Print #chwin1;PChr$(20,x,y,x + dx,y + 14,"",0);'WCTEXT';
              Print #chwin1;'20WCSELECT WCRESETCOLOR';Str$(TicketDetail.CarBodies);'0WCSELECT';
              x = x + dx + 5
              Print #chwin1;PChr$(43,x,y - 5,x + bw,y + 20,"Change",2);'WCBUTTON';
            Else If Inventory$[114,114] <> "C" And SavedValue$ = "C"
              Print #chwin1;'120WCDELETE 20WCDELETE 43WCDELETE';
              TicketDetail.CarBodies = 0
            End If 
            TicketDetail.MaterialCode$ = Material.MaterialCode$
            TicketDetail.InventoryCode$ = Material.InventoryCode$
            TicketDetail.StockPile$ = Material.StockPile$
            TicketDetail.StkPileReq = Material.StockPileFlag
            TicketDetail.MaterialDesc$ = Trim$(Material.MaterialDesc$)
            TicketDetail.MaterialCmt1$ = Material.MaterialCmt1$
            TicketDetail.MaterialCmt2$ = Material.MaterialCmt2$
            TicketDetail.YardCode$ = Material.YardCode$
            TicketDetail.Price = Material.Price
            TicketDetail.PriceUM$ = Material.PriceUM$
            Print #chwin1;'10WCSELECT CU';Trim$(TicketDetail.MaterialCode$);'12WCSELECT CU';TicketDetail.MaterialDesc$;'0WCSELECT';
            Call DisplayMaterialComments()
            If TicketDetail.StkPileReq
              Print #chwin1;'111WCENABLE 11WCENABLE 31WCENABLE';
              Print #chwin1;'11WCSELECT CU';Trim$(TicketDetail.StockPile$);'0WCSELECT';
            Else 
              Print #chwin1;'11WCSELECT CU';PChr$(-1,-2);'WCSETCOLOR 0WCSELECT 111WCDISABLE 11WCDISABLE 31WCDISABLE';
            End If 
            If TicketHeader.TktMode$ = "T" ! Check for Auto-Shrinkage on Consumption Yard Transfer
              k$ = "Y" + TicketHeader.SrcYard$ + Branch$
              Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
              If stat = 0
                If ScrapCode$[81,81] <> " " And ScrapCode[0] <> 0
                  If ScrapCode$[77,77] = TicketDetail.YardCode$ And ScrapCode$[78,80] = TicketDetail.StockPile$
                    TicketDetail.AdjCode$ = ScrapCode$[81,81]
                    TicketDetail.AdjPercent = ScrapCode[0]
                    Print #chwin1;'19WCSELECT CU';SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",TicketDetail.AdjCode$);'0WCSELECT';
                  Else 
                    TicketDetail.AdjCode$ = ""
                    TicketDetail.AdjPercent = 0
                    TicketDetail.AdjWt = 0
                    Print #chwin1;'19WCSELECT CU 0WCSELECT';
                  End If 
                End If 
              End If 
            End If 
            Call UpdateSalesWeightFields()
            TicketDetail.MatCodeChg = 1
            TicketDetail.PriceChg = 0
            TicketDetail.MatDescChg = 0
          End If 
        End If 
      Case 'F31' ! Change StockPile
        Call SelectStockPile(TicketDetail.InventoryCode$,TicketDetail.YardCode$,Branch$,TicketDetail.StockPile$,"","D",ExitStatus)
        If ExitStatus = 0
          Print #chwin1;'11WCSELECT CU';Trim$(TicketDetail.StockPile$);'0WCSELECT';
        End If 
      Case 'F32' ! Change Material Description
        w$ = Trim$(TicketDetail.MaterialDesc$)
        Call SAIKeyBoardGen("Enter Material Description",KBParams.alphacase,28,0,w$,status)
        If status = 0
          Print #chwin1;'12WCSELECT CU';w$;'0WCSELECT';
          TicketDetail.MaterialDesc$ = w$
          TicketDetail.MatDescChg = 1
        End If 
      Case 'F33' ! Edit Price
        If TicketDetail.MaterialCode$ = "*MIX"
          Call SAITouchWarning("You cannot change the Price on a MIXed material load.")
          status = 1
        Else If SODetail$[47,47] = "e" ! Estimated price, cannot change
          Call SAITouchWarning("You cannot change the Price on an estimated contract.")
          status = 1
        Else 
          Call SAIKeyPad("Enter Price",num,0,status)
        End If 
        If status = 0
          num = Round(num,4)
          TicketDetail.Price = num
          Call UpdateSalesWeightFields()
          TicketDetail.PriceChg = 1
        End If 
      Case 'F34' ! Change UM
        If TicketDetail.MaterialCode$ = "*MIX"
          Call SAITouchWarning("You cannot change the Unit of Measure on a MIXed material load.")
          status = 1
        Else If SODetail$[47,47] = "e" ! Estimated price, cannot change
          Call SAITouchWarning("You cannot change the Unit of Measure on an estimated contract.")
          status = 1
        Else 
          Call ChangeUM(TicketDetail.PriceUM$,status)
        End If 
        If status = 0
          Call UpdateSalesWeightFields()
          TicketDetail.PriceChg = 1
        End If 
      Case 'F35' ! Read Gross Weight
        If ScaleIndicators$ = "demo"
          num = TicketDetail.TareWt + 2000
          status = 0
        Else 
          Call ReadWeight("G",ReadScale,num,status)
        End If 
        If status = 0
          TicketDetail.GrossWt = num
          TicketDetail.GrossWtTime# = Tim#(0)
          TicketDetail.GrossWtScale$ = ScaleNames$[ReadScale,ReadScale]
          TicketDetail.GrossWtWM$ = WeighMaster$
          Call UpdateSalesWeightFields()
          If ScaleCamera$[ReadScale] Call ScaleCamera(Str$(ReadScale),ScaleCamera$[ReadScale],"G",num)
        End If 
        If RFReader$[ReadScale] And RFAutoRead$ = "Y" Call SAIReadRFID(RFReader$[ReadScale],temp$,RFIDAge,status,errmess$)
        If ScaleScannerAddr$[ReadScale] Call ReadScaleScanner(ReadScale,ScaleScannerAddr$[ReadScale],status,errmess$)
      Case 'F36' ! Manual Gross Weight
        If TicketDetail.GrossWt <> 0 And TicketDetail.GrossWtScale$ <> "M"
          ans = SAITouchConfirm("Are you sure you want to manually override the displayed weight?")
          If ans = 0 Goto SalesItem_input
        End If 
        !      if DisableManualWt$="A"
        !        Call ManualWeightAuthorization(status)
        !        if status goto SalesItem_input
        !      endif
        Call SAIKeyPad("Enter Gross Weight",num,3,status)
        If status = 0
          Call ListReasons("MANUALWT",SalesManualReason$,w$)
          If w$ Let TicketDetail.ManReason$ = w$
          TicketDetail.GrossWt = num
          TicketDetail.GrossWtTime# = Tim#(0)
          TicketDetail.GrossWtScale$ = "M"
          TicketDetail.GrossWtWM$ = WeighMaster$
          Call UpdateSalesWeightFields()
          If ScaleCamera$[ReadScale] Call ScaleCamera("M",ScaleCamera$[ReadScale],"G",num)
          If ReadScaleOnManualWt$ = "Y" Call ReadScaleBG(ReadScale,TicketDetail.GrossWt_BGRead,TicketDetail.GrossWt_BGStatus)
        End If 
        If RFReader$[ReadScale] And RFAutoRead$ = "Y" Call SAIReadRFID(RFReader$[ReadScale],temp$,RFIDAge,status,errmess$)
        If ScaleScannerAddr$[ReadScale] Call ReadScaleScanner(ReadScale,ScaleScannerAddr$[ReadScale],status,errmess$)
      Case 'F37' ! Read Tare Weight
        If ScaleIndicators$ = "demo"
          num = Int(Rnd(50000))
          status = 0
        Else 
          Call ReadWeight("T",ReadScale,num,status)
        End If 
        If status = 0
          TicketDetail.TareWt = num
          TicketDetail.TareWtTime# = Tim#(0)
          TicketDetail.TareWtScale$ = ScaleNames$[ReadScale,ReadScale]
          TicketDetail.TareWtWM$ = WeighMaster$
          Call UpdateSalesWeightFields()
          If ScaleCamera$[ReadScale] Call ScaleCamera(Str$(ReadScale),ScaleCamera$[ReadScale],"T",num)
        End If 
        If RFReader$[ReadScale] And RFAutoRead$ = "Y" Call SAIReadRFID(RFReader$[ReadScale],temp$,RFIDAge,status,errmess$)
        If ScaleScannerAddr$[ReadScale] Call ReadScaleScanner(ReadScale,ScaleScannerAddr$[ReadScale],status,errmess$)
      Case 'F38' ! Manual Tare Weight
        If TicketDetail.TareWt <> 0 And TicketDetail.TareWtScale$ <> "M"
          ans = SAITouchConfirm("Are you sure you want to manually override the displayed weight?")
          If ans = 0 Goto SalesItem_input
        End If 
        !      if DisableManualWt$="A"
        !        Call ManualWeightAuthorization(status)
        !        if status goto SalesItem_input
        !      endif
        Call SAIKeyPad("Enter Tare Weight",num,3,status)
        If status = 0
          Call ListReasons("MANUALWT",SalesManualReason$,w$)
          If w$ Let TicketDetail.ManReason$ = w$
          TicketDetail.TareWt = num
          TicketDetail.TareWtTime# = Tim#(0)
          TicketDetail.TareWtScale$ = "M"
          TicketDetail.TareWtWM$ = WeighMaster$
          Call UpdateSalesWeightFields()
          If ScaleCamera$[ReadScale] Call ScaleCamera("M",ScaleCamera$[ReadScale],"T",num)
          If ReadScaleOnManualWt$ = "Y" Call ReadScaleBG(ReadScale,TicketDetail.TareWt_BGRead,TicketDetail.TareWt_BGStatus)
        End If 
        If RFReader$[ReadScale] And RFAutoRead$ = "Y" Call SAIReadRFID(RFReader$[ReadScale],temp$,RFIDAge,status,errmess$)
        If ScaleScannerAddr$[ReadScale] Call ReadScaleScanner(ReadScale,ScaleScannerAddr$[ReadScale],status,errmess$)
      Case 'F40' ! Manual Adjustment Weight
        Call SAIKeyPad("Enter Weight",num,2,status)
        If status = 0
          If num < 0
            ans = SAITouchConfirm("You are about to add weight?")
          Else 
            ans = 1
          End If 
          If ans
            TicketDetail.AdjWt = - num
            TicketDetail.AdjPercent = 0 ! Zero out percentage
            Call UpdateSalesWeightFields()
            If TicketDetail.AdjWt
              Print #chwin1;'42WCENABLE';
              Call ChangeAdjCode(status)
              If status = 0
                Print #chwin1;'19WCSELECT CU';SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",TicketDetail.AdjCode$)
                Print #chwin1;'0WCSELECT';
              End If 
            Else 
              Print #chwin1;'42WCDISABLE';
              Print #chwin1;'19WCSELECT CU 0WCSELECT';
              TicketDetail.AdjCode$ = ""
            End If 
          End If 
        End If 
      Case 'F41' ! Adjustment Weight Percentage
        Call SAIKeyPad("Enter Adjustment Percentage",num,0,status)
        If status = 0
          If num < 0
            ans = SAITouchConfirm("You are about to add weight?")
          Else 
            ans = 0
          End If 
          If ans = 0
            If Abs(num) < 1 Let num = num * 100
            TicketDetail.AdjPercent = num
          End If 
          Call UpdateSalesWeightFields()
          If TicketDetail.AdjWt
            Print #chwin1;'42WCENABLE';
            Call ChangeAdjCode(status)
            If status = 0
              Print #chwin1;'19WCSELECT CU';SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",TicketDetail.AdjCode$)
              Print #chwin1;'0WCSELECT';
            End If 
          Else 
            Print #chwin1;'42WCDISABLE';
            Print #chwin1;'19WCSELECT CU 0WCSELECT';
            TicketDetail.AdjCode$ = ""
          End If 
        End If 
      Case 'F42' ! Select Adjustment Code
        Call ChangeAdjCode(status)
        If status = 0
          Print #chwin1;'19WCSELECT CU';SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",TicketDetail.AdjCode$)
          Print #chwin1;'0WCSELECT';
        End If 
      Case 'F43' ! Car Bodies
        Call SAIKeyPad("Enter Number of Car Bodies",num,3,status)
        If status = 0
          TicketDetail.CarBodies = num
          Print #chwin1;'20WCSELECT CU';Str$(TicketDetail.CarBodies);'0WCSELECT';
        End If 
      Case 'F45' To 'F48' ! Change in Scale
        ReadScale = Asc(w$) - Asc('F44')
        If ReadScale > 0 And ReadScale <= NumScales
          If DisableManualWt$ <> "Y" Or TicketNo$[1,1] = "M" Print #chwin1;'36WCENABLE 38WCENABLE'; ! Manual Weight buttons
          If AllowSplitWt$ = "Y" Print #chwin1;PChr$(51,52);'WCENABLE'; ! Split Weight buttons
          If ScaleIndicators$[ReadScale,ReadScale] = " "
            Print #chwin1;'35WCDISABLE 37WCDISABLE'; ! 39WCDISABLE';
          Else 
            Print #chwin1;'35WCENABLE 37WCENABLE'; ! 39WCENABLE';
          End If 
        End If 
      Case 'F50' ! Cancel
        If ItemCount = 0
          ans = SAITouchYesNo("There will be no items created for this ticket.\15\Are you sure you want to Cancel?")
          If ans = 0 Goto SalesItem_input
        End If 
        status = 1
        Exit Do 
      Case 'F51' ! Add split weight to Gross
        Call GetSplitWeight("G",ReadScale,num,status)
        If status = 0
          TicketDetail.GrossWt = Round(TicketDetail.GrossWt + num,0) ! Round to nearest whole number
          TicketDetail.GrossWtTime# = Tim#(0)
          TicketDetail.GrossWtScale$ = "M"
          TicketDetail.GrossWtWM$ = WeighMaster$
          Call UpdateSalesWeightFields()
          If ScaleCamera$[ReadScale] Call ScaleCamera("M",ScaleCamera$[ReadScale],"G",num)
        End If 
      Case 'F52' ! Add split weight to Tare
        Call GetSplitWeight("T",ReadScale,num,status)
        If status = 0
          TicketDetail.TareWt = Round(TicketDetail.TareWt + num,0) ! Round to nearest whole number
          TicketDetail.TareWtTime# = Tim#(0)
          TicketDetail.TareWtScale$ = "M"
          TicketDetail.TareWtWM$ = WeighMaster$
          Call UpdateSalesWeightFields()
          If ScaleCamera$[ReadScale] Call ScaleCamera("M",ScaleCamera$[ReadScale],"T",num)
        End If 
      Case 'F53' ! Change WeighMaster
        Call ChangeWeighMaster(status)
        If status = 0 Print #chwin1;'8FONTSIZE';@xWM,yWM;"On Duty:  ";WMName$;'12FONTSIZE';
    End Select 
  Loop 
  Close #chwin1
  If DefScale = 0 Let ReadScale = DefScale
End Sub 
Sub PrintTicketHeader(ch,LineTerm$)
  Select Case DocLang$
    Case "FC"
      If TicketHeader.TktMode$ = "T" And Trim$(TicketHeader.SrcTicketNo$) Print #ch;" Billet Source # " + TicketHeader.SrcTicketNo$;LineTerm$
      Print #ch;SAISpaceFill$("ID de V\351\hicule/Vehicle ID:  ",41);"Date d'exp\351\dition/Ship Date:";LineTerm$
      Print #ch;SAISpaceFill$(TicketHeader.InYardID$,61);DateUsing$(TicketHeader.ShipmentDate#,dateformat$);LineTerm$
    Case Else 
      temp$ = "Vehicle ID:  " + TicketHeader.InYardID$
      If TicketHeader.TktMode$ = "T" And Trim$(TicketHeader.SrcTicketNo$) Let temp$ = temp$ + " Source Ticket # " + TicketHeader.SrcTicketNo$
      Print #ch;SAISpaceFill$(temp$,49);"Ship Date:  ";DateUsing$(TicketHeader.ShipmentDate#,dateformat$);LineTerm$
  End Select 
  If PrintVehicleTagInfo$ = "Y"
    If TicketIdentity.VehicleTagNo$
      Print #ch;LineTerm$
      Print #ch;"Vehicle Tag No:  ";SAISpaceFill$(TicketIdentity.VehicleTagNo$,17);"State:  ";TicketIdentity.VehicleTagState$;LineTerm$
    End If 
    If TicketIdentity.TrailerTagNo$
      If TicketIdentity.VehicleTagNo$ = "" Print #ch;LineTerm$
      Print #ch;"Trailer Tag No:  ";SAISpaceFill$(TicketIdentity.TrailerTagNo$,17);"State:  ";TicketIdentity.TrailerTagState$;LineTerm$
    End If 
  End If 
  Print #ch;LineTerm$
  If Trim$(TicketHeader.VehNo$) Or Trim$(TicketHeader.RFID$) Or TicketHeader.AxleCount
    If Trim$(TicketHeader.VehNo$) Or Trim$(TicketHeader.RFID$)
      temp$ = VehicleNoDescription$ + ":  " + TicketHeader.VehNo$
      If Trim$(TicketHeader.RFID$) Let temp$ = SAISpaceFill$(temp$,33) + "(RFID:  " + TicketHeader.RFID$ + ")"
      Print #ch;temp$;LineTerm$
    End If 
    If TicketHeader.AxleCount
      Print #ch;"Total Axle Count: ";Str$(TicketHeader.AxleCount);LineTerm$
    End If 
    Print #ch;LineTerm$
  End If 
  ! Supplier No Line
  Select Case DocLang$
    Case "FC"
      If TicketHeader.TktMode$ = "T"
        Print #ch;"Transf\351\rer de/";LineTerm$
      Else 
        Print #ch;"Achet\351\ de/";LineTerm$
      End If 
  End Select 
  If TicketHeader.TktMode$ = "T"
    temp$ = "Transfer From:   " + TicketHeader.EntityNo$
  Else 
    temp$ = "Purchased From:  " + TicketHeader.EntityNo$
  End If 
  If ScrapSRecord$[78,78] = "Y" And Trim$(TicketHeader.TaxID$) ! GST
    If z$[644,646] = "255" Or z$[644,646] = "355"
      temp$ = SAISpaceFill$(temp$,32) + gbl_bin$ + " # " + Trim$(TicketHeader.TaxID$)
    Else If z$[644,646] = "351" ! TMR
      ! Suppress TaxID
    Else 
      temp$ = SAISpaceFill$(temp$,32) + "Tax I.D.# " + Trim$(TicketHeader.TaxID$)
    End If 
  End If 
  Print #ch;temp$;LineTerm$ ! Supplier No. Line
  If AgencyBrokSupplierDesc$ And Supplier.AccountType$ = "S"
    Print #ch;" ";AgencyBrokSupplierDesc$;LineTerm$
  End If 
  ! Name Line [and Drivers License]
  temp$ = " " + Trim$(TicketHeader.Name$)
  If TicketHeader.EntityNo$[1,3] <> "CP0" And PrintDriverName$ = "Y"
    If Trim$(TicketIdentity.FullName$) And Trim$(TicketHeader.Name$) <> Trim$(TicketIdentity.FullName$[1,30])
      Print #ch;temp$;LineTerm$
      If Len(Trim$(TicketIdentity.FullName$)) > 26
        temp$ = " c/o " + TicketIdentity.FullName$
      Else 
        temp$ = " c/o " + SAISpaceFill$(TicketIdentity.FullName$,26)
      End If 
    End If 
  End If 
  TicketHeader.IDNumber$ = Trim$(TicketHeader.IDNumber$)
  If TicketHeader.IDNumber$ And PrintDriverIDNumber$ = "Y"
    If TicketIdentity.IDIssuer$
      temp2$ = TicketHeader.IDNumber$ + " (" + TicketIdentity.IDIssuer$ + ")"
      x = Len(temp2$)
      If x > 22
        If x > 25
          If x + Len(temp$) + 13 > 69
            temp$ = SAISpaceFill$(temp$,32) + "Lic./ID No: " + TicketHeader.IDNumber$
          Else 
            temp$ = temp$ + SAIFill$("Lic./ID No: " + temp2$,"R"," ",69 - Len(temp$))
          End If 
        Else 
          temp$ = SAISpaceFill$(temp$,32) + "Lic./ID No: " + temp2$
        End If 
      Else 
        temp$ = SAISpaceFill$(temp$,32) + "License/ID No: " + temp2$
      End If 
    Else 
      If Len(TicketHeader.IDNumber$) > 22
        temp$ = SAISpaceFill$(temp$,32) + "Lic./ID No: " + TicketHeader.IDNumber$
      Else 
        temp$ = SAISpaceFill$(temp$,32) + "License/ID No: " + TicketHeader.IDNumber$
      End If 
    End If 
  End If 
  Print #ch;temp$;LineTerm$ ! Name Line
  ! Address1 Line [and ID Exp. Date]
  temp$ = " " + TicketHeader.Address1$
  If PrintIDExpDate$ = "Y" And PrintDriverIDNumber$ = "Y" And Trim$(TicketHeader.IDNumber$) And TicketIdentity.IDExpirationDate#
    temp$ = SAISpaceFill$(temp$,38) + "Expires: " + DateUsing$(TicketIdentity.IDExpirationDate#,DateFormat1$)
  End If 
  Print #ch;temp$;LineTerm$ ! Address1 Line
  ! Address2 Line - if present
  If Trim$(TicketHeader.Address2$)
    Print #ch;" ";Trim$(TicketHeader.Address2$);LineTerm$ ! Address2 Line
  End If 
  ! City, St, ZIP Line [and Date of Birth]
  If Trim$(TicketHeader.City$ + TicketHeader.State$ + TicketHeader.PostCode$)
    temp$ = " " + Trim$(TicketHeader.City$) + ", " + Trim$(TicketHeader.State$) + "  " + Trim$(TicketHeader.PostCode$)
  Else 
    temp$ = " "
  End If 
  If Len(temp$) > 31 ! Print City, St, ZIP on its own line because it's too long
    Print #ch;temp$;LineTerm$ ! City, St, ZIP Line
    temp$ = " "
  End If 
  PhonePrinted = 0 \ CFCPrinted = 0
  If PrintDateOfBirth$ <> "N" And TicketIdentity.DateOfBirth#
    If PrintDateOfBirth$ = "Y"
      temp$ = SAISpaceFill$(temp$,32) + "Date of Birth: " + DateUsing$(TicketIdentity.DateOfBirth#,DateFormat1$)
    Else 
      temp$ = SAISpaceFill$(temp$,47) + DateUsing$(TicketIdentity.DateOfBirth#,DateFormat1$)
    End If 
  Else If PrintPhoneNo$ = "Y" And Trim$(TicketHeader.PhoneNo$)
    temp$ = SAISpaceFill$(temp$,32) + "Phone: " + TicketHeader.PhoneNo$
    PhonePrinted = 1
  Else If PrintCFCOnFile$ = "Y" And Supplier.SignatureOnFile$ = "Y" And Supplier.CFCFormDate#
    If Supplier.CFCFormDate# > TicketHeader.ShipmentDate#
      temp$ = SAISpaceFill$(temp$,32) + "CFC CONTRACT ON FILE"
    Else 
      temp$ = SAISpaceFill$(temp$,32) + "CFC CONTRACT EXPIRED"
    End If 
    CFCPrinted = 1
  End If 
  Print #ch;temp$;LineTerm$ ! City, St, ZIP Line
  ! Phone No Line
  If PrintPhoneNo$ = "Y" And Trim$(TicketHeader.PhoneNo$) And PhonePrinted = 0
    Print #ch;Rep$(" ",32);"Phone: ";TicketHeader.PhoneNo$;LineTerm$ ! Phone No on its own line
  End If 
  If PrintCFCOnFile$ = "Y" And CFCPrinted = 0 And Supplier.CFCFormDate#
    If Supplier.CFCFormDate# > TicketHeader.ShipmentDate#
      Print #ch;Rep$(" ",32);"CFC CONTRACT ON FILE";LineTerm$ ! CFC on its own line
    Else 
      Print #ch;Rep$(" ",32);"CFC CONTRACT EXPIRED";LineTerm$ ! CFC on its own line
    End If 
  End If 
  ! Skip a line and print other stuff
  Print #ch;LineTerm$
  If PrintTraderName$ = "Y" And Trim$(TicketHeader.Trader$)
    Print #ch;"Trader: ";SAICodesTableDesc$(ch_db,"Codes_Trader","TraderCode",TicketHeader.Trader$);LineTerm$
    Print #ch;LineTerm$
  End If 
  ! DJJ Reward Points
  If gbl.CustomerGroupID$ = "DJJ" And TicketIdentity.IDNumber$
    PointTotal = SQLNull()
    Try 
      SQL$ = "SELECT cs.CurrentPointTotal FROM LP_CustomerSummary cs"
      SQL$ = SQL$ + " JOIN LP_CustomerSummarySupplierID_XRef xref ON cs.CustomerSummaryID=xref.CustomerSummaryID"
      SQL$ = SQL$ + " WHERE xref.IDNumber=" + SQLV$(TicketIdentity.IDNumber$)
      SQL$ = SQL$ + " AND xref.IDType=" + SQLV$(TicketIdentity.IDType$)
      SQL$ = SQL$ + " AND xref.IDIssuer=" + SQLV$(TicketIdentity.IDIssuer$)
      Search #ch_db;SQL$
      If Chf(ch_db)
        Map #ch_db;
        Read #ch_db;PointTotal
      End If 
    Else 
      PointTotal = SQLNull()
    End Try 
    If PointTotal <> SQLNull()
      Print #ch;"Reward Points on file: ";Str$(PointTotal);LineTerm$
      Print #ch;LineTerm$
    End If 
  End If 
  SkipLine = 0
  If TicketHeader.OrderNo$
    SkipLine = 1
    Select Case DocLang$
      Case "FC"
        temp$ = "Commande/Order # "
      Case Else 
        temp$ = "Order # "
    End Select 
    If TicketHeader.OrderNo$ = "UNKNOWN"
      temp$ = temp$ + "UNKNOWN"
    Else 
      temp$ = temp$ + TicketHeader.OrderNo$ + "-" + TicketHeader.OrderLine$
    End If 
    If Trim$(TicketHeader.ShipOrdNo$)
      temp$ = SAISpaceFill$(temp$,35) + "Supplier SO # " + TicketHeader.ShipOrdNo$
    End If 
    Print #ch;temp$;LineTerm$
  End If 
  If SunValley And TicketHeader.EntityNo$ = SV_SupplierNo$
    SkipLine = 1
    Print #ch;"Driver's Name: ";SAISpaceFill$(TicketHeader.LAInfo_DriversName$,17);"Dist: ";SAISpaceFill$(TicketHeader.LAInfo_District$,4);
    Print #ch;"Route#: ";SAISpaceFill$(TicketHeader.LAInfo_Route$,7);"Sect: ";TicketHeader.LAInfo_Section$;LineTerm$
  Else 
    If Trim$(TicketHeader.SuppShipNo$)
      SkipLine = 1
      Print #ch;SAISpaceFill$("Supplier Shipment # " + TicketHeader.SuppShipNo$,35);
    End If 
    If Trim$(TicketHeader.SuppInvNo$)
      SkipLine = 1
      If z$[644,646] = "255" Or z$[644,646] = "355"
        Print #ch;"Delivery Docket # ";TicketHeader.SuppInvNo$;LineTerm$
      Else 
        Print #ch;"Supplier Invoice # ";TicketHeader.SuppInvNo$;LineTerm$
      End If 
      !    else if SkipLine
      !      print #ch;LineTerm$
    End If 
  End If 
  If Trim$(TicketHeader.CarrierNo$)
    SkipLine = 1
    Select Case DocLang$
      Case "FC"
        Print #ch;"Transporteur/Carrier: ";
      Case Else 
        Print #ch;"Carrier: ";
    End Select 
    Print #ch;TicketHeader.CarrierNo$;" - ";SAICodesFileDesc$(ch_110Aro,"C",TicketHeader.CarrierNo$);
    If OTMFreight$ = "Y" And TicketHeader.CarrierRefNo$
      Print #ch;"      OTM Ref # ";TicketHeader.CarrierRefNo$;
    Else If Trim$(TicketHeader.TripTicketNo$)
      Print #ch;"      Trip Ticket # ";TicketHeader.TripTicketNo$;
    End If 
    Print #ch;LineTerm$
  End If 
  If Trim$(TicketHeader.VehSize$) And PrintVehicleSize$ = "Y"
    Search #ch_db;"SELECT " + SQLN$(CodesVehicleSize.) + " FROM Codes_Vehicle_Size WHERE VehicleType=" + SQLV$(TicketHeader.VehType$) + " AND VehicleSize=" + SQLV$(TicketHeader.VehSize$)
    If Chf(ch_db)
      Map Record #ch_db As Codes_Vehicle_Size
      Read Record #ch_db;CodesVehicleSize.
      Print #ch;"Veh Size: ";CodesVehicleSize.Description$;LineTerm$
      SkipLine = 1
    End If 
  End If 
  If SkipLine Print #ch;LineTerm$
  ! Look for Vendor Ticket comments
  ktemp$ = "V" + SAISpaceFill$(TicketHeader.EntityNo$,6) + Rep$(" ",18) + "TKV"
  ksav$ = ktemp$
  Search #ch_1115ro,2,1;ktemp$,r,e
  If e = 0
    Do 
      Call SAIReadRecord(ch_1115ro,recdef_1115.,"Y","U",r,GblCmtTmp$,stat,errmess$)
      Print #ch;Trim$(GblCmtTmp$[31,80]);LineTerm$
      Search #ch_1115ro,3,1;ktemp$,r,e
      If e Exit Do 
      If ktemp$[1,Len(ksav$)] <> ksav$ Exit Do 
    Loop 
    Print #ch;LineTerm$
  End If 
End Sub 
Sub PrintSalesTicketHeader(ch,LineTerm$)
  Select Case DocLang$
    Case "FC"
      Print #ch;SAISpaceFill$("ID de V\351\hicule/Vehicle ID:  ",41);"Date d'exp\351\dition/Ship Date:";LineTerm$
      Print #ch;SAISpaceFill$(TicketHeader.InYardID$,61);DateUsing$(TicketHeader.ShipmentDate#,dateformat$);LineTerm$
    Case Else 
      temp$ = "Vehicle ID:  " + TicketHeader.InYardID$
      If TicketHeader.TktMode$ = "T" And Trim$(TicketHeader.SrcTicketNo$) Let temp$ = temp$ + " Source Ticket # " + TicketHeader.SrcTicketNo$
      Print #ch;SAISpaceFill$(temp$,49);"Ship Date:  ";DateUsing$(TicketHeader.ShipmentDate#,dateformat$);LineTerm$
  End Select 
  Print #ch;LineTerm$
  If Trim$(TicketHeader.VehNo$) Or Trim$(TicketHeader.RFID$) Or TicketHeader.AxleCount
    If Trim$(TicketHeader.VehNo$) Or Trim$(TicketHeader.RFID$)
      temp$ = VehicleNoDescription$ + ":  " + TicketHeader.VehNo$
      If Trim$(TicketHeader.RFID$) Let temp$ = SAISpaceFill$(temp$,33) + "(RFID:  " + TicketHeader.RFID$ + ")"
      Print #ch;temp$;LineTerm$
    End If 
    If TicketHeader.AxleCount
      Print #ch;"Total Axle Count: ";Str$(TicketHeader.AxleCount);LineTerm$
    End If 
    Print #ch;LineTerm$
  End If 
  Select Case DocLang$
    Case "FC"
      If TicketHeader.TktMode$ = "T"
        Print #ch;"Transf\351\rer \340\ l'/";LineTerm$
      Else 
        Print #ch;"Vendu \340\/";LineTerm$
      End If 
  End Select 
  If TicketHeader.TktMode$ = "T"
    Print #ch;"Transfer To:  ";TicketHeader.EntityNo$;LineTerm$
  Else 
    Print #ch;"Sold To:  ";TicketHeader.EntityNo$;LineTerm$
  End If 
  If ExportAddress.AddressType$
    Print #ch;" ";ExportAddress.ExportAddress1$;
    If Trim$(TicketHeader.IDNumber$) And PrintDriverIDNumber$ = "Y"
      Print #ch;" (License/ID No: ";Trim$(SAISpaceFill$(TicketHeader.IDNumber$,14));")";
    End If 
    Print #ch;LineTerm$
    Print #ch;" ";ExportAddress.ExportAddress2$;LineTerm$
    Print #ch;" ";ExportAddress.ExportAddress3$;LineTerm$
    Print #ch;" ";ExportAddress.ExportAddress4$;LineTerm$
    If ExportAddress.ExportAddress5$ Print #ch;" ";ExportAddress.ExportAddress5$;LineTerm$
  Else 
    Print #ch;" ";SAISpaceFill$(TicketHeader.Name$,30);
    If Trim$(TicketHeader.IDNumber$) And PrintDriverIDNumber$ = "Y"
      Print #ch;"  (License/ID No: ";Trim$(SAISpaceFill$(TicketHeader.IDNumber$,18));")";
    End If 
    Print #ch;LineTerm$
    Print #ch;" ";SAISpaceFill$(TicketHeader.Address1$,30);
    If ScrapSRecord$[78,78] = "Y" And Trim$(TicketHeader.TaxID$) ! GST
      If z$[644,646] = "355"
        Print #ch;"  GST # ";Trim$(TicketHeader.TaxID$);
      Else If z$[644,646] = "351" ! TMR
        ! Suppress TaxID
      Else 
        Print #ch;"  Tax I.D.# ";Trim$(TicketHeader.TaxID$);
      End If 
    End If 
    Print #ch;LineTerm$
    If Trim$(TicketHeader.Address2$) Print #ch;" ";TicketHeader.Address2$;LineTerm$
    If Trim$(TicketHeader.City$ + TicketHeader.State$ + TicketHeader.PostCode$)
      Print #ch;" ";Trim$(TicketHeader.City$);", ";Trim$(TicketHeader.State$);"  ";Trim$(TicketHeader.PostCode$);LineTerm$
    End If 
  End If 
  Print #ch;LineTerm$
  SkipLine = 0
  If Trim$(TicketHeader.OrderNo$)
    SkipLine = 1
    Print #ch;"Order # ";TicketHeader.OrderNo$ + "-" + TicketHeader.OrderLine$;
    Print #ch;"  Mat Req # ";
    If Trim$(TicketHeader.MatReqNo$)
      Print #ch;TicketHeader.MatReqNo$ + "-" + TicketHeader.MatReqLine$;
    Else 
      Print #ch;Rep$(" ",13);
    End If 
    If Trim$(TicketHeader.ShipOrdNo$) Print #ch;"  Customer PO # ";TicketHeader.ShipOrdNo$;
    Print #ch;LineTerm$
  End If 
  If Trim$(TicketHeader.CarrierNo$)
    SkipLine = 1
    Select Case DocLang$
      Case "FC"
        Print #ch;"Transporteur/Carrier: ";
      Case Else 
        Print #ch;"Carrier: ";
    End Select 
    Print #ch;TicketHeader.CarrierNo$;" - ";SAICodesFileDesc$(ch_110Aro,"C",TicketHeader.CarrierNo$);
    If OTMFreight$ = "Y" And TicketHeader.CarrierRefNo$
      Print #ch;"      OTM Ref # ";TicketHeader.CarrierRefNo$;
    Else If Trim$(TicketHeader.TripTicketNo$)
      Print #ch;"      Trip Ticket # ";TicketHeader.TripTicketNo$;
    End If 
    Print #ch;LineTerm$
  End If 
  If Trim$(TicketHeader.VehSize$) And PrintVehicleSize$ = "Y"
    Search #ch_db;"SELECT " + SQLN$(CodesVehicleSize.) + " FROM Codes_Vehicle_Size WHERE VehicleType=" + SQLV$(TicketHeader.VehType$) + " AND VehicleSize=" + SQLV$(TicketHeader.VehSize$)
    If Chf(ch_db)
      Map Record #ch_db As Codes_Vehicle_Size
      Read Record #ch_db;CodesVehicleSize.
      Print #ch;"Veh Size: ";CodesVehicleSize.Description$;LineTerm$
      SkipLine = 1
    End If 
  End If 
  If SkipLine Print #ch;LineTerm$
End Sub 
Sub PrintAltUnitTicketItem(ch,LineTerm$,ItemNo)
  !              "123456789^123456789^123456789^123456789^123456789^123456789^123456789"
  !                                                            ------------ Kilograms ------------
  !    print #ch;"Itm Shpmnt Material               Gross    Tare     Net    Adj  Pd Wt";LineTerm$
  !        "##. XXXXXX XXXXXXXXXXXXXXXXXXXXX------#m------#m------#------#------#"
  !              StockPile=XXX                  Adj Reason: XXXXXXXXXXXXXXX
  !                                       Count=XX
  !                                       Car Bodies=XX
  If ItemNo < 2
    Clear TotalNetWt,TotalAdjWt
    temp$ = Rep$("-",35)
    temp2$ = " " + Trim$(alt_descum$) + "s "
    x = Round((Len(temp$) - Len(temp2$)) / 2,0)
    temp$[x + 1,x + Len(temp2$)] = temp2$
    If WeightOnly
      Print #ch;Rep$(" ",34);temp$;LineTerm$ ! Alt Unit of Measure
      Print #ch;"Itm Shpmnt Material               Gross    Tare     Net    Adj Tot Wt";LineTerm$
    Else 
      Print #ch;Rep$(" ",34);temp$;LineTerm$ ! Alt Unit of Measure
      Print #ch;"Itm Shpmnt Material               Gross    Tare     Net    Adj  Pd Wt";LineTerm$
    End If 
    Print #ch;Rep$("-",69);LineTerm$
  Else 
    Print #ch;LineTerm$
  End If 
  If ItemNo
    Clear TicketDetail.
    TicketDetail.GrossWt = Round(Items.[ItemNo].GrossWt / alt_cf,0)
    TicketDetail.TareWt = Round(Items.[ItemNo].TareWt / alt_cf,0)
    TicketDetail.AdjWt = Round(Items.[ItemNo].AdjWt / alt_cf,0)
    TicketDetail.NetWt = TicketDetail.GrossWt - TicketDetail.TareWt
    Print #ch; Using "##. ";ItemNo;
    If TicketHeader.TktType$ = "S" And Items.[ItemNo].MaterialCode$[1,2] = "*M"
      Print #ch;SAISpaceFill$(TicketHeader.TicketNo$,6);" "; !Print tkt# on *Ms (ship# is meaningless)
    Else 
      Print #ch;SAISpaceFill$(Items.[ItemNo].ShipmentNo$,6);" ";
    End If 
    If WeightOnly
      Print #ch;SAISpaceFill$(Items.[ItemNo].MaterialDesc$,21);
      If Items.[ItemNo].GrossWt
        Print #ch;FormatNum$(TicketDetail.GrossWt,7);ScaleNumber$(Items.[ItemNo].GrossWtScale$);
      Else 
        Print #ch;Rep$(" ",8);
      End If 
      If Items.[ItemNo].TareWt
        Print #ch;FormatNum$(TicketDetail.TareWt,7);ScaleNumber$(Items.[ItemNo].TareWtScale$);
      Else 
        Print #ch;Rep$(" ",8);
      End If 
      If Items.[ItemNo].GrossWt And Items.[ItemNo].TareWt
        Print #ch;FormatNum$(TicketDetail.NetWt,7);FormatNum$(TicketDetail.AdjWt,7);FormatNum$(TicketDetail.NetWt + TicketDetail.AdjWt,7);LineTerm$
      Else 
        Print #ch;LineTerm$
      End If 
    Else 
      Print #ch;SAISpaceFill$(Items.[ItemNo].MaterialDesc$,21);
      Print #ch;FormatNum$(TicketDetail.GrossWt,7);ScaleNumber$(Items.[ItemNo].GrossWtScale$);
      Print #ch;FormatNum$(TicketDetail.TareWt,7);ScaleNumber$(Items.[ItemNo].TareWtScale$);
      Print #ch;FormatNum$(TicketDetail.NetWt,7);FormatNum$(TicketDetail.AdjWt,7);FormatNum$(TicketDetail.NetWt + TicketDetail.AdjWt,7);LineTerm$
    End If 
    If Trim$(Items.[ItemNo].StockPile$) And PrintStockPile$ = "Y"
      If TicketHeader.TktMode$ = "T" And TicketHeader.TktType$ = "P"
        If PrintMaterialCode$ = "Y"
          Print #ch;Rep$(" ",11);SAISpaceFill$(Items.[ItemNo].MaterialCode$ + "-" + TicketHeader.SrcInvCode$[6,8] + " -> " + Items.[ItemNo].StockPile$,29);
        Else 
          Print #ch;Rep$(" ",11);SAISpaceFill$("StockPile=" + TicketHeader.SrcInvCode$[6,8] + " -> " + Items.[ItemNo].StockPile$,29);
        End If 
      Else 
        If PrintMaterialCode$ = "Y"
          Print #ch;Rep$(" ",11);SAISpaceFill$(Items.[ItemNo].MaterialCode$ + "-" + Items.[ItemNo].StockPile$,29);
        Else 
          Print #ch;Rep$(" ",11);SAISpaceFill$("StockPile=" + Items.[ItemNo].StockPile$,29);
        End If 
      End If 
      x = 0
    Else If PrintMaterialCode$ = "Y"
      Print #ch;Rep$(" ",11);Items.[ItemNo].MaterialCode$;Rep$(" ",23);
      x = 0
    Else 
      x = 42
    End If 
    If Items.[ItemNo].RedCount
      Print #ch;Rep$(" ",x);"Count=";Str$(Items.[ItemNo].RedCount);LineTerm$
      x = 42
    End If 
    If Trim$(Items.[ItemNo].AdjCode$)
      Print #ch;Rep$(" ",x);"Adj Reason: ";SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",Items.[ItemNo].AdjCode$);LineTerm$
      x = 42
    End If 
    If Items.[ItemNo].CarBodies
      Print #ch;Rep$(" ",x);"Car Bodies=";Str$(Items.[ItemNo].CarBodies);LineTerm$
      x = 42
    End If 
    If x = 0 Print #ch;LineTerm$
    TotalNetWt = TotalNetWt + TicketDetail.NetWt
    TotalAdjWt = TotalAdjWt + TicketDetail.AdjWt
  End If 
  If ItemNo = ItemCount Or ItemNo = 0
    Print #ch;Rep$("-",69);LineTerm$
    If WeightOnly = 0
      Print #ch;" Totals";
      If TicketTotals.TotalCars
        temp$ = Str$(TicketTotals.TotalCars)
        Print #ch;"    Car Bodies=";temp$;Rep$(" ",26 - Len(temp$));
      Else 
        Print #ch;Rep$(" ",41);
      End If 
      Print #ch;FormatNum$(TotalNetWt,7);FormatNum$(TotalAdjWt,7);FormatNum$(TotalNetWt + TotalAdjWt,7);LineTerm$
    End If 
    Print #ch;LineTerm$
  End If 
End Sub 
Sub PrintAltUnitMaterialSummary(chprt,LineTerm$)
  Print #chprt;LineTerm$
  Print #chprt;LineTerm$
  !  print #chprt;"123456789^123456789^123456789^123456789^123456789^123456789^123456789"
  !  print #chprt;"Material Summary      Pd Wt (lb)   Price $/Unit      Extended Price $"
  !  print #chprt;"xxxxxxxxxxxxxxxxxxxxxx  ------# ----#.####/xxxxxxxxxxxx   ----,--#.##"
  temp$ = " Pd Wt"
  Print #chprt;"Material Summary     ";temp$;" (";LCase$(AltWeightUM$);")   Price $/Unit      Extended Price $";LineTerm$
  Print #chprt;Rep$("-",69);LineTerm$
  Clear TotalPrice,TotalCbkFrt
  For i = 1 To ItemCount
    Clear TicketDetail.
    TicketDetail.GrossWt = Round(Items.[i].GrossWt / alt_cf,0)
    TicketDetail.TareWt = Round(Items.[i].TareWt / alt_cf,0)
    TicketDetail.AdjWt = Round(Items.[i].AdjWt / alt_cf,0)
    TicketDetail.NetWt = TicketDetail.GrossWt - TicketDetail.TareWt
    TicketDetail.Price = Items.[i].Price / ExchangeRate
    TicketDetail.MatExt = Round(Items.[i].MatExt / ExchangeRate,1)
    TicketDetail.RedRate = Items.[i].RedRate / ExchangeRate
    TicketDetail.RedExt = Round(Items.[i].RedExt / ExchangeRate,1)
    Print #chprt;SAISpaceFill$(Items.[i].MaterialDesc$,22);"  ";
    If Items.[i].RedCount
      Print #chprt;FormatNum$(Items.[i].NetWt + Items.[i].AdjWt,7);Rep$(" ",34);"0.00";LineTerm$
      Print #chprt;"   Redemption";Rep$(" ",9);
      Print #chprt; Using "-----#";Items.[i].RedCount;"cnt  ";
      Print #chprt; Using "----#.###";TicketDetail.RedRate;"/Each";Rep$(" ",11);
      Print #chprt; Using "-,---,--#.#";TicketDetail.RedExt;LineTerm$
    Else 
      Print #chprt;FormatNum$(TicketDetail.NetWt + TicketDetail.AdjWt,7);" ";
      Print #chprt; Using "-----#.###";TicketDetail.Price;"/";
      temp$ = LCase$(SAISpaceFill$(SAICodesFileDesc$(ch_110Aro,"U",Items.[i].PriceUM$),12))
      temp$[1,1] = UCase$(temp$[1,1])
      Print #chprt; Using "-,---,--#.#";temp$;"   ";TicketDetail.MatExt;LineTerm$
      If Items.[i].RedNetWt
        temp$ = LCase$(SAISpaceFill$(SAICodesFileDesc$(ch_110Aro,"U",gbl_um$),12))
        temp$[1,1] = UCase$(temp$[1,1])
        Print #chprt;"   Redemption";Rep$(" ",19);
        Print #chprt; Using "-----#.###";TicketDetail.RedRate;"/";
        Print #chprt; Using "-,---,--#.#";temp$;"   ";TicketDetail.RedExt;LineTerm$
      End If 
    End If 
    TotalCbkFrt = TotalCbkFrt + Items.[i].FrtCbk
    TotalPrice = TotalPrice + TicketDetail.MatExt
  Next i
  If TotalCbkFrt Let TotalCbkFrt = Round(TotalCbkFrt / ExchangeRate,1)
  If TicketTotals.TotalPaid Let TotalPrice = Round(TicketTotals.TotalPaid / ExchangeRate,1)
End Sub 
Sub PrintTicketItem(ch,LineTerm$,ItemNo)
  !              "123456789^123456789^123456789^123456789^123456789^123456789^123456789"
  !                                                                   ---------- Pounds ----------
  !    print #ch;"Itm Shpmnt Material                         Gross      Tare       Net";LineTerm$
  !                         "##. XXXXXX XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-------#m--------#m--------#"
  !                                                            -------------- Pounds -------------
  !    print #ch;"Itm Shpmnt Material               Gross    Tare     Net    Adj  Pd Wt";LineTerm$
  !        "##. XXXXXX XXXXXXXXXXXXXXXXXXXXX------#m------#m------#------#------#"
  !              StockPile=XXX                  Adj Reason: XXXXXXXXXXXXXXX
  !                                       Count=XX
  !                                       Car Bodies=XX
  If ItemNo < 2
    temp$ = Rep$("-",35)
    Select Case DocLang$
      Case "FC"
        If UCase$(gbl_descum$) = "POUND"
          temp2$ = " Livres/" + Trim$(gbl_descum$) + "s "
        Else 
          temp2$ = " " + Trim$(gbl_descum$) + "s "
        End If 
      Case Else 
        temp2$ = " " + Trim$(gbl_descum$) + "s "
    End Select 
    x = Round((Len(temp$) - Len(temp2$)) / 2,0)
    temp$[x + 1,x + Len(temp2$)] = temp2$
    If WeightOnly
      Print #ch;Rep$(" ",34);temp$;LineTerm$ ! Global Unit of Measure
      Print #ch;"Itm Shpmnt Material               Gross    Tare     Net    Adj Tot Wt";LineTerm$
    Else 
      If PrintTicketWeightAdjustmentAsPr()
        temp$ = Rep$("-",28)
        temp2$ = " " + Trim$(gbl_descum$) + "s "
        x = Round((Len(temp$) - Len(temp2$)) / 2,0)
        temp$[x + 1,x + Len(temp2$)] = temp2$
        Print #ch;Rep$(" ",41);temp$;LineTerm$ ! Global Unit of Measure
        Print #ch;"Itm Shpmnt Material                         Gross      Tare       Net";LineTerm$
      Else 
        Print #ch;Rep$(" ",34);temp$;LineTerm$ ! Global Unit of Measure
        Select Case DocLang$
          Case "FC"
            Print #ch;"    Exp/   Mat\351\riel/              Brut/                        Poids/";LineTerm$
            Print #ch;"Itm Shpmnt Material               Gross    Tare     Net    Adj  Pd Wt";LineTerm$
          Case Else 
            Print #ch;"Itm Shpmnt Material               Gross    Tare     Net    Adj  Pd Wt";LineTerm$
        End Select 
      End If 
    End If 
    Print #ch;Rep$("-",69);LineTerm$
  Else 
    Print #ch;LineTerm$
  End If 
  If ItemNo
    !    print #ch;Using "##. ";itemno;SAISpaceFill$(Items.[itemno].ShipmentNo$,6);" ";SAISpaceFill$(Items.[itemno].MaterialDesc$,21);
    Print #ch; Using "##. ";ItemNo;
    If TicketHeader.TktType$ = "S" And Items.[ItemNo].MaterialCode$[1,2] = "*M"
      Print #ch;SAISpaceFill$(TicketHeader.TicketNo$,6);" "; !Print tkt# on *Ms (ship# is meaningless)
    Else 
      Print #ch;SAISpaceFill$(Items.[ItemNo].ShipmentNo$,6);" ";
    End If 
    If WeightOnly
      Print #ch;SAISpaceFill$(Items.[ItemNo].MaterialDesc$,21);
      If Items.[ItemNo].GrossWt
        Print #ch;FormatNum$(Items.[ItemNo].GrossWt,7);ScaleNumber$(Items.[ItemNo].GrossWtScale$);
      Else 
        Print #ch;Rep$(" ",8);
      End If 
      If Items.[ItemNo].TareWt
        Print #ch;FormatNum$(Items.[ItemNo].TareWt,7);ScaleNumber$(Items.[ItemNo].TareWtScale$);
      Else 
        Print #ch;Rep$(" ",8);
      End If 
      If Items.[ItemNo].GrossWt And Items.[ItemNo].TareWt
        Print #ch;FormatNum$(Items.[ItemNo].NetWt,7);FormatNum$(Items.[ItemNo].AdjWt,7);FormatNum$(Items.[ItemNo].NetWt + Items.[ItemNo].AdjWt,7);LineTerm$
      Else 
        Print #ch;LineTerm$
      End If 
    Else 
      If PrintTicketWeightAdjustmentAsPr()
        Print #ch;SAISpaceFill$(Items.[ItemNo].MaterialDesc$,30);
        Print #ch;FormatNum$(Items.[ItemNo].GrossWt,8);ScaleNumber$(Items.[ItemNo].GrossWtScale$);
        Print #ch;FormatNum$(Items.[ItemNo].TareWt,9);ScaleNumber$(Items.[ItemNo].TareWtScale$);
        Print #ch;FormatNum$(Items.[ItemNo].NetWt,9);LineTerm$
      Else 
        Print #ch;SAISpaceFill$(Items.[ItemNo].MaterialDesc$,21);
        Print #ch;FormatNum$(Items.[ItemNo].GrossWt,7);ScaleNumber$(Items.[ItemNo].GrossWtScale$);
        Print #ch;FormatNum$(Items.[ItemNo].TareWt,7);ScaleNumber$(Items.[ItemNo].TareWtScale$);
        If ItemNo = 1 And Items.[1].MaterialCode$[1,2] = "*M" And ItemCount > 1 And z$[644,646] = "255"
          Print #ch;FormatNum$(Items.[ItemNo].NetWt,7);LineTerm$ ! Skip Adj and Pd Wt on *MIX line for Sims AUS
        Else 
          Print #ch;FormatNum$(Items.[ItemNo].NetWt,7);FormatNum$(Items.[ItemNo].AdjWt,7);FormatNum$(Items.[ItemNo].NetWt + Items.[ItemNo].AdjWt,7);LineTerm$
        End If 
      End If 
    End If 
    If Trim$(Items.[ItemNo].StockPile$) And PrintStockPile$ = "Y"
      If TicketHeader.TktMode$ = "T" And TicketHeader.TktType$ = "P"
        If PrintMaterialCode$ = "Y"
          Print #ch;Rep$(" ",11);SAISpaceFill$(Items.[ItemNo].MaterialCode$ + "-" + TicketHeader.SrcInvCode$[6,8] + " -> " + Items.[ItemNo].StockPile$,29);
        Else 
          Print #ch;Rep$(" ",11);SAISpaceFill$("StockPile=" + TicketHeader.SrcInvCode$[6,8] + " -> " + Items.[ItemNo].StockPile$,29);
        End If 
      Else 
        If PrintMaterialCode$ = "Y"
          Print #ch;Rep$(" ",11);SAISpaceFill$(Items.[ItemNo].MaterialCode$ + "-" + Items.[ItemNo].StockPile$,29);
        Else 
          Print #ch;Rep$(" ",11);SAISpaceFill$("StockPile=" + Items.[ItemNo].StockPile$,29);
        End If 
      End If 
      x = 0
    Else If PrintMaterialCode$ = "Y"
      Print #ch;Rep$(" ",11);Items.[ItemNo].MaterialCode$;Rep$(" ",23);
      x = 0
    Else 
      x = 42
    End If 
    If Items.[ItemNo].RedCount
      Print #ch;Rep$(" ",x);"Count=";Str$(Items.[ItemNo].RedCount);LineTerm$
      x = 42
    End If 
    If ItemNo = 1 And Items.[1].MaterialCode$[1,2] = "*M" And ItemCount > 1 And z$[644,646] = "255"
      ! Don't print an Adj Reason description on the *MIX line for Sims AUS
    Else If Items.[ItemNo].AdjWt And Trim$(Items.[ItemNo].AdjCode$)
      Print #ch;Rep$(" ",x);"Adj Reason: ";SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",Items.[ItemNo].AdjCode$);LineTerm$
      x = 42
    End If 
    If Items.[ItemNo].CarBodies
      Print #ch;Rep$(" ",x);"Car Bodies=";Str$(Items.[ItemNo].CarBodies);LineTerm$
      x = 42
    End If 
    If x = 0 Print #ch;LineTerm$
    If Items.[ItemNo].CFCFlag Let PrintCFC = 1
  End If 
  If ItemNo = ItemCount Or ItemNo = 0
    Print #ch;Rep$("-",69);LineTerm$
    If WeightOnly = 0
      Select Case DocLang$
        Case "FC"
          temp$ = " Totaux/Totals"
        Case Else 
          temp$ = " Totals"
      End Select 
      If TicketTotals.TotalCars
        w$ = Str$(TicketTotals.TotalCars)
        temp$ = temp$ + "    Car Bodies=" + w$ + Rep$(" ",26 - Len(w$))
      End If 
      If PrintTicketWeightAdjustmentAsPr()
        Print #ch;SAISpaceFill$(temp$,60);
        Print #ch;FormatNum$(TicketTotals.TotalNet,9);LineTerm$
      Else 
        Print #ch;SAISpaceFill$(temp$,48);
        Print #ch;FormatNum$(TicketTotals.TotalNet,7);FormatNum$(TicketTotals.TotalAdj,7);FormatNum$(TicketTotals.TotalNet + TicketTotals.TotalAdj,7);LineTerm$
      End If 
    End If 
    Print #ch;LineTerm$
  End If 
End Sub 
Sub PrintMaterialSummary(chprt,LineTerm$)
  Print #chprt;LineTerm$
  Print #chprt;LineTerm$
  !  print #chprt;"123456789^123456789^123456789^123456789^123456789^123456789^123456789"
  !  print #chprt;"Material Summary      Pd Wt (lb)   Price $/Unit      Extended Price $"
  !  print #chprt;"xxxxxxxxxxxxxxxxxxxxxx  ------# ----#.####/xxxxxxxxxxxx   -###,###.##"
  !  print #chprt;"xxxxxxxxxxxxxxxxxxxxxx  ------#                                  0.00"
  !  print #chprt;"   Redemption         -----#cnt  -###.####/Each           -###,###.##"
  !  print #chprt;"   Redemption                   ----#.####/xxxxxxxxxxxx   -###,###.##"
  ! old  print #chprt;"  Price Adj: xxxxxxxxxxxxxxx    ----#.####/xxxxxxxxxxxx   -###,###.##"
  ! new  print #chprt;" Price Adj:-##.##% xxxxxxxxxxxxxx---#.####/xxxxxxxxxxxx   -###,###.##"
  If PrintTicketWeightAdjustmentAsPr()
    temp$ = "Net Wt"
  Else 
    temp$ = " Pd Wt"
  End If 
  Select Case DocLang$
    Case "FC"
      Print #chprt;"Sommaire du Mat\351\riel/ Poids/       Prix $/Unit\351\      Prix Calcul\351\/";LineTerm$
      Print #chprt;"Material Summary     ";temp$;" (";DisplayUM$;")   Price $/Unit      Extended Price $";LineTerm$
    Case Else 
      Print #chprt;"Material Summary      Pd Wt (";DisplayUM$;")   Price $/Unit      Extended Price $";LineTerm$
  End Select 
  Print #chprt;Rep$("-",69);LineTerm$
  TicketTotals.TotalCbkFrt = 0
  For i = 1 To ItemCount
    Print #chprt;SAISpaceFill$(Items.[i].MaterialDesc$,22);"  ";
    If Items.[i].RedCount
      Print #chprt;FormatNum$(Items.[i].NetWt + Items.[i].AdjWt,7);Rep$(" ",34);"0.00";LineTerm$
      Print #chprt;"   Redemption";Rep$(" ",9);
      Print #chprt; Using "-----#";Items.[i].RedCount;"cnt  ";
      Print #chprt; Using "---#.####";Items.[i].RedRate;"/Each";Rep$(" ",11);
      Print #chprt; Using "----,--#.##";Items.[i].RedExt;LineTerm$
    Else 
      If PrintTicketWeightAdjustmentAsPr() And Items.[i].AdjWt
        Print #chprt;FormatNum$(Items.[i].NetWt,7);" ";
        temp$ = LCase$(SAISpaceFill$(SAICodesFileDesc$(ch_110Aro,"U",Items.[i].PriceUM$),12))
        temp$[1,1] = UCase$(temp$[1,1])
        Print #chprt; Using "----#.####";Items.[i].Price;"/";temp$;"   ";
        Call SAICalcPriceExt(ch_110Aro,Items.[i].NetWt,gbl_um$,Items.[i].Price,SAISpaceFill$(Items.[i].PriceUM$,2),2,x,stat)
        Print #chprt;x Using "----,--#.##";LineTerm$
        x = Items.[i].MatExt - x
        If x
          Call SAICalcAveCost(ch_110Aro,Items.[i].NetWt,gbl_um$,x,SAISpaceFill$(Items.[i].PriceUM$,2),4,Price,stat)
          p = Abs(Round(Price / Items.[i].Price * 100,2))
          Print #chprt;SAISpaceFill$(" Price Adj: " + Trim$(p Using "--#.##%") + " " + SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",Items.[i].AdjCode$),33);
          Print #chprt; Using "---#.####";Price;"/";temp$;"   ";
          Print #chprt;x Using "----,--#.##";LineTerm$
        End If 
      Else 
        Print #chprt;FormatNum$(Items.[i].NetWt + Items.[i].AdjWt,7);" ";
        Print #chprt; Using "----#.####";Items.[i].Price;"/";
        temp$ = LCase$(SAISpaceFill$(SAICodesFileDesc$(ch_110Aro,"U",Items.[i].PriceUM$),12))
        temp$[1,1] = UCase$(temp$[1,1])
        Print #chprt; Using "----,--#.##";temp$;"   ";Items.[i].MatExt;LineTerm$
      End If 
      If Items.[i].RedNetWt
        temp$ = LCase$(SAISpaceFill$(SAICodesFileDesc$(ch_110Aro,"U",gbl_um$),12))
        temp$[1,1] = UCase$(temp$[1,1])
        Print #chprt;"   Redemption";Rep$(" ",19);
        Print #chprt; Using "----#.####";Items.[i].RedRate;"/";
        Print #chprt; Using "----,--#.##";temp$;"   ";Items.[i].RedExt;LineTerm$
      End If 
    End If 
    TicketTotals.TotalCbkFrt = TicketTotals.TotalCbkFrt + Items.[i].FrtCbk
  Next i
End Sub 
Sub TotalTicketItem(ItemNo)
  TicketTotals.TotalGross = TicketTotals.TotalGross + Items.[ItemNo].GrossWt
  TicketTotals.TotalTare = TicketTotals.TotalTare + Items.[ItemNo].TareWt
  TicketTotals.TotalAdj = TicketTotals.TotalAdj + Items.[ItemNo].AdjWt
  TicketTotals.TotalNet = TicketTotals.TotalNet + Items.[ItemNo].NetWt
  TicketTotals.TotalPrice = TicketTotals.TotalPrice + Items.[ItemNo].MatExt + Items.[ItemNo].RedExt
  TicketTotals.TotalCars = TicketTotals.TotalCars + Items.[ItemNo].CarBodies
  TicketTotals.TotalRedCount = TicketTotals.TotalRedCount + Items.[ItemNo].RedCount
  TicketTotals.TotalRedNetWt = TicketTotals.TotalRedNetWt + Items.[ItemNo].RedNetWt
  TicketTotals.TotalRedExt = TicketTotals.TotalRedExt + Items.[ItemNo].RedExt
  TicketTotals.TotalCbkFrt = TicketTotals.TotalCbkFrt + Items.[ItemNo].FrtCbk
End Sub 
Sub DisplayTicket()
  Clear TicketTotals.
  UnpricedItem = 0
  Print '80WCSELECT CU';
  !  print "123456789^123456789^123456789^123456789^123456789^123456789^123456789"
  Select Case DocLang$
    Case "FC"
      temp$ = "Billet/Ticket # "
    Case Else 
      temp$ = "Ticket # "
  End Select 
  temp$ = temp$ + TicketHeader.TicketNo$
  If TicketHeader.TktMode$ = "T"
    temp$ = SAISpaceFill$(temp$,23) + "INBOUND TRANSFER TICKET"
  End If 
  Print SAISpaceFill$(temp$,54);"Date:  ";SAISafeDateUsing$(TicketHeader.EntryDate#,dateformat$)
  Call PrintTicketHeader(-4,"")
  If ItemCount = 0 Call PrintTicketItem(-4,"",0)
  For ItemNo = 1 To ItemCount
    Call TotalTicketItem(ItemNo)
    If Items.[ItemNo].UnPriced Let UnpricedItem = 1
    Call PrintTicketItem(-4,"",ItemNo)
  Next ItemNo
  Select Case DocLang$
    Case "FC"
      Print "   Poids Brut Date/Heure"
      Print "   Gross Wght Date/Time  ";SAISafeDateUsing$(Items.[1].GrossWtTime#,dateformat$ + " HH:NN");
    Case Else 
      Print "   Gross Wght Date/Time  ";SAISafeDateUsing$(Items.[1].GrossWtTime#,dateformat$ + " HH:NN");
  End Select 
  If SuppressTicketSummaryWeight$ <> "Y"
    Print Rep$(" ",17);TicketSummaryWeightDesc$;
  End If 
  Print 
  If Items.[ItemCount].TareWt
    Select Case DocLang$
      Case "FC"
        Print "   Poids Tare Date/Heure"
        Print "   Tare  Wght Date/Time  ";SAISafeDateUsing$(Items.[ItemCount].TareWtTime#,dateformat$ + " HH:NN");
      Case Else 
        Print "   Tare  Wght Date/Time  ";SAISafeDateUsing$(Items.[ItemCount].TareWtTime#,dateformat$ + " HH:NN");
    End Select 
    If SuppressTicketSummaryWeight$ <> "Y"
      If PrintTicketWeightAdjustmentAsPr() Let PaidWeight = TicketTotals.TotalNet Else Let PaidWeight = TicketTotals.TotalNet + TicketTotals.TotalAdj
      ReportWt = SAIDivide(PaidWeight,TicketSummaryWeight_cf,4)
      If TicketSummaryWeight_cf = 1
        Print Rep$(" ",17);ReportWt Using "##########";
      Else 
        Print Rep$(" ",17);ReportWt Using "----#.####";
      End If 
    End If 
    Print 
  End If 
  If (DisplayPrice$ = "Y" Or DisplayPrice$ = "P") And TicketHeader.TktMode$ <> "T" And Supplier.PrintPriceAtScale$ = ""
    Call PrintMaterialSummary(-4,"")
    Print 
    If gbl.MultiCurrency$ = "Y" And TicketHeader.FundsType$ <> gbl.BranchFundsType$
      Print Using "$---,--#.##";" Total Due:";Rep$(" ",43);SAISpaceFill$(GetCurrencyCode$(TicketHeader.FundsType$),4);TicketTotals.TotalPrice
    Else 
      Print Using "$---,--#.##";" Total Due:";Rep$(" ",47);TicketTotals.TotalPrice
    End If 
  End If 
  If TicketHeader.TktComment$
    Print 
    Select Case DocLang$
      Case "FC"
        Print "Commentaire du Billet/"
        Print "Ticket Comment: ";TicketHeader.TktComment$
      Case Else 
        Print "Ticket Comment: ";TicketHeader.TktComment$
    End Select 
  End If 
  If PrintShippingInstructions$ = "Y" And TicketHeader.ShippingInst$
    Print 
    Select Case DocLang$
      Case "FC"
        Print "Instructions d'exp\351\dition/"
        Print "Shipping Instructions: ";TicketHeader.ShippingInst$
      Case Else 
        Print "Shipping Instructions: ";TicketHeader.ShippingInst$
    End Select 
  End If 
  Print '0WCSELECT';
  Call UpdateWarnings()
End Sub 
Sub SetPrintPriceFlag(TicketType$,ncopy,PrintPrice)
  PrintPrice = 0
  If TicketHeader.TktMode$ = "T" Or TicketType$ = "I" Exit Sub ! Never on transfer or Inspection Ticket
  If TicketType$ <> "R"
    If TicketCopySuppressPrice$[ncopy] = "Y" ! Absolute suppress
      Exit Sub 
    Else If TicketHeader.PaymentCode$ And TicketHeader.PaymentCode$ <> "C" ! Always print if paid by non-check
      PrintPrice = 1
      Exit Sub 
    End If 
  End If 
  If Supplier.PrintPriceAtScale$ ! Suppress price for supplier
    PrintPrice = 0
  Else If PrintPrice$ = "N"
    PrintPrice = 0
  Else If PrintPrice$ = "C"
    If Trim$(TicketHeader.OrderNo$) = ""
      PrintPrice = 1
    Else 
      PrintPrice = 0
    End If 
  Else ! PrintPrice$="Y"
    PrintPrice = 1
  End If 
End Sub 
Sub PrintMIXTicketHeader(TicketType$)
  PageNum = PageNum + 1
  If PageNum > 1 Print #chprt;"{f=" + MIXTicketForm$ + "}";
  If TicketType$ = "R"
    Call SkipLines(chprt,5)
    Print #chprt; Tab 5;"** REPRINTED ON ";DateUsing$(Tim#(0),dateformat$);" **"
    Print #chprt;
  Else 
    Call SkipLines(chprt,7)
  End If 
  Print #chprt;"Ticket #:  ";TicketHeader.TicketNo$; Tab 117;"Page:  ";PageNum Using "##"
  Print #chprt; Tab 117;"Date:  ";DateUsing$(TicketHeader.ShipmentDate#,dateformat$)
  Print #chprt;"Purchased From:  ";TicketHeader.EntityNo$
  t1 = 58 \ t2 = 92
  Print #chprt;"  ";TicketHeader.Name$; Tab t1;Company$[63,92]; Tab t2;"Veh Gross (" + DisplayUM$ + ")";Items.[1].GrossWt Using "--,---,--#";ScaleNumber$(Items.[1].GrossWtScale$);" ";SAISafeDateUsing$(Items.[1].GrossWtTime#,dateformat$ + " HH:NN")
  Print #chprt;"  ";TicketHeader.Address1$; Tab t1;Company$[93,117]; Tab t2;" Veh Tare (" + DisplayUM$ + ")";Items.[1].TareWt Using "--,---,--#";ScaleNumber$(Items.[1].TareWtScale$);" ";SAISafeDateUsing$(Items.[1].TareWtTime#,dateformat$ + " HH:NN")
  If Trim$(TicketHeader.Address2$)
    Print #chprt;"  ";TicketHeader.Address2$;
    Print #chprt; Tab t1;Trim$(Company$[143,167 - gbl_st]);", ";Company$[168 - gbl_st,169];"  ";Company$[170,179]; Tab t2;"  Veh et (" + DisplayUM$ + ")";Items.[1].NetWt Using "--,---,--#"
    Print #chprt;"  ";Trim$(TicketHeader.City$);", ";TicketHeader.State$;"  ";TicketHeader.PostCode$;
  Else 
    Print #chprt;"  ";Trim$(TicketHeader.City$);", ";TicketHeader.State$;"  ";TicketHeader.PostCode$;
    Print #chprt; Tab t1;Trim$(Company$[143,167 - gbl_st]);", ";Company$[168 - gbl_st,169];"  ";Company$[170,179]; Tab t2;"  Veh Net (" + DisplayUM$ + ")";Items.[1].NetWt Using "--,---,--#"
  End If 
  Print #chprt; Tab t1;Company$[180,191]; Tab t2;"  Veh Adj (" + DisplayUM$ + ")";Items.[1].AdjWt Using "--,---,--#"
  !  if Trim$(MIXTktHdr.MIXAdjCode$)
  !    print #chprt;" ";SAISpaceFill$(SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",MIXTktHdr.MIXAdjCode$),14)
  !  else
  !    print #chprt;
  !  endif
  Print #chprt;
  If Trim$(TicketHeader.IDNumber$) And PrintDriverIDNumber$ = "Y"
    Print #chprt;"DL/ID #  ";Trim$(TicketHeader.IDNumber$);"      ";
  End If 
  Print #chprt;"Veh #  ";TicketHeader.VehNo$;"      ID #  ";TicketHeader.InYardID$; !; Tab 50;"Supplier Ref. #  ";MIXTktHdr.SupRefNo$
  Print #chprt;
  Print #chprt;
  !  temp$="123456789^",temp$
  !  print #chprt;temp$[1,132]
  temp$ = Rep$("-",51)
  temp2$ = " " + Trim$(gbl_descum$) + "s "
  x = Round((Len(temp$) - Len(temp2$)) / 2,0)
  temp$[x + 1,x + Len(temp2$)] = temp2$
  !  print #chprt;"Itm  Mat'l Cd Material                           Gross       Tare        Net       Adj   Paid Wt              Price UM $   Total Amt"
  !  print #chprt;"###. XXXXXXXX XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX #,###,###a #,###,###a #,###,### #,###,### #,###,###         #,###.#### LB  #,###,###.##"
  !  print #chprt;"                                             --------------------- Pounds ----------------------"
  Print #chprt; Tab 45;temp$
  Print #chprt;"Itm  Mat'l Cd Material                           Gross       Tare        Net       Adj   Paid Wt";
  If PrintPrice
    Print #chprt;"              Price UM $   Total Amt"
  Else 
    Print #chprt;
  End If 
  ItemsThisPage = 1
End Sub 
Sub PrintMIXDetailTicket(TicketType$,NumCopies,status)
  If MIXTicketForm$ = ""
    status = 0
    Exit Sub 
  End If 
  temp$ = "$dynpaper p=" + MIXTicketPrinter$ + " f=" + MIXTicketForm$ + " c=" + Str$(NumCopies) + " cpi=16.67 lpi=8 lm=1"
  chprt = FindChannel()
  Try 
    Open #chprt,temp$
  Else 
    Call SAITouchError("Error opening printer.")
    status = 1
    Exit Sub 
  End Try 
  PageNum = 0
  PrintPrice = 0
  If Supplier.PrintPriceAtScale$ = ""
    If PrintPrice$ = "Y" Or (PrintPrice$ = "C" And Trim$(TicketHeader.OrderNo$) = "") Let PrintPrice = 1
  End If 
  Call PrintMIXTicketHeader(TicketType$)
  If MIXTicketDecimals$ = "Y" Let mask$ = "----,--#.#" Else Let mask$ = "--,---,--#"
  For i = 1 To RetItemCount
    ItemsThisPage = ItemsThisPage + 1
    If ItemsThisPage > MIXTicketItemsPerPage Call PrintMIXTicketHeader(TicketType$)
    Print #chprt;i Using "###. ";SAISpaceFill$(RItems.[i].MaterialCode$,8);" ";SAISpaceFill$(RItems.[i].MaterialDesc$,30);
    Print #chprt; Using mask$;RItems.[i].GrossWt;ScaleNumber$(RItems.[i].GrossWtScale$);RItems.[i].TareWt;ScaleNumber$(RItems.[i].TareWtScale$);RItems.[i].NetWt;RItems.[i].AdjWt;RItems.[i].NetWt + RItems.[i].AdjWt;
    If PrintPrice
      Print #chprt; Tab 104;RItems.[i].Price Using "--,---.####";" ";RItems.[i].Price_UM$;" ";RItems.[i].MatExt Using "--,---,---.##"
    Else 
      Print #chprt;
    End If 
    If Trim$(RItems.[i].AdjCode$)
      Print #chprt; Tab 45;"Adjustment Reason: ";SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",RItems.[i].AdjCode$)
      ItemsThisPage = ItemsThisPage + 1
    End If 
  Next i
  If ItemsThisPage + 2 > MIXTicketItemsPerPage Call PrintMIXTicketHeader(TicketType$)
  Print #chprt;
  Print #chprt; Using mask$;"Totals"; Tab 44;RetailTicketTotals.TotalGrossWt;" ";RetailTicketTotals.TotalTareWt;" ";RetailTicketTotals.TotalNetWt;RetailTicketTotals.TotalAdjWt;RetailTicketTotals.TotalNetWt + RetailTicketTotals.TotalAdjWt;
  If PrintPrice
    Print #chprt; Using "$-,---,--#.##"; Tab 119;RetailTicketTotals.TotalMatExt
  Else 
    Print #chprt;
  End If 
  ItemsThisPage = ItemsThisPage + 2
  If ItemsThisPage + 2 > MIXTicketItemsPerPage Call PrintMIXTicketHeader(TicketType$)
  Print #chprt;
  Print #chprt;gbl_WeighMaster$ + ":  ";SAICodesTableDesc$(ch_db,"Codes_WeighMaster","WeighMasterCode",RTicketHdr.CompletingWM$)
  ItemsThisPage = ItemsThisPage + 2
  If TicketHeader.TktComment$
    If ItemsThisPage + 2 > MIXTicketItemsPerPage Call PrintMIXTicketHeader(TicketType$)
    Print #chprt;
    Print #chprt;"Ticket Comment: ";TicketHeader.TktComment$
    ItemsThisPage = ItemsThisPage + 2
  End If 
  If TicketHeader.PaymentCode$ And PrintPrice = 1 And TicketType$ <> "R"
    If ItemsThisPage + 2 > MIXTicketItemsPerPage Call PrintMIXTicketHeader(TicketType$)
    Print #chprt;
    temp$ = "****  Total Paid at " + DateUsing$(Tim#(0),dateformat$ + " hh:NNpm") + " "
    If TicketHeader.PaymentCode$ = "A"
      temp$ = temp$ + "via ATM Receipt No. "
    Else If TicketHeader.PaymentCode$ = "R"
      temp$ = temp$ + "on Cash Receipt No. "
    Else If TicketHeader.PaymentCode$ = "C"
      temp$ = temp$ + "on " + gbl_check$ + " No. "
    Else 
      temp$ = temp$ + "on Receipt/" + gbl_check$ + " No. "
    End If 
    w$ = TicketTotals.TotalPaid Using "$$$$,$$#.##"
    temp$ = temp$ + TicketHeader.PaymentNo$ + Rep$(" ",10) + w$ + "  ****"
    p = Int((132 - Len(temp$)) / 2)
    Print #chprt; Tab p;temp$
    ItemsThisPage = ItemsThisPage + 2
  End If 
  If TicketHeader.PaymentCode$ And TicketType$ <> "R" And TicketHeader.PaymentType$ = "ATM" And CDUReceiptNo$
    If CDUBarcodePCL$
      If CDUBarcodePCL$[Len(CDUBarcodePCL$),Len(CDUBarcodePCL$)] = "*"
        Print #chprt;CDUBarcodePCL$;CDUReceiptNo$;"*";
      Else 
        Print #chprt;CDUBarcodePCL$;CDUReceiptNo$;
      End If 
    End If 
  End If 
  Close #chprt
End Sub 
Sub PrintDPTicketHeader(n,PageNo,PrinterForm$,TicketType$)
  PageNo = PageNo + 1
  If n = 1 And PageNo = 1
    Print #chprt;
  Else 
    Print #chprt;"{f=" + PrinterForm$ + "}"
  End If 
  If TicketType$ = "I"
    Print #chprt;BB$;"CLASSIFICATION TICKET";
  Else If SuppressDPTicketCertificate$ <> "Y"
    Print #chprt;BB$;"WEIGHMASTER CERTIFICATE";
  End If 
  If TicketHeader.TktMode$ = "T" Print #chprt; Tab 29;"INBOUND TRANSFER TICKET";
  Print #chprt;
  If DPTicketTitle$
    Print #chprt;DPTicketTitle$;
  Else 
    Print #chprt;"TRUCK ";UCase$(gbl_scale$); ! SCALE
  End If 
  If TicketHeader.TicketNo$[1,1] = "M" Print #chprt; Tab 29;"** MANUAL TICKET **";
  Print #chprt;
  If TicketType$ = "R" Print #chprt; Tab 27;"** REPRINTED ON ";DateUsing$(Tim#(0),dateformat$);" **";
  Print #chprt;
  Print #chprt; ! Tab 29;"TICKET #: ";TicketHeader.TicketNo$
  If TicketHeader.TktMode$ = "T"
    Print #chprt;"  Transfer From:  ";
  Else 
    Print #chprt;" Purchased From:  ";
  End If 
  Print #chprt;TicketHeader.EntityNo$; Tab 30;"SHIP DATE: ";DateUsing$(TicketHeader.ShipmentDate#,dateformat$);
  If TicketControlNo And TicketHeader.ControlNo
    Print #chprt;SAIFill$(ControlNoLabel$ + ": " + TicketHeader.Branch$ + " " + Str$(TicketHeader.ControlNo),"R"," ",83)
  Else 
    Print #chprt;
  End If 
  Print #chprt;"  ";TicketHeader.Name$;
  If ScrapSRecord$[78,78] = "Y" And Trim$(TicketHeader.TaxID$) ! GST
    If z$[644,646] = "255" Or z$[644,646] = "355"
      Print #chprt; Tab 32;gbl_bin$ + " # ";Trim$(TicketHeader.TaxID$);
    Else 
      Print #chprt; Tab 32;"Tax I.D.# ";Trim$(TicketHeader.TaxID$);
    End If 
  End If 
  If PrintCoInfo
    Print #chprt; Tab 80;Company$[63,92]
  Else If TicketHeader.Branch$ <> Branch$
    Print #chprt; Tab 80;"*** Ticket created by Branch - ";TicketHeader.Branch$;" ***"
  Else 
    Print #chprt;
  End If 
  Print #chprt;"  ";TicketHeader.Address1$;
  If PrintCFCOnFile$ = "Y" And Supplier.SignatureOnFile$ = "Y" And Supplier.CFCFormDate#
    If Supplier.CFCFormDate# > TicketHeader.ShipmentDate#
      Print #chprt; Tab 32;"CFC CONTRACT ON FILE";
    End If 
  End If 
  If PrintCoInfo Print #chprt; Tab 80;Company$[93,117] Else Print #chprt;
  If Trim$(TicketHeader.Address2$)
    Print #chprt;"  ";TicketHeader.Address2$;
  Else 
    Print #chprt;"  ";Trim$(TicketHeader.City$);", ";Trim$(TicketHeader.State$);"  ";Trim$(TicketHeader.PostCode$);
  End If 
  If PrintCoInfo Print #chprt; Tab 80;Trim$(Company$[143,167 - gbl_st]);", ";Company$[168 - gbl_st,169];"  ";Company$[170,179] Else Print #chprt;
  If Trim$(TicketHeader.Address2$)
    Print #chprt;"  ";Trim$(TicketHeader.City$);", ";Trim$(TicketHeader.State$);"  ";Trim$(TicketHeader.PostCode$);
  End If 
  If PrintVehicleTagInfo$ = "Y" And Trim$(TicketIdentity.VehicleTagNo$)
    Print #chprt; Tab 32;"Vehicle Tag No: ";TicketIdentity.VehicleTagNo$;"  State: ";TicketIdentity.VehicleTagState$;
  Else If PrintDriverIDNumber$ = "Y" And Trim$(TicketHeader.IDNumber$)
    Print #chprt; Tab 32;"DL/ID # ";Trim$(TicketHeader.IDNumber$);
    If TicketIdentity.IDIssuer$ Print #chprt;" (" + TicketIdentity.IDIssuer$ + ")";
  End If 
  If PrintCoInfo Print #chprt; Tab 80;Company$[180,191] Else Print #chprt;
  If PrintVehicleTagInfo$ <> "Y" Print #chprt;" Veh # ";TicketHeader.VehNo$; Tab 20;
  Print #chprt;"ID # ";TicketHeader.InYardID$;
  If Trim$(TicketHeader.OrderNo$) Print #chprt;"  Order # ";TicketHeader.OrderNo$;" Ln ";TicketHeader.OrderLine$;
  If Trim$(TicketHeader.ShipOrdNo$) Print #chprt;"  Supplier SO ";Trim$(TicketHeader.ShipOrdNo$);
  If Trim$(TicketHeader.SuppShipNo$) Print #chprt;"  Supp Shipmnt #: ";Trim$(TicketHeader.SuppShipNo$);
  If Trim$(TicketHeader.SuppInvNo$)
    If z$[644,646] = "255" Or z$[644,646] = "355"
      Print #chprt;"  Delivery Docket # ";Trim$(TicketHeader.SuppInvNo$);
    Else 
      Print #chprt;"  Supplier Invoice # ";Trim$(TicketHeader.SuppInvNo$);
    End If 
  End If 
  If Trim$(TicketHeader.TripTicketNo$) Print #chprt;"  Trip # ";Trim$(TicketHeader.TripTicketNo$);
  Print #chprt;
  Print #chprt;
  If TicketType$ = "I"
    Print #chprt;"                RECEIVED AS: ";Items.[ItemCount].MaterialCode$;"  ";Items.[ItemCount].MaterialDesc$;
    !      print #chprt;Tab 80;"GROSS WEIGHT: ";Str$(Int(Items.[ItemCount].GrossWt));ScaleNumber$(Items.[ItemCount].GrossWtScale$)
    Print #chprt;"  GROSS: ";Str$(Int(Items.[ItemCount].GrossWt));ScaleNumber$(Items.[ItemCount].GrossWtScale$);
    If Items.[ItemCount].TareWt
      Print #chprt;"  TARE: ";Str$(Int(Items.[ItemCount].TareWt));ScaleNumber$(Items.[ItemCount].TareWtScale$);
      Print #chprt;"  NET: ";Str$(Int(Items.[ItemCount].NetWt));
      Print #chprt;"  ADJ: ";Str$(Items.[ItemCount].AdjWt)
    Else 
      Print #chprt;
    End If 
    Print #chprt;
    Print #chprt;"               INSPECTED AS: ";Rep$("_",100)
    Print #chprt;
    Print #chprt;Rep$(" ",29);Rep$("_",100)
    Print #chprt;
    Print #chprt;" MATERIAL CONTAMINATED WITH: ";Rep$("_",100)
    Print #chprt;
    Print #chprt;Rep$(" ",29);Rep$("_",100)
    Print #chprt;
    Print #chprt;"               INSPECTED BY: ";Rep$("_",100)
    Print #chprt;
    Print #chprt;
  Else 
    !    temp$=Rep$("-",26)
    !    temp2$=" "+Trim$(gbl_descum$)+"s "
    !    x=Round((Len(temp$)-Len(temp2$))/2,0)
    !    temp$[x+1,x+Len(temp2$)]=temp2$
    !    print #chprt;Tab 38;temp$ ! Global Unit of Measure
    Call SetPrintPriceFlag(TicketType$,n,PrintPrice)
    ! Header
    temp$ = " SHPMNT# COMMODITY               "
    If PrintStockPile$ = "Y" Let temp$ = temp$ + "STK  " Else Let temp$ = temp$ + "     "
    If z$[644,646] = "220" Or z$[644,646] = "323" Or z$[644,646] = "337" ! SIMS, SA, and PSC
      If ScrapSRecord$[78,78] = "Y" ! Sims Can
        !SHPMNT# COMMODITY                    GROSS   TARE    NET    ADJ   PD WT        PRICE    MAT EXT MAT TAX CBK EXT CBK TAX   TOTAL AMT
        !                                    -----#a-----#a-----# -----# ------#-----#.####UM-------#.##----#.##----#.##----#.## -------#.##
        !                                                  ADJ REASON: XXXXXXXXXXXXXXX
        !SHPMNT# COMMODITY                    GROSS   TARE    NET            PRICE    ADJ AMT    MAT EXT MAT TAX CBK EXT CBK TAX   TOTAL AMT
        !                                    -----#a-----#a-----#    -----#.####UM-------#.##-------#.##----#.##----#.##----#.## -------#.##
        !                                            PRICE ADJ REASON: XXXXXXXXXXXXXXX
        ! TOTALS      # CARS ---#                         ------#        ------#             -------#.##----#.##----#.##----#.## -------#.##
        If PrintTicketWeightAdjustmentAsPr()
          If PrintPrice
            temp$ = temp$ + "GROSS   TARE    NET            PRICE    ADJ AMT    MAT EXT MAT TAX CBK EXT CBK TAX   TOTAL AMT"
          Else 
            temp$ = temp$ + "GROSS   TARE    NET"
          End If 
        Else 
          temp$ = temp$ + "GROSS   TARE    NET    ADJ   PD WT"
          If PrintPrice Let temp$ = temp$ + "        PRICE    MAT EXT MAT TAX CBK EXT CBK TAX   TOTAL AMT"
        End If 
      Else If ScrapSRecord$[69,70] = "CA" ! Sims w/ CRV
        !SHPMNT# COMMODITY                    GROSS   TARE    NET    ADJ REASON        PD WT RED C/W   RD EXT CBK FRT       PRICE  TOTAL AMT
        !                                    -----#a-----#a-----# -----# XXXXXXXXXXXX------# ----#.#-----#.##----#.##----#.####UM-------#.##
        ! TOTALS      # CARS ---#                         ------#                    ------# ----#.#-----#.##----#.##            -------#.##
        !SHPMNT# COMMODITY                    GROSS   TARE    NET PRICE ADJ REASON  RED C/W   RD EXT  ADJ AMT CBK FRT       PRICE  TOTAL AMT
        !                                    -----#a-----#a-----# XXXXXXXXXXXXXXX   ----#.#-----#.##-----#.##----#.##----#.####UM-------#.##
        ! TOTALS      # CARS ---#                         ------#                   ----#.#-----#.##         ----#.##            -------#.##
        If PrintTicketWeightAdjustmentAsPr()
          If PrintPrice
            temp$ = temp$ + "GROSS   TARE    NET PRICE ADJ REASON  RED C/W   RD EXT  ADJ AMT"
          Else 
            temp$ = temp$ + "GROSS   TARE    NET PRICE ADJ REASON  RED C/W   RD EXT         "
          End If 
        Else 
          temp$ = temp$ + "GROSS   TARE    NET    ADJ REASON        PD WT RED C/W   RD EXT"
        End If 
        If PrintPrice Let temp$ = temp$ + " CBK FRT       PRICE  TOTAL AMT"
      Else ! Sims w/o CRV
        !SHPMNT# COMMODITY                    GROSS   TARE    NET    ADJ REASON                        PD WT CBK FRT        PRICE  TOTAL AMT
        !                                    -----#a-----#a-----# -----# XXXXXXXXXXXXXXX             ------#----#.##-----#.####UM-------#.##
        !SHPMNT# COMMODITY                    GROSS   TARE    NET  PRICE ADJ REASON                  ADJ AMT CBK FRT        PRICE  TOTAL AMT
        !                                    -----#a-----#a-----#  XXXXXXXXXXXXXXX               -------#.##----#.##-----#.####UM-------#.##
        ! TOTALS      # CARS ---#                         ------#                                    ------#----#.##             -------#.##
        If PrintTicketWeightAdjustmentAsPr()
          If PrintPrice
            temp$ = temp$ + "GROSS   TARE    NET  PRICE ADJ REASON                  ADJ AMT"
          Else 
            temp$ = temp$ + "GROSS   TARE    NET  PRICE ADJ REASON                         "
          End If 
        Else 
          temp$ = temp$ + "GROSS   TARE    NET    ADJ REASON                        PD WT"
        End If 
        If PrintPrice Let temp$ = temp$ + " CBK FRT        PRICE  TOTAL AMT"
      End If 
    Else ! Everyone else
      !SHPMNT# COMMODITY                    GROSS   TARE    NET    ADJ REASON         RED C/W   RD EXT      PD WT      PRICE UM  TOTAL AMT
      ! XXXXXX 28XXXXXXXXXXXXXXXXXXXXXXXXXX-----#a-----#a-----# -----# XXXXXXXXXXXXXXX----#.#-----#.##    ------#-----#.#### UM-------#.##
      ! TOTALS      # CARS ---#           ------#------#------#------#
      !SHPMNT# COMMODITY                    GROSS   TARE    NET  PRICE ADJ REASON     RED C/W   RD EXT      PRICE UM    ADJ AMT  TOTAL AMT
      ! XXXXXX 28XXXXXXXXXXXXXXXXXXXXXXXXXX-----#a-----#a-----#  XXXXXXXXXXXXXXX      ----#.#-----#.##-----#.#### UM-------#.##-------#.##
      ! TOTALS      # CARS ---#                         ------#                       ----#.#-----#.##                         -------#.##
      If PrintTicketWeightAdjustmentAsPr()
        temp$ = temp$ + "GROSS   TARE    NET  PRICE ADJ REASON"
        If ScrapSRecord$[69,70] = "CA"
          temp$ = temp$ + "     RED C/W   RD EXT"
        Else 
          temp$ = temp$ + Rep$(" ",21)
        End If 
        If PrintPrice Let temp$ = temp$ + "      PRICE UM    ADJ AMT  TOTAL AMT"
      Else 
        temp$ = temp$ + "GROSS   TARE    NET    ADJ REASON"
        If ScrapSRecord$[69,70] = "CA"
          temp$ = temp$ + "         RED C/W   RD EXT      PD WT"
        Else 
          temp$ = temp$ + Rep$(" ",31) + "PD WT"
        End If 
        If PrintPrice Let temp$ = temp$ + "      PRICE UM  TOTAL AMT"
      End If 
    End If 
    Print #chprt;temp$
  End If 
End Sub 
Sub PrintDPTicketLastLine()
  Print #chprt;"          ALL WEIGHTS ARE REPORTED IN ";UCase$(gbl_descum$);"S UNLESS OTHERWISE INDICATED. ALL NON-";UCase$(gbl_descum$);" WEIGHTS ARE ASSUMED TO BE MANUAL WEIGHTS"
  Print #chprt;
End Sub 
Sub PrintDPTicketFooter(TicketType$)
  Clear TextLines$[]
  i = 1
  If TicketHeader.TktComment$
    TextLines$[i] = "  Ticket Comment: " + TicketHeader.TktComment$
    i = 2
  End If 
  If PrintShippingInstructions$ = "Y" And TicketHeader.ShippingInst$
    TextLines$[i] = "  Shipping Instructions: " + TicketHeader.ShippingInst$
  End If 
  ReportWt = 0
  If SuppressTicketSummaryWeight$ <> "Y"
    If PrintTicketWeightAdjustmentAsPr() Let PaidWeight = TicketTotals.TotalNet Else Let PaidWeight = TicketTotals.TotalNet + TicketTotals.TotalAdj
    ReportWt = SAIDivide(PaidWeight,TicketSummaryWeight_cf,4)
  End If 
  If TicketType$ = ""
    temp$ = WMName$
  Else If Trim$(Items.[1].TareWtWM$) = ""
    temp$ = SAICodesTableDesc$(ch_db,"Codes_WeighMaster","WeighMasterCode",Items.[1].GrossWtWM$)
  Else 
    temp$ = SAICodesTableDesc$(ch_db,"Codes_WeighMaster","WeighMasterCode",Items.[1].TareWtWM$)
  End If 
  Print #chprt;TextLines$[1]; Tab 92;"+-------------------+"
  Print #chprt;TextLines$[2]; Tab 92;"| GRS Date ";SAISafeDateUsing$(Items.[1].GrossWtTime#,dateformat$);" |";
  If ReportWt Print #chprt;BB$;TicketSummaryWeightDesc$;EB$ Else Print #chprt;
  Print #chprt; Tab 92;"| GRS Time ";SAISafeDateUsing$(Items.[1].GrossWtTime#,"HH:NN");"    |";
  If ReportWt
    If TicketSummaryWeight_cf = 1
      Print #chprt;BB$;ReportWt Using "##########";EB$
    Else 
      Print #chprt;BB$;ReportWt Using "----#.####";EB$
    End If 
  Else 
    Print #chprt;
  End If 
  If Items.[1].MaterialCode$ = "*MIX" Let i = 1 Else Let i = ItemCount
  Print #chprt; Tab 35;"(";temp$;")"; Tab 92;"| TRE Date ";SAISafeDateUsing$(Items.[i].TareWtTime#,dateformat$);" |"
  Print #chprt; Tab 92;"| TRE Time ";SAISafeDateUsing$(Items.[i].TareWtTime#,"HH:NN");"    |"
  temp$ = UCase$(gbl_scale$)
  Print #chprt;"a=";temp$;" 1     b=";temp$;" 2     c=";temp$;" 3     d=";temp$;" 4     m=MANUAL WEIGHT"; Tab 92;"+-------------------+"
  LineCount = 0
  If PrintTraderName$ = "Y"
    Print #chprt; Tab 92;SAICodesTableDesc$(ch_db,"Codes_Trader","TraderCode",TicketHeader.Trader$)
    LineCount = LineCount + 1
  End If 
  If TicketCopyLegend$[n] And TicketType$ <> "R" And TicketType$ <> "I"
    p = Int((132 - Len(TicketCopyLegend$[n])) / 2)
    If p < 0 Let p = 0
    If LineCount = 0
      Print #chprt;
      LineCount = LineCount + 1
    End If 
    Print #chprt;Rep$(" ",p);TicketCopyLegend$[n]
    LineCount = LineCount + 1
  End If 
  If TicketHeader.PaymentCode$ And PaymentLinePosition And PrintPrice = 1 And TicketType$ <> "R"
    temp$ = "****  Total Paid at " + DateUsing$(Tim#(0),dateformat$ + " hh:NNpm") + " "
    If TicketHeader.PaymentCode$ = "A"
      temp$ = temp$ + "via ATM Receipt No. "
    Else If TicketHeader.PaymentCode$ = "R"
      temp$ = temp$ + "on Cash Receipt No. "
    Else If TicketHeader.PaymentCode$ = "E"
      temp$ = temp$ + "via EFT Receipt No. "
    Else If TicketHeader.PaymentCode$ = "C"
      temp$ = temp$ + "on " + gbl_check$ + " No. "
    Else 
      temp$ = temp$ + "on Receipt/" + gbl_check$ + " No. "
    End If 
    w$ = TicketTotals.TotalPaid Using "$$$$,$$#.##"
    temp$ = temp$ + TicketHeader.PaymentNo$ + Rep$(" ",10) + w$ + "  ****"
    Call SkipLines(chprt,PaymentLinePosition - LineCount)
    p = Int((132 - Len(temp$)) / 2)
    Print #chprt; Tab p;temp$
  End If 
  If PrintInspector$
    Clear temp$,temp2$
    For i = ItemCount To 1 Step -1
      If Items.[i].InspectedBy$
        temp$ = Items.[i].InspectedBy$
        Exit For 
      End If 
    Next i
    If temp$
      Select Case PrintInspector$
        Case "CODE"
          temp2$ = temp$
        Case "NAME"
          temp2$ = SAICodesTableDesc$(ch_db,"Codes_WeighMaster","WeighMasterCode",temp$)
        Case "COMMENT"
          Search #ch_db;"SELECT Comment FROM Codes_WeighMaster WHERE WeighMasterCode=" + SQLV$(temp$)
          If Chf(ch_db) Read #ch_db;temp2$
      End Select 
    End If 
    If temp2$
      Print #chprt;
      Print #chprt;"Inspected by:  ";temp2$
    End If 
  End If 
  If PrintInspectionComment$ = "Y" And TicketHeader.InspectionComment$
    Print #chprt;
    Print #chprt;"Inspection Comment: ";TicketHeader.InspectionComment$
  End If 
  If PrintVINNumbers$ = "Y" Or PrintVINNumbers$ = "F"
    Try 
      Search #ch_db;"SELECT " + SQLN$(PurTicketVIN.) + " FROM Pur_Ticket_VIN WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
      nr = Chf(ch_db)
    Else 
      nr = 0
    End Try 
    If nr
      Map Record #ch_db As Pur_Ticket_VIN
      Print #chprt;
      Print #chprt;
      If PrintVINNumbers$ = "F"
        !        print #chprt;"Year  Make                      Model                     VIN
        !        print #chprt;"XXXX  XXXXXXXXXXXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
        Print #chprt;"Year"; Tab 6;"Make"; Tab 32;"Model"; Tab 58;"VIN"
      Else 
        Print #chprt;"VIN Number(s):"
      End If 
      Print #chprt;
      For i = 1 To nr
        Read Record #ch_db;PurTicketVIN.
        If PrintVINNumbers$ = "F"
          Print #chprt;PurTicketVIN.ModelYear$; Tab 6;PurTicketVIN.Make$; Tab 32;PurTicketVIN.Model$; Tab 58;PurTicketVIN.VIN$
        Else 
          Print #chprt;PurTicketVIN.VIN$
        End If 
      Next i
    End If 
  End If 
  If TicketHeader.PaymentCode$ And TicketType$ <> "R" And TicketHeader.PaymentType$ = "ATM" And CDUReceiptNo$ And n = 1
    If CDUBarcodePCL$
      If CDUBarcodePCL$[Len(CDUBarcodePCL$),Len(CDUBarcodePCL$)] = "*"
        Print #chprt;CDUBarcodePCL$;CDUReceiptNo$;"*";
      Else 
        Print #chprt;CDUBarcodePCL$;CDUReceiptNo$;
      End If 
    End If 
  End If 
  !  print #chprt;"\33\(8U\33\(s1p12v0s3b25093T\33\*p645Y\33\*p1060X";"Ticket #:  ";TicketHeader.TicketNo$;
  Print #chprt;"\33\(8U\33\(s1p12v0s3b4101T\33\*p645Y\33\*p1060X";"Ticket #:  ";TicketHeader.TicketNo$;
End Sub 
Sub PrintDPTicket(Printer$,PrinterForm$,NumCopies,TicketType$,status)
  !  BB$='ESC'+"(s3B"
  !  EB$='ESC'+"(s0B"
  BB$ = ""
  EB$ = ""
  LineTerm$ = ""
  PrintCoInfo = 0
  If TicketHeader.Branch$ = Branch$
    If ScaleCodes$[39,39] = "T" Or ScaleCodes$[39,39] = " " Let PrintCoInfo = 1
  End If 
  If TicketPrinter$[1,1] = "$" Let TicketPrinter$ = TicketPrinter$[2]
  !  temp$="$dynpaper p="+Printer$+" f="+PrinterForm$+" c="+Str$(NumCopies)+" cpi=16.67"
  temp$ = "$dynpaper p=" + Printer$ + " f=" + PrinterForm$ + " cpi=16.67 n=" + TicketHeader.TicketNo$
  !  if TicketArchive$="Y"
  !    temp$=temp$+" id=Tickets a=scale/tickets/"+TicketHeader.TicketNo$+" d=''Ticket No. "+TicketHeader.TicketNo$+"''"
  !    temp$=temp$+" r1="+TicketHeader.TicketNo$+" r2="+TicketHeader.Branch$+" r3="+TicketHeader.EntityNo$+" r4="+TicketHeader.TktType$
  !  endif
  chprt = FindChannel()
  Try 
    Open #chprt,temp$
  Else 
    status = 1
    Exit Sub 
  End Try 
  For n = 1 To NumCopies
    PageNo = 0
    Call PrintDPTicketHeader(n,PageNo,PrinterForm$,TicketType$)
    ! Detail Lines
    If TicketType$ <> "I"
      TotalMatExt = 0
      TotalMatTax = 0
      TotalCbkTax = 0
      TotalNetAmt = 0
      TotalRedWT = 0
      TotalRedExt = 0
      LineCount = 0
      For ItemNo = 1 To ItemCount
        LineCount = LineCount + 1
        If LineCount = 10
          Call PrintDPTicketLastLine()
          Print #chprt;"  TOTALS";Rep$(" ",29);"*** CONTINUED ON NEXT TICKET ***"
          Call PrintDPTicketFooter(TicketType$)
          Call PrintDPTicketHeader(n,PageNo,PrinterForm$,TicketType$)
          LineCount = 1
        End If 
        Print #chprt;"  ";Items.[ItemNo].ShipmentNo$;
        If PrintStockPile$ = "Y"
          temp$ = SAISpaceFill$(Items.[ItemNo].StockPile$,3)
          If z$[644,646] = "311" ! SDI
            If TicketHeader.SrcBranch$ = Branch$ Let temp$ = SAISpaceFill$(TicketHeader.SrcInvCode$[6,8],3)
          End If 
          Print #chprt;" ";SAISpaceFill$(Items.[ItemNo].MaterialDesc$,23);" ";temp$;" ";
        Else If PrintMaterialCode$ = "Y"
          Print #chprt;" ";SAISpaceFill$(Items.[ItemNo].MaterialCode$,8);" ";SAISpaceFill$(Items.[ItemNo].MaterialDesc$,19);
        Else 
          Print #chprt;" ";SAISpaceFill$(Items.[ItemNo].MaterialDesc$,28);
        End If 
        If Items.[ItemNo].GrossWt > 999999 Or Items.[ItemNo].GrossWt < -99999 ! Need to convert weights into reporting UM
          cf = ScrapSRecord$[45,56]
          Print #chprt;FormatNum$(SAIDivide(Items.[ItemNo].GrossWt,cf,0),4);LCase$(ScrapSRecord$[67,68]);" ";
          Print #chprt;FormatNum$(SAIDivide(Items.[ItemNo].TareWt,cf,0),4);LCase$(ScrapSRecord$[67,68]);" ";
          Print #chprt;FormatNum$(SAIDivide(Items.[ItemNo].NetWt,cf,0),4);LCase$(ScrapSRecord$[67,68]);
          If Not(PrintTicketWeightAdjustmentAsPr()) Print #chprt;FormatNum$(SAIDivide(Items.[ItemNo].AdjWt,cf,0),5);LCase$(ScrapSRecord$[67,68]);
        Else 
          cf = 0
          Print #chprt;FormatNum$(Items.[ItemNo].GrossWt,6);ScaleNumber$(Items.[ItemNo].GrossWtScale$);
          Print #chprt;FormatNum$(Items.[ItemNo].TareWt,6);ScaleNumber$(Items.[ItemNo].TareWtScale$);
          Print #chprt;FormatNum$(Items.[ItemNo].NetWt,6);
          If Not(PrintTicketWeightAdjustmentAsPr()) Print #chprt;FormatNum$(Items.[ItemNo].AdjWt,7);
        End If 
        AdjAmt = 0
        If PrintTicketWeightAdjustmentAsPr() And Items.[ItemNo].AdjWt
          Call SAICalcPriceExt(ch_110Aro,Items.[ItemNo].NetWt,gbl_um$,Items.[ItemNo].Price,SAISpaceFill$(Items.[ItemNo].PriceUM$,2),2,x,stat)
          AdjAmt = Items.[ItemNo].MatExt - x
        End If 
        If z$[644,646] = "220" Or z$[644,646] = "323" Or z$[644,646] = "337" ! SIMS, SA and PSC
          If ScrapSRecord$[78,78] = "Y" ! Sims Can
            If Not(PrintTicketWeightAdjustmentAsPr())
              If cf
                Print #chprt;" ";FormatNum$(SAIDivide(Items.[ItemNo].NetWt + Items.[ItemNo].AdjWt,cf,0),5);LCase$(ScrapSRecord$[67,68]); ! Paid Weight
              Else 
                Print #chprt;" ";FormatNum$(Items.[ItemNo].NetWt + Items.[ItemNo].AdjWt,7); ! Paid Weight
              End If 
            End If 
            If PrintPrice
              If PrintTicketWeightAdjustmentAsPr()
                Print #chprt; Using "-----#.####"; Tab 61;Items.[ItemNo].Price;Items.[ItemNo].PriceUM$;
                Print #chprt; Using "-------#.##";AdjAmt;
              Else 
                Print #chprt; Using "-----#.####"; Tab 72;Items.[ItemNo].Price;Items.[ItemNo].PriceUM$;
              End If 
              Print #chprt; Using "-------#.##";Items.[ItemNo].MatExt;
              Print #chprt; Using "----#.##";Items.[ItemNo].MatGST + Items.[ItemNo].MatPST;
              Print #chprt; Using "----#.##";Items.[ItemNo].FrtCbk;
              Print #chprt; Using "----#.##";Items.[ItemNo].CbkGST + Items.[ItemNo].CbkPST;
              x = Items.[ItemNo].MatExt + Items.[ItemNo].MatGST + Items.[ItemNo].MatPST + Items.[ItemNo].FrtCbk + Items.[ItemNo].CbkGST + Items.[ItemNo].CbkPST
              Print #chprt; Using " -------#.##";x;
              TotalMatExt = TotalMatExt + Items.[ItemNo].MatExt
              TotalMatTax = TotalMatTax + Items.[ItemNo].MatGST + Items.[ItemNo].MatPST
              TotalCbkTax = TotalCbkTax + Items.[ItemNo].CbkGST + Items.[ItemNo].CbkPST
              TotalNetAmt = TotalNetAmt + x
            End If 
            If Trim$(Items.[ItemNo].AdjCode$)
              LineCount = LineCount + 1
              Print #chprt;
              If PrintTicketWeightAdjustmentAsPr()
                Print #chprt; Tab 45;"PRICE ADJ REASON: ";SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",Items.[ItemNo].AdjCode$);
              Else 
                Print #chprt; Tab 51;"ADJ REASON: ";SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",Items.[ItemNo].AdjCode$);
              End If 
            End If 
          Else If ScrapSRecord$[69,70] = "CA" ! Sims w/ CRV
            If PrintTicketWeightAdjustmentAsPr()
              If Trim$(Items.[ItemNo].AdjCode$) Print #chprt;" ";SAISpaceFill$(SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",Items.[ItemNo].AdjCode$),15);
              If Items.[ItemNo].RedCount
                Print #chprt; Using "------#"; Tab 76;Items.[ItemNo].RedCount;
              Else 
                Print #chprt; Using "----#.#"; Tab 76;Items.[ItemNo].RedNetWt;
              End If 
              Print #chprt; Using "-----#.##";Items.[ItemNo].RedExt;
            Else 
              If Trim$(Items.[ItemNo].AdjCode$) Print #chprt;" ";SAISpaceFill$(SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",Items.[ItemNo].AdjCode$),12);
              If cf
                Print #chprt; Tab 77;FormatNum$(SAIDivide(Items.[ItemNo].NetWt + Items.[ItemNo].AdjWt,cf,0),5);LCase$(ScrapSRecord$[67,68]); ! Paid Weight
              Else 
                Print #chprt; Tab 77;FormatNum$(Items.[ItemNo].NetWt + Items.[ItemNo].AdjWt,7); ! Paid Weight
              End If 
              If Items.[ItemNo].RedCount
                Print #chprt; Using "------#"; Tab 85;Items.[ItemNo].RedCount;
              Else 
                Print #chprt; Using "----#.#"; Tab 85;Items.[ItemNo].RedNetWt;
              End If 
              Print #chprt; Using "-----#.##";Items.[ItemNo].RedExt;
            End If 
            TotalRedWT = TotalRedWT + Items.[ItemNo].RedNetWt
            TotalRedExt = TotalRedExt + Items.[ItemNo].RedExt
            If PrintPrice
              If PrintTicketWeightAdjustmentAsPr() Print #chprt; Using "-----#.##"; Tab 92;AdjAmt;
              Print #chprt; Using "----#.##"; Tab 101;Items.[ItemNo].FrtCbk;
              Print #chprt; Using "----#.####"; Tab 109;Items.[ItemNo].Price;Items.[ItemNo].PriceUM$;
              x = Items.[ItemNo].MatExt + Items.[ItemNo].FrtCbk + Items.[ItemNo].RedExt
              Print #chprt; Using "-------#.##";x;
              TotalNetAmt = TotalNetAmt + x
            End If 
          Else ! Sims w/o CRV
            If PrintTicketWeightAdjustmentAsPr()
              If Trim$(Items.[ItemNo].AdjCode$)
                Print #chprt;"  ";SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",Items.[ItemNo].AdjCode$);
              End If 
            Else 
              If Trim$(Items.[ItemNo].AdjCode$) Print #chprt;" ";SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",Items.[ItemNo].AdjCode$);
              If cf
                Print #chprt; Tab 93;FormatNum$(SAIDivide(Items.[ItemNo].NetWt + Items.[ItemNo].AdjWt,cf,0),5);LCase$(ScrapSRecord$[67,68]); ! Paid Weight
              Else 
                Print #chprt; Tab 93;FormatNum$(Items.[ItemNo].NetWt + Items.[ItemNo].AdjWt,7); ! Paid Weight
              End If 
            End If 
            If PrintPrice
              If PrintTicketWeightAdjustmentAsPr() Print #chprt; Using "-------#.##"; Tab 89;AdjAmt;
              Print #chprt; Using "----#.##"; Tab 100;Items.[ItemNo].FrtCbk;
              Print #chprt; Using "-----#.####"; Tab 108;Items.[ItemNo].Price;Items.[ItemNo].PriceUM$;
              x = Items.[ItemNo].MatExt + Items.[ItemNo].FrtCbk
              Print #chprt; Using "-------#.##";x;
              TotalNetAmt = TotalNetAmt + x
            End If 
          End If 
        Else 
          If Trim$(Items.[ItemNo].AdjCode$)
            If PrintTicketWeightAdjustmentAsPr()
              Print #chprt;"  ";SAISpaceFill$(SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",Items.[ItemNo].AdjCode$),15);
            Else 
              Print #chprt;" ";SAISpaceFill$(SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",Items.[ItemNo].AdjCode$),15);
            End If 
          End If 
          If ScrapSRecord$[69,70] = "CA"
            If Items.[ItemNo].RedCount
              Print #chprt; Using "------#"; Tab 80;Items.[ItemNo].RedCount; ! Should never happen here
            Else 
              Print #chprt; Using "----#.#"; Tab 80;Items.[ItemNo].RedNetWt;
            End If 
            Print #chprt; Using "-----#.##";Items.[ItemNo].RedExt;
            TotalRedWT = TotalRedWT + Items.[ItemNo].RedNetWt
            TotalRedExt = TotalRedExt + Items.[ItemNo].RedExt
          End If 
          If PrintTicketWeightAdjustmentAsPr()
            If PrintPrice
              Print #chprt; Using "-----#.####"; Tab 96;Items.[ItemNo].Price;" ";Items.[ItemNo].PriceUM$;
              Print #chprt; Using "-------#.##";AdjAmt;(Items.[ItemNo].MatExt + Items.[ItemNo].RedExt);
            End If 
          Else 
            Print #chprt; Tab 100;FormatNum$(Items.[ItemNo].NetWt + Items.[ItemNo].AdjWt,7); ! Paid Weight
            If PrintPrice
              Print #chprt; Using "-----#.####";Items.[ItemNo].Price;" ";Items.[ItemNo].PriceUM$;
              Print #chprt; Using "-------#.##";Items.[ItemNo].MatExt + Items.[ItemNo].RedExt;
            End If 
          End If 
        End If 
        Print #chprt;
      Next ItemNo
      If SunValley And TicketHeader.EntityNo$ = SV_SupplierNo$
        Print #chprt;
        Print #chprt;"  Driver's Name: ";SAISpaceFill$(TicketHeader.LAInfo_DriversName$,17);"Dist: ";SAISpaceFill$(TicketHeader.LAInfo_District$,4);
        Print #chprt;"Route#: ";SAISpaceFill$(TicketHeader.LAInfo_Route$,7);"Sect: ";TicketHeader.LAInfo_Section$
        LineCount = LineCount + 2
      End If 
      If Trim$(TicketHeader.CarrierNo$) And (z$[644,646] = "220" Or z$[644,646] = "319" Or z$[644,646] = "330" Or z$[644,646] = "311") ! Sims NorthAmerica, SDI
        If LineCount >= 8
          Call SkipLines(chprt,9 - LineCount)
          Call PrintDPTicketLastLine()
          Print #chprt;"  TOTALS";Rep$(" ",29);"*** CONTINUED ON NEXT TICKET ***"
          Call PrintDPTicketFooter(TicketType$)
          Call PrintDPTicketHeader(n,PageNo,PrinterForm$,TicketType$)
          LineCount = 0
        End If 
        Print #chprt;
        Print #chprt;"  Carrier: ";TicketHeader.CarrierNo$;" - ";SAICodesFileDesc$(ch_110Aro,"C",TicketHeader.CarrierNo$)
        LineCount = LineCount + 2
      End If 
      Call SkipLines(chprt,9 - LineCount)
      Call PrintDPTicketLastLine()
      ! Totals
      Print #chprt;"  TOTALS";
      If gbl.MultiCurrency$ = "Y" And TicketHeader.FundsType$ <> gbl.BranchFundsType$
        Print #chprt;" (";GetCurrencyCode$(TicketHeader.FundsType$);")";
      End If 
      If ScaleCodes$[67,67] = "Y" And TicketTotals.TotalCars Print #chprt; Using "---#"; Tab 14;"# CARS ";TicketTotals.TotalCars;
      If Abs(TicketTotals.TotalNet) > 999999
        cf = ScrapSRecord$[45,56]
        Print #chprt; Tab 50;FormatNum$(SAIDivide(TicketTotals.TotalNet,cf,0),5);LCase$(ScrapSRecord$[67,68]);
        If Not(PrintTicketWeightAdjustmentAsPr()) Print #chprt;FormatNum$(SAIDivide(TicketTotals.TotalAdj,cf,0),5);LCase$(ScrapSRecord$[67,68]);
      Else 
        cf = 0
        Print #chprt; Tab 50;FormatNum$(TicketTotals.TotalNet,7);
        If Not(PrintTicketWeightAdjustmentAsPr()) Print #chprt;FormatNum$(TicketTotals.TotalAdj,7);
      End If 
      If z$[644,646] = "220" Or z$[644,646] = "323" Or z$[644,646] = "337" ! SIMS, SA, and PSC
        If ScrapSRecord$[78,78] = "Y" ! Sims Can
          If Not(PrintTicketWeightAdjustmentAsPr())
            If cf
              Print #chprt; Tab 65;FormatNum$(SAIDivide(TicketTotals.TotalNet + TicketTotals.TotalAdj,cf,0),5);LCase$(ScrapSRecord$[67,68]); ! Paid Weight
            Else 
              Print #chprt; Tab 65;FormatNum$(TicketTotals.TotalNet + TicketTotals.TotalAdj,7); ! Paid Weight
            End If 
          End If 
          If PrintPrice
            Print #chprt; Using "-------#.##"; Tab 85;TotalMatExt;
            Print #chprt; Using "----#.##";TotalMatTax;
            Print #chprt; Using "----#.##";TicketTotals.TotalCbkFrt;
            Print #chprt; Using "----#.##";TotalCbkTax;
            Print #chprt; Using " -------#.##";TotalNetAmt;
          End If 
        Else If ScrapSRecord$[69,70] = "CA" ! Sims w/ CRV
          If Not(PrintTicketWeightAdjustmentAsPr())
            If cf
              Print #chprt; Tab 77;FormatNum$(SAIDivide(TicketTotals.TotalNet + TicketTotals.TotalAdj,cf,0),5);LCase$(ScrapSRecord$[67,68]);
            Else 
              Print #chprt; Tab 77;FormatNum$(TicketTotals.TotalNet + TicketTotals.TotalAdj,7);
            End If 
            p = 85
          Else 
            p = 76
          End If 
          Print #chprt; Using "----#.#"; Tab p;TotalRedWT;
          Print #chprt; Using "----#.##";TotalRedExt;
          If PrintPrice
            Print #chprt; Using "----#.##"; Tab 101;TicketTotals.TotalCbkFrt;
            Print #chprt; Using "-------#.##"; Tab 121;TotalNetAmt;
          End If 
        Else ! Sims w/o CRV
          If Not(PrintTicketWeightAdjustmentAsPr())
            If cf
              Print #chprt; Tab 93;FormatNum$(SAIDivide(TicketTotals.TotalNet + TicketTotals.TotalAdj,cf,0),5);LCase$(ScrapSRecord$[67,68]);
            Else 
              Print #chprt; Tab 93;FormatNum$(TicketTotals.TotalNet + TicketTotals.TotalAdj,7);
            End If 
          End If 
          If PrintPrice
            Print #chprt; Using "----#.##"; Tab 100;TicketTotals.TotalCbkFrt;
            Print #chprt; Using "-------#.##"; Tab 121;TotalNetAmt;
          End If 
        End If 
      Else 
        If ScrapSRecord$[69,70] = "CA"
          Print #chprt; Using "----#.#"; Tab 80;TotalRedWT;
          Print #chprt; Using "-----#.##";TotalRedExt;
        End If 
        If Not(PrintTicketWeightAdjustmentAsPr())
          If cf
            Print #chprt; Tab 100;FormatNum$(SAIDivide(TicketTotals.TotalNet + TicketTotals.TotalAdj,cf,0),5);LCase$(ScrapSRecord$[67,68]);
          Else 
            Print #chprt; Tab 100;FormatNum$(TicketTotals.TotalNet + TicketTotals.TotalAdj,7);
          End If 
        End If 
        If PrintPrice Print #chprt; Using "-------#.##"; Tab 121;TicketTotals.TotalPrice;
      End If 
      Print #chprt;
    End If 
    Call PrintDPTicketFooter(TicketType$)
  Next n
  Print #chprt;'FF';
  Close #chprt
  status = 0
End Sub 
Sub InitializeThermalPrinter(Printer$,PrinterType$,LineSpacing$,status)
  LineTerm$ = 'LF'
  count = 0
  chprt = FindChannel()
  Try 
    If Printer$ = "email"
      temp$ = "$dynpaper p=email f=BlankForm.dpf c=1 cpi=13 lpi=8 n=" + TicketHeader.TicketNo$
      Try 
        Open #chprt,temp$
      Else 
        status = 1
        Exit Sub 
      End Try 
      LineTerm$ = ""
    Else If Printer$ = ""
      Open #chprt,"(binary=true)filler" As "Window Terminal Printer"
    Else If Printer$[1,1] = "$"
      If PrinterType$ = "CITIZEN"
        Open #chprt,"(binary=true,buffer=true)" + Printer$
      Else 
        Open #chprt,"(buffer=true)" + Printer$
        LineTerm$ = ""
      End If 
    Else If UCase$(Printer$) = "DEFAULT"
      Open #chprt,"(binary=true)filler" As "Default Terminal Printer"
    Else 
      Open #chprt,"(binary=true)" + Printer$ As "Terminal Printer"
    End If 
    status = 0
  Else 
    If Spc(8) = 71 And count = 0 ! No such driver
      Printer$ = ""
      count = count + 1
      Retry 
    End If 
    status = 1
    Exit Sub 
  End Try 
  Select Case PrinterType$
    Case "ZEBRA"
      BB$ = ""
      EB$ = ""
      BX$ = ""
      EX$ = ""
      CutPaper$ = 'LF' + "! U1 PARTIAL-CUT" + 'LF'
      Print #chprt;"! U1 LMARGIN 30";LineTerm$
      Print #chprt;"! U1 SETLP 0 2 12";LineTerm$
      Print #chprt;"! U1 SETBOLD 1";LineTerm$
      Print #chprt;"! U1 SETSP 3";LineTerm$
      Print #chprt;LineTerm$
    Case "STAR"
      BB$ = 'ESC' + "E"
      EB$ = 'ESC' + "F"
      BX$ = 'ESC' + "i" + Str$(TicketNoSize - 1) + Str$(TicketNoSize - 1)
      EX$ = 'ESC' + "i00"
      CutPaper$ = 'ESC' + "d3"
      If LineSpacing$ = "4mm"
        Print #chprt;'ESC';"z1"; ! Set line spacing to 4mm
      Else 
        Print #chprt;'ESC';"0"; ! Set line spacing to 3mm
      End If 
      Print #chprt;'ESC' + 'GS' + "t "; ! Set character set to Windows Latin-1
    Case "CITIZEN"
      BB$ = 'ESC' + "E" + Chr$(1)
      EB$ = 'ESC' + "E" + 'LITNUL'
      BX$ = 'ESC' + "!0" ! 110000
      EX$ = 'ESC' + "!" + 'LITNUL'
      CutPaper$ = 'LF' + 'LF' + 'ESC' + "m" ! Partial cut
    Case Else 
      BB$ = ""
      EB$ = ""
      BX$ = ""
      EX$ = ""
      CutPaper$ = 'FF'
  End Select 
End Sub 
Sub PrintMaterialCodeForm(Printer$,PrinterType$,status)
  Try 
    chfile = FindChannel()
    Open #chfile,"(charset=ansi)global/config/" + MaterialCodeFormFile$ As "Text"
  Else 
    Call SAITouchError("Cannot open MaterialCode Form definition file.\15\" + MaterialCodeFormFile$)
    status = 1
    Exit Sub 
  End Try 
  Call InitializeThermalPrinter(Printer$,PrinterType$,TicketLineSpacing$,status)
  If status Exit Sub 
  For n = 1 To MaterialCodeFormCopies
    Rewind #chfile
    Do 
      Read #chfile;temp$
      If temp$ = "" Exit Do 
      If Pos(temp$, = "%",1,2) ! Look for 2nd "%" in string
        If z$[644,646] = "323" And TicketHeader.EntityNo$[1,3] <> "CP0" And TicketIdentity.IDNumber$ And (Supplier.MiscSupplierType$ = "P" Or Supplier.MiscSupplierType$ = "U") ! SA Recycling
          temp$ = ReplaceCI$(temp$,"%Name%",TicketIdentity.FullName$)
          temp$ = ReplaceCI$(temp$,"%PhoneNumber%",TicketIdentity.PhoneNo$)
          temp$ = ReplaceCI$(temp$,"%StreetAddress%",TicketIdentity.Address1$)
          temp$ = ReplaceCI$(temp$,"%City%",TicketIdentity.City$)
          temp$ = ReplaceCI$(temp$,"%State%",TicketIdentity.State$)
          temp$ = ReplaceCI$(temp$,"%PostalCode%",TicketIdentity.PostCode$)
          temp$ = ReplaceCI$(temp$,"%IDNumber%",TicketIdentity.IDNumber$)
        Else 
          temp$ = ReplaceCI$(temp$,"%Name%",TicketHeader.Name$)
          temp$ = ReplaceCI$(temp$,"%PhoneNumber%",TicketHeader.PhoneNo$)
          temp$ = ReplaceCI$(temp$,"%StreetAddress%",TicketHeader.Address1$)
          temp$ = ReplaceCI$(temp$,"%City%",TicketHeader.City$)
          temp$ = ReplaceCI$(temp$,"%State%",TicketHeader.State$)
          temp$ = ReplaceCI$(temp$,"%PostalCode%",TicketHeader.PostCode$)
          temp$ = ReplaceCI$(temp$,"%IDNumber%",TicketHeader.IDNumber$)
        End If 
        temp$ = ReplaceCI$(temp$,"%ShipmentDate%",SAISafeDateUsing$(TicketHeader.ShipmentDate#,DateFormat1$))
        If Pos(temp$, = "%IDType%")
          temp2$ = ""
          If TicketIdentity.IDType$
            Try 
              Search #ch_db;"SELECT Description FROM Codes_IDType WHERE IDType=" + SQLV$(TicketIdentity.IDType$)
              If Chf(ch_db)
                Map #ch_db;
                Read #ch_db;temp2$
              End If 
            Else 
            End Try 
          End If 
          temp$ = ReplaceCI$(temp$,"%IDType%",temp2$)
        End If 
      End If 
      Print #chprt;temp$;LineTerm$
    Loop 
    Print #chprt;CutPaper$;
  Next n
  Close #chprt
  Close #chfile
  Clear temp$,temp2$
End Sub 
Sub PrintTicket(Printer$,PrinterType$,PrinterForm$,NumCopies,TicketType$,status)
  If NumCopies = 0
    status = 0
    Exit Sub 
  End If 
  If TicketHeader.TktType$ = "R" And TicketType$ <> "I" And MIXTicketPrinter$
    If MIXTicketForm$
      Call PrintMIXDetailTicket(TicketType$,NumCopies,status)
      If MIXTicketPrintBoth$ <> "Y" Exit Sub 
    End If 
  End If 
  If PrinterForm$
    Call PrintDPTicket(Printer$,PrinterForm$,NumCopies,TicketType$,status)
    Exit Sub 
  End If 
  Call InitializeThermalPrinter(Printer$,PrinterType$,TicketLineSpacing$,status)
  If status Exit Sub 
  For n = 1 To NumCopies
    Select Case PrinterType$
      Case "ZEBRA"
        Print #chprt;"! U1 CENTER";LineTerm$
        If TicketType$ <> "" Or TicketCopyPrintPurchaseBarcode$[n] <> "N"
          Print #chprt;"! U1 BARCODE 128 2 0 75 275 0 ";TicketHeader.TicketNo$;LineTerm$
          Print #chprt;LineTerm$
        End If 
        Print #chprt;"! U1 SETLP 0 5 24";LineTerm$
        Print #chprt;LineTerm$
        Print #chprt;LineTerm$
        Print #chprt;Rep$(" ",14);"Ticket # ";TicketHeader.TicketNo$;LineTerm$
        Print #chprt;"! U1 SETLP 0 2 12";LineTerm$
        Print #chprt;LineTerm$
      Case "STAR"
        If TicketType$ <> "" Or TicketCopyPrintPurchaseBarcode$[n] <> "N"
          Print #chprt;Rep$(" ",23);'ESC';"b612P";TicketHeader.TicketNo$;"\36\"
        End If 
        Print #chprt;Rep$(" ",(5 - TicketNoSize) * 7);BX$;"Ticket # ";TicketHeader.TicketNo$;EX$;LineTerm$
      Case "CITIZEN"
        Print #chprt;'ESC';"a1"; ! Center
        If TicketType$ <> "" Or TicketCopyPrintPurchaseBarcode$[n] <> "N"
          Print #chprt;'GS';"h";Chr$(80); ! Barcode Height
          Print #chprt;'GS';"kI";Chr$(Len(TicketHeader.TicketNo$) + 2);"{B";TicketHeader.TicketNo$;LineTerm$ ! Code 128, Codeset B
        End If 
        Print #chprt;BX$;"Ticket # ";TicketHeader.TicketNo$;EX$;LineTerm$
        Print #chprt;'ESC';"a0" ! Left Justify
      Case Else 
        Print #chprt;Rep$(" ",27);"Ticket # ";TicketHeader.TicketNo$;LineTerm$
    End Select 
    Print #chprt;LineTerm$
    If TicketType$ = "R"
      Print #chprt;Rep$(" ",19);"** TICKET REPRINT on ";DateUsing$(Tim#(0),dateformat$);" **";LineTerm$
      Print #chprt;LineTerm$
    Else If TicketType$ = "I"
      Print #chprt;Rep$(" ",21);"** Classification Ticket **";LineTerm$
      Print #chprt;LineTerm$
    End If 
    If TicketHeader.TktMode$ = "T"
      Select Case DocLang$
        Case "FC"
          Print #chprt;Rep$(" ",9);"BILLET DE TRANSFERT ENTRANT/INBOUND TRANSFER TICKET";LineTerm$
        Case Else 
          Print #chprt;Rep$(" ",23);"INBOUND TRANSFER TICKET";LineTerm$
      End Select 
    Else 
      Select Case DocLang$
        Case "FC"
          If z$[644,646] = "351" ! TMR
            Print #chprt;Rep$(" ",16);"BILLET DE RECEPTION/RECEIVING TICKET";LineTerm$
          Else 
            Print #chprt;Rep$(" ",20);"BILLET D'ACHAT/PURCHASE TICKET";LineTerm$
          End If 
        Case Else 
          Print #chprt;Rep$(" ",27);"PURCHASE TICKET";LineTerm$
      End Select 
    End If 
    Print #chprt;LineTerm$
    If TicketType$ = "I" And niheader
      For i = 1 To niheader
        Print #chprt;PrintTextLine$(InspectionTicketHeader$[i]);LineTerm$
      Next i
      Print #chprt;LineTerm$
    Else If TicketHeader.Branch$ = Branch$
      If nheader
        For i = 1 To nheader
          Print #chprt;PrintTextLine$(TicketHeader$[i]);LineTerm$
        Next i
        Print #chprt;LineTerm$
      End If 
    Else 
      Print #chprt;Rep$(" ",16);"*** Ticket created by Branch - ";TicketHeader.Branch$;" ***";LineTerm$
      Print #chprt;LineTerm$
    End If 
    If TicketControlNo And TicketHeader.ControlNo
      Print #chprt;BB$;SAIFill$(ControlNoLabel$ + ": " + TicketHeader.Branch$ + " " + Str$(TicketHeader.ControlNo),"R"," ",69);EB$;LineTerm$
    End If 
    Select Case DocLang$
      Case "FC"
        temp$ = "Billet/Ticket # "
      Case Else 
        temp$ = "Ticket # "
    End Select 
    temp$ = temp$ + TicketHeader.TicketNo$
    If TicketType$ <> "R"
      Print #chprt;SAISpaceFill$(temp$,54);"Date:  ";SAISafeDateUsing$(TicketHeader.EntryDate#,dateformat$);LineTerm$
    Else 
      Print #chprt;temp$;LineTerm$
    End If 
    AltUnitTicket = 0
    PrintCFC = 0
    If TicketType$ = "" And TicketCopyAlternateUnit$[n] = "Y" Let AltUnitTicket = 1
    Call PrintTicketHeader(chprt,LineTerm$)
    If TicketType$ = "I"
      If ItemCount > 1
        For ItemNo = 1 To ItemCount - 1
          Call PrintTicketItem(chprt,LineTerm$,ItemNo)
        Next ItemNo
      Else 
        Print #chprt;Rep$("-",69);LineTerm$
      End If 
      Print #chprt;LineTerm$
      If Items.[ItemCount].TareWt
        Print #chprt;"                         Gross      Tare       Net      Adj    Pd Wt";LineTerm$
        !  print #chprt;"           WEIGHT:   --------#m--------#m--------#--------#--------#"
        Print #chprt;"           WEIGHT:   ";
        Print #chprt; Using "--------#";Items.[ItemCount].GrossWt;ScaleNumber$(Items.[ItemCount].GrossWtScale$);
        Print #chprt; Using "--------#";Items.[ItemCount].TareWt;ScaleNumber$(Items.[ItemCount].TareWtScale$);
        Print #chprt; Using "--------#";Items.[ItemCount].NetWt;
        Print #chprt; Using "--------#";Items.[ItemCount].AdjWt;
        Print #chprt; Using "--------#";(Items.[ItemCount].NetWt + Items.[ItemCount].AdjWt);LineTerm$
        Print #chprt;LineTerm$
      Else 
        Print #chprt;"     GROSS WEIGHT:  ";Str$(Int(Items.[ItemCount].GrossWt));ScaleNumber$(Items.[ItemCount].GrossWtScale$);LineTerm$
      End If 
      Print #chprt;"      RECEIVED AS:  ";Items.[ItemCount].MaterialCode$;"  ";Items.[ItemCount].MaterialDesc$;LineTerm$
      If Trim$(Items.[ItemCount].StockPile$) And PrintStockPile$ = "Y"
        Print #chprt;"        StockPile:  ";Items.[ItemCount].StockPile$;LineTerm$
      End If 
      Print #chprt;LineTerm$
      If nitext
        For i = 1 To nitext
          Print #chprt;InspectionTicketText$[i];LineTerm$
        Next i
      Else 
        Print #chprt;"     INSPECTED AS:  ";Rep$("_",49);LineTerm$
        Print #chprt;LineTerm$
        Print #chprt;Rep$(" ",20);Rep$("_",49);LineTerm$
        Print #chprt;"MATERIAL";LineTerm$
        Print #chprt;"CONTAMINATED WITH:  ";Rep$("_",49);LineTerm$
        Print #chprt;LineTerm$
        Print #chprt;Rep$(" ",20);Rep$("_",49);LineTerm$
        Print #chprt;LineTerm$
        Print #chprt;"     INSPECTED BY:  ";Rep$("_",49);LineTerm$
      End If 
      Print #chprt;LineTerm$
      If Items.[ItemCount].CFCFlag = 2
        Print #chprt;Rep$(" ",20);"** CFC CONTRACT EXPIRED **";LineTerm$
      Else If Items.[ItemCount].CFCFlag
        Print #chprt;Rep$(" ",20);"** CFC CONTRACT REQUIRED **";LineTerm$
      End If 
      Print #chprt;Rep$("-",69);LineTerm$
      Print #chprt;LineTerm$
    Else 
      For ItemNo = 1 To ItemCount
        If AltUnitTicket
          Call PrintAltUnitTicketItem(chprt,LineTerm$,ItemNo)
        Else 
          Call PrintTicketItem(chprt,LineTerm$,ItemNo)
        End If 
      Next ItemNo
    End If 
    Select Case DocLang$
      Case "FC"
        Print #chprt;"   Poids Brut Date/Heure";LineTerm$
        Print #chprt;"   Gross Wght Date/Time  ";SAISafeDateUsing$(Items.[1].GrossWtTime#,dateformat$ + " HH:NN");
      Case Else 
        Print #chprt;"   Gross Wght Date/Time  ";SAISafeDateUsing$(Items.[1].GrossWtTime#,dateformat$ + " HH:NN");
    End Select 
    If Items.[1].MaterialCode$[1,2] = "*M"
      If Items.[1].TareWt Let i = 1 Else Let i = 0
    Else If Items.[ItemCount].TareWt Or TicketHeader.VehType$ = "B"
      i = ItemCount
    Else 
      i = 0
    End If 
    If i
      If SuppressTicketSummaryWeight$ <> "Y"
        Print #chprt;Rep$(" ",17);TicketSummaryWeightDesc$;
      End If 
      Print #chprt;LineTerm$
      Select Case DocLang$
        Case "FC"
          Print #chprt;"   Poids Tare Date/Heure";LineTerm$
          Print #chprt;"   Tare  Wght Date/Time  ";SAISafeDateUsing$(Items.[1].TareWtTime#,dateformat$ + " HH:NN");
        Case Else 
          Print #chprt;"   Tare  Wght Date/Time  ";SAISafeDateUsing$(Items.[1].TareWtTime#,dateformat$ + " HH:NN");
      End Select 
      If SuppressTicketSummaryWeight$ <> "Y"
        If PrintTicketWeightAdjustmentAsPr() Let PaidWeight = TicketTotals.TotalNet Else Let PaidWeight = TicketTotals.TotalNet + TicketTotals.TotalAdj
        ReportWt = SAIDivide(PaidWeight,TicketSummaryWeight_cf,4)
        If TicketSummaryWeight_cf = 1
          Print #chprt;Rep$(" ",17);BB$;ReportWt Using "##########";EB$;
        Else 
          Print #chprt;Rep$(" ",17);BB$;ReportWt Using "----#.####";EB$;
        End If 
      End If 
      Print #chprt;LineTerm$
    Else 
      Print #chprt;LineTerm$
    End If 
    If SuppressTicketSummaryWeight$ <> "Y" And TicketSummaryWeightUM2$
      Print #chprt;LineTerm$
      Print #chprt;Rep$(" ",56);TicketSummaryWeightDesc2$;LineTerm$
      If PrintTicketWeightAdjustmentAsPr() Let PaidWeight = TicketTotals.TotalNet Else Let PaidWeight = TicketTotals.TotalNet + TicketTotals.TotalAdj
      ReportWt = SAIDivide(PaidWeight,TicketSummaryWeight_cf2,4)
      If TicketSummaryWeight_cf2 = 1
        Print #chprt;Rep$(" ",56);BB$;ReportWt Using "##########";EB$;LineTerm$
      Else 
        Print #chprt;Rep$(" ",56);BB$;ReportWt Using "----#.####";EB$;LineTerm$
      End If 
    End If 
    Call SetPrintPriceFlag(TicketType$,n,PrintPrice)
    If PrintPrice
      If AltUnitTicket
        Call PrintAltUnitMaterialSummary(chprt,LineTerm$)
        If (z$[644,646] = "220" Or z$[644,646] = "323" Or z$[644,646] = "337") And TotalCbkFrt ! SIMS, SA, and PSC
          Print #chprt; Using "-,---,--#.#";" Freight Chargeback";Rep$(" ",39);TotalCbkFrt;LineTerm$
        Else 
          TotalCbkFrt = 0 ! Zero it for everyone else
        End If 
      Else 
        Call PrintMaterialSummary(chprt,LineTerm$)
        If (z$[644,646] = "220" Or z$[644,646] = "323" Or z$[644,646] = "337") And TicketTotals.TotalCbkFrt ! SIMS, SA and PSC
          Print #chprt; Using "----,--#.##";" Freight Chargeback";Rep$(" ",39);TicketTotals.TotalCbkFrt;LineTerm$
        Else 
          TicketTotals.TotalCbkFrt = 0 ! Zero it for everyone else
        End If 
      End If 
      For i = 1 To LevyItemCount
        Print #chprt;" ";SAISpaceFill$(LevyItems.[i].LevyMaterialDesc$,21);"  ";
        Print #chprt;FormatNum$(LevyItems.[i].NetWt,7);" ";
        Print #chprt; Using "----#.####";LevyItems.[i].Price;"/";
        temp$ = LCase$(SAISpaceFill$(SAICodesFileDesc$(ch_110Aro,"U",LevyItems.[i].PriceUM$),12))
        temp$[1,1] = UCase$(temp$[1,1])
        Print #chprt; Using "----,--#.##";temp$;"   ";LevyItems.[i].MatExt;LineTerm$
        !        TicketHeader.TotalMatGST=TicketHeader.TotalMatGST+LevyItems.[i].MatGST
        !        TicketHeader.TotalPrice=TicketHeader.TotalPrice+LevyItems.[i].MatExt
      Next i
      Print #chprt;LineTerm$
      If TicketHeader.PaymentCode$ And TicketType$ = ""
        If ScrapSRecord$[78,78] = "Y" ! GST
          If TicketTotals.TotalMatGST Or TicketTotals.TotalMatPST
            If z$[644,646] = "355"
              If TicketTotals.TotalMatGST > 0 ! Only print for positive GST
                Print #chprt;Rep$(" ",15);"BUYER CREATED TAX INVOICE - IRD APPROVED";LineTerm$
                Print #chprt;Rep$(" ",26);"B.C.T.I. #: ";TicketHeader.PaymentNo$;LineTerm$
                Print #chprt;LineTerm$
              Else If TicketHeader.PaymentCode$ <> "C"
                Print #chprt;Rep$(" ",24);"CASH RECEIPT # ";TicketHeader.PaymentNo$;LineTerm$
                Print #chprt;LineTerm$
              End If 
            Else If Supplier.TaxableFlag$ = "G" Or Supplier.TaxableFlag$ = "P"
              Print #chprt;Rep$(" ",20);"RECIPIENT CREATED TAX INVOICE";LineTerm$
              Print #chprt;Rep$(" ",26);"R.C.T.I. #: ";TicketHeader.PaymentNo$;LineTerm$
              Print #chprt;LineTerm$
            End If 
          End If 
          If AltUnitTicket
            If TicketTotals.TotalMatGST Or TicketTotals.TotalMatPST
              TotalMatTax = Round((TicketTotals.TotalMatGST + TicketTotals.TotalMatPST) / ExchangeRate,1)
              Print #chprt; Using "$----,--#.#";BB$;" Material Total:";Rep$(" ",38);SAISpaceFill$(AltCurrencyCode$,4);TotalPrice;EB$;LineTerm$
              If Supplier.TaxableFlag$ = "W"
                Print #chprt; Using "-$####,###.#";BB$;SAISpaceFill$(" Total Taxes Withheld:",53);SAISpaceFill$(AltCurrencyCode$,4);TotalMatGST;EB$;LineTerm$
              Else If Supplier.TaxableFlag$ = "G" Or TotalMatTax
                Print #chprt; Using "$----,--#.#";BB$;SAISpaceFill$(" Total Tax Paid:",54);SAISpaceFill$(AltCurrencyCode$,4);TotalMatTax;EB$;LineTerm$
              End If 
            Else 
              Print #chprt; Using "$----,--#.#";BB$;" Total:";Rep$(" ",51);TotalPrice;EB$;LineTerm$
            End If 
          Else 
            If TicketTotals.TotalMatGST Or TicketTotals.TotalMatPST
              Print #chprt; Using "$---,--#.##";BB$;" Material Total:";Rep$(" ",42);TicketTotals.TotalPrice;EB$;LineTerm$
              If Supplier.TaxableFlag$ = "W"
                Print #chprt; Using "$---,--#.##";BB$;SAISpaceFill$(" Total Taxes Withheld:",58);TicketTotals.TotalMatGST + TicketTotals.TotalMatPST;EB$;LineTerm$
              Else If z$[644,646] = "255" And Supplier.TaxableFlag$ = "G" And TicketTotals.TotalMatGST
                Print #chprt; Using "$---,--#.##";BB$;SAISpaceFill$(" Total GST/Taxes Paid:",58);TicketTotals.TotalMatGST;EB$;LineTerm$
              Else If Supplier.TaxableFlag$ = "G" Or TicketTotals.TotalMatGST Or TicketTotals.TotalMatPST
                Print #chprt; Using "$---,--#.##";BB$;SAISpaceFill$(" Total Tax Paid:",58);TicketTotals.TotalMatGST + TicketTotals.TotalMatPST;EB$;LineTerm$
              End If 
            Else 
              Print #chprt; Using "$---,--#.##";BB$;" Total:";Rep$(" ",51);TicketTotals.TotalPrice;EB$;LineTerm$
            End If 
          End If 
        End If 
        If TicketHeader.PaymentCode$ = "A"
          temp$ = " Total Paid via ATM Receipt No. " + TicketHeader.PaymentNo$
        Else If TicketHeader.PaymentCode$ = "R"
          temp$ = " Total Paid on Cash Receipt No. " + TicketHeader.PaymentNo$
        Else If TicketHeader.PaymentCode$ = "E"
          temp$ = " Total Paid via EFT Receipt No. " + TicketHeader.PaymentNo$
        Else If TicketHeader.PaymentCode$ = "C"
          temp$ = " Total Paid on " + gbl_check$ + " No. " + LaserCheckHdr.CheckNo$
        Else 
          temp$ = " Total Paid on Receipt/" + gbl_check$ + " No. " + TicketHeader.PaymentNo$
        End If 
        If z$[644,646] = "355" And (TicketTotals.TotalMatGST Or TicketTotals.TotalMatPST) ! Sims NZ
          temp$ = temp$ + " (GST Inclusive)"
        End If 
        If AltUnitTicket
          Print #chprt; Using "$----,--#.#";BB$;SAISpaceFill$(temp$,54) + SAISpaceFill$(AltCurrencyCode$,4);TotalPrice + TotalCbkFrt;EB$;LineTerm$
        Else 
          Print #chprt; Using "$---,--#.##";BB$;SAISpaceFill$(temp$,58);TicketTotals.TotalPaid;EB$;LineTerm$
        End If 
        Print #chprt;" Payment Date:  ";DateUsing$(Tim#(0),dateformat$ + "  hh:NNpm");LineTerm$
        If z$[644,646] = "255" And (Supplier.TaxableFlag$ = "G" Or Supplier.TaxableFlag$ = "P") ! Sims AUS
          Print #chprt;LineTerm$
          Print #chprt;"THE GST SHOWN IS PAYABLE BY THE SUPPLIER";LineTerm$
          Print #chprt;LineTerm$
        End If 
        If (z$[644,646] = "255" Or z$[644,646] = "355") And TicketTotals.TotalPaid < 0
          Print #chprt;LineTerm$
          Print #chprt;"A negative balance indicates the total amount is payable by the";LineTerm$
          Print #chprt;"Supplier to Sims.";LineTerm$
          Print #chprt;LineTerm$
        End If 
      Else 
        If AltUnitTicket
          Print #chprt; Using "$----,--#.#";BB$;" Total:";Rep$(" ",47) + SAISpaceFill$(AltCurrencyCode$,4);TotalPrice + TotalCbkFrt;EB$;LineTerm$
        Else 
          If gbl.MultiCurrency$ = "Y" And TicketHeader.FundsType$ <> gbl.BranchFundsType$
            Print #chprt; Using "$---,--#.##";BB$;" Total:";Rep$(" ",47) + SAISpaceFill$(GetCurrencyCode$(TicketHeader.FundsType$),4);TicketTotals.TotalPrice + TicketTotals.TotalCbkFrt;EB$;LineTerm$
          Else 
            Print #chprt; Using "$---,--#.##";BB$;" Total:";Rep$(" ",51);TicketTotals.TotalPrice + TicketTotals.TotalCbkFrt;EB$;LineTerm$
          End If 
        End If 
      End If 
    End If 
    If TicketHeader.TktComment$
      Print #chprt;LineTerm$
      Select Case DocLang$
        Case "FC"
          Print #chprt;"Commentaire du Billet/";LineTerm$
          Print #chprt;"Ticket Comment: ";TicketHeader.TktComment$;LineTerm$
        Case Else 
          Print #chprt;"Ticket Comment: ";TicketHeader.TktComment$;LineTerm$
      End Select 
    End If 
    If PrintInspectionComment$ = "Y" And TicketHeader.InspectionComment$
      Print #chprt;LineTerm$
      If Len(TicketHeader.InspectionComment$) < 50
        Print #chprt;"Inspection Comment: ";TicketHeader.InspectionComment$;LineTerm$
      Else 
        Print #chprt;"Inspectn Comment: ";TicketHeader.InspectionComment$;LineTerm$
      End If 
    End If 
    If PrintShippingInstructions$ = "Y" And TicketHeader.ShippingInst$
      Print #chprt;LineTerm$
      Select Case DocLang$
        Case "FC"
          Print #chprt;"Instructions d'exp\351\dition/";LineTerm$
          Print #chprt;"Shipping Instructions: ";TicketHeader.ShippingInst$;LineTerm$
        Case Else 
          Print #chprt;"Shipping Instructions: ";TicketHeader.ShippingInst$;LineTerm$
      End Select 
    End If 
    If TicketHeader.PaymentCode$ And CashierSignature$ = "Y" And TicketType$ = ""
      Print #chprt;LineTerm$
      Print #chprt;LineTerm$
      Print #chprt;LineTerm$
      Print #chprt;"Cashier Signature ";Rep$("_",51);LineTerm$
      If WMName$ Print #chprt;Rep$(" ",22);"(";WMName$;")";LineTerm$
    End If 
    If WMSignature$ = "Y"
      Print #chprt;LineTerm$
      Print #chprt;LineTerm$
      Print #chprt;LineTerm$
      If TicketType$ = "I" And InspectionWeighmaster$
        Print #chprt;SAIFill$(InspectionWeighmaster$ + " Signature ","L","_",69);LineTerm$
      Else 
        Select Case DocLang$
          Case "FC"
            Print #chprt;"Signature du Peseur/";LineTerm$
            Print #chprt;SAIFill$(gbl_WeighMaster$ + " Signature ","L","_",69);LineTerm$
          Case Else 
            Print #chprt;SAIFill$(gbl_WeighMaster$ + " Signature ","L","_",69);LineTerm$
        End Select 
      End If 
      If TicketType$ = ""
        temp$ = WMName$
      Else If Trim$(Items.[1].TareWtWM$) = ""
        temp$ = SAICodesTableDesc$(ch_db,"Codes_WeighMaster","WeighMasterCode",Items.[1].GrossWtWM$)
      Else 
        temp$ = SAICodesTableDesc$(ch_db,"Codes_WeighMaster","WeighMasterCode",Items.[1].TareWtWM$)
      End If 
      If temp$ Print #chprt;Rep$(" ",22);"(";temp$;")";LineTerm$
    End If 
    If PrintWeighmaster$
      Clear temp$,temp2$
      If TicketType$ = ""
        temp$ = WeighMaster$
      Else If Trim$(Items.[1].TareWtWM$) = ""
        temp$ = Items.[1].GrossWtWM$
      Else 
        temp$ = Items.[1].TareWtWM$
      End If 
      If temp$
        Select Case PrintWeighmaster$
          Case "CODE"
            temp2$ = temp$
          Case "NAME"
            temp2$ = SAICodesTableDesc$(ch_db,"Codes_WeighMaster","WeighMasterCode",temp$)
          Case "COMMENT"
            Search #ch_db;"SELECT Comment FROM Codes_WeighMaster WHERE WeighMasterCode=" + SQLV$(temp$)
            If Chf(ch_db) Read #ch_db;temp2$
        End Select 
      End If 
      If temp2$
        Print #chprt;LineTerm$
        Select Case DocLang$
          Case "FC"
            Print #chprt;"Peseur/" + gbl_WeighMaster$ + ":  ";temp2$;LineTerm$
          Case Else 
            Print #chprt;gbl_WeighMaster$ + ":  ";temp2$;LineTerm$
        End Select 
      End If 
    End If 
    If PrintInspector$
      Clear temp$,temp2$
      For i = ItemCount To 1 Step -1
        If Items.[i].InspectedBy$
          temp$ = Items.[i].InspectedBy$
          Exit For 
        End If 
      Next i
      If temp$
        Select Case PrintInspector$
          Case "CODE"
            temp2$ = temp$
          Case "NAME"
            temp2$ = SAICodesTableDesc$(ch_db,"Codes_WeighMaster","WeighMasterCode",temp$)
          Case "COMMENT"
            Search #ch_db;"SELECT Comment FROM Codes_WeighMaster WHERE WeighMasterCode=" + SQLV$(temp$)
            If Chf(ch_db) Read #ch_db;temp2$
        End Select 
      End If 
      If temp2$
        Print #chprt;LineTerm$
        Select Case DocLang$
          Case "FC"
            Print #chprt;"Inspect\351\ par/Inspected by:  ";temp2$;LineTerm$
          Case Else 
            Print #chprt;"Inspected by:  ";temp2$;LineTerm$
        End Select 
      End If 
    End If 
    PrintSignature = 0
    If TicketType$ = "I" And InspectionCustomerSignature$
      If InspectionCustomerSignature$ = "Y" Or InspectionCustomerSignature$ = "P" Let PrintSignature = 1
    Else 
      If CustSignature$ = "Y" Or CustSignature$ = "P" Let PrintSignature = 1
    End If 
    If PrintSignature
      Print #chprt;LineTerm$
      Print #chprt;LineTerm$
      Print #chprt;LineTerm$
      Select Case DocLang$
        Case "FC"
          Print #chprt;"Signature du Client/";LineTerm$
          Print #chprt;"Customer Signature ";Rep$("_",50);LineTerm$
        Case Else 
          Print #chprt;"Customer Signature ";Rep$("_",50);LineTerm$
      End Select 
    End If 
    Print #chprt;LineTerm$
    If TicketType$ = "I" And nifooter
      For i = 1 To nifooter
        Print #chprt;PrintTextLine$(InspectionTicketFooter$[i]);LineTerm$
      Next i
    Else 
      For i = 1 To nfooter
        Print #chprt;PrintTextLine$(TicketFooter$[i]);LineTerm$
      Next i
    End If 
    If PrintStatementofSupply$ = "Y" And nofooter And TicketType$ <> "I"
      Print #chprt;LineTerm$
      For i = 1 To nofooter
        Print #chprt;PrintTextLine$(TicketOptFooter$[i]);LineTerm$
      Next i
    End If 
    If ncfc And PrintCFC
      If Supplier.SignatureOnFile$ = "Y"
        If TicketType$ = "R"
          PrintCFC = 0
        Else 
          If Supplier.CFCFormDate#
            If Supplier.CFCFormDate# >= RunDate# Let PrintCFC = 0
          End If 
        End If 
      End If 
    End If 
    If ncfc And PrintCFC And TicketType$ <> "I" And (TicketCopyPrintCFCText$[n] <> "N" Or TicketType$ = "R")
      Print #chprt;LineTerm$
      For i = 1 To ncfc
        Print #chprt;PrintTextLine$(CFCText$[i]);LineTerm$
      Next i
    End If 
    If PrintVINNumbers$ = "Y" Or PrintVINNumbers$ = "F"
      Try 
        Search #ch_db;"SELECT " + SQLN$(PurTicketVIN.) + " FROM Pur_Ticket_VIN WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
        nr = Chf(ch_db)
      Else 
        nr = 0
      End Try 
      If nr
        Map Record #ch_db As Pur_Ticket_VIN
        Print #chprt;LineTerm$
        Print #chprt;LineTerm$
        If PrintVINNumbers$ = "F"
          !          print #chprt;"Year  Make                 Model                 VIN
          !          print #chprt;"XXXX  XXXXXXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXXXXXX"
          Print #chprt;"Year  Make                 Model                 VIN";LineTerm$
        Else 
          Print #chprt;"VIN Number(s):";LineTerm$
        End If 
        Print #chprt;LineTerm$
        For i = 1 To nr
          Read Record #ch_db;PurTicketVIN.
          If PrintVINNumbers$ = "F"
            Print #chprt;SAISpaceFill$(PurTicketVIN.ModelYear$,6);SAISpaceFill$(PurTicketVIN.Make$,21);SAISpaceFill$(PurTicketVIN.Model$,22);PurTicketVIN.VIN$[1,20];LineTerm$
          Else 
            Print #chprt;PurTicketVIN.VIN$;LineTerm$
          End If 
        Next i
        Print #chprt;LineTerm$
      End If 
    End If 
    If PrintPurchaseShipFrom$ = "Y" And TicketHeader.ShipFromTo$
      Call RetrieveAltAddress("F",TicketHeader.EntityNo$,TicketHeader.ShipFromTo$,AltAddress.,stat)
      Print #chprt;LineTerm$
      Print #chprt;"Shipped From:  ";TicketHeader.ShipFromTo$;LineTerm$
      If stat = 0
        Print #chprt;" ";AltAddress.Name$;LineTerm$
        If AltAddress.Address1$ Print #chprt;" ";AltAddress.Address1$;LineTerm$
        If AltAddress.Address2$ Print #chprt;" ";AltAddress.Address2$;LineTerm$
        Print #chprt;" ";AltAddress.City$;", ";AltAddress.State$;"  ";AltAddress.PostCode$;LineTerm$
      End If 
    End If 
    If TicketCopyLegend$[n] And TicketType$ <> "R" And TicketType$ <> "I"
      p = Int((69 - Len(TicketCopyLegend$[n])) / 2)
      If p < 0 Let p = 0
      Print #chprt;LineTerm$
      Print #chprt;Rep$(" ",p);TicketCopyLegend$[n];LineTerm$
    End If 
    Print #chprt;LineTerm$
    Print #chprt;LineTerm$
    Print #chprt;LineTerm$
    If TicketType$ = "I"
      If InspectionTicketMaterialBarcode$ = "Y"
        temp$ = TicketHeader.TicketNo$ + ":" + Str$(ItemCount) + ":" + Trim$(Items.[ItemCount].MaterialCode$)
        s = 12
      Else 
        temp$ = Trim$(TicketHeader.InYardID$)
        s = 20
      End If 
      Select Case PrinterType$
        Case "ZEBRA"
          Print #chprt;"! U1 CENTER";LineTerm$
          Print #chprt;"! U1 BARCODE-TEXT 0 2 5";LineTerm$
          Print #chprt;"! U1 BARCODE 128 2 0 75 275 0 ";temp$;LineTerm$
          Print #chprt;"! U1 BARCODE-TEXT OFF";LineTerm$
          Print #chprt;LineTerm$
          Print #chprt;LineTerm$
          Print #chprt;LineTerm$
        Case "STAR"
          Print #chprt;Rep$(" ",s);'ESC';"b622P";temp$;"\36\"
        Case "CITIZEN"
          Print #chprt;'ESC';"a1"; ! Center
          Print #chprt;'GS';"kI";Chr$(Len(temp$) + 2);"{B";temp$;LineTerm$ ! Code 128, Codeset B
          Print #chprt;'ESC';"a0" ! Left Justify
      End Select 
      Print #chprt;LineTerm$
      Print #chprt;LineTerm$
      Print #chprt;LineTerm$
    Else If Trim$(TicketHeader.RFID$) <> "" And Trim$(RFIDMaster.RFID$) = ""
      Select Case PrinterType$
        Case "ZEBRA"
          Print #chprt;"! U1 CENTER";LineTerm$
          Print #chprt;"! U1 BARCODE-TEXT 0 2 5";LineTerm$
          Print #chprt;"! U1 BARCODE 128 2 0 75 275 0 ";Trim$(TicketHeader.RFID$);LineTerm$
          Print #chprt;"! U1 BARCODE-TEXT OFF";LineTerm$
          Print #chprt;LineTerm$
          Print #chprt;LineTerm$
          Print #chprt;LineTerm$
        Case "STAR"
          Print #chprt;Rep$(" ",12);'ESC';"b622P";Trim$(TicketHeader.RFID$);"\36\"
        Case "CITIZEN"
          Print #chprt;'ESC';"a1"; ! Center
          Print #chprt;'GS';"kI";Chr$(Len(Trim$(TicketHeader.RFID$)) + 2);"{B";Trim$(TicketHeader.RFID$);LineTerm$ ! Code 128, Codeset B
          Print #chprt;'ESC';"a0" ! Left Justify
        Case Else 
          Print #chprt;Rep$(" ",23);"RFID # ";Trim$(TicketHeader.RFID$);LineTerm$
      End Select 
      Print #chprt;LineTerm$
      Print #chprt;LineTerm$
      Print #chprt;LineTerm$
    End If 
    Print #chprt;CutPaper$;
  Next n
  Close #chprt
End Sub 
Sub PrintCTicket(CTicketNo$,Printer$,PrinterType$,NumCopies,TicketType$,status)
  Clear status
  If NumCopies = 0
    Exit Sub 
  End If 
  ! Look up 8330 C-Ticket
  ktemp$ = SAISpaceFill$(CTicketNo$,6)
  Call SAIGetRecord(ch_8330ro,recdef_8330.,ktemp$,1,"Y","U",r,ScaleCTicket$,ScaleCTicket3[],ScaleCTicket4[],stat,errmess$)
  If stat
    Call SAITouchWarning("C-Ticket Number " + CTicketNo$ + " cannot be retrieved.")
    status = 1
    Exit Sub 
  End If 
  ! Look up 8330 Material Ticket
  ktemp$ = ScaleCTicket$[56,61]
  Call SAIGetRecord(ch_8330ro,recdef_8330.,ktemp$,1,"Y","U",r,ScaleTicket$,ScaleTicket3[],ScaleTicket4[],stat,errmess$)
  If stat
    Call SAITouchWarning("Material Ticket Number " + ScaleCTicket$[56,61] + " cannot be retrieved.")
    status = 1
    Exit Sub 
  End If 
  ! Get 8326 (for material description)
  ktemp$ = ScaleCTicket$[56,61]
  Call SAIGetRecord(ch_8326ro,recdef_8326.,ktemp$,2,"Y","U",r,ScaleTicAudit$,ScaleTicAudit[],stat,errmess$)
  ! Get Pur_Ticket_Hdr
  Search #ch_db;"SELECT * FROM Pur_Ticket_Hdr WHERE TicketNo=" + SQLV$(Trim$(ScaleCTicket$[56,61])) + " AND ShipmentDate=" + SQLD$(SAIConvertDate#(ScaleCTicket$[21,26]))
  If Chf(ch_db)
    Map Record #ch_db As Pur_Ticket_Hdr
    Read Record #ch_db;PurTicketHdr.
  Else 
    Call SAITouchWarning("Base Ticket Number " + ScaleCTicket$[56,61] + " cannot be retrieved from Pur_Ticket_Hdr.")
    status = 1
    Exit Sub 
  End If 
  ! Get Vendor (Carrier)
  Call RetrieveSupplier(Trim$(ScaleCTicket$[7,12]),Vendor.,stat)
  If stat
    Call SAITouchWarning("Cannot retrieve vendor info for Carrier " + ScaleCTicket$[7,12])
    status = 1
    Exit Sub 
  End If 
  If PrintPrice$ = "N"
    PrintPrice = 0
  Else 
    If Vendor.PrintPriceAtScale$ = ""
      PrintPrice = 1
    Else 
      PrintPrice = 0
    End If 
  End If 
  If TicketType$ = "R"
    If SuppressPrice Let PrintPrice = 0
  End If 
  Call InitializeThermalPrinter(Printer$,PrinterType$,TicketLineSpacing$,status)
  If status Exit Sub 
  For n = 1 To NumCopies
    Select Case PrinterType$
      Case "ZEBRA"
        Print #chprt;"! U1 CENTER";LineTerm$
        Print #chprt;"! U1 BARCODE 128 2 0 75 275 0 ";CTicketNo$;LineTerm$
        Print #chprt;LineTerm$
        Print #chprt;"! U1 SETLP 0 5 24";LineTerm$
        Print #chprt;LineTerm$
        Print #chprt;LineTerm$
        Print #chprt;Rep$(" ",14);"Ticket # ";CTicketNo$;LineTerm$
        Print #chprt;"! U1 SETLP 0 2 12";LineTerm$
        Print #chprt;LineTerm$
      Case "STAR"
        Print #chprt;Rep$(" ",23);'ESC';"b612P";CTicketNo$;"\36\"
        Print #chprt;Rep$(" ",(5 - TicketNoSize) * 7);BX$;"Ticket # ";CTicketNo$;EX$;LineTerm$
      Case "CITIZEN"
        Print #chprt;'ESC';"a1"; ! Center
        Print #chprt;'GS';"h";Chr$(80); ! Barcode Height
        Print #chprt;'GS';"kI";Chr$(Len(CTicketNo$) + 2);"{B";CTicketNo$;LineTerm$ ! Code 128, Codeset B
        Print #chprt;BX$;"Ticket # ";CTicketNo$;EX$;LineTerm$
        Print #chprt;'ESC';"a0" ! Left Justify
      Case Else 
        Print #chprt;Rep$(" ",27);"Ticket # ";CTicketNo$;LineTerm$
    End Select 
    Print #chprt;LineTerm$
    If TicketType$ = "R"
      Print #chprt;Rep$(" ",19);"** TICKET REPRINT on ";DateUsing$(Tim#(0),dateformat$);" **";LineTerm$
      Print #chprt;LineTerm$
    End If 
    Select Case DocLang$
      Case "FC"
        Print #chprt;Rep$(" ",20);"BILLET DE FRET/CARRIER TICKET";LineTerm$
      Case Else 
        Print #chprt;Rep$(" ",27);"CARRIER TICKET";LineTerm$
    End Select 
    Print #chprt;LineTerm$
    If ScaleCTicket$[168,169] = Branch$
      If nheader
        For i = 1 To nheader
          Print #chprt;PrintTextLine$(TicketHeader$[i]);LineTerm$
        Next i
        Print #chprt;LineTerm$
      End If 
    Else 
      Print #chprt;Rep$(" ",16);"*** Ticket created by Branch - ";ScaleCTicket$[168,169];" ***";LineTerm$
      Print #chprt;LineTerm$
    End If 
    Select Case DocLang$
      Case "FC"
        temp$ = "Billet/Ticket # " + CTicketNo$
      Case Else 
        temp$ = "Ticket # " + CTicketNo$
    End Select 
    !*** Taken from PrintHeader routine
    Select Case DocLang$
      Case "FC"
        Print #chprt;SAISpaceFill$(temp$,41);"Date d'exp\351\dition/Ship Date:";LineTerm$
        Print #chprt;Rep$(" ",61);SAIDateDisplay$(ScaleCTicket$[21,26]);LineTerm$
      Case Else 
        Print #chprt;SAISpaceFill$(temp$,49);"Ship Date:  ";SAIDateDisplay$(ScaleCTicket$[21,26]);LineTerm$
    End Select 
    Print #chprt;LineTerm$
    If Trim$(ScaleCTicket$[27,37])
      Print #chprt;VehicleNoDescription$ + ":  " + ScaleCTicket$[27,37];LineTerm$
      Print #chprt;LineTerm$
    End If 
    ! Supplier No Line
    Select Case DocLang$
      Case "FC"
        temp$ = "Porteur:  " + Vendor.SupplierNo$
      Case Else 
        temp$ = "Carrier:  " + Vendor.SupplierNo$
    End Select 
    If ScrapSRecord$[78,78] = "Y" And Trim$(Vendor.TaxID$) ! GST
      If z$[644,646] = "255" Or z$[644,646] = "355"
        temp$ = SAISpaceFill$(temp$,32) + gbl_bin$ + " # " + Trim$(Vendor.TaxID$)
      Else 
        temp$ = SAISpaceFill$(temp$,32) + "Tax I.D.# " + Trim$(Vendor.TaxID$)
      End If 
    End If 
    Print #chprt;temp$;LineTerm$ ! Supplier No Line
    ! Name Line [and Drivers License]
    Print #chprt;" " + Vendor.Name$;LineTerm$
    ! Address1 Line [and ID Exp. Date]
    Print #chprt;" " + Vendor.Address1$;LineTerm$
    ! Address2 Line - if present
    If Trim$(Vendor.Address2$)
      Print #chprt;" ";Trim$(Vendor.Address2$);LineTerm$
    End If 
    ! City, St, ZIP Line [and Date of Birth]
    If Trim$(Vendor.City$ + Vendor.State$ + Vendor.PostCode$)
      Print #chprt;" " + Trim$(Vendor.City$) + ", " + Trim$(Vendor.State$) + "  " + Trim$(Vendor.PostCode$);LineTerm$
    End If 
    ! Phone No Line
    If PrintPhoneNo$ = "Y" And Trim$(Vendor.PhoneNo$)
      Print #chprt;Rep$(" ",32);"Phone: ";Vendor.PhoneNo$;LineTerm$
    End If 
    ! Skip a line and print other stuff
    Print #chprt;LineTerm$
    ! Look for Vendor Ticket comments
    ktemp$ = "V" + SAISpaceFill$(Vendor.SupplierNo$,6) + Rep$(" ",18) + "TKV"
    ksav$ = ktemp$
    Search #ch_1115ro,2,1;ktemp$,r,e
    If e = 0
      Do 
        Call SAIReadRecord(ch_1115ro,recdef_1115.,"Y","U",r,GblCmtTmp$,stat,errmess$)
        Print #chprt;Trim$(GblCmtTmp$[31,80]);LineTerm$
        Search #ch_1115ro,3,1;ktemp$,r,e
        If e Exit Do 
        If ktemp$[1,Len(ksav$)] <> ksav$ Exit Do 
      Loop 
      Print #chprt;LineTerm$
    End If 
    !*** End of PrintHeader routine
    temp$ = Rep$("-",31)
    Select Case DocLang$
      Case "FC"
        If UCase$(gbl_descum$) = "POUND"
          temp2$ = " Livres/" + Trim$(gbl_descum$) + "s "
        Else 
          temp2$ = " " + Trim$(gbl_descum$) + "s "
        End If 
      Case Else 
        temp2$ = " " + Trim$(gbl_descum$) + "s "
    End Select 
    x = Round((Len(temp$) - Len(temp2$)) / 2,0)
    temp$[x + 1,x + Len(temp2$)] = temp2$
    Print #chprt;Rep$(" ",38);temp$;LineTerm$
    !    print #chprt;"                                      ------------ Pounds -----------";LineTerm$
    Print #chprt;" Material Hauled                          Gross       Tare        Net";LineTerm$
    Print #chprt;"---------------------------------------------------------------------";LineTerm$
    !    print #chprt;" Material Description xxxxxxxxx       ---------  ---------  ---------"
    Print #chprt;" ";SAISpaceFill$(ScaleTicAudit$[92,119],37);
    Print #chprt; Using "---------";ScaleTicket3[3];"  ";ScaleTicket3[4];"  ";ScaleTicket3[5];LineTerm$
    Print #chprt;"---------------------------------------------------------------------";LineTerm$
    Print #chprt;LineTerm$
    Select Case DocLang$
      Case "FC"
        Print #chprt;"   Poids Brut Date/Heure";LineTerm$
        Print #chprt;"   Gross Wght Date/Time  ";SAISafeDateUsing$(PurTicketHdr.VehGrossWtTime#,dateformat$ + " HH:NN");
      Case Else 
        Print #chprt;"   Gross Wght Date/Time  ";SAISafeDateUsing$(PurTicketHdr.VehGrossWtTime#,dateformat$ + " HH:NN");
    End Select 
    If PurTicketHdr.VehTareWtTime#
      If SuppressTicketSummaryWeight$ <> "Y"
        Print #chprt;Rep$(" ",17);TicketSummaryWeightDesc$;
      End If 
      Print #chprt;LineTerm$
      Select Case DocLang$
        Case "FC"
          Print #chprt;"   Poids Tare Date/Heure";LineTerm$
          Print #chprt;"   Tare  Wght Date/Time  ";SAISafeDateUsing$(PurTicketHdr.VehTareWtTime#,dateformat$ + " HH:NN");
        Case Else 
          Print #chprt;"   Tare  Wght Date/Time  ";SAISafeDateUsing$(PurTicketHdr.VehTareWtTime#,dateformat$ + " HH:NN");
      End Select 
      If SuppressTicketSummaryWeight$ <> "Y"
        ReportWt = SAIDivide(PurTicketHdr.VehNetWt,TicketSummaryWeight_cf,4)
        If TicketSummaryWeight_cf = 1
          Print #chprt;Rep$(" ",17);BB$;ReportWt Using "##########";EB$;
        Else 
          Print #chprt;Rep$(" ",17);BB$;ReportWt Using "----#.####";EB$;
        End If 
      End If 
      Print #chprt;LineTerm$
    Else 
      Print #chprt;LineTerm$
    End If 
    If PrintPrice
      Print #chprt;LineTerm$
      Print #chprt;"Net Weight         Price $ / Unit                            Amount $";LineTerm$
      Print #chprt;"---------------------------------------------------------------------";LineTerm$
      !            "----------   --------.0000 / Extended price              --------&.##"
      !            "                                                Taxes:   --------&.##"
      !            "                                            Total Due:  $--------&.##"
      Print #chprt;ScaleTicket3[5] Using "----------";"   ";ScaleTicket4[2] Using "-------&.####";" / ";
      Print #chprt;LCase$(SAISpaceFill$(SAICodesFileDesc$(ch_110Aro,"U",ScaleTicket$[42,43]),28));
      Print #chprt;ScaleTicket4[3] Using "--------&.##";LineTerm$
      Print #chprt;"---------------------------------------------------------------------";LineTerm$
      Print #chprt;LineTerm$
      If ScaleTicket4[14] + ScaleTicket4[15]
        Print #chprt;Rep$(" ",48);"Taxes:   ";ScaleTicket4[14] + ScaleTicket4[15] Using "--------&.##";LineTerm$
        Print #chprt;LineTerm$
      End If 
      Print #chprt;Rep$(" ",44);"Total Due:  ";ScaleTicket4[3] + ScaleTicket4[14] + ScaleTicket4[15] Using "$--------&.##";LineTerm$
    End If 
    Print #chprt;LineTerm$
    Print #chprt;LineTerm$
    Print #chprt;LineTerm$
    Print #chprt;CutPaper$;
  Next n
  Close #chprt
  status = 0
  Clear PurTicketHdr.
End Sub 
Sub DisplaySalesTicket()
  Clear TicketTotals.
  UnpricedItem = 0
  Print '80WCSELECT CU';
  !  print "123456789^123456789^123456789^123456789^123456789^123456789^123456789"
  Select Case DocLang$
    Case "FC"
      temp$ = "Billet/Ticket # "
    Case Else 
      temp$ = "Ticket # "
  End Select 
  temp$ = temp$ + TicketHeader.TicketNo$
  If TicketHeader.TktMode$ = "T"
    temp$ = SAISpaceFill$(temp$,23) + "OUTBOUND TRANSFER TICKET"
  End If 
  Print SAISpaceFill$(temp$,54);"Date:  ";SAISafeDateUsing$(TicketHeader.EntryDate#,dateformat$)
  Call PrintSalesTicketHeader(-4,"")
  If ItemCount = 0 Call PrintTicketItem(-4,"",0)
  For ItemNo = 1 To ItemCount
    Call TotalTicketItem(ItemNo)
    If Items.[ItemNo].UnPriced Let UnpricedItem = 1
    Call PrintTicketItem(-4,"",ItemNo)
  Next ItemNo
  Select Case DocLang$
    Case "FC"
      Print "   Poids Brut Date/Heure"
      Print "   Gross Wght Date/Time  ";SAISafeDateUsing$(Items.[1].GrossWtTime#,dateformat$ + " HH:NN");
    Case Else 
      Print "   Gross Wght Date/Time  ";SAISafeDateUsing$(Items.[1].GrossWtTime#,dateformat$ + " HH:NN");
  End Select 
  If SuppressTicketSummaryWeight$ <> "Y"
    Print Rep$(" ",17);TicketSummaryWeightDesc$;
  End If 
  Print 
  Select Case DocLang$
    Case "FC"
      Print "   Poids Tare Date/Heure"
      Print "   Tare  Wght Date/Time  ";SAISafeDateUsing$(Items.[1].TareWtTime#,dateformat$ + " HH:NN");
    Case Else 
      Print "   Tare  Wght Date/Time  ";SAISafeDateUsing$(Items.[1].TareWtTime#,dateformat$ + " HH:NN");
  End Select 
  If SuppressTicketSummaryWeight$ <> "Y"
    If PrintTicketWeightAdjustmentAsPr() Let PaidWeight = TicketTotals.TotalNet Else Let PaidWeight = TicketTotals.TotalNet + TicketTotals.TotalAdj
    ReportWt = SAIDivide(PaidWeight,TicketSummaryWeight_cf,4)
    If TicketSummaryWeight_cf = 1
      Print Rep$(" ",17);ReportWt Using "##########";
    Else 
      Print Rep$(" ",17);ReportWt Using "----#.####";
    End If 
  End If 
  Print 
  If (DisplayPrice$ = "Y" Or DisplayPrice$ = "S") And TicketHeader.TktMode$ <> "T" And WeightOnly = 0
    Print 
    Print 
    !    print "123456789^123456789^123456789^123456789^123456789^123456789^123456789"
    !    print "Material Summary      Pd Wt (lb)   Price $/Unit      Extended Price $"
    !    print "xxxxxxxxxxxxxxxxxxxxxx  -###### -####.####/xxxxxxxxxxxx    ###,###.##"
    Select Case DocLang$
      Case "FC"
        Print "Sommaire du Mat\351\riel/ Poids/       Prix $/Unit\351\      Prix Calcul\351\/"
        Print "Material Summary      Pd Wt (";DisplayUM$;")   Price $/Unit      Extended Price $"
      Case Else 
        Print "Material Summary      Pd Wt (";DisplayUM$;")   Price $/Unit      Extended Price $"
    End Select 
    Print Rep$("-",69)
    For i = 1 To ItemCount
      Print SAISpaceFill$(Items.[i].MaterialDesc$,22);"  ";
      Print FormatNum$(Items.[i].NetWt + Items.[i].AdjWt,7);" ";
      Print Using "----#.####";Items.[i].Price;"/";
      temp$ = LCase$(SAISpaceFill$(SAICodesFileDesc$(ch_110Aro,"U",Items.[i].PriceUM$),12))
      temp$[1,1] = UCase$(temp$[1,1])
      Print Using "----,--#.##";temp$;"   ";Items.[i].MatExt
    Next i
    Print 
    If gbl.MultiCurrency$ = "Y" And TicketHeader.FundsType$ <> gbl.BranchFundsType$
      Print Using "$---,--#.##";" Total Due:";Rep$(" ",43);SAISpaceFill$(GetCurrencyCode$(TicketHeader.FundsType$),4);TicketTotals.TotalPrice
    Else 
      Print Using "$---,--#.##";" Total Due:";Rep$(" ",47);TicketTotals.TotalPrice
    End If 
  End If 
  If TicketHeader.TktComment$
    Print 
    Select Case DocLang$
      Case "FC"
        Print "Commentaire du Billet/"
        Print "Ticket Comment: ";TicketHeader.TktComment$
      Case Else 
        Print "Ticket Comment: ";TicketHeader.TktComment$
    End Select 
  End If 
  If PrintShippingInstructions$ = "Y" And TicketHeader.ShippingInst$
    Print 
    Select Case DocLang$
      Case "FC"
        Print "Instructions d'exp\351\dition/"
        Print "Shipping Instructions: ";TicketHeader.ShippingInst$
      Case Else 
        Print "Shipping Instructions: ";TicketHeader.ShippingInst$
    End Select 
  End If 
  Print '0WCSELECT';
  !  Call UpdateWarnings()
End Sub 
Sub PrintSalesDPTicket(Printer$,PrinterForm$,NumCopies,TicketType$,status)
  !  BB$='ESC'+"(s3B"
  !  EB$='ESC'+"(s0B"
  BB$ = ""
  EB$ = ""
  PrintCoInfo = 0
  If TicketHeader.Branch$ = Branch$
    If ScaleCodes$[39,39] = "T" Or ScaleCodes$[39,39] = " " Let PrintCoInfo = 1
  End If 
  If Printer$[1,1] = "$" Let Printer$ = Printer$[2]
  !  temp$="$dynpaper p="+Printer$+" f="+PrinterForm$+" c="+Str$(NumCopies)+" cpi=16.67"
  temp$ = "$dynpaper p=" + Printer$ + " f=" + PrinterForm$ + " cpi=16.67 n=" + TicketHeader.TicketNo$
  !  if TicketArchive$="Y"
  !    temp$=temp$+" id=Tickets a=scale/tickets/"+TicketHeader.TicketNo$+" d=''Ticket No. "+TicketHeader.TicketNo$+"''"
  !    temp$=temp$+" r1="+TicketHeader.TicketNo$+" r2="+TicketHeader.Branch$+" r3="+TicketHeader.EntityNo$+" r4="+TicketHeader.TktType$
  !  endif
  chprt = FindChannel()
  Try 
    Open #chprt,temp$
  Else 
    status = 1
    Exit Sub 
  End Try 
  For n = 1 To NumCopies
    If n = 1
      Print #chprt;
    Else 
      Print #chprt;"{f=" + PrinterForm$ + "}"
    End If 
    If TicketType$ = "I"
      Print #chprt;BB$;"CLASSIFICATION TICKET";
    Else If SuppressDPTicketCertificate$ <> "Y"
      Print #chprt;BB$;"WEIGHMASTER CERTIFICATE";
    End If 
    If TicketHeader.TktMode$ = "T"
      Print #chprt; Tab 29;"OUTBOUND TRANSFER TICKET";
    Else If WeightOnly
      Select Case TicketHeader.TktType$
        Case "G"
          Print #chprt; Tab 29;"*** GROSS WEIGHT ONLY ***";
        Case "T"
          Print #chprt; Tab 29;"*** TARE WEIGHT ONLY ***";
        Case Else 
          Print #chprt; Tab 29;"*** WEIGHT ONLY TICKET ***";
      End Select 
    End If 
    Print #chprt;
    If DPTicketTitle$
      Print #chprt;DPTicketTitle$;
    Else 
      Print #chprt;"TRUCK ";UCase$(gbl_scale$); ! SCALE
    End If 
    If TicketHeader.TicketNo$[1,1] = "M" Print #chprt; Tab 29;"** MANUAL TICKET **";
    Print #chprt;
    If TicketType$ = "R" Print #chprt; Tab 29;"** REPRINTED ON ";DateUsing$(Tim#(0),dateformat$);" **";
    Print #chprt;
    Print #chprt; ! Tab 29;"TICKET #: ";TicketHeader.TicketNo$
    If TicketHeader.TktMode$ = "T"
      Print #chprt;" Transfer To:  ";
    Else 
      Print #chprt;" Sold To:  ";
    End If 
    Print #chprt;TicketHeader.EntityNo$; Tab 30;"SHIP DATE: ";DateUsing$(TicketHeader.ShipmentDate#,dateformat$);
    If TicketControlNo And TicketHeader.ControlNo
      Print #chprt;SAIFill$(ControlNoLabel$ + ": " + TicketHeader.Branch$ + " " + Str$(TicketHeader.ControlNo),"R"," ",83)
    Else 
      Print #chprt;
    End If 
    If ExportAddress.AddressType$
      Print #chprt;"  ";ExportAddress.ExportAddress1$;
      If PrintCoInfo
        Print #chprt; Tab 80;Company$[63,92]
      Else If TicketHeader.Branch$ <> Branch$
        Print #chprt; Tab 80;"*** Ticket created by Branch - ";TicketHeader.Branch$;" ***"
      Else 
        Print #chprt;
      End If 
      Print #chprt;"  ";ExportAddress.ExportAddress2$;
      If PrintCoInfo Print #chprt; Tab 80;Company$[93,117] Else Print #chprt;
      Print #chprt;"  ";ExportAddress.ExportAddress3$;
      If PrintCoInfo Print #chprt; Tab 80;Trim$(Company$[143,167 - gbl_st]);", ";Company$[168 - gbl_st,169];"  ";Company$[170,179] Else Print #chprt;
      Print #chprt;"  ";ExportAddress.ExportAddress4$;
      If PrintCoInfo Print #chprt; Tab 80;Company$[180,191] Else Print #chprt;
      If ExportAddress.ExportAddress5$
        Print #chprt;"  ";ExportAddress.ExportAddress5$;
      End If 
      Print #chprt;" Veh # ";TicketHeader.VehNo$; Tab 20;"ID # ";TicketHeader.InYardID$;
      If Trim$(TicketHeader.OrderNo$) Print #chprt;"  Order # ";TicketHeader.OrderNo$;" Ln ";TicketHeader.OrderLine$;
      If Trim$(TicketHeader.MatReqNo$) Print #chprt;"  Mat Req # ";TicketHeader.MatReqNo$;" Ln ";TicketHeader.MatReqLine$;
      If Trim$(TicketHeader.ShipOrdNo$) Print #chprt;"  Customer PO ";TicketHeader.ShipOrdNo$;
      If Trim$(TicketHeader.TripTicketNo$) Print #chprt;"  Trip # ";TicketHeader.TripTicketNo$;
    Else 
      Print #chprt;"  ";TicketHeader.Name$;
      If ScrapSRecord$[78,78] = "Y" And Trim$(TicketHeader.TaxID$) ! GST
        If z$[644,646] = "355"
          Print #chprt; Tab 32;"GST # ";Trim$(TicketHeader.TaxID$);
        Else 
          Print #chprt; Tab 32;"Tax I.D.# ";Trim$(TicketHeader.TaxID$);
        End If 
      End If 
      If PrintCoInfo
        Print #chprt; Tab 80;Company$[63,92]
      Else If TicketHeader.Branch$ <> Branch$
        Print #chprt; Tab 80;"*** Ticket created by Branch - ";TicketHeader.Branch$;" ***"
      Else 
        Print #chprt;
      End If 
      Print #chprt;"  ";TicketHeader.Address1$;
      If PrintCoInfo Print #chprt; Tab 80;Company$[93,117] Else Print #chprt;
      If Trim$(TicketHeader.Address2$)
        Print #chprt;"  ";TicketHeader.Address2$;
      Else 
        Print #chprt;"  ";Trim$(TicketHeader.City$);", ";Trim$(TicketHeader.State$);"  ";Trim$(TicketHeader.PostCode$);
      End If 
      If PrintCoInfo Print #chprt; Tab 80;Trim$(Company$[143,167 - gbl_st]);", ";Company$[168 - gbl_st,169];"  ";Company$[170,179] Else Print #chprt;
      If Trim$(TicketHeader.Address2$)
        Print #chprt;"  ";Trim$(TicketHeader.City$);", ";Trim$(TicketHeader.State$);"  ";Trim$(TicketHeader.PostCode$);
      End If 
      If PrintCoInfo Print #chprt; Tab 80;Company$[180,191] Else Print #chprt;
      Print #chprt;" Veh # ";TicketHeader.VehNo$; Tab 20;"ID # ";TicketHeader.InYardID$;
      If Trim$(TicketHeader.OrderNo$) Print #chprt;"  Order # ";TicketHeader.OrderNo$;" Ln ";TicketHeader.OrderLine$;
      If Trim$(TicketHeader.MatReqNo$) Print #chprt; Tab 65;"Mat Req # ";TicketHeader.MatReqNo$;" Ln ";TicketHeader.MatReqLine$;
      If Trim$(TicketHeader.ShipOrdNo$) Print #chprt; Tab 92;"Customer PO ";TicketHeader.ShipOrdNo$;
      If Trim$(TicketHeader.TripTicketNo$) Print #chprt;"  Trip # ";TicketHeader.TripTicketNo$;
    End If 
    Print #chprt;
    Print #chprt;
    If TicketType$ = "I"
      Print #chprt;
      Print #chprt;
      Print #chprt;"                  LOAD WITH:  ";Items.[ItemCount].MaterialCode$;"  ";Items.[ItemCount].MaterialDesc$;
      If Items.[ItemCount].GrossWt
        Print #chprt;"  GROSS: ";Str$(Int(Items.[ItemCount].GrossWt));ScaleNumber$(Items.[ItemCount].GrossWtScale$);
        Print #chprt;"  TARE: ";Str$(Int(Items.[ItemCount].TareWt));ScaleNumber$(Items.[ItemCount].TareWtScale$);
        Print #chprt;"  NET: ";Str$(Int(Items.[ItemCount].NetWt));
        Print #chprt;"  ADJ: ";Str$(Items.[ItemCount].AdjWt)
      Else 
        Print #chprt;"   TARE: ";Str$(Int(Items.[ItemCount].TareWt));ScaleNumber$(Items.[ItemCount].TareWtScale$)
      End If 
      Print #chprt;
      Print #chprt;
      Print #chprt;
      Print #chprt;"                  LOADED BY: ";Rep$("_",60)
      Call SkipLines(chprt,6)
    Else 
      !    temp$=Rep$("-",26)
      !    temp2$=" "+Trim$(gbl_descum$)+"s "
      !    x=Round((Len(temp$)-Len(temp2$))/2,0)
      !    temp$[x+1,x+Len(temp2$)]=temp2$
      !    print #chprt;Tab 38;temp$ ! Global Unit of Measure
      temp$ = " SHPMNT# COMMODITY               "
      If PrintStockPile$ = "Y" Let temp$ = temp$ + "STK  " Else Let temp$ = temp$ + "     "
      temp$ = temp$ + "GROSS   TARE    NET    ADJ REASON         "
      If WeightOnly
        temp$ = temp$ + Rep$(" ",19) + "ADJ NET WT"
      Else 
        temp$ = temp$ + Rep$(" ",24) + "PD WT"
      End If 
      PrintPrice = 0
      If PrintSalesPrice$ = "Y" And TranfserMode = 0 And WeightOnly = 0 And TicketType$ <> "I"
        If TicketType$ = "R" Or TicketCopySuppressPrice$[n] <> "Y"
          temp$ = temp$ + "       PRICE  TOTAL AMT"
          PrintPrice = 1
        End If 
      End If 
      Print #chprt;temp$
      LineCount = 0
      For ItemNo = 1 To ItemCount
        LineCount = LineCount + 1
        If Items.[ItemNo].MaterialCode$[1,2] = "*M"
          Print #chprt;"  ";TicketHeader.TicketNo$;
        Else 
          Print #chprt;"  ";Items.[ItemNo].ShipmentNo$;
        End If 
        If PrintStockPile$ = "Y"
          temp$ = SAISpaceFill$(Items.[ItemNo].StockPile$,3)
          If z$[644,646] = "311" ! SDI
            If TicketHeader.SrcBranch$ = Branch$ Let temp$ = SAISpaceFill$(TicketHeader.SrcInvCode$[6,8],3)
          End If 
          Print #chprt;" ";SAISpaceFill$(Items.[ItemNo].MaterialDesc$,23);" ";temp$;" ";
        Else If PrintMaterialCode$ = "Y"
          Print #chprt;" ";SAISpaceFill$(Items.[ItemNo].MaterialCode$,8);" ";SAISpaceFill$(Items.[ItemNo].MaterialDesc$,19);
        Else 
          Print #chprt;" ";SAISpaceFill$(Items.[ItemNo].MaterialDesc$,28);
        End If 
        If Items.[ItemNo].GrossWt > 999999 Or Items.[ItemNo].GrossWt < -99999 ! Need to convert weights into reporting UM
          cf = ScrapSRecord$[45,56]
          Print #chprt;FormatNum$(SAIDivide(Items.[ItemNo].GrossWt,cf,0),4);LCase$(ScrapSRecord$[67,68]);" ";
          Print #chprt;FormatNum$(SAIDivide(Items.[ItemNo].TareWt,cf,0),4);LCase$(ScrapSRecord$[67,68]);" ";
          Print #chprt;FormatNum$(SAIDivide(Items.[ItemNo].NetWt,cf,0),4);LCase$(ScrapSRecord$[67,68]);
          Print #chprt;FormatNum$(SAIDivide(Items.[ItemNo].AdjWt,cf,0),5);LCase$(ScrapSRecord$[67,68]);
          ! Assume no redemption in this case
          Print #chprt; Tab 102;FormatNum$(SAIDivide(Items.[ItemNo].NetWt + Items.[ItemNo].AdjWt,cf,0),5);LCase$(ScrapSRecord$[67,68]); ! Paid Weight
        Else 
          If WeightOnly
            If Items.[ItemNo].GrossWt
              Print #chprt;FormatNum$(Items.[ItemNo].GrossWt,6);ScaleNumber$(Items.[ItemNo].GrossWtScale$);
            Else 
              Print #chprt;Rep$(" ",7);
            End If 
            If Items.[ItemNo].TareWt
              Print #chprt;FormatNum$(Items.[ItemNo].TareWt,6);ScaleNumber$(Items.[ItemNo].TareWtScale$);
            Else 
              Print #chprt;Rep$(" ",7);
            End If 
            If Items.[ItemNo].GrossWt And Items.[ItemNo].TareWt
              Print #chprt;FormatNum$(Items.[ItemNo].NetWt,6);
              Print #chprt;FormatNum$(Items.[ItemNo].AdjWt,7);
              If Trim$(Items.[ItemNo].AdjCode$) Print #chprt;" ";SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",Items.[ItemNo].AdjCode$);
              Print #chprt; Tab 102;FormatNum$(Items.[ItemNo].NetWt + Items.[ItemNo].AdjWt,7); ! Paid Weight
            End If 
          Else 
            Print #chprt;FormatNum$(Items.[ItemNo].GrossWt,6);ScaleNumber$(Items.[ItemNo].GrossWtScale$);
            Print #chprt;FormatNum$(Items.[ItemNo].TareWt,6);ScaleNumber$(Items.[ItemNo].TareWtScale$);
            Print #chprt;FormatNum$(Items.[ItemNo].NetWt,6);
            Print #chprt;FormatNum$(Items.[ItemNo].AdjWt,7);
            If Trim$(Items.[ItemNo].AdjCode$) Print #chprt;" ";SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",Items.[ItemNo].AdjCode$);
            Print #chprt; Tab 102;FormatNum$(Items.[ItemNo].NetWt + Items.[ItemNo].AdjWt,7); ! Paid Weight
          End If 
        End If 
        If PrintPrice
          Print #chprt; Using "----#.####"; Tab 109;Items.[ItemNo].Price;Items.[ItemNo].PriceUM$;
          Print #chprt; Using "-------#.##";Items.[ItemNo].MatExt;
        End If 
        Print #chprt;
      Next ItemNo
      If z$[644,646] = "220" Or z$[644,646] = "319" Or z$[644,646] = "330" Or z$[644,646] = "311" ! Sims NorthAmerica, SDI
        If Trim$(TicketHeader.CarrierNo$)
          Print #chprt;
          Print #chprt;"  Carrier: ";TicketHeader.CarrierNo$;" - ";SAICodesFileDesc$(ch_110Aro,"C",TicketHeader.CarrierNo$)
          LineCount = LineCount + 2
        End If 
        If TicketHeader.ContainerTareWt
          If Trim$(TicketHeader.CarrierNo$) = "" Print #chprt; \ LineCount = LineCount + 1
          Print #chprt;"  VGM:  ";Str$(TicketHeader.ContainerTareWt + Items.[1].NetWt);" ";DisplayUM$
          LineCount = LineCount + 1
        End If 
      End If 
      Call SkipLines(chprt,9 - LineCount)
      Call PrintDPTicketLastLine()
      If WeightOnly = 0
        Print #chprt;"  TOTALS";
        If gbl.MultiCurrency$ = "Y" And TicketHeader.FundsType$ <> gbl.BranchFundsType$
          Print #chprt;" (";GetCurrencyCode$(TicketHeader.FundsType$);")";
        End If 
        If TicketTotals.TotalCars Print #chprt; Using "---#"; Tab 14;"# CARS ";TicketTotals.TotalCars;
        If TicketTotals.TotalGross > 999999 Or TicketTotals.TotalGross < -99999
          cf = ScrapSRecord$[45,56]
          Print #chprt; Tab 36;FormatNum$(SAIDivide(TicketTotals.TotalGross,cf,0),5);LCase$(ScrapSRecord$[67,68]);
          Print #chprt;FormatNum$(SAIDivide(TicketTotals.TotalTare,cf,0),5);LCase$(ScrapSRecord$[67,68]);
          Print #chprt;FormatNum$(SAIDivide(TicketTotals.TotalNet,cf,0),5);LCase$(ScrapSRecord$[67,68]);
          Print #chprt;FormatNum$(SAIDivide(TicketTotals.TotalAdj,cf,0),5);LCase$(ScrapSRecord$[67,68]);
          Print #chprt; Tab 102;FormatNum$(SAIDivide(TicketTotals.TotalNet + TicketTotals.TotalAdj,cf,0),5);LCase$(ScrapSRecord$[67,68]);
        Else 
          Print #chprt; Tab 36;FormatNum$(TicketTotals.TotalGross,7);
          Print #chprt;FormatNum$(TicketTotals.TotalTare,7);
          Print #chprt;FormatNum$(TicketTotals.TotalNet,7);
          Print #chprt;FormatNum$(TicketTotals.TotalAdj,7);
          Print #chprt; Tab 102;FormatNum$(TicketTotals.TotalNet + TicketTotals.TotalAdj,7);
        End If 
        If PrintPrice
          Print #chprt; Using "-------#.##"; Tab 121;TicketTotals.TotalPrice;
        End If 
      End If 
      Print #chprt;
    End If 
    Clear TextLines$[]
    i = 1
    If TicketHeader.TktComment$
      TextLines$[i] = "  Ticket Comment: " + TicketHeader.TktComment$
      i = 2
    End If 
    If PrintShippingInstructions$ = "Y" And TicketHeader.ShippingInst$
      TextLines$[i] = "  Shipping Instructions: " + TicketHeader.ShippingInst$
    End If 
    If TicketType$ = ""
      temp$ = WMName$
    Else If Trim$(Items.[1].GrossWtWM$) = ""
      temp$ = SAICodesTableDesc$(ch_db,"Codes_WeighMaster","WeighMasterCode",Items.[1].TareWtWM$)
    Else 
      temp$ = SAICodesTableDesc$(ch_db,"Codes_WeighMaster","WeighMasterCode",Items.[1].GrossWtWM$)
    End If 
    If SuppressTicketSummaryWeight$ <> "Y" And Items.[1].GrossWt And Items.[1].TareWt
      If PrintTicketWeightAdjustmentAsPr() Let PaidWeight = TicketTotals.TotalNet Else Let PaidWeight = TicketTotals.TotalNet + TicketTotals.TotalAdj
      ReportWt = SAIDivide(PaidWeight,TicketSummaryWeight_cf,4)
    End If 
    Print #chprt;TextLines$[1]; Tab 92;"+-------------------+"
    Print #chprt;TextLines$[2]; Tab 92;"| GRS Date ";SAISafeDateUsing$(Items.[1].GrossWtTime#,dateformat$);" |";
    If SuppressTicketSummaryWeight$ <> "Y" And Items.[1].GrossWt And Items.[1].TareWt Print #chprt;BB$;TicketSummaryWeightDesc$;EB$ Else Print #chprt;
    Print #chprt; Tab 92;"| GRS Time ";SAISafeDateUsing$(Items.[1].GrossWtTime#,"HH:NN");"    |";
    If SuppressTicketSummaryWeight$ <> "Y" And Items.[1].GrossWt And Items.[1].TareWt
      If TicketSummaryWeight_cf = 1
        Print #chprt;BB$;ReportWt Using "##########";EB$
      Else 
        Print #chprt;BB$;ReportWt Using "----#.####";EB$
      End If 
    Else 
      Print #chprt;
    End If 
    Print #chprt; Tab 35;"(";temp$;")"; Tab 92;"| TRE Date ";SAISafeDateUsing$(Items.[ItemCount].TareWtTime#,dateformat$);" |"
    Print #chprt; Tab 92;"| TRE Time ";SAISafeDateUsing$(Items.[ItemCount].TareWtTime#,"HH:NN");"    |"
    Print #chprt;"a=SCALE 1     b=SCALE 2     c=SCALE 3     d=SCALE 4     m=MANUAL WEIGHT"; Tab 92;"+-------------------+"
    If TicketCopyLegend$[n] And TicketType$ <> "R" And TicketType$ <> "I"
      p = Int((132 - Len(TicketCopyLegend$[n])) / 2)
      If p < 0 Let p = 0
      Print #chprt;LineTerm$
      Print #chprt;Rep$(" ",p);TicketCopyLegend$[n];LineTerm$
    End If 
    !    print #chprt;"\33\(8U\33\(s1p12v0s3b25093T\33\*p645Y\33\*p1060X";"Ticket #:  ";TicketHeader.TicketNo$;
    Print #chprt;"\33\(8U\33\(s1p12v0s3b4101T\33\*p645Y\33\*p1060X";"Ticket #:  ";TicketHeader.TicketNo$;
  Next n
  Print #chprt;'FF';
  Close #chprt
  status = 0
End Sub 
Sub PrintSalesTicket(Printer$,PrinterType$,PrinterForm$,NumCopies,TicketType$,status)
  If NumCopies = 0
    status = 0
    Exit Sub 
  End If 
  If PrinterForm$
    Call PrintSalesDPTicket(Printer$,PrinterForm$,NumCopies,TicketType$,status)
    Exit Sub 
  End If 
  Call InitializeThermalPrinter(Printer$,PrinterType$,TicketLineSpacing$,status)
  If status Exit Sub 
  For n = 1 To NumCopies
    Select Case PrinterType$
      Case "ZEBRA"
        Print #chprt;"! U1 CENTER";LineTerm$
        Print #chprt;"! U1 BARCODE 128 2 0 75 275 0 ";TicketHeader.TicketNo$;LineTerm$
        Print #chprt;LineTerm$
        Print #chprt;"! U1 SETLP 0 5 24";LineTerm$
        Print #chprt;LineTerm$
        Print #chprt;LineTerm$
        Print #chprt;Rep$(" ",14);"Ticket # ";TicketHeader.TicketNo$;LineTerm$
        Print #chprt;"! U1 SETLP 0 2 12";LineTerm$
        Print #chprt;LineTerm$
      Case "STAR"
        Print #chprt;Rep$(" ",23);'ESC';"b612P";TicketHeader.TicketNo$;"\36\"
        Print #chprt;Rep$(" ",(5 - TicketNoSize) * 7);BX$;"Ticket # ";TicketHeader.TicketNo$;EX$;LineTerm$
      Case "CITIZEN"
        Print #chprt;'ESC';"a1"; ! Center
        Print #chprt;'GS';"h";Chr$(80); ! Barcode Height
        Print #chprt;'GS';"kI";Chr$(Len(TicketHeader.TicketNo$) + 2);"{B";TicketHeader.TicketNo$;LineTerm$ ! Code 128, Codeset B
        Print #chprt;BX$;"Ticket # ";TicketHeader.TicketNo$;EX$;LineTerm$
        Print #chprt;'ESC';"a0" ! Left Justify
      Case Else 
        Print #chprt;Rep$(" ",26);"Ticket # ";TicketHeader.TicketNo$;LineTerm$
    End Select 
    Print #chprt;LineTerm$
    If TicketType$ = "R"
      Print #chprt;Rep$(" ",19);"** TICKET REPRINT on ";DateUsing$(Tim#(0),dateformat$);" **";LineTerm$
      Print #chprt;LineTerm$
    Else If TicketType$ = "I"
      Print #chprt;Rep$(" ",21);"** Classification Ticket **";LineTerm$
      Print #chprt;LineTerm$
    End If 
    Select Case DocLang$
      Case "FC"
        If TicketHeader.TktMode$ = "T"
          Print #chprt;Rep$(" ",6);"SORTANT DE TRANSFERT DE BILLETS/OUTBOUND TRANSFER TICKET";LineTerm$
        Else 
          Select Case TicketHeader.TktType$
            Case "G","T","W"
              Print #chprt;Rep$(" ",12);"*** POIDS SEUL BILLET/WEIGHT ONLY TICKET ***";LineTerm$
            Case Else 
              Print #chprt;Rep$(" ",20);"BILLET DE CAISSE/SALES TICKET";LineTerm$
          End Select 
        End If 
      Case Else 
        If TicketHeader.TktMode$ = "T"
          Print #chprt;Rep$(" ",22);"OUTBOUND TRANSFER TICKET";LineTerm$
        Else 
          Select Case TicketHeader.TktType$
            Case "G","T","W"
              Print #chprt;Rep$(" ",22);"*** WEIGHT ONLY TICKET ***";LineTerm$
            Case Else 
              Print #chprt;Rep$(" ",28);"SALES TICKET";LineTerm$
          End Select 
        End If 
    End Select 
    Print #chprt;LineTerm$
    If TicketHeader.Branch$ = Branch$
      If nheader
        For i = 1 To nheader
          Print #chprt;PrintTextLine$(TicketHeader$[i]);LineTerm$
        Next i
        Print #chprt;LineTerm$
      End If 
    Else 
      Print #chprt;Rep$(" ",16);"*** Ticket created by Branch - ";TicketHeader.Branch$;" ***";LineTerm$
      Print #chprt;LineTerm$
    End If 
    If TicketControlNo And TicketHeader.ControlNo
      Print #chprt;BB$;SAIFill$(ControlNoLabel$ + ": " + TicketHeader.Branch$ + " " + Str$(TicketHeader.ControlNo),"R"," ",69);EB$;LineTerm$
    End If 
    Select Case DocLang$
      Case "FC"
        temp$ = "Billet/Ticket # "
      Case Else 
        temp$ = "Ticket # "
    End Select 
    temp$ = temp$ + TicketHeader.TicketNo$
    If TicketType$ <> "R"
      Print #chprt;SAISpaceFill$(temp$,54);"Date:  ";SAISafeDateUsing$(TicketHeader.EntryDate#,dateformat$);LineTerm$
    Else 
      Print #chprt;temp$;LineTerm$
    End If 
    Call PrintSalesTicketHeader(chprt,LineTerm$)
    If TicketType$ = "I"
      Print #chprt;Rep$("-",69);LineTerm$
      Print #chprt;LineTerm$
      If Items.[ItemCount].GrossWt
        Print #chprt;"                         Gross      Tare       Net      Adj    Pd Wt";LineTerm$
        !  print #chprt;"           WEIGHT:   --------#m--------#m--------#--------#--------#"
        Print #chprt;"           WEIGHT:   ";
        Print #chprt; Using "--------#";Items.[ItemCount].GrossWt;ScaleNumber$(Items.[ItemCount].GrossWtScale$);
        Print #chprt; Using "--------#";Items.[ItemCount].TareWt;ScaleNumber$(Items.[ItemCount].TareWtScale$);
        Print #chprt; Using "--------#";Items.[ItemCount].NetWt;
        Print #chprt; Using "--------#";Items.[ItemCount].AdjWt;
        Print #chprt; Using "--------#";(Items.[ItemCount].NetWt + Items.[ItemCount].AdjWt);LineTerm$
        Print #chprt;LineTerm$
      Else 
        Print #chprt;"      TARE WEIGHT:  ";Str$(Int(Items.[ItemCount].TareWt));ScaleNumber$(Items.[ItemCount].TareWtScale$);LineTerm$
      End If 
      Print #chprt;"        LOAD WITH:  ";Items.[ItemCount].MaterialCode$;"  ";Items.[ItemCount].MaterialDesc$;LineTerm$
      Print #chprt;LineTerm$
      Print #chprt;LineTerm$
      Print #chprt;LineTerm$
      Print #chprt;"        LOADED BY:  ";Rep$("_",49);LineTerm$
      Print #chprt;LineTerm$
      Print #chprt;Rep$("-",69);LineTerm$
      Print #chprt;LineTerm$
    Else 
      For ItemNo = 1 To ItemCount
        Call PrintTicketItem(chprt,LineTerm$,ItemNo)
      Next ItemNo
    End If 
    If TicketHeader.ContainerTareWt
      Print #chprt;"VGM:  ";Str$(TicketHeader.ContainerTareWt + Items.[1].NetWt);" ";DisplayUM$;LineTerm$
      Print #chprt;LineTerm$
    End If 
    Select Case DocLang$
      Case "FC"
        Print #chprt;"   Poids Brut Date/Heure";LineTerm$
        Print #chprt;"   Gross Wght Date/Time  ";SAISafeDateUsing$(Items.[1].GrossWtTime#,dateformat$ + " HH:NN");
      Case Else 
        Print #chprt;"   Gross Wght Date/Time  ";SAISafeDateUsing$(Items.[1].GrossWtTime#,dateformat$ + " HH:NN");
    End Select 
    If Items.[ItemCount].TareWt Or WeightOnly
      If SuppressTicketSummaryWeight$ <> "Y"
        Print #chprt;Rep$(" ",17);TicketSummaryWeightDesc$;
      End If 
      Print #chprt;LineTerm$
      Select Case DocLang$
        Case "FC"
          Print #chprt;"   Poids Tare Date/Heure";LineTerm$
          Print #chprt;"   Tare  Wght Date/Time  ";SAISafeDateUsing$(Items.[ItemCount].TareWtTime#,dateformat$ + " HH:NN");
        Case Else 
          Print #chprt;"   Tare  Wght Date/Time  ";SAISafeDateUsing$(Items.[ItemCount].TareWtTime#,dateformat$ + " HH:NN");
      End Select 
      If SuppressTicketSummaryWeight$ <> "Y" And Items.[1].GrossWt And Items.[1].TareWt
        If PrintTicketWeightAdjustmentAsPr() Let PaidWeight = TicketTotals.TotalNet Else Let PaidWeight = TicketTotals.TotalNet + TicketTotals.TotalAdj
        ReportWt = SAIDivide(PaidWeight,TicketSummaryWeight_cf,4)
        If TicketSummaryWeight_cf = 1
          Print #chprt;Rep$(" ",17);BB$;ReportWt Using "##########";EB$;LineTerm$
        Else 
          Print #chprt;Rep$(" ",17);BB$;ReportWt Using "----#.####";EB$;LineTerm$
        End If 
      Else 
        Print #chprt;LineTerm$
      End If 
    Else 
      Print #chprt;LineTerm$
    End If 
    If SuppressTicketSummaryWeight$ <> "Y" And TicketSummaryWeightUM2$ And Items.[1].GrossWt And Items.[1].TareWt
      Print #chprt;LineTerm$
      Print #chprt;Rep$(" ",56);TicketSummaryWeightDesc2$;LineTerm$
      If PrintTicketWeightAdjustmentAsPr() Let PaidWeight = TicketTotals.TotalNet Else Let PaidWeight = TicketTotals.TotalNet + TicketTotals.TotalAdj
      ReportWt = SAIDivide(PaidWeight,TicketSummaryWeight_cf2,4)
      If TicketSummaryWeight_cf2 = 1
        Print #chprt;Rep$(" ",56);BB$;ReportWt Using "##########";EB$;LineTerm$
      Else 
        Print #chprt;Rep$(" ",56);BB$;ReportWt Using "----#.####";EB$;LineTerm$
      End If 
    End If 
    If PrintSalesPrice$ = "Y" And TicketHeader.TktMode$ <> "T" And WeightOnly = 0 And TicketType$ <> "I"
      If TicketType$ = "R" Or TicketCopySuppressPrice$[n] <> "Y"
        Print #chprt;LineTerm$
        Print #chprt;LineTerm$
        !        print #chprt;"123456789^123456789^123456789^123456789^123456789^123456789^123456789"
        !        print #chprt;"Material Summary      Pd Wt (lb)   Price $/Unit      Extended Price $"
        !        print #chprt;"xxxxxxxxxxxxxxxxxxxxxx  -###### -####.####/xxxxxxxxxxxx    ###,###.##"
        Select Case DocLang$
          Case "FC"
            Print #chprt;"Sommaire du Mat\351\riel/ Poids/       Prix $/Unit\351\      Prix Calcul\351\/";LineTerm$
            Print #chprt;"Material Summary      Pd Wt (";DisplayUM$;")   Price $/Unit      Extended Price $";LineTerm$
          Case Else 
            Print #chprt;"Material Summary      Pd Wt (";DisplayUM$;")   Price $/Unit      Extended Price $";LineTerm$
        End Select 
        Print #chprt;Rep$("-",69);LineTerm$
        For i = 1 To ItemCount
          Print #chprt;SAISpaceFill$(Items.[i].MaterialDesc$,22);"  ";
          Print #chprt;FormatNum$(Items.[i].NetWt + Items.[i].AdjWt,7);" ";
          Print #chprt; Using "----#.####";Items.[i].Price;"/";
          temp$ = LCase$(SAISpaceFill$(SAICodesFileDesc$(ch_110Aro,"U",Items.[i].PriceUM$),12))
          temp$[1,1] = UCase$(temp$[1,1])
          Print #chprt; Using "----,--#.##";temp$;"   ";Items.[i].MatExt;LineTerm$
        Next i
        Print #chprt;LineTerm$
        If gbl.MultiCurrency$ = "Y" And TicketHeader.FundsType$ <> gbl.BranchFundsType$
          Print #chprt; Using "$---,--#.##";BB$;" Total:";Rep$(" ",47);SAISpaceFill$(GetCurrencyCode$(TicketHeader.FundsType$),4);TicketTotals.TotalPrice;EB$;LineTerm$
        Else 
          Print #chprt; Using "$---,--#.##";BB$;" Total:";Rep$(" ",51);TicketTotals.TotalPrice;EB$;LineTerm$
        End If 
      End If 
    End If 
    If TicketHeader.TktComment$
      Print #chprt;LineTerm$
      Select Case DocLang$
        Case "FC"
          Print #chprt;"Commentaire du Billet/";LineTerm$
          Print #chprt;"Ticket Comment: ";TicketHeader.TktComment$;LineTerm$
        Case Else 
          Print #chprt;"Ticket Comment: ";TicketHeader.TktComment$;LineTerm$
      End Select 
    End If 
    If PrintShippingInstructions$ = "Y" And TicketHeader.ShippingInst$
      Print #chprt;LineTerm$
      Select Case DocLang$
        Case "FC"
          Print #chprt;"Instructions d'exp\351\dition/";LineTerm$
          Print #chprt;"Shipping Instructions: ";TicketHeader.ShippingInst$;LineTerm$
        Case Else 
          Print #chprt;"Shipping Instructions: ";TicketHeader.ShippingInst$;LineTerm$
      End Select 
    End If 
    If WMSignature$ = "Y"
      Print #chprt;LineTerm$
      Print #chprt;LineTerm$
      Print #chprt;LineTerm$
      If TicketType$ = "I" And InspectionWeighmaster$
        Print #chprt;SAIFill$(InspectionWeighmaster$ + " Signature ","L","_",69);LineTerm$
      Else 
        Select Case DocLang$
          Case "FC"
            Print #chprt;"Signature du Peseur/";LineTerm$
            Print #chprt;SAIFill$(gbl_WeighMaster$ + " Signature ","L","_",69);LineTerm$
          Case Else 
            Print #chprt;SAIFill$(gbl_WeighMaster$ + " Signature ","L","_",69);LineTerm$
        End Select 
      End If 
      If TicketType$ = ""
        temp$ = WMName$
      Else If Trim$(Items.[1].GrossWtWM$) = ""
        temp$ = SAICodesTableDesc$(ch_db,"Codes_WeighMaster","WeighMasterCode",Items.[1].TareWtWM$)
      Else 
        temp$ = SAICodesTableDesc$(ch_db,"Codes_WeighMaster","WeighMasterCode",Items.[1].GrossWtWM$)
      End If 
      If temp$ Print #chprt;Rep$(" ",22);"(";temp$;")";LineTerm$
    End If 
    If PrintWeighmaster$
      Clear temp$,temp2$
      If TicketType$ = ""
        temp$ = WeighMaster$
      Else If Trim$(Items.[1].GrossWtWM$) = ""
        temp$ = Items.[1].TareWtWM$
      Else 
        temp$ = Items.[1].GrossWtWM$
      End If 
      If temp$
        Select Case PrintWeighmaster$
          Case "CODE"
            temp2$ = temp$
          Case "NAME"
            temp2$ = SAICodesTableDesc$(ch_db,"Codes_WeighMaster","WeighMasterCode",temp$)
          Case "COMMENT"
            Search #ch_db;"SELECT Comment FROM Codes_WeighMaster WHERE WeighMasterCode=" + SQLV$(temp$)
            If Chf(ch_db) Read #ch_db;temp2$
        End Select 
      End If 
      If temp2$
        Print #chprt;LineTerm$
        Print #chprt;gbl_WeighMaster$ + ":  ";temp2$;LineTerm$
      End If 
    End If 
    PrintSignature = 0
    If TicketType$ = "I" And InspectionCustomerSignature$
      If InspectionCustomerSignature$ = "Y" Or InspectionCustomerSignature$ = "S" Let PrintSignature = 1
    Else 
      If CustSignature$ = "Y" Or CustSignature$ = "S" Let PrintSignature = 1
    End If 
    If PrintSignature
      Print #chprt;LineTerm$
      Print #chprt;LineTerm$
      Print #chprt;LineTerm$
      Select Case DocLang$
        Case "FC"
          Print #chprt;"Signature du Client/";LineTerm$
          Print #chprt;"Customer Signature ";Rep$("_",50);LineTerm$
        Case Else 
          Print #chprt;"Customer Signature ";Rep$("_",50);LineTerm$
      End Select 
    End If 
    Print #chprt;LineTerm$
    If TicketType$ = "I" And nifooter
      For i = 1 To nifooter
        Print #chprt;InspectionTicketFooter$[i];LineTerm$
      Next i
    Else 
      For i = 1 To nfooter
        Print #chprt;TicketFooter$[i];LineTerm$
      Next i
    End If 
    If PrintSaleShipTo$ = "Y" And TicketHeader.ShipFromTo$ And ExportAddress.AddressType$ = ""
      Call RetrieveAltAddress("T",TicketHeader.EntityNo$,TicketHeader.ShipFromTo$,AltAddress.,stat)
      Print #chprt;LineTerm$
      Print #chprt;"Shipped To:  ";TicketHeader.ShipFromTo$;LineTerm$
      If stat = 0
        Print #chprt;" ";AltAddress.Name$;LineTerm$
        If AltAddress.Address1$ Print #chprt;" ";AltAddress.Address1$;LineTerm$
        If AltAddress.Address2$ Print #chprt;" ";AltAddress.Address2$;LineTerm$
        Print #chprt;" ";AltAddress.City$;", ";AltAddress.State$;"  ";AltAddress.PostCode$;LineTerm$
      End If 
    End If 
    If TicketCopyLegend$[n] And TicketType$ <> "R" And TicketType$ <> "I"
      p = Int((69 - Len(TicketCopyLegend$[n])) / 2)
      If p < 0 Let p = 0
      Print #chprt;LineTerm$
      Print #chprt;Rep$(" ",p);TicketCopyLegend$[n];LineTerm$
    End If 
    Print #chprt;LineTerm$
    Print #chprt;LineTerm$
    Print #chprt;LineTerm$
    If TicketType$ = "I"
      Select Case PrinterType$
        Case "STAR"
          Print #chprt;Rep$(" ",12);'ESC';"b622P";TicketHeader.TicketNo$ + ":" + Str$(Items.[1].TareWt);"\36\"
        Case "ZEBRA"
          Print #chprt;"! U1 CENTER";LineTerm$
          Print #chprt;"! U1 BARCODE-TEXT 0 2 5";LineTerm$
          Print #chprt;"! U1 BARCODE 128 2 0 75 275 0 ";TicketHeader.TicketNo$ + ":" + Str$(Items.[1].TareWt);LineTerm$
          Print #chprt;"! U1 BARCODE-TEXT OFF";LineTerm$
          Print #chprt;LineTerm$
          Print #chprt;LineTerm$
          Print #chprt;LineTerm$
        Case "CITIZEN"
          temp$ = TicketHeader.TicketNo$ + ":" + Str$(Items.[1].TareWt)
          Print #chprt;'ESC';"a1"; ! Center
          Print #chprt;'GS';"kI";Chr$(Len(temp$) + 2);"{B";temp$;LineTerm$ ! Code 128, Codeset B
          Print #chprt;'ESC';"a0" ! Left Justify
      End Select 
      Print #chprt;LineTerm$
      Print #chprt;LineTerm$
      Print #chprt;LineTerm$
    Else If Customer.ShipRefNoFooter$ = "Y"
      Print #chprt;"Please be prepared to give the following shipment reference number";LineTerm$
      Print #chprt;"to the receiver's scale operator or load inspector when asked:";LineTerm$
      Print #chprt;LineTerm$
      Select Case PrinterType$
        Case "STAR"
          Print #chprt;Rep$(" ",23);'ESC';"b612P";Items.[1].ShipmentNo$;"\36\"
          Print #chprt;Rep$(" ",(5 - TicketNoSize) * 5);BX$;"Shipment Ref # ";Items.[1].ShipmentNo$;EX$;LineTerm$
        Case "ZEBRA"
          Print #chprt;"! U1 CENTER";LineTerm$
          Print #chprt;"! U1 BARCODE 128 2 0 75 275 0 ";Items.[1].ShipmentNo$;LineTerm$
          Print #chprt;LineTerm$
          Print #chprt;"! U1 SETLP 0 5 24";LineTerm$
          Print #chprt;LineTerm$
          Print #chprt;LineTerm$
          Print #chprt;"Shipment Ref # ";Items.[1].ShipmentNo$;LineTerm$
          Print #chprt;"! U1 SETLP 0 2 12";LineTerm$
          Print #chprt;LineTerm$
        Case "CITIZEN"
          Print #chprt;'ESC';"a1"; ! Center
          Print #chprt;'GS';"h";Chr$(80); ! Barcode Height
          Print #chprt;'GS';"kI";Chr$(Len(Items.[1].ShipmentNo$) + 2);"{B";Items.[1].ShipmentNo$;LineTerm$ ! Code 128, Codeset B
          Print #chprt;BX$;"Shipment Ref # ";Items.[1].ShipmentNo$;EX$;LineTerm$
          Print #chprt;'ESC';"a0" ! Left Justify
        Case Else 
          Print #chprt;Rep$(" ",23);"Shipment Ref # ";Items.[1].ShipmentNo$;LineTerm$
      End Select 
      Print #chprt;LineTerm$
      Print #chprt;LineTerm$
      Print #chprt;LineTerm$
    Else If Trim$(TicketHeader.RFID$) <> "" And Trim$(RFIDMaster.RFID$) = ""
      Select Case PrinterType$
        Case "STAR"
          Print #chprt;Rep$(" ",12);'ESC';"b622P";Trim$(TicketHeader.RFID$);"\36\"
        Case "ZEBRA"
          Print #chprt;"! U1 CENTER";LineTerm$
          Print #chprt;"! U1 BARCODE-TEXT 0 2 5";LineTerm$
          Print #chprt;"! U1 BARCODE 128 2 0 75 275 0 ";Trim$(TicketHeader.RFID$);LineTerm$
          Print #chprt;"! U1 BARCODE-TEXT OFF";LineTerm$
          Print #chprt;LineTerm$
          Print #chprt;LineTerm$
          Print #chprt;LineTerm$
        Case "CITIZEN"
          Print #chprt;'ESC';"a1"; ! Center
          Print #chprt;'GS';"kI";Chr$(Len(Trim$(TicketHeader.RFID$)) + 2);"{B";Trim$(TicketHeader.RFID$);LineTerm$ ! Code 128, Codeset B
          Print #chprt;'ESC';"a0" ! Left Justify
        Case Else 
          Print #chprt;Rep$(" ",23);"RFID # ";Trim$(TicketHeader.RFID$);LineTerm$
      End Select 
      Print #chprt;LineTerm$
      Print #chprt;LineTerm$
      Print #chprt;LineTerm$
    End If 
    Print #chprt;CutPaper$;
  Next n
  Close #chprt
End Sub 
Sub PrintProFormaFooter()
  Print #chprt;'ESC';"(s1p10v0s0b16602T";'ESC';"*p500Y";'ESC';"*p3300X";'ESC';"(s12V";'ESC';"(s3B";"S" + TicketHeader.BOLNo$
  If ProFormaForm2$ Print #chprt;"{f=";ProFormaForm2$;"}";
End Sub 
Sub PrintProFormaHeader()
  PageNum = PageNum + 1
  If PageNum > 1
    Call PrintProFormaFooter()
    Print #chprt;"{f=" + ProFormaForm$ + "}";
  End If 
  Call RetrieveSupplier(PODetail$[1,6],Vendor.,stat)
  Call SkipLines(chprt,7)
  Print #chprt;'ESC';"(s3B"; Tab 92;TicketHeader.BOLNo$
  Print #chprt;'ESC';"(s0B"; Tab 74;TicketHeader.TicketNo$
  Call SkipLines(chprt,5)
  Print #chprt; Tab 3;Vendor.Name$; Tab 77;SOHeader$[94,113]
  Print #chprt; Tab 3;Vendor.Address1$
  If Vendor.Address2$
    Print #chprt; Tab 3;Vendor.Address2$; Tab 77;SAIDateDisplay$(SOHeader$[17,22],"/",4)
    Print #chprt; Tab 3;Vendor.City$;", ";Vendor.State$;"  ";Vendor.PostCode$
    Print #chprt; Tab 3;GetStateCountry$(ch_db,Vendor.State$); Tab 77;SAISafeDateUsing$(TicketHeader.ShipmentDate#,DateFormat1$)
  Else 
    Print #chprt; Tab 3;Vendor.City$;", ";Vendor.State$;"  ";Vendor.PostCode$; Tab 77;SAIDateDisplay$(SOHeader$[17,22],"/",4)
    Print #chprt; Tab 3;GetStateCountry$(ch_db,Vendor.State$)
    Print #chprt; Tab 77;SAISafeDateUsing$(TicketHeader.ShipmentDate#,DateFormat1$)
  End If 
  Call SkipLines(chprt,2)
  If ExportAddress.AddressType$
    Print #chprt; Tab 3;TicketHeader.Name$; Tab 53;ExportAddress.ExportAddress1$
    Print #chprt; Tab 3;TicketHeader.Address1$; Tab 53;ExportAddress.ExportAddress2$
    If TicketHeader.Address2$
      Print #chprt; Tab 3;TicketHeader.Address2$; Tab 53;ExportAddress.ExportAddress3$
      Print #chprt; Tab 3;TicketHeader.City$;", ";TicketHeader.State$;"  ";TicketHeader.PostCode$; Tab 53;ExportAddress.ExportAddress4$
      Print #chprt; Tab 3;GetStateCountry$(ch_db,TicketHeader.State$); Tab 53;ExportAddress.ExportAddress5$
    Else 
      Print #chprt; Tab 3;TicketHeader.City$;", ";TicketHeader.State$;"  ";TicketHeader.PostCode$; Tab 53;ExportAddress.ExportAddress3$
      Print #chprt; Tab 3;GetStateCountry$(ch_db,TicketHeader.State$); Tab 53;ExportAddress.ExportAddress4$
      Print #chprt; Tab 53;ExportAddress.ExportAddress5$
    End If 
    If ExportAddress.ExportAddress5$
      temp2$ = ExportAddress.ExportAddress5$
    Else 
      temp2$ = ExportAddress.ExportAddress4$
    End If 
  Else If AltAddress.AddressType$
    Print #chprt; Tab 3;TicketHeader.Name$; Tab 53;AltAddress.Name$
    Print #chprt; Tab 3;TicketHeader.Address1$; Tab 53;AltAddress.Address1$
    temp2$ = GetStateCountry$(ch_db,AltAddress.State$)
    If TicketHeader.Address2$
      If AltAddress.Address2$
        Print #chprt; Tab 3;TicketHeader.Address2$; Tab 53;AltAddress.Address2$
        Print #chprt; Tab 3;TicketHeader.City$;", ";TicketHeader.State$;"  ";TicketHeader.PostCode$;
        Print #chprt; Tab 53;AltAddress.City$;", ";AltAddress.State$;"  ";AltAddress.PostCode$
        Print #chprt; Tab 3;GetStateCountry$(ch_db,TicketHeader.State$); Tab 53;temp2$
      Else 
        Print #chprt; Tab 3;TicketHeader.Address2$; Tab 53;AltAddress.City$;", ";AltAddress.State$;"  ";AltAddress.PostCode$
        Print #chprt; Tab 3;TicketHeader.City$;", ";TicketHeader.State$;"  ";TicketHeader.PostCode$; Tab 53;temp2$
        Print #chprt; Tab 3; Tab 53;GetStateCountry$(ch_db,TicketHeader.State$)
      End If 
    Else 
      If AltAddress.Address2$
        Print #chprt; Tab 3;TicketHeader.City$;", ";TicketHeader.State$;"  ";TicketHeader.PostCode$; Tab 53;AltAddress.Address2$
        Print #chprt; Tab 3;GetStateCountry$(ch_db,TicketHeader.State$); Tab 53;AltAddress.City$;", ";AltAddress.State$;"  ";AltAddress.PostCode$
        Print #chprt; Tab 53;temp2$
      Else 
        Print #chprt; Tab 3;TicketHeader.City$;", ";TicketHeader.State$;"  ";TicketHeader.PostCode$;
        Print #chprt; Tab 53;AltAddress.City$;", ";AltAddress.State$;"  ";AltAddress.PostCode$
        Print #chprt; Tab 3;GetStateCountry$(ch_db,TicketHeader.State$); Tab 53;temp2$
        Print #chprt;
      End If 
    End If 
  Else 
    Print #chprt; Tab 3;TicketHeader.Name$; Tab 53;TicketHeader.Name$
    Print #chprt; Tab 3;TicketHeader.Address1$; Tab 53;TicketHeader.Address1$
    temp2$ = GetStateCountry$(ch_db,TicketHeader.State$)
    If TicketHeader.Address2$
      Print #chprt; Tab 3;TicketHeader.Address2$; Tab 53;TicketHeader.Address2$
      Print #chprt; Tab 3;TicketHeader.City$;", ";TicketHeader.State$;"  ";TicketHeader.PostCode$;
      Print #chprt; Tab 53;TicketHeader.City$;", ";TicketHeader.State$;"  ";TicketHeader.PostCode$
      Print #chprt; Tab 3;temp2$; Tab 53;temp2$
    Else 
      Print #chprt; Tab 3;TicketHeader.City$;", ";TicketHeader.State$;"  ";TicketHeader.PostCode$;
      Print #chprt; Tab 53;TicketHeader.City$;", ";TicketHeader.State$;"  ";TicketHeader.PostCode$
      Print #chprt; Tab 3;temp2$; Tab 53;temp2$
      Print #chprt;
    End If 
  End If 
  Call SkipLines(chprt,2)
  ktemp$ = "T" + SOHeader$[217,218]
  Call SAIGetRecord(ch_110Aro,recdef_110A.,ktemp$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
  If stat = 0
    Try Let temp$ = DateUsing$(TicketHeader.ShipmentDate# + ScrapCode[0] * 86400,DateFormat1$) Else Let temp$ = ""
    Print #chprt; Tab 3;Trim$(ScrapCode$[15,34]); Tab 35;temp$;
  End If 
  If Trim$(SOHeader$[211,212]) = gbl.BranchFundsType$
    temp$ = gbl.BranchCurrency$
  Else 
    temp$ = GetCurrencyCode$(TicketHeader.FundsType$)
  End If 
  Print #chprt; Tab 53;temp$; Tab 65;GetStateCountry$(ch_db,Vendor.State$)
  Print #chprt;
  Print #chprt; Tab 65;temp2$
  Print #chprt;
  Print #chprt; Tab 3;TicketHeader.DeliveringCarrier$; Tab 35;SODetail$[206,207]; Tab 82;TicketHeader.ContainerNo$
  Print #chprt;
  Print #chprt; Tab 3;TicketHeader.OrderNo$; Tab 73;TicketHeader.BookingNo$; Tab 86;TicketHeader.SealNo$
  Print #chprt;
  Print #chprt;'ESC';"(9U";'ESC';"(s52T";'ESC';"(s7V";'ESC';"(s0P";'ESC';"(s3B";'ESC';"(s16.67H"
  LineCount = 0
End Sub 
Sub PrintProFormaInvoice()
  temp$ = "$dynpaper p=" + BOLPrinter$ + " f=" + ProFormaForm$ + " c=" + Str$(ProFormaCopies) + " cpi=13 lpi=8"
  !  if ProFormaFormOptions$ Let temp$=temp$ + " " + ProFormaFormOptions$
  chprt = FindChannel()
  Try 
    Open #chprt,temp$
  Else 
    Exit Sub 
  End Try 
  PageNum = 0
  ProFormaLinesPerPage = 19
  Clear TicketTotals.
  Call PrintProFormaHeader()
  SQL$ = "SELECT SMT.TariffCode,T.Description,D.MaterialCode,MaterialDesc,SUM(NetWt+AdjWt) As PaidWt,Price,Price_UM,SUM(MatExt) As MatExt FROM Sales_Ticket_Dtl D"
  SQL$ = SQL$ + " LEFT JOIN Sales_Material_Tariff SMT ON D.MaterialCode=SMT.MaterialCode"
  SQL$ = SQL$ + " LEFT JOIN Codes_Tariff T ON SMT.TariffCode=T.TariffCode"
  SQL$ = SQL$ + " WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
  SQL$ = SQL$ + " GROUP BY D.MaterialCode,D.Price"
  Search #ch_db;SQL$
  nr = Chf(ch_db)
  If nr
    Map Record #ch_db As Proforma
    For n = 1 To nr
      Read Record #ch_db;ProForma.
      LineCount = LineCount + 1 \ If LineCount > ProFormaLinesPerPage Call PrintProFormaHeader()
      !  XXXXXXXXXXXXX  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX -##,###,### u/m-#,###.####/um  -###,###,###.##
      !                                                                                        Total Invoice Amount:  -###,###,###.##
      Print #chprt; Tab 3;NoNull$(ProForma.TariffCode$); Tab 18;NoNull$(ProForma.Description$); Tab 50;NoNull$(ProForma.MaterialDesc$);
      Print #chprt; Tab 81;ProForma.PaidWt Using "---,---,--#";" ";DisplayUM$;
      Print #chprt; Tab 96;ProForma.Price Using "--,--#.####";"/";ProForma.Price_UM$;
      Print #chprt; Tab 112;ProForma.MatExt Using "----,---,--#.##"
      TicketTotals.TotalPaid = TicketTotals.TotalPaid + ProForma.MatExt
    Next n
  End If 
  Call SkipLines(chprt,ProFormaLinesPerPage - LineCount + 1)
  Print #chprt; Tab 89;"Total Invoice Amount:"; Tab 112;TicketTotals.TotalPaid Using "----,---,--#.##"
  Call PrintProFormaFooter()
  If ProFormaForm2$ = "" Print #chprt;'FF';
  Close #chprt
End Sub 
Sub PrintAlleghenyForm()
  temp$ = "$dynpaper p=" + BOLPrinter$ + " f=" + "ATI_VSS.dpf" + " c=" + Str$(BOLCopies) + " cpi=6"
  chprt = FindChannel()
  Try 
    Open #chprt,temp$
  Else 
    Exit Sub 
  End Try 
  Print #chprt;'ESC';"(s3B" ! Bold
  Call SkipLines(chprt,9)
  Print #chprt; Tab 8;SAISafeDateUsing$(TicketHeader.ShipmentDate#,DateFormat1$);
  Print #chprt; Tab 30;SAISafeDateUsing$(Tim#(0),DateFormat1$ + " HH:NN")
  Call SkipLines(chprt,12)
  Print #chprt; Tab 8;TicketHeader.ShipOrdNo$;
  x = Len(Trim$(Items.[1].MaterialDesc$))
  If x > 24
    Print #chprt; Tab 30;'ESC';"(s10H";Trim$(Items.[1].MaterialDesc$);'ESC';"(s6H"
  Else If x > 18
    Print #chprt; Tab 30;'ESC';"(s8H";Trim$(Items.[1].MaterialDesc$);'ESC';"(s6H"
  Else 
    Print #chprt; Tab 30;Trim$(Items.[1].MaterialDesc$)
  End If 
  Call SkipLines(chprt,4)
  Print #chprt; Tab 8;Items.[1].MaterialCode$;
  SQL$ = "SELECT Comment1 FROM Sales_Material_Price"
  SQL$ = SQL$ + " WHERE CustomerNo=" + SQLV$(TicketHeader.EntityNo$)
  SQL$ = SQL$ + " AND MaterialCode=" + SQLV$(Items.[1].MaterialCode$)
  SQL$ = SQL$ + " AND Branch=" + SQLV$(TicketHeader.Branch$)
  temp$ = ""
  Try 
    Search #ch_db;SQL$
    If Chf(ch_db)
      Map #ch_db;
      Read #ch_db;temp$
    Else 
      SQL$ = "SELECT Comment1 FROM Sales_Material_Price"
      SQL$ = SQL$ + " WHERE CustomerNo=" + SQLV$("CP000*")
      SQL$ = SQL$ + " AND MaterialCode=" + SQLV$(Items.[1].MaterialCode$)
      SQL$ = SQL$ + " AND Branch=" + SQLV$(TicketHeader.Branch$)
      Search #ch_db;SQL$
      If Chf(ch_db)
        Map #ch_db;
        Read #ch_db;temp$
      End If 
    End If 
  Else 
  End Try 
  If Len(Trim$(temp$)) = 1
    Print #chprt; Tab 31;Trim$(temp$)
  Else 
    Print #chprt;
  End If 
  Call SkipLines(chprt,5)
  x = Len(Trim$(TicketHeader.DeliveringCarrier$))
  If x > 19
    Print #chprt; Tab 28;TicketHeader.DeliveringCarrier$
  Else If x > 18
    Print #chprt; Tab 29;TicketHeader.DeliveringCarrier$
  Else 
    Print #chprt; Tab 30;TicketHeader.DeliveringCarrier$
  End If 
  Call SkipLines(chprt,2)
  Print #chprt; Tab 9;Items.[1].ShipmentNo$; Tab 30;TicketHeader.ContainerNo$
  Call SkipLines(chprt,5)
  Print #chprt; Tab 7;Str$(Items.[1].GrossWt); Tab 16;Str$(Items.[1].TareWt); Tab 34;Str$(Items.[1].NetWt + Items.[1].AdjWt)
  Close #chprt
End Sub 
Sub PrintBOLFooter()
  If BOLShipmentNoPosition[0]
    n = BOLShipmentNoPosition[1] + 12 - LineCount
    Call SkipLines(chprt,n)
    If Items.[1].MaterialCode$[1,2] <> "*M"
      Print #chprt; Tab BOLShipmentNoPosition[2];Items.[1].ShipmentNo$
    Else 
      Print #chprt; Tab BOLShipmentNoPosition[2];TicketHeader.TicketNo$
    End If 
    LineCount = LineCount + n + 1
  End If 
  Call SkipLines(chprt,36 - LineCount)
  Print #chprt; Tab 10;Trim$(Company$[118,142])
  Print #chprt; Tab 10;Trim$(Company$[143,167 - gbl_st]);", ";Company$[168 - gbl_st,169];"  ";Company$[170,179];
  If TicketHeader.Trader$
    Print #chprt; Tab 88;SAICodesTableDesc$(ch_db,"Codes_Trader","TraderCode",TicketHeader.Trader$)
  Else 
    Print #chprt;
  End If 
  If BOLReferenceNumber$ And BOLReferenceNumberPCL$
    If BOLReferenceNumber$ = "TICKET" Or Items.[1].MaterialCode$[1,2] = "*M"
      Print #chprt;BOLReferenceNumberPCL$;TicketHeader.TicketNo$
    Else 
      Print #chprt;BOLReferenceNumberPCL$;Items.[1].ShipmentNo$
    End If 
  End If 
  If BOLForm2$ Print #chprt;"{f=";BOLForm2$;"}";
  ! Old comment lines that are now on the form:
  !  print #chprt;Tab 28;"(Commodities being transported"
  !  print #chprt;Tab 29;"for Remelting Purposes ONLY."
  !  print #chprt;Tab 28;"All applicable tariffs pertaining"
  !  print #chprt;Tab 29;"to recycling materials apply.)"
End Sub 
Sub PrintBOLHeader()
  PageNum = PageNum + 1
  If PageNum > 1
    Call PrintBOLFooter()
    Print #chprt;"{f=" + BOLForm$ + "}";
  End If 
  Call SkipLines(chprt,3)
  If (z$[644,646] = "220" Or z$[644,646] = "319") And Items.[1].MaterialCode$[1,2] <> "*M" ! MTLM
    Print #chprt; Tab 118 - gbl.A4Offset;Items.[1].ShipmentNo$
  Else 
    Print #chprt; Tab 118 - gbl.A4Offset;TicketHeader.TicketNo$
  End If 
  Call SkipLines(chprt,2)
  Print #chprt; Tab 18;Company$[63,92]
  Call SkipLines(chprt,2)
  If z$[644,646] = "220" Or z$[644,646] = "319" ! MTLM
    !    print #chprt;" Ticket # ";TicketHeader.TicketNo$;Tab 22;"B.O.L. # ";TicketHeader.BOLNo$ !BOL # removed 11/14/06 per Steve Philip
    Print #chprt;" Ticket # ";TicketHeader.TicketNo$
  Else 
    Print #chprt; Tab 12;"B.O.L. # ";TicketHeader.BOLNo$;
    If TicketHeader.CarrierRefNo$
      TempOffset = 111 - gbl.A4Offset + Int((20 - Len(TicketHeader.CarrierRefNo$)) / 2) !floating offset to center under heading
      Print #chprt; Tab TempOffset;TicketHeader.CarrierRefNo$
    Else 
      Print #chprt;
    End If 
  End If 
  Call SkipLines(chprt,2)
  Print #chprt; Tab 12;Trim$(Company$[143,167 - gbl_st]);", ";Company$[168 - gbl_st,169]; ! City, ST
  Print #chprt; Tab 62;DateUsing$(TicketHeader.ShipmentDate#,dateformat$); Tab 87;Company$[63,92]
  Print #chprt; Tab 87;Company$[93,117] ! Company Addr 1
  If Trim$(Company$[118,142])
    Print #chprt; Tab 17;TicketHeader.Name$; Tab 87;Company$[118,142] ! Consigned To name and Company Addr 2
  Else 
    Print #chprt; Tab 17;TicketHeader.Name$; Tab 87;Trim$(Company$[143,167 - gbl_st]);", ";Company$[168 - gbl_st,169];"  ";Company$[170,179]
  End If 
  If ExportAddress.AddressType$
    Print #chprt; Tab 17;ExportAddress.ExportAddress1$;
    If Trim$(Company$[118,142]) Print #chprt; Tab 87;Trim$(Company$[143,167 - gbl_st]);", ";Company$[168 - gbl_st,169];"  ";Company$[170,179] Else Print #chprt;
    Print #chprt; Tab 17;ExportAddress.ExportAddress2$
    Print #chprt; Tab 17;ExportAddress.ExportAddress3$
    Print #chprt; Tab 17;ExportAddress.ExportAddress4$
    Print #chprt; Tab 17;ExportAddress.ExportAddress5$
  Else If AltAddress.AddressType$
    Print #chprt; Tab 17;AltAddress.Name$;
    If Trim$(Company$[118,142]) Print #chprt; Tab 87;Trim$(Company$[143,167 - gbl_st]);", ";Company$[168 - gbl_st,169];"  ";Company$[170,179] Else Print #chprt;
    Print #chprt; Tab 17;AltAddress.Address1$
    If AltAddress.Address2$
      Print #chprt; Tab 17;AltAddress.Address2$
      Print #chprt; Tab 17;AltAddress.City$;", ";AltAddress.State$;"  ";AltAddress.PostCode$
    Else 
      Print #chprt; Tab 17;AltAddress.City$;", ";AltAddress.State$;"  ";AltAddress.PostCode$
      Print #chprt;
    End If 
    Print #chprt;
  Else 
    If Trim$(Company$[118,142]) Print #chprt; Tab 87;Trim$(Company$[143,167 - gbl_st]);", ";Company$[168 - gbl_st,169];"  ";Company$[170,179] Else Print #chprt;
    Print #chprt; Tab 17;TicketHeader.Address1$
    If Trim$(TicketHeader.Address2$)
      Print #chprt; Tab 17;TicketHeader.Address2$
      n = 0
    Else 
      n = 1
    End If 
    If Trim$(TicketHeader.City$ + TicketHeader.State$ + TicketHeader.PostCode$)
      Print #chprt; Tab 17;Trim$(TicketHeader.City$);", ";Trim$(TicketHeader.State$),"  ";Trim$(TicketHeader.PostCode$)
    Else 
      n = n + 1
    End If 
    Call SkipLines(chprt,n + 1)
  End If 
  Print #chprt; Tab 13;TicketHeader.RouteNo$; Tab 87;TicketHeader.DeliveryAddr$
  Print #chprt;
  Print #chprt; Tab 18;TicketHeader.DeliveringCarrier$; Tab 78;TicketHeader.CarInitials$; Tab 108;TicketHeader.CarNo$
  Call SkipLines(chprt,2)
  LineCount = 1
End Sub 
Sub PrintBOLSingle()
  Select Case DocLang$
    Case "FC"
      If Items.[1].Bales Print #chprt; Using "----#"; Tab 6;Items.[1].Bales;
      Print #chprt; Tab 17;Items.[1].MaterialDesc$;
      Print #chprt; Using "---------#"; Tab 72;"BRUT"; Tab 78;"GROSS"; Tab 84;Items.[1].GrossWt
      Print #chprt; Using "---------#"; Tab 72;"TARE"; Tab 78;"TARE"; Tab 84;Items.[1].TareWt
      Print #chprt; Using "---------#"; Tab 72;" NET"; Tab 78;"NET"; Tab 84;Items.[1].NetWt
      Print #chprt; Using "---------#"; Tab 72;" ADJ"; Tab 78;"ADJ"; Tab 84;Items.[1].AdjWt
      Print #chprt; Using "---------#"; Tab 72;"EXP\311\"; Tab 78;"SHIP"; Tab 84;Items.[1].NetWt + Items.[1].AdjWt
      If Items.[1].MaterialCode$[1,2] <> "*M"
        Print #chprt; Tab 19;"EXP\311\DITION/SHIPMENT #"; Tab 49;Items.[1].ShipmentNo$
      Else 
        Print #chprt; Tab 19;"EXP\311\DITION/SHIPMENT #"; Tab 49;TicketHeader.TicketNo$
      End If 
      LineCount = LineCount + 6
      If Trim$(TicketHeader.OrderNo$) Or Trim$(TicketHeader.MatReqNo$)
        Print #chprt; Tab 19;"NOTRE DE CONTRAT/OUR ORDER # "; Tab 49;TicketHeader.OrderNo$;"-";TicketHeader.OrderLine$;
        Print #chprt;"  REQ MAT/MAT'L REQ # ";TicketHeader.MatReqNo$;"-";TicketHeader.MatReqLine$
        LineCount = LineCount + 1
      End If 
    Case Else 
      If Items.[1].Bales Print #chprt; Using "----#"; Tab 6;Items.[1].Bales;
      Print #chprt; Tab 17;Items.[1].MaterialDesc$;
      Print #chprt; Using "---------#"; Tab 78;"GROSS"; Tab 84;Items.[1].GrossWt
      Print #chprt; Using "---------#"; Tab 78;"TARE"; Tab 84;Items.[1].TareWt
      Print #chprt; Using "---------#"; Tab 78;"NET"; Tab 84;Items.[1].NetWt
      Print #chprt; Using "---------#"; Tab 78;"ADJ"; Tab 84;Items.[1].AdjWt
      Print #chprt; Using "---------#"; Tab 78;"SHIP"; Tab 84;Items.[1].NetWt + Items.[1].AdjWt
      If Items.[1].MaterialCode$[1,2] <> "*M"
        Print #chprt; Tab 19;"SHIPMENT #"; Tab 33;Items.[1].ShipmentNo$
      Else 
        Print #chprt; Tab 19;"SHIPMENT #"; Tab 33;TicketHeader.TicketNo$
      End If 
      LineCount = LineCount + 6
      If Trim$(TicketHeader.OrderNo$) Or Trim$(TicketHeader.MatReqNo$)
        Print #chprt; Tab 19;"OUR ORDER # "; Tab 33;TicketHeader.OrderNo$;"-";TicketHeader.OrderLine$;
        Print #chprt;"   MAT'L REQ # ";TicketHeader.MatReqNo$;"-";TicketHeader.MatReqLine$
        LineCount = LineCount + 1
      End If 
  End Select 
  If TicketHeader.ContainerTareWt
    VGM_Weight = TicketHeader.ContainerTareWt + Items.[1].NetWt
  End If 
  If LineCount > BOLLinesPerPage Call PrintBOLHeader()
End Sub 
Sub PrintBOLSummary()
  Clear Items.[0],icount
  Search #ch_db;"SELECT * FROM Sales_Ticket_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#) + " ORDER BY Leg"
  nr = Chf(ch_db)
  If nr
    Map Record #ch_db As Sales_Ticket_Hdr
    Read Record #ch_db;SalesTicketHdr.
    Items.[0].GrossWt = SalesTicketHdr.VehGrossWt
    Items.[0].TareWt = SalesTicketHdr.VehTareWt
    Items.[0].NetWt = SalesTicketHdr.VehNetWt
    Items.[0].AdjWt = SalesTicketHdr.VehAdjWt
    If nr > 1
      For n = 2 To nr
        Read Record #ch_db;SalesTicketHdr.
        Items.[0].AdjWt = Items.[0].AdjWt + SalesTicketHdr.VehAdjWt
        If BOLTareWtDerived$ = "Y" Let Items.[0].NetWt = Items.[0].NetWt + SalesTicketHdr.VehNetWt
      Next n
      Items.[0].GrossWt = SalesTicketHdr.VehGrossWt
    End If 
    If BOLTareWtDerived$ = "Y"
      Items.[0].TareWt = Items.[0].GrossWt - Items.[0].NetWt
    Else 
      Items.[0].NetWt = Items.[0].GrossWt - Items.[0].TareWt
    End If 
    Search #ch_db;"SELECT DISTINCT MaterialDesc FROM Sales_Ticket_Dtl WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
    icount = Chf(ch_db)
    If icount
      If icount > ilistmax
        ilistmax = icount
        Dim ilist$[ilistmax,ilistlen]
      End If 
      Map #ch_db;
      For n = 1 To icount
        Read #ch_db;ilist$[n]
      Next n
    End If 
  Else 
    Items.[0] = Items.[1]
  End If 
  If icount = 0
    icount = 1
    ilist$[1] = Items.[1].MaterialDesc$
  End If 
  Select Case DocLang$
    Case "FC"
      If icount > 0 Print #chprt; Tab 17;ilist$[1];
      Print #chprt; Using "---------#"; Tab 72;"BRUT"; Tab 78;"GROSS"; Tab 84;Items.[0].GrossWt
      If icount > 1 Print #chprt; Tab 17;ilist$[2];
      Print #chprt; Using "---------#"; Tab 72;"TARE"; Tab 78;"TARE"; Tab 84;Items.[0].TareWt
      If icount > 2 Print #chprt; Tab 17;ilist$[3];
      Print #chprt; Using "---------#"; Tab 72;" NET"; Tab 78;"NET"; Tab 84;Items.[0].NetWt
      If icount > 3 Print #chprt; Tab 17;ilist$[4];
      Print #chprt; Using "---------#"; Tab 72;" ADJ"; Tab 78;"ADJ"; Tab 84;Items.[0].AdjWt
      If icount > 4 Print #chprt; Tab 17;ilist$[5];
      Print #chprt; Using "---------#"; Tab 72;"EXP\311\"; Tab 78;"SHIP"; Tab 84;Items.[0].NetWt + Items.[0].AdjWt
      LineCount = LineCount + 5
      If icount > 5
        For i = 6 To icount
          Print #chprt; Tab 17;ilist$[i]
          LineCount = LineCount + 1 \ If LineCount > BOLLinesPerPage Call PrintBOLHeader()
        Next i
      End If 
      Print #chprt;
      LineCount = LineCount + 1 \ If LineCount > BOLLinesPerPage Call PrintBOLHeader()
      Print #chprt; Tab 19;"NOTRE DE CONTRAT/OUR ORDER # "; Tab 49;TicketHeader.OrderNo$;"-";TicketHeader.OrderLine$;
      Print #chprt;"  REQ MAT/MAT'L REQ # ";TicketHeader.MatReqNo$;"-";TicketHeader.MatReqLine$
    Case Else 
      !    if Items.[0].Bales print #chprt;Using "----#";Tab 6;Items.[1].Bales;
      If icount > 0 Print #chprt; Tab 17;ilist$[1];
      Print #chprt; Using "---------#"; Tab 78;"GROSS"; Tab 84;Items.[0].GrossWt
      If icount > 1 Print #chprt; Tab 17;ilist$[2];
      Print #chprt; Using "---------#"; Tab 78;"TARE"; Tab 84;Items.[0].TareWt
      If icount > 2 Print #chprt; Tab 17;ilist$[3];
      Print #chprt; Using "---------#"; Tab 78;"NET"; Tab 84;Items.[0].NetWt
      If icount > 3 Print #chprt; Tab 17;ilist$[4];
      Print #chprt; Using "---------#"; Tab 78;"ADJ"; Tab 84;Items.[0].AdjWt
      If icount > 4 Print #chprt; Tab 17;ilist$[5];
      Print #chprt; Using "---------#"; Tab 78;"SHIP"; Tab 84;Items.[0].NetWt + Items.[0].AdjWt
      LineCount = LineCount + 5
      If icount > 5
        For i = 6 To icount
          Print #chprt; Tab 17;ilist$[i]
          LineCount = LineCount + 1 \ If LineCount > BOLLinesPerPage Call PrintBOLHeader()
        Next i
      End If 
      Print #chprt;
      LineCount = LineCount + 1 \ If LineCount > BOLLinesPerPage Call PrintBOLHeader()
      Print #chprt; Tab 19;"OUR ORDER # "; Tab 33;TicketHeader.OrderNo$;"-";TicketHeader.OrderLine$;
      Print #chprt;"   MAT'L REQ # ";TicketHeader.MatReqNo$;"-";TicketHeader.MatReqLine$
  End Select 
  If TicketHeader.ContainerTareWt
    VGM_Weight = TicketHeader.ContainerTareWt + Items.[0].NetWt
  End If 
  LineCount = LineCount + 1 \ If LineCount > BOLLinesPerPage Call PrintBOLHeader()
End Sub 
Sub PrintBOLDetail()
  temp$ = ""
  TotalNetAmt = 0
  icount = 0
  Do 
    Search #ch_8530ro,3,1;k$,r,e
    If e Exit Do 
    If k$[1,Len(ksav$)] <> ksav$ Exit Do 
    Call SAIReadRecord(ch_8530,recdef_8530.,"F","L",r,RetailSales$,RetailSales[],stat,errmess$)
    If stat = 0
      RetailSales$[137,142] = SAISpaceFill$(TicketHeader.BOLNo$,6)
      Call SAIWriteRecord(ch_8530,recdef_8530.,"U",r,RetailSales$,RetailSales[],stat,errmess$)
      If RetailSales$[13,14] <> "*M"
        If RetailSales$[13,20] + RetailSales$[90,101] <> temp$
          temp$ = RetailSales$[13,20] + RetailSales$[90,101] ! Material, SO
          Print #chprt; Tab 17;"OUR S.O.# ";LTrim$(RetailSales$[90,99]);"-";RetailSales$[100,101];"    CUST PO # ";TicketHeader.ShipOrdNo$
          LineCount = LineCount + 1 \ If LineCount > BOLLinesPerPage Call PrintBOLHeader()
          If Trim$(RetailSales$[124,133]) And (RetailSales$[167,167] < "1" Or RetailSales$[167,167] > "9")
            Print #chprt; Tab 17;"MAT'L REQ # ";LTrim$(RetailSales$[124,133]);"-";RetailSales$[134,135]
            LineCount = LineCount + 1 \ If LineCount > BOLLinesPerPage Call PrintBOLHeader()
          End If 
        End If 
        icount = icount + 1
        If Trim$(RetailSales$[205,234]) = "" And RetailSales$[100,101] <> "00"
          ktemp$ = RetailSales$[7,12] + RetailSales$[90,101] ! Customer, Sales Order, Line
          Call SAIGetRecord(ch_1310ro,recdef_1310.,ktemp$,1,"Y","U",r,SODetail$,SODetail[],stat,errmess$)
          If stat = 0 And Trim$(SODetail$[111,140])
            RetailSales$[205,234] = SODetail$[111,140] ! Use contract desc override
          End If 
        End If 
        If Trim$(RetailSales$[205,234]) = ""
          Call GetSalesMatDesc(TicketHeader.EntityNo$,Trim$(RetailSales$[13,20]),RetailSales$[168,169],temp2$,stat)
          If stat = 0 Let RetailSales$[205,234] = SAISpaceFill$(temp2$,30)
        End If 
        Print #chprt; Tab 20;RetailSales$[205,234]; Tab 63;"SHP# ";RetailSales$[56,61];
        Print #chprt; Using "---------#"; Tab 78;"NET"; Tab 84;RetailSales[2]
        TotalNetAmt = TotalNetAmt + RetailSales[2]
        LineCount = LineCount + 1 \ If LineCount > BOLLinesPerPage Call PrintBOLHeader()
      End If 
    End If 
  Loop 
  If icount = 0
    Call PrintBOLSingle()
    Exit Sub 
  End If 
  If TicketHeader.ContainerTareWt
    VGM_Weight = TicketHeader.ContainerTareWt + TotalNetAmt
  End If 
  Print #chprt;
  LineCount = LineCount + 1 \ If LineCount > BOLLinesPerPage Call PrintBOLHeader()
  Print #chprt; Using "---------#"; Tab 72;"TOTAL WEIGHT"; Tab 84;TotalNetAmt
  LineCount = LineCount + 1 \ If LineCount > BOLLinesPerPage Call PrintBOLHeader()
End Sub 
Sub PrintBOL()
  !  if BOLCopies=0 Exit Sub
  If BOLCopies = 0 Goto Proforma
  If BOLPrinter$ = ""
    Call SAITouchWarning("No BOL Printer configured.")
    Exit Sub 
  End If 
  temp$ = "$dynpaper p=" + BOLPrinter$ + " f=" + BOLForm$ + " c=" + Str$(BOLCopies) + " cpi=16.67"
  If BOLFormOptions$ Let temp$ = temp$ + " " + BOLFormOptions$
  chprt = FindChannel()
  Try 
    Open #chprt,temp$
  Else 
    Exit Sub 
  End Try 
  If Trim$(TicketHeader.OrderNo$)
    Call RetrieveAltAddress("T",TicketHeader.EntityNo$,SODetail$[31,34],AltAddress.,stat)
    If stat = 1 Clear AltAddress.
  Else 
    Clear AltAddress.
  End If 
  VGM_Weight = 0
  PageNum = 0
  Call PrintBOLHeader()
  If Items.[1].MaterialCode$[1,2] <> "*M"
    Call PrintBOLSingle()
  Else 
    k$ = TicketHeader.TicketNo$ + TicketHeader.EntityNo$
    ksav$ = k$
    Search #ch_8530ro,3,1;k$,r,e
    If e Or k$[1,Len(ksav$)] <> ksav$
      Call PrintBOLSingle() ! No detail records found
    Else 
      Call SAIReadRecord(ch_8530,recdef_8530.,"F","L",r,RetailSales$,RetailSales[],stat,errmess$)
      If stat = 0
        RetailSales$[137,142] = SAISpaceFill$(TicketHeader.BOLNo$,6)
        Call SAIWriteRecord(ch_8530,recdef_8530.,"U",r,RetailSales$,RetailSales[],stat,errmess$)
      End If 
      If RetailSales$[13,14] <> "*M"
        Call PrintBOLSingle() ! No MIX record found
      Else 
        If ScaleCodes$[37,37] = "Y"
          Call PrintBOLSummary()
        Else If ScaleCodes$[37,37] = "S"
          Call PrintBOLSingle()
        Else 
          Call PrintBOLDetail()
        End If 
      End If 
    End If 
  End If 
  n = 2
  If TicketHeader.BookingNo$ Let n = n + 1
  If TicketHeader.CustReleaseNo$ Let n = n + 1
  If TicketHeader.SealNo$ Let n = n + 1
  If TicketHeader.Seal2No$ Let n = n + 1
  If TicketHeader.Seal3No$ Let n = n + 1
  If TicketHeader.ContainerNo$ Let n = n + 1
  If LineCount + n > BOLLinesPerPage Call PrintBOLHeader()
  Select Case DocLang$
    Case "FC"
      If TicketHeader.BookingNo$
        Print #chprt; Tab 19;"RESERVATION/BOOKING #"; Tab 49;TicketHeader.BookingNo$
        LineCount = LineCount + 1
      End If 
      If TicketHeader.CustReleaseNo$
        !      print #chprt;Tab 19;"RENDEZ-VOUS/APPOINTMENT #";Tab 49;TicketHeader.CustReleaseNo$
        Print #chprt; Tab 19;"REL\302\CHE/RELEASE #"; Tab 49;TicketHeader.CustReleaseNo$
        LineCount = LineCount + 1
      End If 
      Print #chprt; Tab 19;"P.O. CLIENT/CUST PO #"; Tab 49;TicketHeader.ShipOrdNo$ \ LineCount = LineCount + 1
      If TicketHeader.SealNo$
        Print #chprt; Tab 19;"SCELLE/SEAL #"; Tab 49;TicketHeader.SealNo$ \ LineCount = LineCount + 1
      End If 
      If TicketHeader.Seal2No$
        Print #chprt; Tab 19;"SCELLE 2/SEAL 2 #"; Tab 49;TicketHeader.Seal2No$ \ LineCount = LineCount + 1
      End If 
      If TicketHeader.Seal3No$
        Print #chprt; Tab 19;"SCELLE 3/SEAL 3 #"; Tab 49;TicketHeader.Seal3No$ \ LineCount = LineCount + 1
      End If 
      If TicketHeader.ContainerNo$
        Print #chprt; Tab 19;"REMORQUE/CONTAINER"; Tab 49;
        If Trim$(TicketHeader.ContainerNo$[5,12])
          If TicketHeader.ContainerNo$[5,5] <> "-"
            Print #chprt;TicketHeader.ContainerNo$[1,4];"-";TicketHeader.ContainerNo$[5,12]
          Else 
            Print #chprt;TicketHeader.ContainerNo$
          End If 
        Else 
          Print #chprt;TicketHeader.ContainerNo$
        End If 
        LineCount = LineCount + 1
      End If 
      If TicketHeader.ReleaseNo
        Print #chprt; Tab 19;"REL\302\CHE DE SAI/SAI RELEASE #"; Tab 33;Str$(TicketHeader.ReleaseNo) \ LineCount = LineCount + 1
      End If 
    Case Else 
      If TicketHeader.BookingNo$
        Print #chprt; Tab 19;"BOOKING #"; Tab 33;TicketHeader.BookingNo$
        LineCount = LineCount + 1
      End If 
      If TicketHeader.CustReleaseNo$
        If Len(BOLReleaseName$) > 13
          Print #chprt; Tab 19;BOLReleaseName$;" ";TicketHeader.CustReleaseNo$
        Else 
          Print #chprt; Tab 19;BOLReleaseName$; Tab 33;TicketHeader.CustReleaseNo$
        End If 
        LineCount = LineCount + 1
      End If 
      Print #chprt; Tab 19;"CUST PO #"; Tab 33;TicketHeader.ShipOrdNo$ \ LineCount = LineCount + 1
      If TicketHeader.SealNo$
        Print #chprt; Tab 19;"SEAL #"; Tab 33;TicketHeader.SealNo$ \ LineCount = LineCount + 1
      End If 
      If TicketHeader.Seal2No$
        Print #chprt; Tab 19;"SEAL 2 #"; Tab 33;TicketHeader.Seal2No$ \ LineCount = LineCount + 1
      End If 
      If TicketHeader.Seal3No$
        Print #chprt; Tab 19;"SEAL 3 #"; Tab 33;TicketHeader.Seal3No$ \ LineCount = LineCount + 1
      End If 
      If TicketHeader.ContainerNo$
        Print #chprt; Tab 19;"CONTAINER"; Tab 33;
        If Trim$(TicketHeader.ContainerNo$[5,12])
          If TicketHeader.ContainerNo$[5,5] <> "-"
            Print #chprt;TicketHeader.ContainerNo$[1,4];"-";TicketHeader.ContainerNo$[5,12]
          Else 
            Print #chprt;TicketHeader.ContainerNo$
          End If 
        Else 
          Print #chprt;TicketHeader.ContainerNo$
        End If 
        LineCount = LineCount + 1
      End If 
      If TicketHeader.ReleaseNo
        Print #chprt; Tab 19;"SAI RELEASE #"; Tab 33;Str$(TicketHeader.ReleaseNo) \ LineCount = LineCount + 1
      End If 
      If VGM_Weight
        Print #chprt; Tab 19;"VGM:"; Tab 33;Str$(VGM_Weight);" ";DisplayUM$ \ LineCount = LineCount + 1
      End If 
  End Select 
  Print #chprt; \ LineCount = LineCount + 1
  If LineCount > BOLLinesPerPage Call PrintBOLHeader()
  ! BOL Comments
  ktemp$ = "C" + SAISpaceFill$(TicketHeader.EntityNo$,6) + SAIFill$(TicketHeader.OrderNo$,"R"," ",10) + Rep$(" ",8) + "BOL"
  ksav$ = ktemp$
  Do 
    Search #ch_1115ro,3,1;ktemp$,r,e
    If e Exit Do 
    If ktemp$[1,Len(ksav$)] <> ksav$ Exit Do 
    Call SAIReadRecord(ch_1115ro,recdef_1115.,"Y","U",r,GblCmtTmp$,stat,errmess$)
    If stat = 0
      Print #chprt; Tab 16;Trim$(GblCmtTmp$[31,80])
      LineCount = LineCount + 1
      If LineCount > BOLLinesPerPage Call PrintBOLHeader()
    End If 
  Loop 
  ! Shipping Instructions
  If PrintShippingInstructions$ = "Y" And TicketHeader.ShippingInst$
    If LineCount + 2 > BOLLinesPerPage Call PrintBOLHeader()
    Print #chprt;
    Print #chprt; Tab 16;"Shipping Instructions: ";TicketHeader.ShippingInst$
    LineCount = LineCount + 2
  End If 
  Call PrintBOLFooter()
  If BOLForm2$ = "" Print #chprt;'FF';
  Close #chprt
Proforma: !
  If ProFormaForm$ And ProFormaCopies
    ans = SAITouchYesNo("Print Pro Forma Invoice?")
    If ans Call PrintProFormaInvoice()
  End If 
  ! Allegheny custom form for Allegheny Ludlum from Branch 30 (Natrona) only
  If z$[644,646] = "345" And Branch$ = "30" And TicketHeader.EntityNo$ = "ALLE01"
    Call PrintAlleghenyForm()
  End If 
End Sub 
Sub GetBOLInfo(status)
  Search #ch_db;"SELECT " + SQLN$(CodesVehicleType.) + "FROM Codes_Vehicle_Type WHERE VehicleType=" + SQLV$(Trim$(TicketHeader.VehType$))
  If Chf(ch_db)
    Map Record #ch_db As Codes_Vehicle_Type
    Read Record #ch_db;CodesVehicleType.
    VehPrefixLen = CalcVehPrefixLen(CodesVehicleType.TwoPartVehOverride$,ScrapSRecord$[133,133])
  Else 
    VehPrefixLen = 5 !default to 5-6 format if veh type not valid
  End If 
  ysize = 350
  chbol = SAIOpenWindow("Bill of Lading Information",800,ysize,1)
  Print #chbol;PChr$(bgcolor1);'BACKCOLOR CS WCSETCOLOR';
  Print #chbol;PChr$("Arial");'FONTFACE 12FONTSIZE EBOLD WCSETFONT';
  x0 = 20 \ x1 = 220 \ bw = 100
  y = 10 \ dy = 28 \ dx = 450 \ x = x1 + dx + 5
  Print #chbol;PChr$(110,x0,y,x1,y + 14,"Route Number:");'WCLABEL';
  Print #chbol;PChr$(10,x1,y - 1,x1 + dx,y + 15,"",2,FmtOf(TicketHeader.RouteNo$));'WCSTRING';
  Print #chbol;'10WCSELECT WCRESETCOLOR';Trim$(TicketHeader.RouteNo$);'0WCSELECT';
  Print #chbol;PChr$(30,x,y - 5,x + bw,y + 20,"Keyboard",0);'WCBUTTON';
  y = y + dy
  Print #chbol;PChr$(111,x0,y,x1,y + 14,"Delivery Address:");'WCLABEL';
  Print #chbol;PChr$(11,x1,y - 1,x1 + dx,y + 15,"",2,FmtOf(TicketHeader.DeliveryAddr$));'WCSTRING';
  Print #chbol;'11WCSELECT WCRESETCOLOR';Trim$(TicketHeader.DeliveryAddr$);'0WCSELECT';
  Print #chbol;PChr$(31,x,y - 5,x + bw,y + 20,"Keyboard",0);'WCBUTTON';
  y = y + dy
  Print #chbol;PChr$(112,x0,y,x1,y + 14,"Delivering Carrier:");'WCLABEL';
  Print #chbol;PChr$(12,x1,y - 1,x1 + dx,y + 15,"",2,FmtOf(TicketHeader.DeliveringCarrier$));'WCSTRING';
  Print #chbol;'12WCSELECT WCRESETCOLOR';
  If Trim$(TicketHeader.DeliveringCarrier$)
    Print #chbol;Trim$(TicketHeader.DeliveringCarrier$);
  Else If Trim$(TicketHeader.CarrierNo$)
    Print #chbol;Trim$(SAICodesFileDesc$(ch_110Aro,"C",TicketHeader.CarrierNo$));
  End If 
  Print #chbol;'0WCSELECT';
  Print #chbol;PChr$(32,x,y - 5,x + bw,y + 20,"Keyboard",0);'WCBUTTON';
  y = y + dy \ dx = 250 \ x = x1 + dx + 5
  Print #chbol;PChr$(113,x0,y,x1,y + 14,"Car Initials:");'WCLABEL';
  Print #chbol;PChr$(13,x1,y - 1,x1 + dx,y + 15,"",2,FmtOf(TicketHeader.CarInitials$));'WCSTRING';
  If Trim$(TicketHeader.CarInitials$) = "" And VehPrefixLen Let TicketHeader.CarInitials$ = Trim$(TicketHeader.VehNo$[1,VehPrefixLen])
  Print #chbol;'13WCSELECT WCRESETCOLOR';Trim$(TicketHeader.CarInitials$);'0WCSELECT';
  Print #chbol;PChr$(33,x,y - 5,x + bw,y + 20,"Keyboard",0);'WCBUTTON';
  y = y + dy
  Print #chbol;PChr$(114,x0,y,x1,y + 14,"Car Number:");'WCLABEL';
  Print #chbol;PChr$(14,x1,y - 1,x1 + dx,y + 15,"",2,FmtOf(TicketHeader.CarNo$));'WCSTRING';
  Print #chbol;'14WCSELECT WCRESETCOLOR';
  If Trim$(TicketHeader.CarNo$)
    Print #chbol;Trim$(TicketHeader.CarNo$);
  Else If VehPrefixLen
    Print #chbol;Trim$(TicketHeader.VehNo$[VehPrefixLen + 1]);
  Else 
    Print #chbol;Trim$(TicketHeader.VehNo$);
  End If 
  Print #chbol;'0WCSELECT';
  Print #chbol;PChr$(34,x,y - 5,x + bw,y + 20,"Keyboard",0);'WCBUTTON';
  y = y + dy
  Print #chbol;PChr$(115,x0,y,x1,y + 14,"Booking Number:");'WCLABEL';
  Print #chbol;PChr$(15,x1,y - 1,x1 + dx,y + 15,"",2,FmtOf(TicketHeader.BookingNo$));'WCSTRING';
  Print #chbol;'15WCSELECT WCRESETCOLOR';Trim$(TicketHeader.BookingNo$);'0WCSELECT';
  Print #chbol;PChr$(35,x,y - 5,x + bw,y + 20,"Keyboard",0);'WCBUTTON';
  BOLReleaseName$ = "RELEASE #"
  temp$ = SAIGlobalWord$("RELEASE#")
  If temp$ <> "RELEASE#"
    BOLReleaseName$ = temp$
  Else 
    temp$ = "Release Number"
  End If 
  y = y + dy
  Print #chbol;PChr$(116,x0,y,x1,y + 14,temp$ + ":");'WCLABEL';
  Print #chbol;PChr$(16,x1,y - 1,x1 + dx,y + 15,"",2,FmtOf(TicketHeader.CustReleaseNo$));'WCSTRING';
  Print #chbol;'16WCSELECT WCRESETCOLOR';Trim$(TicketHeader.CustReleaseNo$);'0WCSELECT';
  Print #chbol;PChr$(36,x,y - 5,x + bw,y + 20,"Keyboard",0);'WCBUTTON';
  y = y + dy
  Print #chbol;PChr$(117,x0,y,x1,y + 14,"Seal Number:");'WCLABEL';
  Print #chbol;PChr$(17,x1,y - 1,x1 + dx,y + 15,"",2,FmtOf(TicketHeader.SealNo$));'WCSTRING';
  Print #chbol;'17WCSELECT WCRESETCOLOR';Trim$(TicketHeader.SealNo$);'0WCSELECT';
  Print #chbol;PChr$(37,x,y - 5,x + bw,y + 20,"Keyboard",0);'WCBUTTON';
  y = y + dy
  Print #chbol;PChr$(118,x0,y,x1,y + 14,"Seal 2 Number:");'WCLABEL';
  Print #chbol;PChr$(18,x1,y - 1,x1 + dx,y + 15,"",2,FmtOf(TicketHeader.Seal2No$));'WCSTRING';
  Print #chbol;'18WCSELECT WCRESETCOLOR';Trim$(TicketHeader.Seal2No$);'0WCSELECT';
  Print #chbol;PChr$(38,x,y - 5,x + bw,y + 20,"Keyboard",0);'WCBUTTON';
  y = y + dy
  Print #chbol;PChr$(119,x0,y,x1,y + 14,"Seal 3 Number:");'WCLABEL';
  Print #chbol;PChr$(19,x1,y - 1,x1 + dx,y + 15,"",2,FmtOf(TicketHeader.Seal3No$));'WCSTRING';
  Print #chbol;'19WCSELECT WCRESETCOLOR';Trim$(TicketHeader.Seal3No$);'0WCSELECT';
  Print #chbol;PChr$(39,x,y - 5,x + bw,y + 20,"Keyboard",0);'WCBUTTON';
  y = y + dy
  Print #chbol;PChr$(120,x0,y,x1,y + 14,"Container Number:");'WCLABEL';
  Print #chbol;PChr$(20,x1,y - 1,x1 + dx,y + 15,"",2,FmtOf(TicketHeader.ContainerNo$) + 1);'WCSTRING';
  Print #chbol;'20WCSELECT WCRESETCOLOR';
  If Trim$(TicketHeader.ContainerNo$)
    Print #chbol;Trim$(TicketHeader.ContainerNo$);
  Else If ValidateContainer$ = "V"
    If VehPrefixLen
      Print #chbol;UCase$(Trim$(TicketHeader.VehNo$[1,VehPrefixLen])) + Trim$(TicketHeader.VehNo$[VehPrefixLen + 1]);
    Else 
      Print #chbol;UCase$(TicketHeader.VehNo$);
    End If 
  End If 
  Print #chbol;'0WCSELECT';
  x = x1 + dx + 5
  Print #chbol;PChr$(40,x,y - 5,x + bw,y + 20,"Keyboard",0);'WCBUTTON';
  If ScaleCodes$[43,43] <> "Y"
    Print #chbol;PChr$(15,17);'WCDISABLE';
    Print #chbol;PChr$(35,40);'WCDELETE';
    Print #chbol;PChr$(115,117);'WCDISABLE';
  Else If TicketHeader.ReleaseNo And Trim$(TicketHeader.BookingNo$)
    Print #chbol;'15WCDISABLE 35WCDELETE';
  End If 
  Call SAIButtons(chbol,2,1,"Submit~Cancel",800,ysize - 30,25,100,20)
  Print #chbol;'10WCFOCUS';
  Do 
    Input #chbol; Len (1);w$
    Select Case w$
      Case 'F1' ! Submit
        Print #chbol;PChr$(10,20);'WCQUERY';
        TicketHeader.RouteNo$ = SAIQueryInput$(chbol,0)
        TicketHeader.DeliveryAddr$ = SAIQueryInput$(chbol,0)
        TicketHeader.DeliveringCarrier$ = SAIQueryInput$(chbol,0)
        TicketHeader.CarInitials$ = SAIQueryInput$(chbol,0)
        TicketHeader.CarNo$ = SAIQueryInput$(chbol,0)
        w$ = SAIQueryInput$(chbol,0) ! Booking No
        If TicketHeader.ReleaseNo = 0
          TicketHeader.BookingNo$ = Trim$(w$)
        End If 
        TicketHeader.CustReleaseNo$ = SAIQueryInput$(chbol,0)
        TicketHeader.SealNo$ = SAIQueryInput$(chbol,0)
        TicketHeader.Seal2No$ = SAIQueryInput$(chbol,0)
        TicketHeader.Seal3No$ = SAIQueryInput$(chbol,0)
        w$ = SAIQueryInput$(chbol,0)
        If Len(w$) > 4
          If w$[5,5] = "-"
            TicketHeader.ContainerNo$ = w$[1,4] + w$[6]
          Else 
            TicketHeader.ContainerNo$ = w$
          End If 
        Else 
          TicketHeader.ContainerNo$ = w$
        End If 
        status = 0
        If ValidateContainer$ = "Y" Or ValidateContainer$ = "V"
          Call SAIValidateContainerNo(TicketHeader.ContainerNo$,status)
          If status
            Call SAITouchWarning("Invalid Container Number.")
          Else If TicketHeader.SealNo$ = ""
            Call SAITouchWarning("Seal Number is required for export container.")
            status = 1
          End If 
        End If 
        If status = 0 Exit Do 
      Case 'F2' ! Cancel
        status = 1
        Exit Do 
      Case 'F30' ! Route No.
        w$ = Trim$(SAIQuery$(chbol,10))
        Call SAIKeyBoardGen("Enter Route Number",KBParams.alphacase,FmtOf(TicketHeader.RouteNo$),0,w$,status)
        If status = 0 Print #chbol;'10WCSELECT CU';w$;'0WCSELECT';
      Case 'F31' ! Delivery Address
        w$ = Trim$(SAIQuery$(chbol,11))
        Call SAIKeyBoardGen("Enter Delivery Address",KBParams.alphacase,FmtOf(TicketHeader.DeliveryAddr$),0,w$,status)
        If status = 0 Print #chbol;'11WCSELECT CU';w$;'0WCSELECT';
      Case 'F32' ! Delivery Carrier
        w$ = Trim$(SAIQuery$(chbol,12))
        Call SAIKeyBoardGen("Enter Delivery Carrier",KBParams.alphacase,FmtOf(TicketHeader.DeliveringCarrier$),0,w$,status)
        If status = 0 Print #chbol;'12WCSELECT CU';w$;'0WCSELECT';
      Case 'F33' ! Car Initials
        w$ = Trim$(SAIQuery$(chbol,13))
        Call SAIKeyBoardGen("Enter Car Initials",KBParams.alphacase,FmtOf(TicketHeader.CarInitials$),0,w$,status)
        If status = 0 Print #chbol;'13WCSELECT CU';w$;'0WCSELECT';
      Case 'F34' ! Car Number
        w$ = Trim$(SAIQuery$(chbol,14))
        Call SAIKeyBoardGen("Enter Car Number",KBParams.alphacase,FmtOf(TicketHeader.CarNo$),0,w$,status)
        If status = 0 Print #chbol;'14WCSELECT CU';w$;'0WCSELECT';
      Case 'F35' ! Booking Number
        If TicketHeader.ReleaseNo = 0
          w$ = Trim$(SAIQuery$(chbol,15))
          Call SAIKeyBoardGen("Enter Booking Number",KBParams.alphacase,FmtOf(TicketHeader.BookingNo$),0,w$,status)
          If status = 0 Print #chbol;'15WCSELECT CU';w$;'0WCSELECT';
        End If 
      Case 'F36' ! Release Number
        w$ = Trim$(SAIQuery$(chbol,16))
        Call SAIKeyBoardGen("Enter " + BOLReleaseName$,KBParams.alphacase,FmtOf(TicketHeader.CustReleaseNo$),0,w$,status)
        If status = 0 Print #chbol;'16WCSELECT CU';w$;'0WCSELECT';
      Case 'F37' ! Seal Number
        w$ = Trim$(SAIQuery$(chbol,17))
        Call SAIKeyBoardGen("Enter Seal Number",KBParams.alphacase,FmtOf(TicketHeader.SealNo$),0,w$,status)
        If status = 0 Print #chbol;'17WCSELECT CU';w$;'0WCSELECT';
      Case 'F38' ! Seal 2 Number
        w$ = Trim$(SAIQuery$(chbol,18))
        Call SAIKeyBoardGen("Enter Seal 2 Number",KBParams.alphacase,FmtOf(TicketHeader.Seal2No$),0,w$,status)
        If status = 0 Print #chbol;'18WCSELECT CU';w$;'0WCSELECT';
      Case 'F39' ! Seal 3 Number
        w$ = Trim$(SAIQuery$(chbol,19))
        Call SAIKeyBoardGen("Enter Seal 3 Number",KBParams.alphacase,FmtOf(TicketHeader.Seal3No$),0,w$,status)
        If status = 0 Print #chbol;'19WCSELECT CU';w$;'0WCSELECT';
      Case 'F40' ! Container Number
        w$ = Trim$(SAIQuery$(chbol,20))
        Call SAIKeyBoardGen("Enter Container Number",KBParams.alphacase,FmtOf(TicketHeader.ContainerNo$) + 1,0,w$,status)
        If status = 0 Print #chbol;'20WCSELECT CU';w$;'0WCSELECT';
    End Select 
  Loop 
  Close #chbol
End Sub 
Sub CheckForDuplicateReceipt(type$,BankCode$,ReceiptNo$,stat) ! stat=0 for no duplicate found
  ktemp$ = ReceiptNo$ + type$
  ksav$ = ktemp$
  ! Check 8331
  Do 
    Search #ch_8331,3,2;ktemp$,rtemp,e
    If e Exit Do 
    If ktemp$[1,Len(ksav$)] <> ksav$
      e = 1
      Exit Do 
    End If 
    Call SAIReadRecord(ch_8331,recdef_8331.,"Y","U",rtemp,ScaleCheckReg$,ScaleCheckReg[],e,errmess$)
    If e = 0
      If ScaleCheckReg$[40,41] = BankCode$
        e = 0 ! Duplicate Receipt,Payment Type found for this Bank Code
        Exit Do 
      End If 
    End If 
  Loop 
  ! Check 0715
  If e
    ktemp$ = BankCode$ + ReceiptNo$
    Search #ch_0715,2,1;ktemp$,rtemp,e
  End If 
  ! Check Payment Register
  If e
    Try 
      Search #ch_db;"SELECT PaymentNo FROM Payment_Register_Hdr WHERE BankCode=" + SQLV$(BankCode$) + " AND PaymentNo=" + SQLV$(ReceiptNo$)
      If Chf(ch_db) Let e = 0
    Else 
      e = 1
    End Try 
  End If 
  ! Check check archive for duplicate
  If e And type$ = "C"
    If PrintBankCode$ = "Y"
      temp$ = SAIPrefixBankCode$(BankCode$) + ReceiptNo$
    Else 
      temp$ = ReceiptNo$
    End If 
    Try 
      Search #ch_db;"SELECT CheckNo FROM LaserCheck_Hdr WHERE BankCode=" + SQLV$(BankCode$) + " AND CheckNo=" + SQLV$(temp$)
      If Chf(ch_db) Let e = 0
    Else 
      e = 1
    End Try 
  End If 
  If e Let stat = 0 Else Let stat = 1
End Sub 
Sub GenerateReceiptNo(type$,BankCode$,ReceiptNo$)
  ReceiptNo$ = ""
  Select Case DefCashier
    Case 1
      k$ = "N" + type$ + " "
    Case 2
      k$ = "NA" + type$
    Case 3 To 5
      k$ = "N" + type$ + Str$(DefCashier)
    Case Else 
      k$ = "N" + type$ + " "
  End Select 
  k$ = k$ + Branch$
  Call SAIGetRecord(ch_110A,recdef_110A.,k$,1,"Y","L",rec110A,ScrapCode$,ScrapCode[],stat,errmess$)
  If stat = 123 ! Locked record encountered
    Call SAITouchError("Next Sequential Payment Number Locked!\15\Cannot pay at this time.")
    Exit Sub 
  Else If stat
    If k$[1,3] = "NA" + type$
      k$ = "N" + type$ + "2" + Branch$
      Call SAIGetRecord(ch_110A,recdef_110A.,k$,1,"Y","L",rec110A,ScrapCode$,ScrapCode[],stat,errmess$)
      If stat = 123 ! Locked record encountered
        Call SAITouchError("Next Sequential Payment Number Locked!\15\Cannot pay at this time.")
        Exit Sub 
      Else If stat
        k$ = "NA" + type$
      End If 
    End If 
  End If 
  If stat
    k$ = k$[1,3]
    Call SAIGetRecord(ch_110A,recdef_110A.,k$,1,"Y","L",rec110A,ScrapCode$,ScrapCode[],stat,errmess$)
    If stat = 123 ! Locked record encountered
      Call SAITouchError("Next Sequential Payment Number Locked!\15\Cannot pay at this time.")
      Exit Sub 
    Else If stat
      If k$ = "NA" + type$
        k$ = "N" + type$ + "2"
        Call SAIGetRecord(ch_110A,recdef_110A.,k$,1,"Y","L",rec110A,ScrapCode$,ScrapCode[],stat,errmess$)
        If stat = 123 ! Locked record encountered
          Call SAITouchError("Next Sequential Payment Number Locked!\15\Cannot pay at this time.")
          Exit Sub 
        End If 
      End If 
    End If 
  End If 
  If stat
    Call SAITouchError("Cannot retrieve next sequential Payment Number!\15\Cannot pay at this time.")
    Exit Sub 
  End If 
  If ScrapCode[3] = 0 Let ScrapCode[3] = 1
  If ScrapCode[4] = 0 Let ScrapCode[4] = 999999
  counter = 0
  Do 
    If counter > 10000
      errmess$ = "BankCode=" + BankCode$ + ", Last ReceiptNo=" + ReceiptNo$ + ", Next Number Key=" + k$
      Call SAITouchError("Cannot obtain an available Payment Number!\15\Cannot pay at this time.\15\" + errmess$)
      ReceiptNo$ = ""
      Exit Do 
    End If 
    counter = counter + 1
    ReceiptNo$ = ScrapCode[1] Using "&&&&&#"
    ScrapCode[1] = ScrapCode[1] + 1
    If ScrapCode[1] > ScrapCode[4] Let ScrapCode[1] = ScrapCode[3]
    Call CheckForDuplicateReceipt(type$,BankCode$,ReceiptNo$,stat)
  Loop Until stat = 0
  Call SAIWriteRecord(ch_110A,recdef_110A.,"U",rec110A,ScrapCode$,ScrapCode[],stat,errmess$)
  If stat
    Unlock #ch_110A
    Call SAITouchError("Error writing next sequential Payment Number!\15\Cannot pay at this time.\15\" + errmess$)
    ReceiptNo$ = ""
  End If 
End Sub 
Sub TicketNumberCheck(mode$,TicketNo$,ExitStatus)
  ExitStatus = 1
  ktemp$ = TicketNo$
  Search #ch_8326ro,2,2;ktemp$,r,e
  If e = 0 Exit Sub 
  If mode$ = "P"
    Search #ch_8330ro,2,1;ktemp$,r,e
  Else If mode$ = "S"
    Search #ch_8430ro,2,1;ktemp$,r,e
    If e Search #ch_8530ro,2,1;ktemp$,r,e
  End If 
  If e = 0 Exit Sub 
  Search #ch_db;"SELECT Branch FROM InYard_Hdr WHERE TicketNo=" + SQLV$(TicketNo$)
  If Chf(ch_db) Exit Sub 
  ExitStatus = 0
End Sub 
Sub GenerateTicketNo(mode$,TicketNo$)
  counter = 0
  Do 
    TicketNo$ = ""
    k$ = "NWT" + Branch$
    Call SAIGetRecord(ch_110A,recdef_110A.,k$,1,"Y","L",r,ScrapCode$,ScrapCode[],stat,errmess$)
    If stat And stat <> 123
      k$ = "NWT  "
      Call SAIGetRecord(ch_110A,recdef_110A.,k$,1,"Y","L",r,ScrapCode$,ScrapCode[],stat,errmess$)
    End If 
    If stat = 123
      Call SAITouchMessage("Ticket creation cancelled.")
      Exit Sub 
    Else If stat
      Call SAITouchError("Error generating a Ticket Number.\15\No 'WT' next sequential number record built.")
      Exit Sub 
    End If 
    If ScaleCodes$[94,94] = "Y"
      If mode$ = "T"
        TicketNo$ = "C" + ScrapCode$[70,74]
      Else 
        TicketNo$ = "T" + ScrapCode$[70,74]
      End If 
      temp$ = ScrapCode$[70,74]
      Call "sub.nxt.alpha",temp$,ScrapCode$[60,64],ScrapCode$[65,69]
      ScrapCode$[70,74] = SAISpaceFill$(temp$,5)
    Else 
      If mode$ = "T"
        TicketNo$ = ScrapCode[1] Using "C&&&&&"
      Else 
        TicketNo$ = ScrapCode[1] Using "T&&&&&"
      End If 
      ScrapCode[1] = ScrapCode[1] + 1
      min = ScrapCode[3] \ If min = 0 Let min = 1
      max = ScrapCode[4] \ If max = 0 Let max = 99999
      If ScrapCode[1] > max Let ScrapCode[1] = min
    End If 
    If mode$ <> "T"
      If Trim$(ScaleIndicators$) = ""
        TicketNo$[1,1] = "M"
      Else 
        temp$ = Trim$(ScaleIndicators$)
        If Trim$(ScaleIndicators$) = Rep$("-",Len(Trim$(ScaleIndicators$))) Let TicketNo$[1,1] = "M"
      End If 
    End If 
    Call SAIWriteRecord(ch_110A,recdef_110A.,"U",r,ScrapCode$,ScrapCode[],stat,errmess$)
    If stat
      Unlock #ch_110A
      Call SAITouchError("Error writing next sequential ticket number!\15\" + errmess$)
      TicketNo$ = ""
      Exit Sub 
    Else If Len(Trim$(TicketNo$)) < 6
      Unlock #ch_110A
      Call SAITouchError("Error obtaining Ticket Number.\15\Ticket No.=" + TicketNo$)
      TicketNo$ = ""
      Exit Sub 
    End If 
    Call TicketNumberCheck(mode$,TicketNo$,stat)
    If stat = 0 Exit Do 
    counter = counter + 1
    If counter > 50
      Unlock #ch_110A
      Call SAITouchWarning("Over 50 duplicate ticket numbers found!\15\Operation aborting.")
      TicketNo$ = ""
      Exit Sub 
    End If 
  Loop 
End Sub 
Sub GenerateWOTicketNo(TicketNo$)
  counter = 0
  Do 
    TicketNo$ = ""
    k$ = "NGT" + Branch$
    Call SAIGetRecord(ch_110A,recdef_110A.,k$,1,"F","L",r,ScrapCode$,ScrapCode[],stat,errmess$)
    If stat
      k$ = "NGT  "
      Call SAIGetRecord(ch_110A,recdef_110A.,k$,1,"F","L",r,ScrapCode$,ScrapCode[],stat,errmess$)
    End If 
    If stat
      Call GenerateTicketNo("S",TicketNo$) ! No Weight only series built, generate standard ticket number
      Exit Sub 
    End If 
    If ScaleCodes$[94,94] = "Y"
      TicketNo$ = "W" + ScrapCode$[70,74]
      temp$ = ScrapCode$[70,74]
      Call "sub.nxt.alpha",temp$,ScrapCode$[60,64],ScrapCode$[65,69]
      ScrapCode$[70,74] = SAISpaceFill$(temp$,5)
    Else 
      TicketNo$ = ScrapCode[1] Using "W&&&&&"
      ScrapCode[1] = ScrapCode[1] + 1
      min = ScrapCode[3] \ If min = 0 Let min = 1
      max = ScrapCode[4] \ If max = 0 Let max = 99999
      If ScrapCode[1] > max Let ScrapCode[1] = min
    End If 
    Call SAIWriteRecord(ch_110A,recdef_110A.,"U",r,ScrapCode$,ScrapCode[],stat,errmess$)
    If stat Call SAITouchError("Error writing next sequential ticket number!\15\" + errmess$)
    If Len(Trim$(TicketNo$)) < 6
      Call SAITouchError("Error obtaining Ticket Number.\15\Ticket No.=" + TicketNo$)
      TicketNo$ = ""
      Exit Sub 
    End If 
    Call TicketNumberCheck("S",TicketNo$,stat)
    If stat = 0 Exit Do 
    counter = counter + 1
    If counter > 50
      Call SAITouchError("Over 50 duplicate ticket numbers found!\15\Operation aborting.")
      TicketNo$ = ""
      Exit Sub 
    End If 
  Loop 
End Sub 
Sub GenerateManualTicketNo(mode$,TicketNo$) ! ** Uses cashier series "SC" next sequential number
  counter = 0
  Do 
    TicketNo$ = ""
    k$ = "NSC" + Branch$
    Call SAIGetRecord(ch_110A,recdef_110A.,k$,1,"Y","L",r,ScrapCode$,ScrapCode[],stat,errmess$)
    If stat And stat <> 123
      k$ = "NSC  "
      Call SAIGetRecord(ch_110A,recdef_110A.,k$,1,"Y","L",r,ScrapCode$,ScrapCode[],stat,errmess$)
    End If 
    If stat = 123
      Call SAITouchMessage("Manual Ticket generation cancelled.")
      Exit Sub 
    Else If stat
      Call SAITouchError("Error generating a Manual Ticket Number.\15\No 'SC' next sequential number record built.")
      Exit Sub 
    End If 
    If ScaleCodes$[94,94] = "Y"
      TicketNo$ = "M" + ScrapCode$[70,74]
      temp$ = ScrapCode$[70,74]
      Call "sub.nxt.alpha",temp$,ScrapCode$[60,64],ScrapCode$[65,69]
      ScrapCode$[70,74] = SAISpaceFill$(temp$,5)
    Else 
      TicketNo$ = ScrapCode[1] Using "M&&&&&"
      ScrapCode[1] = ScrapCode[1] + 1
      min = ScrapCode[3] \ If min = 0 Let min = 1
      max = ScrapCode[4] \ If max = 0 Let max = 99999
      If ScrapCode[1] > max Let ScrapCode[1] = min
    End If 
    Call SAIWriteRecord(ch_110A,recdef_110A.,"U",r,ScrapCode$,ScrapCode[],stat,errmess$)
    If stat
      Unlock #ch_110A
      Call SAITouchError("Error writing next sequential ticket number!\15\" + errmess$)
      TicketNo$ = ""
      Exit Sub 
    Else If Len(Trim$(TicketNo$)) < 6
      Unlock #ch_110A
      Call SAITouchError("Error obtaining Ticket Number.\15\Ticket No.=" + TicketNo$)
      TicketNo$ = ""
      Exit Sub 
    End If 
    Call TicketNumberCheck(mode$,TicketNo$,stat)
    If stat = 0 Exit Do 
    counter = counter + 1
    If counter > 50
      Call SAITouchWarning("Over 50 duplicate ticket numbers found!\15\Operation aborting.")
      TicketNo$ = ""
      Exit Sub 
    End If 
  Loop 
End Sub 
Sub GenerateBOLNo(BOLNo$)
  BOLNo$ = ""
  k$ = "NBL"
  Call SAIGetRecord(ch_110A,recdef_110A.,k$,1,"F","L",r,ScrapCode$,ScrapCode[],stat,errmess$)
  If stat
    Call SAITouchError("Error retrieving next sequential BOL number!\15\" + errmess$)
    Exit Sub 
  End If 
  BOLNo$ = ScrapCode[1] Using "&&&&&&"
  ScrapCode[1] = ScrapCode[1] + 1
  min = ScrapCode[3] \ If min = 0 Let min = 1
  max = ScrapCode[4] \ If max = 0 Let max = 99999
  If ScrapCode[1] > max Let ScrapCode[1] = min
  Call SAIWriteRecord(ch_110A,recdef_110A.,"U",r,ScrapCode$,ScrapCode[],stat,errmess$)
  If stat Call SAITouchError("Error writing next sequential BOL number!\15\" + errmess$)
End Sub 
Sub GenerateTicketControlNo()
  If TicketControlNo
    k$ = "NTN" + Branch$
    Call SAIGetRecord(ch_110A,recdef_110A.,k$,1,"F","L",rec110A,ScrapCode$,ScrapCode[],stat,errmess$)
    If stat = 0
      If ScrapCode[1] = 0 Let ScrapCode[1] = 1
      If ScrapCode[3] = 0 Let ScrapCode[3] = 1
      If ScrapCode[4] = 0 Let ScrapCode[4] = 9999999999
      TicketHeader.ControlNo = ScrapCode[1]
      ScrapCode[1] = ScrapCode[1] + 1
      If ScrapCode[1] > ScrapCode[4] Let ScrapCode[1] = ScrapCode[3]
      Call SAIWriteRecord(ch_110A,recdef_110A.,"U",rec110A,ScrapCode$,ScrapCode[],stat,errmess$)
      If stat Call SAITouchError("Error writing next sequential Ticket Control Number!\15\" + errmess$)
    End If 
  End If 
End Sub 
Sub Write8326(status)
  icount = 0
  x = ScaleTicAudit$[18,19]
  Do 
    k$ = SAIGetKey$(1,recdef_8326.,ScaleTicAudit$)
    Search #ch_8326,2,1;k$,r,e
    If e
      Call SAIAddRecord(ch_8326,recdef_8326.,ScaleTicAudit$,ScaleTicAudit[],status,errmess$)
      If status = 0 Exit Do 
      icount = icount + 1
      If icount > 99
        Call SAITouchError("Unable to create a unique entry in the 8326 file.")
        Exit Do 
      End If 
    End If 
    x = x + 1
    If x > 99
      ScaleTicAudit$[1,11] = DateUsing$(Tim#(0),"  HH:NN:SS ") ! Use Hrs:Min:Sec as ID
      x = 0
    End If 
    ScaleTicAudit$[18,19] = x Using "&&"
  Loop 
End Sub 
Sub Populate8326Item(Itm)
  ScaleTicAudit$[32,39] = SAISpaceFill$(Items.[Itm].MaterialCode$,8)
  ScaleTicAudit$[45,45] = SAISpaceFill$(Items.[Itm].YardCode$,1)
  ScaleTicAudit$[46,53] = SAISpaceFill$(Items.[Itm].OrigMaterialCode$,8)
  ScaleTicAudit$[54,56] = SAISpaceFill$(Items.[Itm].GrossWtWM$,3)
  ScaleTicAudit$[57,59] = SAISpaceFill$(Items.[Itm].TareWtWM$,3)
  If Items.[Itm].GrossWtTime#
    ScaleTicAudit$[70,75] = SAISpaceFill$(SAIConvertDate$(Items.[Itm].GrossWtTime#),6)
    ScaleTicAudit$[82,85] = SAISafeDateUsing$(Items.[Itm].GrossWtTime#,"HHNN")
  Else 
    ScaleTicAudit$[70,75] = Rep$(" ",6)
    ScaleTicAudit$[82,85] = Rep$(" ",4)
  End If 
  If Items.[Itm].TareWtTime#
    ScaleTicAudit$[76,81] = SAISpaceFill$(SAIConvertDate$(Items.[Itm].TareWtTime#),6)
    ScaleTicAudit$[86,89] = SAISafeDateUsing$(Items.[Itm].TareWtTime#,"HHNN")
  Else 
    ScaleTicAudit$[76,81] = Rep$(" ",6)
    ScaleTicAudit$[86,89] = Rep$(" ",4)
  End If 
  ScaleTicAudit$[90,90] = YesNoFlag$(Items.[Itm].MatCodeChg)
  ScaleTicAudit$[91,91] = YesNoFlag$(Items.[Itm].MatDescChg)
  ScaleTicAudit$[92,119] = SAISpaceFill$(Items.[Itm].MaterialDesc$,28)
  ScaleTicAudit$[122,122] = SAISpaceFill$(Items.[Itm].GrossWtScale$,1)
  ScaleTicAudit$[123,123] = SAISpaceFill$(Items.[Itm].TareWtScale$,1)
  ScaleTicAudit$[124,124] = YesNoFlag$(Items.[Itm].PriceChg)
  ScaleTicAudit$[125,126] = SAISpaceFill$(Items.[Itm].PriceUM$,2)
  ScaleTicAudit$[140,140] = SAISpaceFill$(Items.[Itm].AdjCode$,1)
  ScaleTicAudit$[184,186] = SAISpaceFill$(Items.[Itm].StockPile$,3)
  ScaleTicAudit$[196,196] = SAISpaceFill$(Items.[Itm].ManReason$,1)
  ScaleTicAudit[0] = Items.[Itm].GrossWt
  ScaleTicAudit[1] = Items.[Itm].TareWt
  ScaleTicAudit[2] = Items.[Itm].NetWt
  ScaleTicAudit[3] = Items.[Itm].AdjWt
  ScaleTicAudit[4] = Items.[Itm].GrossWt_BGRead
  ScaleTicAudit[5] = Items.[Itm].TareWt_BGRead
  ScaleTicAudit[6] = Items.[Itm].Price
  ScaleTicAudit[10] = Items.[Itm].CarBodies
  ScaleTicAudit[14] = TicketHeader.AxleCount
  Try Let ScaleTicAudit[15] = DateUsing$(Items.[Itm].GrossWtTime#,"HHNNSS") Else Let ScaleTicAudit[15] = 0
  Try Let ScaleTicAudit[16] = DateUsing$(Items.[Itm].TareWtTime#,"HHNNSS") Else Let ScaleTicAudit[16] = 0
End Sub 
Sub OTMClearStatus(OTMRefNo$,stat)
  SQL$ = "UPDATE OTM_Freight_Interface SET"
  SQL$ = SQL$ + " Status=" + SQLV$("") + ",TicketNo=" + SQLV$("") + ",EquipNo=" + SQLV$("")
  SQL$ = SQL$ + " WHERE OTMRefNo=" + SQLV$(OTMRefNo$)
  SQL$ = SQL$ + " AND TicketNo=" + SQLV$(TicketHeader.TicketNo$)
  If TicketHeader.TktType$ = "S" And TicketHeader.SplitLoad
    SQL$ = SQL$ + " AND OriginEntityNo=" + SQLV$(YardSupplierNo$)
  End If 
  Try 
    Search #ch_db;SQL$
    stat = 0
  Else 
    Call SAITouchError("Error updating Status in OTM_Freight_Interface table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
    stat = Spc(8)
  End Try 
End Sub 
Sub OTMUpdate(stat)
  SQL$ = "UPDATE OTM_Freight_Interface SET"
  SQL$ = SQL$ + " Status=" + SQLV$(OTMFreightInterface.Status$)
  !  SQL$=SQL$+", TicketNo="+SQLV$(OTMFreightInterface.TicketNo$)
  SQL$ = SQL$ + ", NetWt=" + SQLV$(OTMFreightInterface.NetWt)
  SQL$ = SQL$ + ", NetWtUM=" + SQLV$(OTMFreightInterface.NetWtUM$)
  SQL$ = SQL$ + " WHERE OTMFrtInterfaceID=" + SQLV$(OTMFreightInterface.OTMFrtInterfaceID)
  Try 
    Search #ch_db;SQL$
    stat = 0
  Else 
    Call SAITouchError("Error updating Status in OTM_Freight_Interface table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
    stat = Spc(8)
  End Try 
End Sub 
Sub OTMUpdateTicketNo(stat)
  SQL$ = "UPDATE OTM_Freight_Interface SET"
  SQL$ = SQL$ + " Status=" + SQLV$("I")
  SQL$ = SQL$ + ", TicketNo=" + SQLV$(TicketHeader.TicketNo$)
  SQL$ = SQL$ + " WHERE OTMFrtInterfaceID=" + SQLV$(OTMFreightInterface.OTMFrtInterfaceID)
  Try 
    Search #ch_db;SQL$
    stat = 0
  Else 
    Call SAITouchError("Error updating Status in OTM_Freight_Interface table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
    stat = Spc(8)
  End Try 
End Sub 
Sub TicketInUse(PortNumber$,UserName$,InUse)
  temp$ = Rep$(" ",17) + "**** WARNING ****\15\\15\"
  temp$ = temp$ + "That Ticket is currently marked as being in use by: \15\\15\"
  temp$ = temp$ + "User: " + UserName$ + "\15\"
  temp$ = temp$ + "Port: " + PortNumber$ + "\15\\15\"
  !  temp$=temp$+"Do you wish to access it anyway?"
  !  ans=SAITouchYesNo(temp$,"Question?","N")
  !  if ans
  !    InUse=0
  !  else
  !    InUse=1
  !  endif
  temp$ = temp$ + "You must have that user release the ticket to access."
  Call SAITouchWarning(temp$,"Ticket in Use")
End Sub 
Sub RetrieveInYard(ID$,TicketNo$,status)
  status = 0
  If ID$
    Search #ch_db;"SELECT * FROM InYard_Hdr WHERE InYardID=" + SQLV$(ID$) + " AND Branch=" + SQLV$(Branch$)
    If Chf(ch_db)
      Map Record #ch_db As Ticket_Header
      Read Record #ch_db;TicketHeader.
    Else 
      status = 1
    End If 
  Else If TicketNo$
    Search #ch_db;"SELECT * FROM InYard_Hdr WHERE TicketNo=" + SQLV$(TicketNo$)
    If Chf(ch_db)
      Map Record #ch_db As Ticket_Header
      Read Record #ch_db;TicketHeader.
      If TicketHeader.Branch$ <> Branch$ Let status = 2
    Else 
      status = 1
    End If 
  End If 
  If status = 0
    If TicketHeader.InUse
      PortNumber = TicketHeader.InUsePort$
      InUse = SAICheckInUse(PortNumber,TicketHeader.InUseBy$,"truckscale,retailscale,multimatsales,mixunload")
      If InUse Call TicketInUse(TicketHeader.InUsePort$,TicketHeader.InUseBy$,InUse)
      If InUse
        status = 3
      End If 
    End If 
  End If 
End Sub 
Sub RetrieveInYardItems(ItemCount)
  Clear Items.[],ItemCount
  Search #ch_db;"SELECT * FROM InYard_Dtl WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$)
  ItemCount = Chf(ch_db)
  If ItemCount
    Map Record #ch_db As Ticket_Detail
    For n = 1 To ItemCount
      Clear TicketDetail.
      Read Record #ch_db;TicketDetail.
      Call CalcExtPrice()
      Items.[n] = TicketDetail.
    Next n
  End If 
End Sub 
Sub DeleteInYard(stat)
  Try 
    Search #ch_db;"DELETE FROM InYard_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$)
    stat = 0
  Else 
    errmess$ = "Error deleting Ticket No. " + TicketHeader.TicketNo$ + " from the InYard_Hdr table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10))
    Call WriteLogFile(errmess$)
    Call SAITouchError(errmess$)
    stat = 1
  End Try 
  If Greeter$ = "Y" Try Search #ch_db;"DELETE FROM Greeter_Queue_Item WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) Else Rem
  Clear RFIDMaster.,SupplierID.
End Sub 
Sub VoidInYard(status)
  Clear TicketTemp.MixUnload
  If TicketHeader.TktType$ = "R"
    Try 
      Search #ch_db;"SELECT TicketNo FROM Retail_Ticket_Hdr WHERE TicketNo=" + SQLV$(TicketNo$)
      If Chf(ch_db)
        Call SAITouchWarning("Retail Ticket exists.  Must be VOIDED at RetailScale first.")
        status = 1
        Exit Sub 
      End If 
    Else 
    End Try 
  Else If TicketHeader.TktType$ = "S" And Items.[1].MaterialCode$[1,2] = "*M" And TicketHeader.TktMode$ <> "T" And WeightOnly = 0 ! Multi-Material Sale
    Try 
      Search #ch_db;"SELECT * FROM Sales_Ticket_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND Branch=" + SQLV$(Branch$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
      If Chf(ch_db)
        Call SAITouchWarning("Multi-Material load has been initiated.  Cannot VOID from TruckScale.")
        status = 1
        Exit Sub 
      End If 
    Else 
    End Try 
  Else If TicketHeader.TktType$ = "P" And Items.[1].MaterialCode$ = "*MIX" And TicketHeader.OrderNo$ And TicketHeader.OrderNo$ <> "UNKNOWN"
    Try 
      Search #ch_db;"SELECT " + SQLN$(PurMixHdr.) + " FROM Pur_Mix_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
      nr = Chf(ch_db)
    Else 
      nr = 0
    End Try 
    If nr
      Map Record #ch_db As Pur_Mix_Hdr
      Read Record #ch_db;PurMixHdr.
      TicketTemp.MixUnload = 1
      If PurMixHdr.InUse
        PortNumber = PurMixHdr.InUsePort$
        InUse = SAICheckInUse(PortNumber,PurMixHdr.InUseBy$,"mixunload")
        If InUse
          TicketTemp.MixUnload = 2
          Call SAITouchWarning("Ticket is currently in use by the Mix Unload program and cannot be VOIDED.")
          status = 1
          Exit Sub 
        End If 
      End If 
    End If 
  End If 
  
  ! RIMAS Integration Test
  Try 
	Search #ch_db;"DELETE FROM OmniIntegration_ControlNumbers WHERE SuppShipNo=" + SQLV$(TicketHeader.SuppShipNo$)
  Else
	! This is a quiet delete, no trace 
  End Try
  
  If RequireVoidComment$ = "Y"
    w$ = ""
    Do 
      Call SAIKeyBoardGen("Enter VOID Comment",KBParams.alphacase,50 - Len(user$),0,w$,stat)
      If stat
        status = 1 ! Cancelled
        Exit Sub 
      Else If w$ = ""
        Call SAITouchWarning("You must enter a VOID Comment.")
      Else 
        Exit Do 
      End If 
    Loop 
    w$ = SAISpaceFill$(w$,50)
    w$[51 - Len(user$),50] = user$
  End If 
  If TicketHeader.TktType$ = "P"
    ktemp$ = "V" + SAISpaceFill$(Supplier.SupplierNo$,6) + Rep$(" ",12) + SAISpaceFill$(TicketHeader.TicketNo$,6) + "SHP01"
  Else 
    ktemp$ = "C" + SAISpaceFill$(Customer.CustomerNo$,6) + Rep$(" ",12) + SAISpaceFill$(TicketHeader.TicketNo$,6) + "SHP01"
  End If 
  Call SAIGetRecord(ch_1115,recdef_1115.,ktemp$,1,"F","L",r,GblCmt$,stat,errmess$)
  If stat = 0 Call SAIDeleteRecord(ch_1115,recdef_1115.,GblCmt$,r,stat,errmess$)
  If RequireVoidComment$ = "Y"
    GblCmt$ = " ",GblCmt$
    GblCmt$[1,80] = SAISpaceFill$(ktemp$ + w$,80)
    Call SAIAddRecord(ch_1115,recdef_1115.,GblCmt$,stat,errmess$)
    If stat Call SAITouchError("Error adding VOID comment.\15\" + errmess$)
  End If 
  If TicketHeader.TktType$ = "S"
    If TicketHeader.SplitLoad And TicketHeader.Noticed !non-first leg of split load, only delete 8325 (existing 8430 & 8326 records still valid)
      Search #ch_db;"SELECT TicketNo FROM Sales_Ticket_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#) + " AND Branch=" + SQLV$(Branch$)
      If Chf(ch_db)
        Call SAITouchWarning("Multi-Material operation has begun.  Cannot VOID from TruckScale.")
        status = 1
      Else 
        Call DeleteInYard(stat)
        status = 0
      End If 
      Exit Sub 
    End If 
  End If 
  ScaleTicAudit$ = " ",ScaleTicAudit$
  Clear ScaleTicAudit[]
  ScaleTicAudit$[1,11] = SAISpaceFill$(TicketHeader.InYardID$,11)
  ScaleTicAudit$[12,17] = SAISpaceFill$(SAIConvertDate$(TicketHeader.ShipmentDate#),6)
  If TicketHeader.Noticed Let ScaleTicAudit$[12,17] = RunDate$ ! Let ship date=void date on noticed purchases
  ScaleTicAudit$[18,19] = "00" ! Sequence
  ScaleTicAudit$[20,25] = SAISpaceFill$(TicketHeader.TicketNo$,6)
  ScaleTicAudit$[26,31] = SAISpaceFill$(TicketHeader.EntityNo$,6)
  ! 32,39 - Material Code
  ScaleTicAudit$[40,40] = SAISpaceFill$(TicketHeader.VehType$,1)
  ScaleTicAudit$[44,44] = SAISpaceFill$(Supplier.HaveTaxID$,1)
  ! 45,59 - Yard Code, Orig Mat, Gross & Tare WM
  ScaleTicAudit$[60,65] = SAISpaceFill$(TicketHeader.ShipmentNo$,6)
  If TicketHeader.Noticed Let ScaleTicAudit$[66,66] = "Y"
  If ItemCount > 1 Or TicketHeader.OrderLine$ = "00" Let ScaleTicAudit$[67,67] = "Y"
  ScaleTicAudit$[68,68] = SAISpaceFill$(Supplier.TaxJurisdiction$,1) ! Tax Jurisdiction
  ! 69,119 - Gross & Tare Date & Time, Mat Change, & Mat Desc.
  ScaleTicAudit$[120,121] = SAISpaceFill$(Branch$,2)
  ! 122,126 - Gross & Tare Scale, Price Changed, Price U/M
  ScaleTicAudit$[127,127] = "V" ! Void Flag
  ScaleTicAudit$[129,129] = SAISpaceFill$(TicketHeader.SrcYard$,1)
  ScaleTicAudit$[130,137] = SAISpaceFill$(TicketHeader.SrcInvCode$,8)
  ScaleTicAudit$[138,139] = SAISpaceFill$(TicketHeader.SrcBranch$,2)
  ! 140,140 - Adj Code
  ScaleTicAudit$[141,141] = "Y" ! Update Veh Tracking
  ScaleTicAudit$[142,152] = SAISpaceFill$(TicketHeader.VehNo$,11)
  ScaleTicAudit$[153,153] = SAISpaceFill$(TicketHeader.TktType$,1)
  If TicketHeader.OrderNo$
    If TicketHeader.OrderNo$ = "UNKNOWN"
      ScaleTicAudit$[154,163] = SAISpaceFill$(TicketHeader.OrderNo$,10)
    Else 
      ScaleTicAudit$[154,163] = SAIFill$(TicketHeader.OrderNo$,"R"," ",10)
      ScaleTicAudit$[164,165] = SAISpaceFill$(TicketHeader.OrderLine$,2)
    End If 
  End If 
  ScaleTicAudit$[166,171] = SAISpaceFill$(TicketHeader.CarrierNo$,6)
  ScaleTicAudit$[172,181] = SAIFill$(TicketHeader.MatReqNo$,"R"," ",10)
  ScaleTicAudit$[182,183] = SAISpaceFill$(TicketHeader.MatReqLine$,2)
  ! 184,186 - Stock Pile
  ! 187,187 - G/T Only
  ! 188,188 - VEN-INV-ENT
  ! 189,189 - Skip Std Cost
  ScaleTicAudit$[190,195] = SAISpaceFill$(TicketHeader.SrcTicketNo$,6)
  ! 196,196 - Man Reason
  ScaleTicAudit$[197,198] = SAISpaceFill$(TicketHeader.VehSize$,2)
  ScaleTicAudit$[199,204] = SAISpaceFill$(TicketHeader.TripTicketNo$,6)
  ! 205 - 242 Custom Fields
  If Mill$ = "Y"
    ScaleTicAudit$[205,214] = SAISpaceFill$(TicketHeader.SuppShipNo$,10)
  Else If z$[644,646] = "151" And Branch$ = "03" And TicketHeader.EntityNo$ = "COLA01"
    ScaleTicAudit$[205,219] = SAISpaceFill$(TicketHeader.LAInfo_DriversName$,15)
    ScaleTicAudit$[220,221] = SAISpaceFill$(TicketHeader.LAInfo_District$,2)
    ScaleTicAudit$[222,226] = SAISpaceFill$(TicketHeader.LAInfo_Route$,5)
    ScaleTicAudit$[227,227] = SAISpaceFill$(TicketHeader.LAInfo_Section$,1)
  Else 
    ScaleTicAudit$[205,214] = SAISpaceFill$(TicketHeader.SuppInvNo$,10)
  End If 
  ! End of custom fields
  If TicketHeader.OrderNo$ And TicketHeader.OrderNo$ <> "UNKNOWN" Let TicketHeader.ShipFromTo$ = "" ! Clear ShipFrom if contract shipment
  ScaleTicAudit$[243,246] = SAISpaceFill$(TicketHeader.ShipFromTo$,4)
  ScaleTicAudit$[247,247] = YesNoFlag$(TicketHeader.Photo) ! Jpegger flag
  ScaleTicAudit$[248,249] = SAISpaceFill$(TicketHeader.CurbSideCity$,2)
  ScaleTicAudit[14] = TicketHeader.AxleCount
  If ItemCount Call Populate8326Item(1)
  Call Write8326(status)
  If status
    Call SAITouchError("Error writing VOID record to 8326 file!\15\Ticket No.=" + TicketHeader.TicketNo$ + "\15\" + errmess$)
  End If 
  If TicketHeader.TktMode$ = "T" And TicketHeader.SrcTicketNo$
    ktemp$ = SAISpaceFill$(TicketHeader.SrcTicketNo$,6)
    Search #ch_8430,2,1;ktemp$,r,stat
    If stat = 0
      Call SAIReadRecord(ch_8430,recdef_8430.,"Y","L",r,SalesTicket$,SalesTicket3[],SalesTicket4[],stat,errmess$)
      If stat = 0 And SalesTicket$[89,89] = "T" ! Insure it is a completed transfer
        SalesTicket$[89,89] = "I" ! Set Transfer back to In-route
        SalesTicket$[217,222] = Rep$(" ",6) ! Remove Inbound Transfer Ticket #
        Call SAIWriteRecord(ch_8430,recdef_8430.,"U",r,SalesTicket$,SalesTicket3[],SalesTicket4[],stat,errmess$)
      End If 
    Else 
      errmess$ = "Entry not found."
    End If 
    If stat Call SAITouchError("Error updating outbound sales record for Ticket No. " + TicketHeader.SrcTicketNo$ + "\15\" + errmess$)
  End If 
  If TicketHeader.TktType$ = "S" And TicketHeader.ReleaseNo > 0 ! Sales Release - update load count
    Try 
      Search #ch_db;"UPDATE Sales_Release SET LoadsInProcess=LoadsInProcess-1 WHERE ReleaseNo=" + SQLV$(TicketHeader.ReleaseNo)
    Else 
      Call SAITouchError("Error updating Load Count in Sales_Release table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
    End Try 
  End If 
  Call DeleteInYard(stat)
  ! Reset Notice
  If TicketHeader.Noticed
    Try 
      Search #ch_db;"UPDATE Pur_Notice SET Status=" + SQLV$("") + ", TicketNo=" + SQLV$("") + " WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$)
    Else 
      Call SAITouchError("Error updating Pur_Notice table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
    End Try 
  End If 
  ! Delete Identity and VIN detail
  If TicketHeader.TktType$ <> "S"
    Try Search #ch_db;"DELETE FROM Pur_Ticket_Identity WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#) Else Rem
    Try Search #ch_db;"DELETE FROM Pur_Ticket_VIN WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#) Else Rem
    Try Search #ch_db;"DELETE FROM Pur_Ticket_Prohib_Mat WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#) Else Rem
  End If 
  ! Check for MixUnload
  If TicketHeader.TktType$ = "P" And TicketTemp.MixUnload
    Try 
      Search #ch_db;"DELETE FROM Pur_Mix_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
    Else 
      Call SAITouchError("Error deleting entry from Pur_Mix_Hdr table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
    End Try 
  End If 
  ! Check for OTM
  If TicketHeader.CarrierRefNo$
    If OTMFreight$ = "Y" Or OTMBranch(ch_db,TicketHeader.SrcBranch$)
      Call OTMClearStatus(TicketHeader.CarrierRefNo$,stat)
    End If 
  End If 
  ! Log Sales Ticket Void
  If SalesTicketLog And TicketHeader.TktType$ = "S" And TicketHeader.TktMode$ <> "T"
    Call WriteSalesTicketLog("VOIDED")
  End If 
  ! Ticket Audit
  If TicketAudit
    Call LoadTicketAuditHeader()
    TicketAudit.Event$ = "In-Yard Ticket Voided"
    Call WriteTicketAudit()
  End If 
  status = 0
End Sub 
Sub WriteTransferRecord(status)
  Transfer$ = " ",Transfer$
  Clear Transfer[]
  ktemp$ = SAICreateInventoryKey$(BrYd,1,TicketHeader.SrcInvCode$,TicketHeader.SrcYard$,TicketHeader.SrcBranch$) ! Source Inventory record
  Call SAIGetRecord(ch_1600,recdef_1600.,ktemp$,1,"Y","U",r,Inventory$,Inventory[],e,errmess$)
  If e
    Inventory$ = " ",Inventory$ \ Clear Inventory[]
  End If 
  Transfer$[1,5] = SAISpaceFill$(TicketHeader.TicketNo$[2,6],5)
  If Items.[1].MaterialCode$[1,4] = "*MIX"
    Transfer$[6,6] = "0"
  Else 
    Transfer$[6,6] = "C"
  End If 
  Transfer$[7,7] = "T"
  Transfer$[10,17] = SAISpaceFill$(TicketHeader.SrcInvCode$,8)
  Transfer$[18,18] = SAISpaceFill$(TicketHeader.SrcYard$,1)
  Transfer$[19,20] = Inventory$[53,54] ! Cost UM
  !  Transfer$[58,58]=InYard$[189,189] ! Skip Standard Cost
  Transfer$[59,66] = SAISpaceFill$(Items.[1].MaterialCode$,8)
  Transfer$[67,72] = SAISpaceFill$(TicketHeader.TripTicketNo$,6)
  Transfer$[77,82] = SAISpaceFill$(TicketHeader.CarrierNo$,6)
  If TicketHeader.ShipmentNo$ <> TicketHeader.TicketNo$ ! Plug Shipment if it is not Ticket No.
    Transfer$[99,104] = SAISpaceFill$(TicketHeader.ShipmentNo$,6) ! Contract Shipment No.
  End If 
  Transfer$[107,114] = SAISpaceFill$(Items.[1].InventoryCode$,8)
  Transfer$[115,115] = SAISpaceFill$(Items.[1].YardCode$,1)
  Transfer$[116,117] = SAISpaceFill$(gbl_um$,2)
  If z$[644,646] = "311" ! SDI
    Transfer$[118,123] = SAISpaceFill$(SAIConvertDate$(TicketHeader.EntryDate#),6) ! Use Entry Date
  Else 
    Transfer$[118,123] = SAISpaceFill$(SAIConvertDate$(TicketHeader.ShipmentDate#),6) ! Shipment Date
  End If 
  Transfer$[126,136] = SAISpaceFill$(TicketHeader.VehNo$,11)
  Transfer$[139,140] = SAISpaceFill$(TicketHeader.SrcBranch$,2)
  Transfer$[141,142] = SAISpaceFill$(Branch$,2) ! Destination Branch
  Transfer$[143,143] = SAISpaceFill$(Items.[1].AdjCode$,1)
  Transfer[0] = Items.[1].NetWt
  If Inventory$[59,59] = "S"
    Transfer[1] = Inventory[16]
  Else 
    Transfer[1] = Inventory[14]
  End If 
  Transfer[3] = ScaleTicket4[3] ! Freight Extension
  Transfer[5] = Items.[1].TareWt
  Transfer[6] = Items.[1].GrossWt
  Transfer[7] = Items.[1].AdjWt
  Call SAIAddRecord(ch_1460,recdef_1460.,Transfer$,Transfer[],stat,errmess$)
  If stat
    Call SAITouchError("Error creating Transfer record: " + Transfer$[1,7] + "\15\" + errmess$)
    status = 1
    Exit Sub 
  End If 
  status = 0
End Sub 
Sub TransferFreightAccrual(status)
  status = 0
  k$ = Rep$(" ",7) + "NSF"
  Call SAIGetRecord(ch_1210ro,recdef_1210.,k$,2,"Y","U",r,PODetail$,PODetail[],stat,errmess$)
  If stat
    Call SAITouchError("NSF Freight Contract not built.\15\Ticket returned to In-Yard.")
    status = 1
    Exit Sub 
  End If 
  k1$ = k$ ! 2nd Dir. 1210
  k2$ = "Y" + SAISpaceFill$(TicketHeader.SrcYard$,1) + SAISpaceFill$(TicketHeader.SrcBranch$,2) ! Source Yard + Source Branch
  Call SAIGetRecord(ch_110Aro,recdef_110A.,k2$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
  If stat
    Call SAITouchError("Source Yard Code not found.\15\Ticket returned to In-Yard.")
    status = 1
    Exit Sub 
  Else If Trim$(ScrapCode$[57,62]) = ""
    Call SAITouchError("No Vendor on Source Yard Code.\15\Ticket returned to In-Yard.")
    status = 1
    Exit Sub 
  End If 
  k2$ = ScrapCode$[57,62] ! Vendor from Yard code - 2nd Dir. 1310
  TicketHeader.OrderNo$ = Trim$(PODetail$[7,16])
  TicketHeader.OrderLine$ = Trim$(PODetail$[17,18])
  ShipmentNo$ = " ",ShipmentNo$
  veh_tp$ = SAISpaceFill$(TicketHeader.VehType$,1) + SAISpaceFill$(TicketHeader.VehSize$,2)
  ph_status$ = "N "
  frtrte$ = "ESI"
  If TicketHeader.ShipmentNo$ <> TicketHeader.TicketNo$
    ShipmentNo$ = SAISpaceFill$(TicketHeader.ShipmentNo$,6) ! Existing Shipment No.
    Call "sub.frt_calc","DEPD",k1$,PODetail$[7,18],ShipmentNo$,SAISpaceFill$(Items.[1].InventoryCode$,8),SAISpaceFill$(Items.[1].YardCode$,1),veh_tp$,SAISpaceFill$(TicketHeader.CarrierNo$,6),SAISpaceFill$(SAIConvertDate$(TicketHeader.ShipmentDate#),6),ph_status$,Items.[1].NetWt + Items.[1].AdjWt,tot_frt,k2$,cbk_frt,frtrte$,z$,status,errmess_frtcalc$,fgpw[],cbgpw[],supcbgpw[]
    k2$ = ScrapCode$[57,62] ! Vendor from Yard code - 2nd Dir. 1310
  End If 
  FrtCalcMode$ = "IEPD"
  If (OTMFreight$ = "Y" Or OTMBranch(ch_db,TicketHeader.SrcBranch$)) And TicketHeader.CarrierRefNo$
    SQL$ = "SELECT * FROM OTM_Freight_Interface WHERE"
    SQL$ = SQL$ + " OTMRefNo=" + SQLV$(TicketHeader.CarrierRefNo$)
    SQL$ = SQL$ + " AND TicketNo=" + SQLV$(TicketHeader.TicketNo$)
    Try 
      Search #ch_db;SQL$
      nr = Chf(ch_db)
    Else 
      nr = 0
    End Try 
    If nr
      Map Record #ch_db As OTM_Freight_Interface
      Read Record #ch_db;OTMFreightInterface.
      OTMFreightInterface.Status$ = "C"
      OTMFreightInterface.TicketNo$ = TicketHeader.TicketNo$
      OTMFreightInterface.NetWt = Items.[1].GrossWt - Items.[ItemCount].TareWt
      OTMFreightInterface.NetWtUM$ = gbl_um$
      Call OTMUpdate(stat)
    Else 
      tot_frt = 0
      OTMFreightInterface.FrtAccrualUM$ = "er"
    End If 
    FrtCalcMode$ = FrtCalcMode$ + ",FLATRATE=" + Str$(OTMFreightInterface.FrtAccrualAmt) + "," + SAISpaceFill$(OTMFreightInterface.FrtAccrualUM$,2)
    tot_frt = 0
  End If 
  Call "sub.frt_calc",FrtCalcMode$,k1$,PODetail$[7,18],ShipmentNo$,SAISpaceFill$(Items.[1].InventoryCode$,8),SAISpaceFill$(Items.[1].YardCode$,1),veh_tp$,SAISpaceFill$(TicketHeader.CarrierNo$,6),SAISpaceFill$(SAIConvertDate$(TicketHeader.ShipmentDate#),6),ph_status$,Items.[1].NetWt + Items.[1].AdjWt,tot_frt,k2$,cbk_frt,frtrte$,z$,status,errmess_frtcalc$,fgpw[],cbgpw[],supcbgpw[]
  If Trim$(ShipmentNo$)
    TicketHeader.ShipmentNo$ = ShipmentNo$
    Items.[1].ShipmentNo$ = TicketHeader.ShipmentNo$
  End If 
  If gbl.CustomerGroupID$ = "DJJ" And tot_frt = 0 !Always enforce non-zero frt on DJJ transfers (to handle DJJ service returning zero frt as success)
    status = 1
  End If 
  If status = 0
    ScaleTicket4[3] = tot_frt ! Extended Frt Charge
  Else 
    Call SAITouchError(errmess_frtcalc$ + "\15\Ticket returned to In-Yard.")
    Clear TicketHeader.OrderNo$,TicketHeader.OrderLine$ ! Blank out NFS order
    status = 1
  End If 
End Sub 
Sub FreightRateEntry()
  ch_fr = SAIOpenWindow("Freight Rate Entry for Ticket No. " + TicketHeader.TicketNo$,720,200,1)
  Print #ch_fr;PChr$(bgcolor1);'BACKCOLOR CS WCSETCOLOR';
  Print #ch_fr;PChr$("Arial");'FONTFACE 12FONTSIZE WCSETFONT';
  y = 10 \ dy = 30 \ x0 = 20 \ x1 = 200
  Print #ch_fr;PChr$(110,x0,y,x1,y + 14,"Carrier:");'WCLABEL';
  Print #ch_fr;PChr$(10,x1,y,680,y + 14,"",0);'WCTEXT';
  Print #ch_fr;'10WCSELECT WCRESETCOLOR';TicketHeader.CarrierNo$;":  ";Trim$(ScrapCode$[15,34]);'0WCSELECT';
  y = y + dy + 10 \ dx = 120
  Print #ch_fr;PChr$(111,x0,y,x1,y + 14,"Freight Rate:");'WCLABEL';
  Print #ch_fr;PChr$(11,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #ch_fr;'11WCSELECT WCRESETCOLOR 0WCSELECT';
  Print #ch_fr;PChr$(31,x1 + dx + 10,y - 5,x1 + dx + 110,y + 20,"Change",2);'WCBUTTON';
  y = y + dy
  Print #ch_fr;PChr$(112,x0,y,x1,y + 14,"Unit of Measure:");'WCLABEL';
  Print #ch_fr;PChr$(12,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #ch_fr;'12WCSELECT WCRESETCOLOR 0WCSELECT';
  Print #ch_fr;PChr$(32,x1 + dx + 10,y - 5,x1 + dx + 110,y + 20,"Change",2);'WCBUTTON';
  y = y + dy
  Print #ch_fr;PChr$(113,x0,y,x1,y + 14,"Freight Hours:");'WCLABEL';
  Print #ch_fr;PChr$(13,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #ch_fr;'13WCSELECT WCRESETCOLOR 0WCSELECT';
  Print #ch_fr;PChr$(33,x1 + dx + 10,y - 5,x1 + dx + 110,y + 20,"Change",2);'WCBUTTON';
  Print #ch_fr;'113WCDISABLE 33WCDISABLE';
  Call SAIButtons(ch_fr,1,1,"Submit",720,165,25,150,50)
  Print #ch_fr;'5WCFOCUS';
  Do 
    Input #ch_fr; Len (1);w$
    Select Case w$
      Case 'F1' ! Submit
        stat = 0
        If Trim$(ScaleTicket$[42,43]) = ""
          Call SAITouchWarning("You must select a Unit of Measure.")
          stat = 1
        Else If ScaleTicket$[42,43] = "HR"
          If TicketHeader.FreightHrs = 0
            ans = SAITouchYesNo("Are you sure you wish to complete ticket with zero Freight Hours?")
            If ans = 0 Let stat = 1
          End If 
        End If 
        If stat = 0
          If ScaleTicket4[2] = 0
            ans = SAITouchYesNo("Are you sure you wish to complete ticket with a zero Freight Rate?")
            If ans = 0 Let stat = 1
          End If 
        End If 
        If stat = 0 Exit Do 
      Case 'F31' ! Rate
        Call SAIKeyPad("Enter Freight Rate",num,1,status)
        If status = 0
          Print #ch_fr;'11WCSELECT CU';Str$(num);'0WCSELECT';
          ScaleTicket4[2] = num
        End If 
      Case 'F32' ! U/M
        Call ChangeUM(TicketDetail.PriceUM$,status)
        If status = 0
          Print #ch_fr;'12WCSELECT CU';TicketDetail.PriceUM$;'0WCSELECT';
          If TicketDetail.PriceUM$ = "HR"
            Print #ch_fr;'113WCENABLE 33WCENABLE';
          Else 
            Print #ch_fr;'13WCSELECT CU 0WCSELECT';
            Print #ch_fr;'113WCDISABLE 33WCDISABLE';
            TicketHeader.FreightHrs = 0
          End If 
          ScaleTicket$[42,43] = SAISpaceFill$(TicketDetail.PriceUM$,2)
        End If 
      Case 'F33' ! Hours
        Call SAIKeyPad("Enter Freight Hours",num,1,status)
        If status = 0
          TicketHeader.FreightHrs = num
          Print #ch_fr;'13WCSELECT CU';Str$(num);'0WCSELECT';
        End If 
    End Select 
  Loop 
  FreightRateEntered = 1
  Close #ch_fr
End Sub 
Sub GetFreightRate(YardCode$,FreightDatabaseFlag$,status)
  !  YardCode$= Material Yard Code
  !  FreightDatabaseFlag$= ScaleCodes$[54,54] for Transfer Freight
  !                        ScaleCodes$[53,53] for Dirt Freight
  !  status: 0=success, -1=no freight required, 1=error in calculating freight
  status = -1
  k$ = "C" + ScaleTicket$[124,129]
  Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
  If stat
    Call SAITouchError("Cannot find Carrier record for Carrier No. " + ScaleTicket$[124,129])
    Exit Sub 
  End If 
  If FreightDatabaseFlag$ = "Y" ! Use Freight Rate Database
    If Trim$(Supplier.SPLC_Code$) = ""
      Exit Sub 
    Else 
      SPLC_src$ = SAISpaceFill$(Supplier.SPLC_Code$,6)
    End If 
    OrigDest.OriginEntityNo$ = SAISpaceFill$(Supplier.SupplierNo$,6)
    OrigDest.OriginEntityType$ = "S"
    OrigDest.OriginEntityShipToFrom$ = "0000"
    k$ = "Y" + YardCode$ + Branch$ ! Material's Yard
    Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCodeTmp$,ScrapCodeTmp[],stat,errmess$)
    If stat
      Call SAITouchError("Freight Error - Invalid Yard Code.\15\Ticket returned to In-Yard.")
      status = 1
      Exit Sub 
    End If 
    Call RetrieveSupplier(ScrapCodeTmp$[57,62],Vendor.,stat) ! Use Vendor from Yard code
    If stat
      Call SAITouchError("Freight Error - Invalid Vendor on Yard Code.\15\Ticket returned to In-Yard.")
      status = 1
      Exit Sub 
    End If 
    If Trim$(Vendor.SPLC_Code$) = "" Exit Sub ! No SPLC Code
    SPLC_dest$ = SAISpaceFill$(Vendor.SPLC_Code$,6)
    OrigDest.DestEntityNo$ = Vendor.SupplierNo$
    OrigDest.DestEntityType$ = "S"
    OrigDest.DestEntityShipToFrom$ = "0000"
    veh_tp$ = SAISpaceFill$(TicketHeader.VehType$,1) + SAISpaceFill$(TicketHeader.VehSize$,2)
    frtrte$ = " ",frtrte$
    Call "sub.frtrate",SPLC_src$,SPLC_dest$,veh_tp$,ScaleTicket$[124,129],ScaleTicket$[21,26],ScaleTicket3[5],OrigDest.,tot_frt,frtrte$,z$,status,errmess$
    If status And Dirt$ = "Y" And ScrapCode$[72,72] <> "A" ! Flip src and dest for Dirt to see if combo is built in the other direction, only if carrier alt frt souRce <>"A"
      frtrte$ = " ",frtrte$
      Call "sub.frtrate",SPLC_dest$,SPLC_src$,veh_tp$,ScaleTicket$[124,129],ScaleTicket$[21,26],ScaleTicket3[5],OrigDest.,tot_frt,frtrte$,z$,status,errmess$
    End If 
    If status = 0
      Try 
        ScaleTicket4[2] = Val(frtrte$[1,10]) ! Frt Rate
      Else 
        ScaleTicket4[2] = 0
      End Try 
      ScaleTicket4[3] = tot_frt ! Extended Frt Charge
      ScaleTicket$[42,43] = SAISpaceFill$(frtrte$[11,12],2)
      If (z$[644,646] = "220" Or z$[644,646] = "323" Or z$[644,646] = "316" Or z$[644,646] = "334") !only Sims US, Adams, and Schnitzer (old & new)
        If Dirt$ = "Y" And ScaleTicket$[90,101] = Rep$(" ",12) !if non-contract dirt ticket (and using frt rate db)
          ScaleTicket$[40,41] = Branch$ !plug freight code with menu company
        End If 
      End If 
    Else 
      Call SAITouchError("Freight Rate Database error.\15\Ticket returned to In-Yard.")
      status = 1
      Exit Sub 
    End If 
  Else If ScrapCode$[42,42] = "Y" And (ScaleCodes$[51,51] <> " " Or TicketHeader.TktMode$ = "T") ! Use Carrier/Freight Code Rates
    If Trim$(ScrapCode$[43,44]) = "" And NonContractFreightCode$
      ScaleTicket$[40,41] = SAISpaceFill$(NonContractFreightCode$,2) ! Freight Code
      Call FreightRateEntry()
    Else 
      ScaleTicket$[40,41] = ScrapCode$[43,44] ! Freight Code
      ScaleTicket$[42,43] = ScrapCode$[45,46] ! Freight Rate UM
      ScaleTicket4[2] = ScrapCode[0] ! Freight Rate
      If ScaleCodes$[51,51] = "F" ! Get Freight Rate from Freight Code
        k$ = "F" + ScaleTicket$[40,41]
        Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
        If stat = 0
          ScaleTicket$[42,43] = ScrapCode$[35,36] ! Freight Rate UM
          ScaleTicket4[2] = ScrapCode[0] ! Freight Rate
        End If 
      End If 
    End If 
    If (ScaleTicket$[40,41] = "  " And TicketHeader.TktMode$ <> "T") Or ScaleTicket$[42,43] = "  " Exit Sub 
    If ScaleTicket$[42,43] = "HR"
      ScaleTicket4[3] = Round(ScaleTicket4[2] * TicketHeader.FreightHrs,2)
    Else 
      Call SAICalcPriceExt(ch_110Aro,ScaleTicket3[5],gbl_um$,ScaleTicket4[2],ScaleTicket$[42,43],2,ScaleTicket4[3],stat)
    End If 
    ! Future GST calcs need to be done
  Else 
    Exit Sub ! No freight
  End If 
  status = 0
End Sub 
Sub WriteInBoundTransfer(status)
  ! Check whether to calculate freight
  If TicketHeader.CarrierNo$ = "" Goto Transfer_NoFreight ! No Carrier
  ktemp$ = "C" + SAISpaceFill$(TicketHeader.CarrierNo$,6) ! Lookup Carrier
  Call SAIGetRecord(ch_110Aro,recdef_110A.,ktemp$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
  If TicketHeader.OrderNo$ Goto Transfer_NoFreight ! PO Exists
  If TicketHeader.TripTicketNo$ And ScrapCode$[116,116] <> "Y" Goto Transfer_NoFreight ! Trip Ticket Exists (and not '3rd Party')
  If ScaleCodes$[32,32] = "Y"
    Call TransferFreightAccrual(status)
    If status = 1
      Exit Sub 
    Else 
      Goto Transfer_NoFreight
    End If 
    !  else if ScaleCodes$[51,51]<>"C" AND ScaleCodes$[51,51]<>"F"
    !    goto Transfer_NoFreight
  End If 
  ! Build an 8330 C Ticket for freight
  ScaleTicket$[7,12] = ScaleTicket$[124,129] ! Supplier No. = Carrier No.
  ScaleTicket$[13,20] = SAISpaceFill$(Items.[1].MaterialCode$,8)
  ScaleTicket$[44,45] = SAISpaceFill$(Items.[1].PriceUM$,2)
  ScaleTicket$[62,69] = SAISpaceFill$(Items.[1].InventoryCode$,8)
  ScaleTicket$[70,70] = SAISpaceFill$(Items.[1].YardCode$,1)
  k$ = "Y" + ScaleTicket$[70,70] + Branch$ ! Get Acct Branch for this yard code
  Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
  If stat
    k$ = "Y" + ScaleTicket$[70,70]
    Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
  End If 
  If stat
    ScaleTicket$[165,166] = Branch$
  Else 
    ScaleTicket$[165,166] = ScrapCode$[3,4]
  End If 
  ScaleTicket$[121,121] = SAISpaceFill$(Items.[1].AdjCode$,1)
  If Items.[1].AdjPercent Let ScaleTicket$[130,131] = Items.[1].AdjPercent Using "##"
  ScaleTicket$[132,132] = SAISpaceFill$(Items.[1].GrossWtScale$,1)
  ScaleTicket$[133,133] = SAISpaceFill$(Items.[1].TareWtScale$,1)
  ScaleTicket$[47,47] = "C" ! Flag as Carrier Record
  ScaleTicket$[102,102] = " " ! Price Class
  ! Don't populte OUR weight values
  ScaleTicket3[3] = Items.[1].GrossWt ! Fill CARRIER weight values
  ScaleTicket3[4] = Items.[1].TareWt
  ScaleTicket3[5] = Items.[1].NetWt
  ScaleTicket3[12] = Items.[1].CarBodies
  ! No CA Redemption
  Call GetFreightRate(Items.[1].YardCode$,ScaleCodes$[54,54],status)
  If status = 1
    Exit Sub 
  Else If status < 0
    Goto Transfer_NoFreight
  End If 
  ! Determine if 8330 should be deferred
  If ScaleTicket4[2] = 0
    k$ = "U" + ScaleTicket$[42,43]
    Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
    If ScrapCode$[133,133] <> "*" Let ScaleTicket$[72,72] = "D" ! Deferred
  End If 
  If ScrapSRecord$[78,78] = "Y" ! GST Calculations on Freight
    Search #ch_db;"SELECT TaxableFlag,TaxJurisdiction FROM Supplier_Master WHERE SupplierNo=" + SQLV$(TicketHeader.CarrierNo$)
    If Chf(ch_db)
      Map #ch_db;
      Read #ch_db;CarrierTaxFlag$,CarrierTaxJurisdiction$
      ScaleTicket$[233,233] = SAISpaceFill$(CarrierTaxFlag$,1)
      ScaleTicket$[234,234] = SAISpaceFill$(CarrierTaxJurisdiction$,1)
    End If 
    Call GetTaxRates(CarrierTaxFlag$,CarrierTaxJurisdiction$,TaxRates[],status)
    If status = 0
      TaxableAmt = ScaleTicket4[3] + ScaleTicket4[4] ! Freight + Hauling
      Select Case ScaleTicket$[233,233] ! Tax Flag
        Case "G","H" ! GST/HST
          ScaleTicket4[14] = Round(TaxableAmt * TaxRates[1],2)
        Case "P" ! PST
          ScaleTicket4[15] = Round(TaxableAmt * TaxRates[2],2)
        Case "B" ! Both
          ScaleTicket4[14] = Round(TaxableAmt * TaxRates[1],2)
          ScaleTicket4[15] = Round(TaxableAmt * TaxRates[2],2)
      End Select 
    End If 
  End If 
  FreightOption$ = "C" ! Needed to print C-Ticket
  Call SAIAddRecord(ch_8330,recdef_8330.,ScaleTicket$,ScaleTicket3[],ScaleTicket4[],status,errmess$)
  If status
    Call SAITouchError("Error writing C Ticket to 8330 file!\15\Ticket returned to In-Yard.\15\" + errmess$)
    status = 1
    FreightOption$ = ""
    Exit Sub 
  End If 
Transfer_NoFreight: !
  Call WriteTransferRecord(status)
  status = 0
End Sub 
Sub WritePurchaseTicket()
  ScaleTicket$ = " ",ScaleTicket$
  Clear ScaleTicket3[],ScaleTicket4[]
  Clear RoundAmt,TotalWeight,TotalFreight,FreightRate,SubTotalFreight,ConvertableFrtUM,MultiItemTicket$,MultiFreightError$
  ! 8330 Header record
  ScaleTicket$[1,6] = SAISpaceFill$(TicketHeader.TicketNo$,6)
  ScaleTicket$[7,12] = SAISpaceFill$(TicketHeader.EntityNo$,6)
  ScaleTicket$[21,26] = SAISpaceFill$(SAIConvertDate$(TicketHeader.ShipmentDate#),6)
  ScaleTicket$[27,37] = SAISpaceFill$(TicketHeader.VehNo$,11)
  ScaleTicket$[49,54] = RunDate$
  ScaleTicket$[56,61] = SAISpaceFill$(TicketHeader.ShipmentNo$,6)
  ScaleTicket$[85,89] = "NNNNN" ! Set all Update Flags to "N"
  If TicketHeader.OrderNo$
    ScaleTicket$[90,99] = SAIFill$(TicketHeader.OrderNo$,"R"," ",10)
    ScaleTicket$[100,101] = SAISpaceFill$(TicketHeader.OrderLine$,2)
  End If 
  ScaleTicket$[102,102] = SAISpaceFill$(Supplier.PriceClass$,1)
  ScaleTicket$[122,122] = SAISpaceFill$(TicketHeader.VehType$,1)
  ScaleTicket$[124,129] = SAISpaceFill$(TicketHeader.CarrierNo$,6)
  ScaleTicket$[136,136] = "Y" ! Update Veh Tracking
  If TicketHeader.Noticed Let ScaleTicket$[137,137] = "Y" ! Noticed PO
  If z$[644,646] = "255" Or z$[644,646] = "355"
    ScaleTicket$[147,147] = SAISpaceFill$(Supplier.SupplierInvoiceReqd$,1)
  End If 
  ScaleTicket$[163,164] = SAISpaceFill$(TicketHeader.VehSize$,2)
  ScaleTicket$[199,204] = SAISpaceFill$(TicketHeader.TripTicketNo$,6)
  ScaleTicket$[167,167] = SAISpaceFill$(TicketHeader.SrcYard$,1)
  ScaleTicket$[168,169] = Branch$
  ScaleTicket$[170,170] = SAISpaceFill$(TicketHeader.TktType$,1) ! (P or R)
  If TicketHeader.IDNumber$ Let ScaleTicket$[205,215] = SAISpaceFill$(TicketHeader.IDNumber$,11) ! Driver ID
  ScaleTicket$[231,232] = SAISpaceFill$(TicketHeader.FundsType$,2)
  ScaleTicket$[233,233] = SAISpaceFill$(Supplier.TaxableFlag$,1)
  ScaleTicket$[234,234] = SAISpaceFill$(Supplier.TaxJurisdiction$,1)
  ScaleTicket$[235,236] = SAISpaceFill$(TicketHeader.CurbSideCity$,2)
  ! Calculate Exchange Rate here and put in ScaleTicket4[13]
  ExchangeRate = 0
  If gbl.MultiCurrency$ = "Y"
    If TicketHeader.FundsType$ <> gbl.BranchFundsType$
      ExchangeRate = SAIGetFXRate2(ch_db,TicketHeader.FundsType$,gbl.BranchFundsType$,TicketHeader.ShipmentDate#)
    Else 
      ExchangeRate = 1
    End If 
    ScaleTicket4[13] = ExchangeRate
  End If 
  If Supplier.HaveTaxID$ = "Y"
    If ScaleTicket$[233,233] = "G" And ScaleTicket$[234,234] = "G" ! RCTI payment flag (GST)
      If Supplier.SupplierInvoiceReqd$ <> "Y" And Supplier.SupplierInvoiceReqd$ <> "M" And Supplier.SupplierInvoiceReqd$ <> "B"
        ScaleTicket$[230,230] = "R"
      End If 
    End If 
  End If 
  If TicketHeader.TktMode$ = "T"
    Call WriteInBoundTransfer(status)
    If status
      Try 
        Search #ch_db;"UPDATE InYard_Dtl SET " + SQLNV$(Items.[1]) + " WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ItemNo=" + SQLV$(1)
      Else 
      End Try 
      Clear TicketHeader.InUse,TicketHeader.InUseBy$,TicketHeader.InUsePort$
      Call UpdateInYard(stat)
      Exit Sub ! May need a status
    Else 
      Goto Define8326Records
    End If 
  End If 
  If TicketHeader.PaymentCode$
    ScaleTicket$[72,72] = TicketHeader.PaymentCode$ ! C=Check, R=Receipt, etc
    ScaleTicket$[73,78] = RunDate$
    ScaleTicket$[79,84] = SAISpaceFill$(TicketHeader.PaymentNo$,6) ! PAID-CHECK = Receipt No.
    ScaleTicket$[148,148] = DefCashier Using "#" ! BankCode -  Cashier #
    RoundAmt = TicketTotals.TotalPaid - (TicketTotals.TotalPrice + TicketTotals.TotalMatGST + TicketTotals.TotalMatPST)
  End If 
  FullPONo$ = Trim$(TicketHeader.OrderNo$)
  If FullPONo$ = "UNKNOWN"
    ScaleTicket$[72,72] = "D" ! Deferred
    FullPONo$ = ""
  Else If FullPONo$
    FullPONo$ = SAIFill$(TicketHeader.OrderNo$,"R"," ",10) + SAISpaceFill$(TicketHeader.OrderLine$,2)
    If ScaleCodes$[89,89] <> "Y" ! Pay at Scale flag
      ScaleTicket$[72,72] = "D" ! Deferred
    Else If PODetail$[165,165] <> " " ! PO on hold
      ScaleTicket$[72,72] = "D" ! Deferred
    Else If PODetail$[47,47] <> " " ! PO has estimated price
      ScaleTicket$[72,72] = "D" ! Deferred
    End If 
  Else If FreightOption$ ! Determine freight rate
    Clear CarrierTaxFlag$
    k$ = "C" + SAISpaceFill$(TicketHeader.CarrierNo$,6)
    Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
    If stat = 0
      If ScrapSRecord$[78,78] = "Y" ! GST Calculations
        Search #ch_db;"SELECT TaxableFlag,TaxJurisdiction FROM Supplier_Master WHERE SupplierNo=" + SQLV$(TicketHeader.CarrierNo$)
        If Chf(ch_db)
          Map #ch_db;
          Read #ch_db;CarrierTaxFlag$,CarrierTaxJurisdiction$
        End If 
      End If 
      FreightRateEntered = 0
      If ScrapCode$[72,72] = "A" ! Alternate rate tables
        stat = 0
        SQL$ = "SELECT " + SQLN$(AltFlatRate.) + " FROM Alternate_Freight_Rates WHERE OriginEntityNo=" + SQLV$(TicketHeader.EntityNo$) + " AND OriginEntityType=" + SQLV$("S")
        SQL$ = SQL$ + " AND OriginEntityShipToFrom=" + SQLV$(TicketHeader.ShipFromTo$) + " AND DestEntityNo=" + SQLV$(YardSupplierNo$) + " AND DestEntityType=" + SQLV$("S")
        SQL$ = SQL$ + " AND DestEntityShipToFrom=" + SQLV$("0000") + " AND CarrierNo=" + SQLV$(TicketHeader.CarrierNo$)
        SQL$ = SQL$ + " AND VehicleType=" + SQLV$(TicketHeader.VehType$) + " AND VehicleSize=" + SQLV$(TicketHeader.VehSize$)
        SQL$ = SQL$ + " AND EffectiveDate<=" + SQLD$(TicketHeader.ShipmentDate#) + " AND ExpirationDate>" + SQLD$(TicketHeader.ShipmentDate#)
        Try Search #ch_db;SQL$ Else Let stat = 1
        If Chf(ch_db)
          Map Record #ch_db As Alternate_Flat_Rate
          Read Record #ch_db;AltFlatRate.
          ScaleTicket$[40,41] = SAISpaceFill$(NonContractFreightCode$,2) ! Freight Code
          ScaleTicket$[42,43] = SAISpaceFill$(AltFlatRate.FlatRate_UM$,2) ! Freight Rate UM
          ScaleTicket4[2] = AltFlatRate.FlatRate
        Else 
          stat = 1
        End If 
        If stat ! No rate
          ScaleTicket$[40,41] = SAISpaceFill$(NonContractFreightCode$,2) ! Freight Code
          ScaleTicket$[42,43] = SAISpaceFill$(gbl_um$,2) ! Freight Rate UM
          ScaleTicket4[2] = 0
        End If 
      Else If ScrapCode$[42,42] = "Y" And Trim$(ScrapCode$[43,44]) ! From Carrier Code
        ScaleTicket$[40,41] = ScrapCode$[43,44] ! Freight Code
        ScaleTicket$[42,43] = ScrapCode$[45,46] ! Freight Rate UM
        ScaleTicket4[2] = ScrapCode[0] ! Freight Rate
      Else ! From F Code
        k$ = "F" + NonContractFreightCode$ + "      " + SAISpaceFill$(TicketHeader.FundsType$,2) + "   "
        Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
        If stat = 0
          ScaleTicket$[40,41] = ScrapCode$[2,3] ! Freight Code
          ScaleTicket$[42,43] = ScrapCode$[35,36] ! Freight Rate UM
          ScaleTicket4[2] = ScrapCode[0] ! Freight Rate
        Else 
          ScaleTicket$[40,41] = SAISpaceFill$(NonContractFreightCode$,2) ! Freight Code
          If AllowFreightRateEntry$ = "Y"
            Call FreightRateEntry()
          Else 
            ScaleTicket$[42,43] = SAISpaceFill$(gbl_um$,2) ! Freight Rate UM
            ScaleTicket4[2] = 0
          End If 
        End If 
      End If 
      If ScaleTicket$[42,43] = "HR" And TicketHeader.FreightHrs = 0 And FreightRateEntered = 1
        Do 
          Call SAIKeyPad("Enter Freight Hours",num,0,status)
          If status = 0
            If num
              TicketHeader.FreightHrs = num
              Exit Do 
            Else 
              ans = SAITouchYesNo("          Freight Hours are required but set to zero.\15\Are you sure you wish to complete ticket with zero Freight Hours?")
              If ans Exit Do 
            End If 
          End If 
        Loop 
      End If 
      FreightRate = ScaleTicket4[2]
      ConvertableFrtUM = UMConvertable(ScaleTicket$[42,43])
      If ScaleTicket$[72,72] = " "
        If FreightRate = 0 And ConvertableFrtUM Let ScaleTicket$[72,72] = "D" ! Deferred
        If ScaleTicket$[42,43] = "HR" And TicketHeader.FreightHrs = 0 Let ScaleTicket$[72,72] = "D" ! Deferred
      End If 
      Select Case FreightOption$
        Case "S"
          ScaleTicket$[46,46] = " " ! Pay freight to Supplier
          CarrierTaxFlag$ = Supplier.TaxableFlag$ ! Freight taxes will be based on Supplier tax status
          CarrierTaxJurisdiction$ = Supplier.TaxJurisdiction$ ! Freight taxes will be based on Supplier tax status
        Case "C"
          ScaleTicket$[46,46] = "Y" ! Pay freight to Carrier and don't deduct
        Case "D"
          ScaleTicket$[46,46] = "X" ! Pay freight to Carrier and deduct
      End Select 
    Else 
      Call SAITouchWarning("Error calculating freight.  Cannot retrieve Carrier record for Carrier=" + TicketHeader.CarrierNo$)
      FreightOption$ = ""
    End If 
  End If 
  If Items.[1].MaterialCode$[1,4] = "*MIX" And TicketHeader.TktType$ <> "R"
    If ScaleTicket$[72,72] = " " Let ScaleTicket$[72,72] = "D" ! Defer unsorted *MIX tickets
  End If 
  ScaleTicketStatus$ = ScaleTicket$[72,72] ! Save overall ticket status
  If (ItemCount > 1 And TicketHeader.TktType$ <> "R") Or (TicketHeader.OrderLine$ = "00" And Items.[1].MaterialCode$[1,4] <> "*MIX") Let MultiItemTicket$ = "Y"
  If MultiItemTicket$ = "Y" ! Setup *MULT header record
    ScaleTicket$[13,20] = SAISpaceFill$(MultPrice.MaterialCode$,8)
    ScaleTicket$[44,45] = "* " ! UM
    ScaleTicket$[62,69] = SAISpaceFill$(MultPrice.InventoryCode$,8)
    ScaleTicket$[70,70] = SAISpaceFill$(MultPrice.YardCode$,1)
    ScaleTicket$[132,132] = SAISpaceFill$(Items.[1].GrossWtScale$,1)
    ScaleTicket$[133,133] = SAISpaceFill$(Items.[ItemCount].TareWtScale$,1)
    ScaleTicket$[165,166] = SAISpaceFill$(Branch$,2) ! Accounting Branch
    ScaleTicket3[3] = Items.[1].GrossWt
    ScaleTicket3[4] = Items.[ItemCount].TareWt
    ScaleTicket3[5] = ScaleTicket3[3] - ScaleTicket3[4] ! Net
    ScaleTicket3[6] = 0 ! Weight Adjustment
    ScaleTicket3[13] = TicketHeader.FreightHrs
    ! Check for Contract or Non-Contract Freight
    If FullPONo$ ! Frt Calc
      k1$ = FullPONo$ + SAISpaceFill$(TicketHeader.EntityNo$,6) ! 2nd Dir. 1210
      k2$ = "" ! 2nd Dir. 1310
      ShipmentNo$ = " ",ShipmentNo$
      veh_tp$ = SAISpaceFill$(TicketHeader.VehType$,1) + SAISpaceFill$(TicketHeader.VehSize$,2)
      ph_status$ = "N "
      frtrte$ = "ESI"
      cbk_frt = ScaleTicket3[13] ! FreightHrs
      FrtCalcMode$ = "IEPD"
      If OTMFreight$ = "Y" And TicketHeader.CarrierRefNo$
        SQL$ = "SELECT * FROM OTM_Freight_Interface WHERE"
        SQL$ = SQL$ + " OTMRefNo=" + SQLV$(TicketHeader.CarrierRefNo$)
        SQL$ = SQL$ + " AND TicketNo=" + SQLV$(TicketHeader.TicketNo$)
        Try 
          Search #ch_db;SQL$
          nr = Chf(ch_db)
        Else 
          nr = 0
        End Try 
        If nr
          Map Record #ch_db As OTM_Freight_Interface
          Read Record #ch_db;OTMFreightInterface.
          OTMFreightInterface.Status$ = "C"
          OTMFreightInterface.TicketNo$ = TicketHeader.TicketNo$
          OTMFreightInterface.NetWt = Items.[1].GrossWt - Items.[ItemCount].TareWt
          OTMFreightInterface.NetWtUM$ = gbl_um$
          Call OTMUpdate(stat)
        Else 
          tot_frt = 0
          OTMFreightInterface.FrtAccrualUM$ = "er"
        End If 
        FrtCalcMode$ = FrtCalcMode$ + ",FLATRATE=" + Str$(OTMFreightInterface.FrtAccrualAmt) + "," + SAISpaceFill$(OTMFreightInterface.FrtAccrualUM$,2)
        tot_frt = 0
      End If 
      temp$ = ScaleTicket$[124,129] ! Carrier
      If TicketHeader.CarrierRefNo$ Let temp$ = temp$ + TicketHeader.CarrierRefNo$
      Call "sub.frt_calc",FrtCalcMode$,k1$,ScaleTicket$[90,101],ShipmentNo$,ScaleTicket$[62,69],ScaleTicket$[70,70],veh_tp$,temp$,ScaleTicket$[21,26],ph_status$,ScaleTicket3[5],tot_frt,k2$,cbk_frt,frtrte$,z$,status,errmess_frtcalc$,fgpw[],cbgpw[],supcbgpw[]
      If status And z$[644,646] = "323" ! SA
        Call SAITouchWarning(errmess_frtcalc$,"Freight Error")
      End If 
      Try 
        ScaleTicket4[2] = Val(frtrte$[1,10]) ! Frt Rate
      Else 
        ScaleTicket4[2] = 0
      End Try 
      ScaleTicket4[3] = tot_frt ! Extended Frt Charge
      ScaleTicket4[4] = cbk_frt ! Charge back Frt
      If ScrapSRecord$[78,78] = "Y" ! GST Calculations
        ScaleTicket4[14] = fgpw[1] ! GST Frt
        ScaleTicket4[15] = fgpw[2] ! PST Frt
        If cbgpw[1] = 0
          ScaleTicket4[16] = supcbgpw[1] ! Supplier Chargeback GST
        Else 
          ScaleTicket4[16] = cbgpw[1] ! Chargeback GST
        End If 
        If cbgpw[2] = 0
          ScaleTicket4[17] = supcbgpw[2] ! Supplier Chargeback PST
        Else 
          ScaleTicket4[17] = cbgpw[2] ! Chargeback PST
        End If 
      End If 
      ScaleTicket$[42,43] = SAISpaceFill$(frtrte$[11,12],2)
      If frtrte$[11,12] = "er" Let MultiFreightError$ = "er"
      If Trim$(ShipmentNo$)
        ScaleTicket$[56,61] = SAISpaceFill$(ShipmentNo$,6)
        TicketHeader.ShipmentNo$ = ShipmentNo$
      End If 
    Else If FreightOption$
      TotalWeight = ScaleTicket3[5]
      If ScaleTicket$[42,43] = "HR"
        TotalFreight = Round(TicketHeader.FreightHrs * FreightRate,2)
      Else 
        Call SAICalcPriceExt(ch_110Aro,TotalWeight,gbl_um$,FreightRate,ScaleTicket$[42,43],2,TotalFreight,stat)
      End If 
      ScaleTicket4[3] = TotalFreight
      If ScrapSRecord$[78,78] = "Y" ! GST Calculations
        Call GetTaxRates(CarrierTaxFlag$,CarrierTaxJurisdiction$,TaxRates[],status)
        If status = 0
          TaxableAmt = ScaleTicket4[3]
          Select Case CarrierTaxFlag$
            Case "G","H" ! GST/HST
              ScaleTicket4[14] = Round(TaxableAmt * TaxRates[1],2)
            Case "P" ! PST
              ScaleTicket4[15] = Round(TaxableAmt * TaxRates[2],2)
            Case "B" ! Both
              ScaleTicket4[14] = Round(TaxableAmt * TaxRates[1],2)
              ScaleTicket4[15] = Round(TaxableAmt * TaxRates[2],2)
            Case "W" ! Withholding
              ScaleTicket4[14] = Round(TaxableAmt * TaxRates[3],2)
            Case "I" ! Imputed
              ! Do nothing for Imputed here
          End Select 
        End If 
      End If 
    End If 
    Call SAIAddRecord(ch_8330,recdef_8330.,ScaleTicket$,ScaleTicket3[],ScaleTicket4[],status,errmess$)
    If status
      Call SAITouchError("Error writing " + MultPrice.MaterialCode$ + " record to 8330 file!\15\" + errmess$)
      Exit Sub 
    Else If TicketHeader.PaymentCode$ ! Delete directory 4 if paid
      k$ = SAIGetKey$(4,recdef_8330.,ScaleTicket$)
      Search #ch_8330,5,4;k$,r,e
    End If 
  Else If LevyItemCount And TicketHeader.TktType$ <> "R" ! Don't need to create a *MIX record if retail linked ticket
    TicketDetail.MaterialCode$ = "*MIX" ! Create a *MIX header record
    Call GetMaterialPrice(TicketDetail.MaterialCode$,status)
    If status = 0
      ScaleTicket$[13,20] = SAISpaceFill$(Material.MaterialCode$,8)
      ScaleTicket$[44,45] = SAISpaceFill$(Material.PriceUM$,2)
      ScaleTicket$[62,69] = SAISpaceFill$(Material.InventoryCode$,8)
      ScaleTicket$[70,70] = SAISpaceFill$(Material.YardCode$,1)
      ScaleTicket$[121,121] = " " ! Clear Adj Code
      ScaleTicket$[132,133] = "MM" ! Gross and Tare Man Wt flags
      ScaleTicket$[165,166] = SAISpaceFill$(Branch$,2) ! Accounting Branch
      Call SAIAddRecord(ch_8330,recdef_8330.,ScaleTicket$,ScaleTicket3[],ScaleTicket4[],status,errmess$)
      If status
        Call SAITouchError("Error writing *MIX record to 8330 file!\15\" + errmess$)
        Exit Sub 
      Else If TicketHeader.PaymentCode$ ! Delete directory 4 if paid
        k$ = SAIGetKey$(4,recdef_8330.,ScaleTicket$)
        Search #ch_8330,5,4;k$,r,e
      End If 
    End If 
  End If 
  ! 8330 Detail records
  For i = 1 To ItemCount
    Clear ScaleTicket3[],ScaleTicket4[]
    If i = 1 And ((TicketHeader.Noticed And (TicketHeader.OriginWtSrc$ = "INYARD" Or TicketHeader.OriginWtSrc$ = "SCALE")) Or PODetail$[293,293] = "Y")
      ScaleTicket3[18] = TicketHeader.OriginGrossWt
      ScaleTicket3[19] = TicketHeader.OriginTareWt
      ScaleTicket3[20] = TicketHeader.OriginNetWt
    End If 
    ScaleTicket$[13,20] = SAISpaceFill$(Items.[i].MaterialCode$,8)
    ScaleTicket$[44,45] = SAISpaceFill$(Items.[i].PriceUM$,2)
    ScaleTicket$[62,69] = SAISpaceFill$(Items.[i].InventoryCode$,8)
    ScaleTicket$[70,70] = SAISpaceFill$(Items.[i].YardCode$,1)
    ScaleTicket$[165,166] = SAISpaceFill$(Branch$,2) ! Accounting Branch
    ScaleTicket$[121,121] = SAISpaceFill$(Items.[i].AdjCode$,1)
    If Items.[i].AdjPercent Let ScaleTicket$[130,131] = Items.[i].AdjPercent Using "##"
    ScaleTicket$[132,132] = SAISpaceFill$(Items.[i].GrossWtScale$,1)
    ScaleTicket$[133,133] = SAISpaceFill$(Items.[i].TareWtScale$,1)
    If Trim$(ScaleTicketStatus$) = "" ! If overall ticket is not deffered or paid check individual item
      If Items.[i].UnPriced
        ScaleTicket$[72,72] = "D" ! Deffered
      Else 
        ScaleTicket$[72,72] = SAISpaceFill$(ScaleTicketStatus$,1)
      End If 
    End If 
    ScaleTicket$[229,229] = SAISpaceFill$(Items.[i].ManReason$,1)
    If Trim$(Items.[i].MaterialCode$) <> "*MIX"
      ScaleTicket3[0] = Items.[i].GrossWt
      ScaleTicket3[1] = Items.[i].TareWt
      ScaleTicket3[2] = Items.[i].NetWt
    End If 
    ScaleTicket3[3] = Items.[i].GrossWt
    ScaleTicket3[4] = Items.[i].TareWt
    ScaleTicket3[5] = Items.[i].NetWt
    ScaleTicket3[6] = Items.[i].AdjWt
    ScaleTicket3[12] = Items.[i].CarBodies
    If i = 1 And MultiItemTicket$ <> "Y" Let ScaleTicket3[13] = TicketHeader.FreightHrs ! Only on single item ticket
    ScaleTicket4[0] = Items.[i].Price
    ScaleTicket4[1] = Items.[i].MatExt
    ! Check for Contract Freight
    If FullPONo$ ! Frt Calc
      If MultiItemTicket$ = "Y" Let ScaleTicket$[90,101] = SAIFill$(TicketHeader.OrderNo$,"R"," ",10) + SAISpaceFill$(Items.[i].DetailOrderLine$,2)
      k1$ = ScaleTicket$[90,101] + ScaleTicket$[7,12] ! 2nd Dir. 1210 - PO# + SupplierNo
      k2$ = "" ! 2nd Dir. 1310
      If MultiItemTicket$ = "Y" Or TicketHeader.ShipmentNo$ = TicketHeader.TicketNo$ ! *MUL ticket or Single Non-Notice, get new shipment #
        ShipmentNo$ = " ",ShipmentNo$
      Else 
        ShipmentNo$ = SAISpaceFill$(TicketHeader.ShipmentNo$,6)
      End If 
      veh_tp$ = SAISpaceFill$(TicketHeader.VehType$,1) + SAISpaceFill$(TicketHeader.VehSize$,2)
      ph_status$ = "N "
      frtrte$ = "ESI"
      cbk_frt = ScaleTicket3[13] ! FreightHrs
      If (TicketHeader.Noticed And TicketHeader.OriginWtSrc$ <> "SCALE") And TicketHeader.ShipmentNo$ <> TicketHeader.TicketNo$ ! Notice with existing Shipment No.
        If ScrapSRecord$[111,111] <> "Y" Or Trim$(TicketHeader.TripTicketNo$) = "" ! Not using Synergistic or no Trip Ticket
          If Items.[1].MaterialCode$[1,2] <> "*M" Let ph_status$ = "  "
        End If 
        Call "sub.frt_calc","DEPD",k1$,ScaleTicket$[90,101],ShipmentNo$,ScaleTicket$[62,69],ScaleTicket$[70,70],veh_tp$,ScaleTicket$[124,129],ScaleTicket$[21,26],ph_status$,ScaleTicket3[5] + ScaleTicket3[6],tot_frt,k2$,cbk_frt,frtrte$,z$,status,errmess_frtcalc$,fgpw[],cbgpw[],supcbgpw[]
      End If 
      FrtCalcMode$ = "IEPD"
      If OTMFreight$ = "Y" And TicketHeader.CarrierRefNo$ And MultiItemTicket$ <> "Y"
        SQL$ = "SELECT * FROM OTM_Freight_Interface WHERE"
        SQL$ = SQL$ + " OTMRefNo=" + SQLV$(TicketHeader.CarrierRefNo$)
        SQL$ = SQL$ + " AND TicketNo=" + SQLV$(TicketHeader.TicketNo$)
        Try 
          Search #ch_db;SQL$
          nr = Chf(ch_db)
        Else 
          nr = 0
        End Try 
        If nr
          Map Record #ch_db As OTM_Freight_Interface
          Read Record #ch_db;OTMFreightInterface.
          If MultiItemTicket$ <> "Y"
            OTMFreightInterface.Status$ = "C"
            OTMFreightInterface.TicketNo$ = TicketHeader.TicketNo$
            OTMFreightInterface.NetWt = Items.[1].NetWt
            OTMFreightInterface.NetWtUM$ = gbl_um$
            Call OTMUpdate(stat)
          End If 
        Else 
          tot_frt = 0
          OTMFreightInterface.FrtAccrualUM$ = "er"
        End If 
        FrtCalcMode$ = FrtCalcMode$ + ",FLATRATE=" + Str$(OTMFreightInterface.FrtAccrualAmt) + "," + SAISpaceFill$(OTMFreightInterface.FrtAccrualUM$,2)
        tot_frt = 0
      End If 
      temp$ = ScaleTicket$[124,129] ! Carrier
      If TicketHeader.CarrierRefNo$ Let temp$ = temp$ + TicketHeader.CarrierRefNo$
      Call "sub.frt_calc",FrtCalcMode$,k1$,ScaleTicket$[90,101],ShipmentNo$,ScaleTicket$[62,69],ScaleTicket$[70,70],veh_tp$,temp$,ScaleTicket$[21,26],ph_status$,ScaleTicket3[5] + ScaleTicket3[6],tot_frt,k2$,cbk_frt,frtrte$,z$,status,errmess_frtcalc$,fgpw[],cbgpw[],supcbgpw[]
      If status And z$[644,646] = "323" ! SA
        Call SAITouchWarning(errmess_frtcalc$,"Freight Error")
      End If 
      Try 
        ScaleTicket4[2] = Val(frtrte$[1,10]) ! Frt Rate
      Else 
        ScaleTicket4[2] = 0
      End Try 
      ScaleTicket4[3] = tot_frt ! Extended Frt Charge
      Items.[i].FrtExt = tot_frt
      ScaleTicket4[4] = cbk_frt ! Charge back Frt
      Items.[i].FrtCbk = cbk_frt
      If ScrapSRecord$[78,78] = "Y" ! GST Calculations
        ScaleTicket4[14] = fgpw[1] ! GST Frt
        Items.[i].FrtGST = fgpw[1]
        ScaleTicket4[15] = fgpw[2] ! PST Frt
        Items.[i].FrtPST = fgpw[2]
        If cbgpw[1] = 0
          ScaleTicket4[16] = supcbgpw[1] ! Supplier Chargeback GST
          Items.[i].CbkGST = supcbgpw[1]
        Else 
          ScaleTicket4[16] = cbgpw[1] ! Chargeback GST
          Items.[i].CbkGST = cbgpw[1]
        End If 
        If cbgpw[2] = 0
          ScaleTicket4[17] = supcbgpw[2] ! Supplier Chargeback PST
          Items.[i].CbkPST = supcbgpw[2]
        Else 
          ScaleTicket4[17] = cbgpw[2] ! Chargeback PST
          Items.[i].CbkPST = cbgpw[2]
        End If 
      End If 
      If MultiItemTicket$ = "Y" And MultiFreightError$ = "er"
        ScaleTicket$[42,43] = "er"
      Else 
        ScaleTicket$[42,43] = SAISpaceFill$(frtrte$[11,12],2)
      End If 
      If Trim$(ShipmentNo$) Let ScaleTicket$[56,61] = SAISpaceFill$(ShipmentNo$,6)
      Items.[i].ShipmentNo$ = ShipmentNo$
      If MultiItemTicket$ <> "Y" Let TicketHeader.ShipmentNo$ = ShipmentNo$ ! Replace header shipment # on single item ticket.
      If ScaleTicket$[42,43] = "er" Let ScaleTicket$[72,72] = "D" ! Deferred on Freight error
    Else If Dirt$ = "Y" And Trim$(TicketHeader.CarrierNo$) <> "" ! Dirt with Carrier
      Call GetFreightRate(Items.[1].YardCode$,ScaleCodes$[53,53],status)
      If status = 1 Exit Sub 
      If ScaleTicket4[3]
        ans = SAITouchYesNo("Should the freight amount be paid to the Freight Carrier?")
        If ans
          ans = SAITouchYesNo("Should freight amount be deducted from the total purchase amount?")
          If ans
            ScaleTicket$[46,46] = "X" ! Pay freight and deduct
          Else 
            ScaleTicket$[46,46] = "Y" ! Pay freight don't deduct
          End If 
        End If 
      End If 
    Else If FreightOption$
      ScaleTicket4[2] = FreightRate
      If TotalWeight
        ScaleTicket4[3] = Round(ScaleTicket3[5] / TotalWeight * TotalFreight,2)
        If ScaleTicket$[42,43] = "HR"
          If TicketHeader.FreightHrs Let ScaleTicket4[2] = Round(ScaleTicket4[3] / TicketHeader.FreightHrs,2)
          ScaleTicket3[13] = TicketHeader.FreightHrs
        Else 
          If ConvertableFrtUM = 0 Let ScaleTicket4[2] = ScaleTicket4[3] ! Set rate=Ext
        End If 
        SubTotalFreight = SubTotalFreight + ScaleTicket4[3]
        If i = ItemCount ! Last item, account for any remainder
          If SubTotalFreight <> TotalFreight
            ScaleTicket4[3] = ScaleTicket4[3] + (TotalFreight - SubTotalFreight)
            ScaleTicket4[2] = ScaleTicket4[3] ! Set rate=Ext
            ScaleTicket$[42,43] = "* " ! Set U/M to *
          End If 
        End If 
      Else 
        If ScaleTicket$[42,43] = "HR"
          ScaleTicket4[3] = Round(TicketHeader.FreightHrs * FreightRate,2)
          ScaleTicket3[13] = TicketHeader.FreightHrs
        Else 
          Call SAICalcPriceExt(ch_110Aro,ScaleTicket3[5],gbl_um$,ScaleTicket4[2],ScaleTicket$[42,43],2,ScaleTicket4[3],stat)
        End If 
      End If 
      If ScrapSRecord$[78,78] = "Y" ! GST Calculations
        Call GetTaxRates(CarrierTaxFlag$,CarrierTaxJurisdiction$,TaxRates[],status)
        If status = 0
          TaxableAmt = ScaleTicket4[3]
          Select Case CarrierTaxFlag$
            Case "G","H" ! GST/HST
              ScaleTicket4[14] = Round(TaxableAmt * TaxRates[1],2)
            Case "P" ! PST
              ScaleTicket4[15] = Round(TaxableAmt * TaxRates[2],2)
            Case "B" ! Both
              ScaleTicket4[14] = Round(TaxableAmt * TaxRates[1],2)
              ScaleTicket4[15] = Round(TaxableAmt * TaxRates[2],2)
            Case "W" ! Withholding
              ScaleTicket4[14] = Round(TaxableAmt * TaxRates[3],2)
            Case "I" ! Imputed
              ! Do nothing for Imputed here
          End Select 
        End If 
      End If 
    End If 
    If Dirt$ = "Y" ! If dirt ticket negate weights and ext price
      For n = 0 To 6
        ScaleTicket3[n] = - (ScaleTicket3[n])
      Next n
      ScaleTicket4[7] = - (ScaleTicket4[7])
      ScaleTicket4[8] = - (ScaleTicket4[8])
      k$ = "U" + ScaleTicket$[44,45] ! Price UM
      Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
      If stat = 0 And ScrapCode$[133,133] <> "*" Let ScaleTicket4[1] = - (ScaleTicket4[1])
      k$ = "U" + ScaleTicket$[42,43] ! Freight UM
      Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
      If stat = 0 And ScrapCode$[133,133] <> "*" Let ScaleTicket4[2] = - (ScaleTicket4[2])
    End If 
    ! CA Redemption only
    If ScrapSRecord$[69,70] = "CA"
      ScaleTicket3[7] = Items.[i].RedRate
      ScaleTicket4[9] = Items.[i].RedExt ! Refund Amt
      ScaleTicket4[1] = ScaleTicket4[1] + ScaleTicket4[9] ! Add Refund Amt to Ext Price
      ScaleTicket4[7] = Items.[i].RedCount
      ScaleTicket4[8] = Items.[i].RedNetWt
    End If 
    If ScrapSRecord$[78,78] = "Y" ! GST Calculations
      ScaleTicket$[233,233] = SAISpaceFill$(Supplier.TaxableFlag$,1)
      ScaleTicket$[234,234] = SAISpaceFill$(Supplier.TaxJurisdiction$,1)
      If ScaleTicket$[233,233] = "I" ! Tax Flag = Imputed
        TaxableAmt = ScaleTicket4[1] ! Ext. Price
        ScaleTicket4[1] = Round(ScaleTicket4[1] / (1 + TaxRates[4]),2)
        ScaleTicket4[11] = TaxableAmt - ScaleTicket4[1]
      Else 
        ScaleTicket4[11] = Items.[i].MatGST
        ScaleTicket4[12] = Items.[i].MatPST
        If z$[644,646] = "255" Or z$[644,646] = "355" ! Sims AUS/NZ
          If ScaleTicket$[233,233] = " " And Items.[i].MatGST
            ScaleTicket$[233,234] = "GG" ! Tax-Flag and Tax-Juris
          End If 
        End If 
      End If 
    End If 
    If TicketHeader.PaymentCode$
      ScaleTicket4[5] = ScaleTicket4[1] ! Amount Paid = Extended Price
      If RoundAmt
        If Items.[i].MatExt <> 0 ! Add Rounding to Amt Paid of first non-zero material
          ScaleTicket4[10] = RoundAmt ! Put round amount in discount field
          ScaleTicket4[5] = ScaleTicket4[5] + RoundAmt
          RoundAmt = 0
        End If 
      End If 
      Items.[i].AmtPaid = ScaleTicket4[5] + ScaleTicket4[11] + ScaleTicket4[12] ! Put Amt Paid into structure to use for 8331 record
    End If 
    ScaleTicket4[13] = ExchangeRate
    Call SAIAddRecord(ch_8330,recdef_8330.,ScaleTicket$,ScaleTicket3[],ScaleTicket4[],status,errmess$)
    If status
      Call SAITouchError("Error writing " + Items.[i].MaterialCode$ + " record to 8330 file!\15\" + errmess$)
      Exit Sub 
    End If 
    If TicketHeader.PaymentCode$ ! Delete directory 4 if paid
      k$ = SAIGetKey$(4,recdef_8330.,ScaleTicket$)
      Search #ch_8330,5,4;k$,r,e
    End If 
    If FreightOption$ = "C" Or FreightOption$ = "D" And Items.[i].MaterialCode$ <> "*MIX" ! Build C Ticket
      ScaleCTicket$ = ScaleTicket$
      ScaleCTicket$[1,1] = "C"
      ScaleCTicket$[7,12] = ScaleTicket$[124,129] ! Supplier = Carrier
      ScaleCTicket$[124,129] = Rep$(" ",6) ! Blank Carrier
      ScaleCTicket$[46,46] = " " ! Blank pay freight flag
      ScaleCTicket$[47,47] = "C" ! Carrier record flag
      ScaleCTicket$[72,84] = Rep$(" ",13) ! Blank Payment info
      ScaleCTicket$[121,121] = " " ! Blank Wght Adj
      If ScrapSRecord$[78,78] = "Y" ! GST Tax
        ScaleCTicket$[233,233] = SAISpaceFill$(CarrierTaxFlag$,1)
        ScaleCTicket$[234,234] = SAISpaceFill$(CarrierTaxJurisdiction$,1)
      End If 
      For n = 0 To 2
        ScaleTicket3[n] = 0
      Next n
      ! Save only 3,4,5
      For n = 6 To 20
        ScaleTicket3[n] = 0
      Next n
      ScaleTicket4[0] = 0
      ScaleTicket4[1] = 0
      ScaleTicket4[5] = 0
      For n = 7 To 13
        ScaleTicket4[n] = 0
      Next n
      If FreightRate = 0 And ConvertableFrtUM Let ScaleCTicket$[72,72] = "D" ! Deferred
      Call SAIAddRecord(ch_8330,recdef_8330.,ScaleCTicket$,ScaleTicket3[],ScaleTicket4[],status,errmess$)
      If status
        Call SAITouchError("Error writing Carrier Ticket, " + ScaleCTicket$[1,6] + ", to 8330 file!\15\" + errmess$)
        Exit Sub 
      End If 
    End If 
  Next i
  ! Check for *M ticket type for Mixed Freight calculation
  If FullPONo$ And TicketHeader.CarrierNo$ And (MultiItemTicket$ = "Y" Or Items.[1].MaterialCode$ = "*MIX")
    k$ = "C" + SAISpaceFill$(TicketHeader.CarrierNo$,6)
    Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
    If stat = 0 And ScrapCode$[118,118] <> "Y"
      If MultiItemTicket$ = "Y"
        k$ = ScaleTicket$[1,12] + SAISpaceFill$(MultPrice.MaterialCode$,8)
      Else 
        k$ = ScaleTicket$[1,12] + SAISpaceFill$(Items.[1].MaterialCode$,8)
      End If 
      Call SAIGetRecord(ch_8330ro,recdef_8330.,k$,1,"Y","U",r,ScaleTicket$,ScaleTicket3[],ScaleTicket4[],stat,errmess$)
      If stat = 0
        Call "sub.mixfrt_calc",ScaleTicket$,stat,z$,errmess$
        If stat And z$[644,646] = "323" ! SA
          Call SAITouchWarning(errmess$,"Freight Error")
        End If 
      End If 
    End If 
  End If 
  For i = 1 To LevyItemCount
    Clear ScaleTicket3[],ScaleTicket4[]
    ScaleTicket$[13,20] = SAISpaceFill$(LevyItems.[i].LevyMaterialCode$,8)
    If Trim$(ScaleTicket$[42,43]) And ScaleTicket$[42,43] <> "* " Let ScaleTicket$[42,43] = "* " ! Set Frt U/M to *
    ScaleTicket$[44,45] = SAISpaceFill$(LevyItems.[i].PriceUM$,2)
    ScaleTicket$[56,61] = SAISpaceFill$(TicketHeader.ShipmentNo$,6) ! Contract Shipment# = Ticket #
    ScaleTicket$[62,69] = SAISpaceFill$(LevyItems.[i].InventoryCode$,8)
    ScaleTicket$[70,70] = SAISpaceFill$(LevyItems.[i].YardCode$,1)
    ScaleTicket$[121,121] = " " ! Clear Adj Code
    ScaleTicket$[132,133] = "MM" ! Gross and Tare Man Wt flags
    k$ = "Y" + ScaleTicket$[70,70] + Branch$
    Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
    If stat
      k$ = "Y" + ScaleTicket$[70,70]
      Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
    End If 
    If stat
      ScaleTicket$[165,166] = Branch$
    Else 
      ScaleTicket$[165,166] = ScrapCode$[3,4]
    End If 
    If LevyItems.[i].MatGST Let ScaleTicket$[233,234] = "GG" ! Tax-Flag and Tax-Juris
    ScaleTicket4[0] = LevyItems.[i].Price
    ScaleTicket4[1] = LevyItems.[i].MatExt
    ScaleTicket4[8] = LevyItems.[i].NetWt ! Plug NetWt into Redemption Wt
    ScaleTicket4[11] = LevyItems.[i].MatGST
    ScaleTicket4[13] = ExchangeRate
    Call SAIAddRecord(ch_8330,recdef_8330.,ScaleTicket$,ScaleTicket3[],ScaleTicket4[],status,errmess$)
    If status
      Call SAITouchError("Error writing " + LevyItems.[i].LevyMaterialCode$ + " record to 8330 file!\15\" + errmess$)
      Exit Sub 
    End If 
    If TicketHeader.PaymentCode$ ! Delete directory 4 if paid
      k$ = SAIGetKey$(4,recdef_8330.,ScaleTicket$)
      Search #ch_8330,5,4;k$,r,e
    End If 
    If TicketHeader.TktType$ = "R" ! Add levy items to retail ticket detail
      Clear RItems.[RetItemCount + i]
      RItems.[RetItemCount + i].TicketNo$ = RTicketHdr.TicketNo$
      RItems.[RetItemCount + i].ItemNo = RetItemCount + i
      RItems.[RetItemCount + i].Branch$ = RTicketHdr.Branch$
      RItems.[RetItemCount + i].MaterialCode$ = LevyItems.[i].LevyMaterialCode$
      RItems.[RetItemCount + i].MaterialDesc$ = LevyItems.[i].LevyMaterialDesc$
      RItems.[RetItemCount + i].InventoryCode$ = LevyItems.[i].InventoryCode$
      RItems.[RetItemCount + i].YardCode$ = LevyItems.[i].YardCode$
      RItems.[RetItemCount + i].Price_UM$ = LevyItems.[i].PriceUM$
      RItems.[RetItemCount + i].Price = LevyItems.[i].Price
      RItems.[RetItemCount + i].RedNetWt = LevyItems.[i].NetWt
      RItems.[RetItemCount + i].MatExt = LevyItems.[i].MatExt
      RItems.[RetItemCount + i].MatGST = LevyItems.[i].MatGST
      Try 
        Search #ch_db;"INSERT INTO Retail_Ticket_Dtl (" + SQLN$(RItems.[RetItemCount + i]) + ") VALUES (" + SQLV$(RItems.[RetItemCount + i]) + ")"
      Else 
        Call SAITouchError("Error creating Levy entry in Retail_Ticket_Dtl table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
      End Try 
    End If 
  Next i
  ! Check to see if we need to build a "C" ticket
  If Dirt$ = "Y" And ScaleTicket$[46,46] <> " "
    k$ = "C" + ScaleTicket$[124,129]
    Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
    If stat = 0 And ScrapCode$[119,119] <> "Y" ! Check if not our truck
      ScaleTicket$[1,1] = "C"
      ScaleTicket$[7,12] = ScaleTicket$[124,129] ! Supplier = Carrier
      ScaleTicket$[124,129] = Rep$(" ",6) ! Blank Carrier
      ScaleTicket$[46,46] = " " ! Blank pay freight flag
      ScaleTicket$[47,47] = "C" ! Carrier record flag
      ScaleTicket$[72,84] = Rep$(" ",13) ! Blank Payment info
      ScaleTicket$[121,121] = " " ! Blank Wght Adj
      For n = 0 To 2
        ScaleTicket3[n] = 0
      Next n
      ! Save only 3,4,5
      For n = 6 To 20
        ScaleTicket3[n] = 0
      Next n
      ScaleTicket4[0] = 0
      ScaleTicket4[1] = 0
      ScaleTicket4[5] = 0
      For n = 7 To 15
        ScaleTicket4[n] = 0
      Next n
      If ScrapSRecord$[78,78] = "Y" ! GST Calculations
        TaxableAmt = ScaleTicket4[3] + ScaleTicket4[4] ! Freight + Hauling
        Select Case ScaleTicket$[233,233] ! Tax Flag
          Case "G","H" ! GST/HST
            ScaleTicket4[14] = Round(TaxableAmt * TaxRates[1],2)
          Case "P" ! PST
            ScaleTicket4[15] = Round(TaxableAmt * TaxRates[2],2)
          Case "B" ! Both
            ScaleTicket4[14] = Round(TaxableAmt * TaxRates[1],2)
            ScaleTicket4[15] = Round(TaxableAmt * TaxRates[2],2)
        End Select 
      End If 
      Call SAIAddRecord(ch_8330,recdef_8330.,ScaleTicket$,ScaleTicket3[],ScaleTicket4[],status,errmess$)
      If status
        k$ = TicketHeader.TicketNo$ + TicketHeader.EntityNo$ + ScaleTicket$[13,20]
        Call SAIGetRecord(ch_8330,recdef_8330.,k$,1,"F","L",r,ScaleTicket$,ScaleTicket3[],ScaleTicket4[],stat,errmess$)
        If stat = 0
          ScaleTicket$[46,46] = " "
          Call SAIWriteRecord(ch_8330,recdef_8330.,"U",r,ScaleTicket$,ScaleTicket3[],ScaleTicket4[],stat,errmess$)
        End If 
        Call SAITouchWarning("Carrier Ticket already exists, freight will not be paid to Carrier.")
      End If 
    End If 
  End If 
  ! 8326 Header Record
Define8326Records: !
  ScaleTicAudit$ = " ",ScaleTicAudit$
  Clear ScaleTicAudit[]
  ScaleTicAudit$[1,11] = SAISpaceFill$(TicketHeader.InYardID$,11)
  ScaleTicAudit$[12,17] = SAISpaceFill$(SAIConvertDate$(TicketHeader.ShipmentDate#),6)
  ScaleTicAudit$[18,19] = "00" ! Sequence
  ScaleTicAudit$[20,25] = SAISpaceFill$(TicketHeader.TicketNo$,6)
  ScaleTicAudit$[26,31] = SAISpaceFill$(TicketHeader.EntityNo$,6)
  ! 32,39 - Material Code
  ScaleTicAudit$[40,40] = SAISpaceFill$(TicketHeader.VehType$,1)
  ScaleTicAudit$[44,44] = SAISpaceFill$(Supplier.HaveTaxID$,1)
  ! 45,59 - Yard Code, Orig Mat, Gross & Tare WM
  ScaleTicAudit$[60,65] = SAISpaceFill$(TicketHeader.ShipmentNo$,6)
  If TicketHeader.Noticed Let ScaleTicAudit$[66,66] = "Y"
  If MultiItemTicket$ = "Y" Let ScaleTicAudit$[67,67] = "Y"
  ScaleTicAudit$[68,68] = SAISpaceFill$(Supplier.TaxJurisdiction$,1)
  ! 69,119 - Gross & Tare Date & Time, Mat Change, & Mat Desc.
  ScaleTicAudit$[120,121] = SAISpaceFill$(Branch$,2)
  ! 122,126 - Gross & Tare Scale, Price Changed, Price U/M
  ScaleTicAudit$[129,129] = SAISpaceFill$(TicketHeader.SrcYard$,1)
  ScaleTicAudit$[130,137] = SAISpaceFill$(TicketHeader.SrcInvCode$,8)
  ScaleTicAudit$[138,139] = SAISpaceFill$(TicketHeader.SrcBranch$,2)
  ! 140,140 - Adj Code
  ScaleTicAudit$[141,141] = "Y" ! Update Veh Tracking
  ScaleTicAudit$[142,152] = SAISpaceFill$(TicketHeader.VehNo$,11)
  ScaleTicAudit$[153,153] = SAISpaceFill$(TicketHeader.TktType$,1)
  If TicketHeader.OrderNo$
    If TicketHeader.OrderNo$ = "UNKNOWN"
      ScaleTicAudit$[154,163] = SAISpaceFill$(TicketHeader.OrderNo$,10)
    Else 
      ScaleTicAudit$[154,163] = SAIFill$(TicketHeader.OrderNo$,"R"," ",10)
      ScaleTicAudit$[164,165] = SAISpaceFill$(TicketHeader.OrderLine$,2)
    End If 
  End If 
  ScaleTicAudit$[166,171] = SAISpaceFill$(TicketHeader.CarrierNo$,6)
  ! 172,183 - Material Req
  ! 184,186 - Stock Pile
  ! 187,187 - G/T Only
  ! 188,188 - VEN-INV-ENT
  ! 189,189 - Skip Std Cost
  ScaleTicAudit$[190,195] = SAISpaceFill$(TicketHeader.SrcTicketNo$,6)
  ! 196,196 - Man Reason
  ScaleTicAudit$[197,198] = SAISpaceFill$(TicketHeader.VehSize$,2)
  ScaleTicAudit$[199,204] = SAISpaceFill$(TicketHeader.TripTicketNo$,6)
  ! 205 - 242 Custom Fields
  If Mill$ = "Y"
    ScaleTicAudit$[205,214] = SAISpaceFill$(TicketHeader.SuppShipNo$,10)
  Else If z$[644,646] = "151" And Branch$ = "03" And TicketHeader.EntityNo$ = "COLA01"
    ScaleTicAudit$[205,219] = SAISpaceFill$(TicketHeader.LAInfo_DriversName$,15)
    ScaleTicAudit$[220,221] = SAISpaceFill$(TicketHeader.LAInfo_District$,2)
    ScaleTicAudit$[222,226] = SAISpaceFill$(TicketHeader.LAInfo_Route$,5)
    ScaleTicAudit$[227,227] = SAISpaceFill$(TicketHeader.LAInfo_Section$,1)
  Else 
    ScaleTicAudit$[205,214] = SAISpaceFill$(TicketHeader.SuppInvNo$,10)
  End If 
  ! End of custom fields
  If FullPONo$ Let TicketHeader.ShipFromTo$ = "" ! Clear ShipFrom if contract shipment
  ScaleTicAudit$[243,246] = SAISpaceFill$(TicketHeader.ShipFromTo$,4)
  ScaleTicAudit$[247,247] = YesNoFlag$(TicketHeader.Photo) ! Jpegger flag
  ScaleTicAudit$[248,249] = SAISpaceFill$(TicketHeader.CurbSideCity$,2)
  ScaleTicAudit[14] = TicketHeader.AxleCount
  If MultiItemTicket$ = "Y" ! *MULT
    ScaleTicAudit$[32,39] = SAISpaceFill$(MultPrice.MaterialCode$,8)
    ScaleTicAudit$[45,45] = SAISpaceFill$(MultPrice.YardCode$,1)
    ScaleTicAudit$[46,53] = Rep$(" ",8) ! Orig Mat
    ScaleTicAudit$[54,56] = SAISpaceFill$(Items.[1].GrossWtWM$,3)
    ScaleTicAudit$[57,59] = SAISpaceFill$(Items.[ItemCount].TareWtWM$,3)
    ScaleTicAudit$[60,65] = SAISpaceFill$(TicketHeader.ShipmentNo$,6)
    ScaleTicAudit$[67,67] = "Y" ! Multi Load
    ScaleTicAudit$[70,75] = SAISpaceFill$(SAIConvertDate$(Items.[1].GrossWtTime#),6)
    ScaleTicAudit$[76,81] = SAISpaceFill$(SAIConvertDate$(Items.[ItemCount].TareWtTime#),6)
    ScaleTicAudit$[82,85] = SAISafeDateUsing$(Items.[1].GrossWtTime#,"HHNN")
    ScaleTicAudit$[86,89] = SAISafeDateUsing$(Items.[ItemCount].TareWtTime#,"HHNN")
    ScaleTicAudit$[92,119] = SAISpaceFill$(MultPrice.MaterialDesc$,28)
    ScaleTicAudit$[122,122] = SAISpaceFill$(Items.[1].GrossWtScale$,1)
    ScaleTicAudit$[123,123] = SAISpaceFill$(Items.[ItemCount].TareWtScale$,1)
    ScaleTicAudit$[125,126] = "* " ! UM
    !  ScaleTicAudit$[140,140]=" " ! Adjustment Code
    ScaleTicAudit[0] = Items.[1].GrossWt
    ScaleTicAudit[1] = Items.[ItemCount].TareWt
    ScaleTicAudit[2] = ScaleTicAudit[0] - ScaleTicAudit[1] ! Net
    ScaleTicAudit[3] = 0 ! Adj
    ScaleTicAudit[6] = 0 ! Price
    ScaleTicAudit[13] = TicketHeader.FreightHrs
    ScaleTicAudit[15] = SAISafeDateUsing$(Items.[1].GrossWtTime#,"HHNNSS")
    ScaleTicAudit[16] = SAISafeDateUsing$(Items.[ItemCount].TareWtTime#,"HHNNSS")
    Call Write8326(status)
    If status
      Call SAITouchError("Error writing " + MultPrice.MaterialCode$ + " record to 8326 file!\15\" + errmess$)
      Exit Sub 
    End If 
  Else If LevyItemCount And TicketHeader.TktType$ <> "R" ! Don't need to create a *MIX record if retail linked ticket
    TicketDetail.MaterialCode$ = "*MIX" ! Create a *MIX header record
    Call GetMaterialPrice(TicketDetail.MaterialCode$,status)
    If status = 0
      ScaleTicAudit$[32,39] = SAISpaceFill$(Material.MaterialCode$,8)
      ScaleTicAudit$[45,45] = SAISpaceFill$(Material.YardCode$,1)
      ScaleTicAudit$[46,53] = Rep$(" ",8) ! Orig Mat
      ScaleTicAudit$[54,56] = SAISpaceFill$(WeighMaster$,3)
      ScaleTicAudit$[57,59] = SAISpaceFill$(WeighMaster$,3)
      ScaleTicAudit$[60,65] = SAISpaceFill$(TicketHeader.ShipmentNo$,6)
      ScaleTicAudit$[70,75] = SAISpaceFill$(SAIConvertDate$(Items.[1].GrossWtTime#),6)
      ScaleTicAudit$[76,81] = SAISpaceFill$(SAIConvertDate$(Items.[ItemCount].TareWtTime#),6)
      ScaleTicAudit$[82,85] = SAISafeDateUsing$(Items.[1].GrossWtTime#,"HHNN")
      ScaleTicAudit$[86,89] = SAISafeDateUsing$(Items.[ItemCount].TareWtTime#,"HHNN")
      ScaleTicAudit$[92,119] = SAISpaceFill$(Material.MaterialDesc$,28)
      ScaleTicAudit$[122,123] = "  " ! Gross & Tare Scale
      ScaleTicAudit$[125,126] = SAISpaceFill$(Material.PriceUM$,2)
      ScaleTicAudit$[140,140] = " " ! Adjustment Code
      ScaleTicAudit$[196,196] = " " ! Man Reason Code
      ScaleTicAudit[15] = SAISafeDateUsing$(Items.[1].GrossWtTime#,"HHNNSS")
      ScaleTicAudit[16] = SAISafeDateUsing$(Items.[ItemCount].TareWtTime#,"HHNNSS")
      Call Write8326(status)
      If status
        Call SAITouchError("Error writing *MIX record to 8326 file!\15\" + errmess$)
        Exit Sub 
      End If 
    End If 
  End If 
  ! 8326 Detail records
  For i = 1 To ItemCount
    Clear ScaleTicAudit[]
    If ItemCount > 1
      x = ScaleTicAudit$[18,19]
      x = x + 1
      ScaleTicAudit$[18,19] = x Using "&&"
    End If 
    Call Populate8326Item(i)
    If Trim$(Items.[i].ShipmentNo$)
      ScaleTicAudit$[60,65] = SAISpaceFill$(Items.[i].ShipmentNo$,6)
    Else 
      ScaleTicAudit$[60,65] = SAISpaceFill$(TicketHeader.TicketNo$,6)
    End If 
    If MultiItemTicket$ = "Y"
      ScaleTicAudit$[154,163] = SAIFill$(TicketHeader.OrderNo$,"R"," ",10)
      ScaleTicAudit$[164,165] = SAISpaceFill$(Items.[i].DetailOrderLine$,2)
    End If 
    If i = 1 And MultiItemTicket$ <> "Y" Let ScaleTicAudit[13] = TicketHeader.FreightHrs ! Only on single item ticket
    ! CA Redemption only
    If ScrapSRecord$[69,70] = "CA"
      ScaleTicAudit[7] = Items.[i].RedCount
      ScaleTicAudit[8] = Items.[i].RedNetWt
      ScaleTicAudit[9] = Items.[i].RedExt
    End If 
    Call Write8326(status)
    If status
      Call SAITouchError("Error writing " + Items.[i].MaterialCode$ + " record to 8326 file!\15\" + errmess$)
      Exit Sub 
    End If 
  Next i
  For i = 1 To LevyItemCount
    Clear ScaleTicAudit[]
    ScaleTicAudit$[32,39] = SAISpaceFill$(LevyItems.[i].LevyMaterialCode$,8)
    ScaleTicAudit$[45,45] = SAISpaceFill$(LevyItems.[i].YardCode$,1)
    ScaleTicAudit$[46,53] = Rep$(" ",8) ! Orig Mat
    ScaleTicAudit$[54,56] = SAISpaceFill$(WeighMaster$,3)
    ScaleTicAudit$[57,59] = SAISpaceFill$(WeighMaster$,3)
    ScaleTicAudit$[60,65] = SAISpaceFill$(TicketHeader.ShipmentNo$,6)
    ScaleTicAudit$[70,89] = Rep$(" ",20) ! Gross & Tare Date/Time
    ScaleTicAudit$[90,91] = "  " ! Mat Change flags
    ScaleTicAudit$[92,119] = SAISpaceFill$(LevyItems.[i].LevyMaterialDesc$,28)
    ScaleTicAudit$[122,124] = "   " ! Scale and price change Flags
    ScaleTicAudit$[125,126] = SAISpaceFill$(LevyItems.[i].PriceUM$,2)
    ScaleTicAudit$[140,140] = " " ! Adj Code
    ScaleTicAudit$[196,196] = " " ! Man Reason Code
    ScaleTicAudit[6] = LevyItems.[i].Price
    ScaleTicAudit[8] = LevyItems.[i].NetWt ! Plug NetWt into Redemption Wt
    Call Write8326(status)
    If status
      Call SAITouchError("Error writing " + LevyItems.[i].LevyMaterialCode$ + " record to 8326 file!\15\" + errmess$)
      Exit Sub 
    End If 
  Next i
  ! Write Ticket Comment if one exists
  If TicketHeader.TktComment$
    GblCmt$ = " ",GblCmt$
    GblCmt$[1,1] = "V"
    GblCmt$[2,7] = SAISpaceFill$(TicketHeader.EntityNo$,6)
    If TicketHeader.OrderNo$ And TicketHeader.OrderNo$ <> "UNKNOWN"
      GblCmt$[8,17] = SAIFill$(TicketHeader.OrderNo$,"R"," ",10)
      GblCmt$[18,19] = SAISpaceFill$(TicketHeader.OrderLine$,2)
    End If 
    GblCmt$[20,25] = SAISpaceFill$(TicketHeader.ShipmentNo$,6)
    GblCmt$[26,30] = "SHP01"
    GblCmt$[31,80] = SAISpaceFill$(TicketHeader.TktComment$,50)
    ktemp$ = GblCmt$[1,30]
    Search #ch_1115,2,1;ktemp$,r,e
    If e
      Call SAIAddRecord(ch_1115,recdef_1115.,GblCmt$,stat,errmess$)
      If stat Call SAITouchError("Error adding ticket comment.\15\" + errmess$)
    Else 
      Call SAIReadRecord(ch_1115,recdef_1115.,"Y","L",r,GblCmtTmp$,stat,errmess$)
      If stat = 0
        Call SAIWriteRecord(ch_1115,recdef_1115.,"U",r,GblCmt$,stat,errmess$)
        If stat Call SAITouchError("Error updating the comments file.\15\" + errmess$)
      End If 
    End If 
  End If 
  ! SIMS AUS only - write out Supplier Inv. No. to comment file
  If z$[644,646] = "255" Or z$[644,646] = "355"
    If Trim$(TicketHeader.SuppInvNo$)
      GblCmtTmp$ = " ",GblCmtTmp$
      GblCmtTmp$[1,1] = "V"
      GblCmtTmp$[2,7] = SAISpaceFill$(TicketHeader.EntityNo$,6)
      If TicketHeader.OrderNo$ And TicketHeader.OrderNo$ <> "UNKNOWN"
        GblCmtTmp$[8,17] = SAIFill$(TicketHeader.OrderNo$,"R"," ",10)
        GblCmtTmp$[18,19] = SAISpaceFill$(TicketHeader.OrderLine$,2)
      End If 
      GblCmtTmp$[20,25] = SAISpaceFill$(TicketHeader.ShipmentNo$,6)
      GblCmtTmp$[26,30] = "SHP99"
      GblCmtTmp$[31,40] = SAISpaceFill$(TicketHeader.SuppInvNo$,10)
      Call SAIAddRecord(ch_1115,recdef_1115.,GblCmtTmp$,stat,errmess$)
      If stat Call SAITouchError("Error adding Supplier Invoice No. to comment file.\15\" + errmess$)
    End If 
  End If 
  ! 8331 Payment records and Payment Register
  If TicketHeader.PaymentCode$
    ScaleCheckReg$ = " ",ScaleCheckReg$
    Clear ScaleCheckReg[]
    ScaleCheckReg$[1,1] = TicketHeader.PaymentCode$ ! C=Check, R=Receipt, etc
    ScaleCheckReg$[2,7] = SAISpaceFill$(TicketHeader.PaymentNo$,6)
    ScaleCheckReg$[8,13] = SAISpaceFill$(TicketHeader.EntityNo$,6)
    ScaleCheckReg$[22,27] = SAISpaceFill$(TicketHeader.TicketNo$,6)
    ScaleCheckReg$[32,33] = SAISpaceFill$(Branch$,2)
    ScaleCheckReg$[34,39] = SAISpaceFill$(RunDate$,6)
    ScaleCheckReg$[40,41] = SAISpaceFill$(TicketHeader.BankCode$,2)
    ScaleCheckReg$[46,75] = SAISpaceFill$(TicketHeader.Name$,30)
    If MultiItemTicket$ = "Y" Or (LevyItemCount And TicketHeader.TktType$ <> "R") ! *MULT or *MIX
      If MultiItemTicket$ = "Y"
        ScaleCheckReg$[14,21] = SAISpaceFill$(MultPrice.MaterialCode$,8)
      Else 
        ScaleCheckReg$[14,21] = "*MIX    "
      End If 
      Call SAIAddRecord(ch_8331,recdef_8331.,ScaleCheckReg$,ScaleCheckReg[],status,errmess$)
      If status
        Call SAITouchError("Error writing " + ScaleCheckReg$[1,27] + " record to 8331 file!\15\" + errmess$)
        Exit Sub 
      End If 
    End If 
    For i = 1 To ItemCount
      ScaleCheckReg$[14,21] = SAISpaceFill$(Items.[i].MaterialCode$,8)
      ScaleCheckReg[0] = Items.[i].AmtPaid
      Call SAIAddRecord(ch_8331,recdef_8331.,ScaleCheckReg$,ScaleCheckReg[],status,errmess$)
      If status
        Call SAITouchError("Error writing " + ScaleCheckReg$[1,27] + " record to 8331 file!\15\" + errmess$)
        Exit Sub 
      End If 
    Next i
    For i = 1 To LevyItemCount
      ScaleCheckReg$[14,21] = SAISpaceFill$(LevyItems.[i].LevyMaterialCode$,8)
      ScaleCheckReg[0] = LevyItems.[i].MatExt + LevyItems.[i].MatGST
      Call SAIAddRecord(ch_8331,recdef_8331.,ScaleCheckReg$,ScaleCheckReg[],status,errmess$)
      If status
        Call SAITouchError("Error writing " + ScaleCheckReg$[1,27] + " record to 8331 file!\15\" + errmess$)
        Exit Sub 
      End If 
    Next i
    ! Payment Register
    Clear PaymentRegisterHdr.,PaymentRegisterDtl.
    PaymentRegisterHdr.BankCode$ = Trim$(TicketHeader.BankCode$)
    PaymentRegisterHdr.PaymentNo$ = Trim$(TicketHeader.PaymentNo$)
    PaymentRegisterHdr.Branch$ = Branch$
    PaymentRegisterHdr.PaymentType$ = PaymentMethods$[PayType]
    If PaymentRegisterHdr.PaymentType$ = "CHECK"
      If PrintBankCode$ = "Y" Let PaymentRegisterHdr.PrintBankCode = 1
    Else If PaymentRegisterHdr.PaymentType$ = "CDU"
      PaymentRegisterHdr.CDUReceiptNo$ = TicketHeader.CDUReceiptNo$
    End If 
    PaymentRegisterHdr.CashierNo$ = DefCashier Using "#"
    PaymentRegisterHdr.PaymentDate# = RunDate#
    PaymentRegisterHdr.CreateDateTime# = Tim#(0)
    PaymentRegisterHdr.SupplierNo$ = TicketHeader.EntityNo$
    PaymentRegisterHdr.Payee$ = Trim$(TicketHeader.Name$)
    PaymentRegisterHdr.IDNumber$ = Trim$(TicketHeader.IDNumber$)
    If PaymentRegisterHdr.PaymentType$ = "CHECK" And LaserCheckHdr.Payee$
      PaymentRegisterHdr.Payee$ = LaserCheckHdr.Payee$ ! In case alternate payee used
    End If 
    PaymentRegisterHdr.Amount = TicketTotals.TotalPaid
    PaymentRegisterHdr.ProgramNo$ = z$[58,61]
    count = 0
    Try 
      Search #ch_db;"INSERT INTO Payment_Register_Hdr (" + SQLN$(PaymentRegisterHdr.) + ") VALUES (" + SQLV$(PaymentRegisterHdr.) + ")"
      PaymentRegisterDtl.BankCode$ = PaymentRegisterHdr.BankCode$
      PaymentRegisterDtl.PaymentNo$ = PaymentRegisterHdr.PaymentNo$
      PaymentRegisterDtl.TicketNo$ = TicketHeader.TicketNo$
      PaymentRegisterDtl.ShipmentDate# = TicketHeader.ShipmentDate#
      PaymentRegisterDtl.SeqNo = 0
      If TicketHeader.ShipmentNo$ And TicketHeader.ShipmentNo$ <> TicketHeader.TicketNo$ Let PaymentRegisterDtl.ShipmentNo$ = TicketHeader.ShipmentNo$
      If MultiItemTicket$ = "Y" Or (LevyItemCount And TicketHeader.TktType$ <> "R") ! *MULT or *MIX
        PaymentRegisterDtl.SeqNo = PaymentRegisterDtl.SeqNo + 1
        If MultiItemTicket$ = "Y"
          PaymentRegisterDtl.MaterialCode$ = MultPrice.MaterialCode$
        Else 
          PaymentRegisterDtl.MaterialCode$ = "*MIX"
        End If 
        Try 
          Search #ch_db;"INSERT INTO Payment_Register_Dtl (" + SQLN$(PaymentRegisterDtl.) + ") VALUES (" + SQLV$(PaymentRegisterDtl.) + ")"
        Else 
          errmess$ = "Error creating entry in Payment_Register_Dtl table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10))
          Call WriteLogFile(errmess$)
          Call SAITouchError(errmess$)
        End Try 
      End If 
      For i = 1 To ItemCount
        PaymentRegisterDtl.SeqNo = PaymentRegisterDtl.SeqNo + 1
        Clear PaymentRegisterDtl.ShipmentNo$
        If Items.[i].ShipmentNo$ And Items.[i].ShipmentNo$ <> TicketHeader.TicketNo$ Let PaymentRegisterDtl.ShipmentNo$ = Items.[i].ShipmentNo$
        PaymentRegisterDtl.MaterialCode$ = Trim$(Items.[i].MaterialCode$)
        PaymentRegisterDtl.Description$ = Trim$(Items.[i].MaterialDesc$)
        !  PaymentRegisterDtl.InvoiceNo$=Trim$(PaymentDetail.[i].InvoiceNo$)
        PaymentRegisterDtl.ItemAmount = Items.[i].AmtPaid
        Try 
          Search #ch_db;"INSERT INTO Payment_Register_Dtl (" + SQLN$(PaymentRegisterDtl.) + ") VALUES (" + SQLV$(PaymentRegisterDtl.) + ")"
        Else 
          errmess$ = "Error creating entry in Payment_Register_Dtl table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10))
          Call WriteLogFile(errmess$)
          Call SAITouchError(errmess$)
        End Try 
      Next i
      For i = 1 To LevyItemCount
        PaymentRegisterDtl.SeqNo = PaymentRegisterDtl.SeqNo + 1
        Clear PaymentRegisterDtl.ShipmentNo$
        !        if LevyItems.[i].ShipmentNo$<>TicketHeader.TicketNo$ Let PaymentRegisterDtl.ShipmentNo$=LevyItems.[i].ShipmentNo$
        PaymentRegisterDtl.MaterialCode$ = Trim$(LevyItems.[i].LevyMaterialCode$)
        PaymentRegisterDtl.Description$ = Trim$(LevyItems.[i].LevyMaterialDesc$)
        PaymentRegisterDtl.ItemAmount = LevyItems.[i].MatExt + LevyItems.[i].MatGST
        Try 
          Search #ch_db;"INSERT INTO Payment_Register_Dtl (" + SQLN$(PaymentRegisterDtl.) + ") VALUES (" + SQLV$(PaymentRegisterDtl.) + ")"
        Else 
          errmess$ = "Error creating entry in Payment_Register_Dtl table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10))
          Call WriteLogFile(errmess$)
          Call SAITouchError(errmess$)
        End Try 
      Next i
    Else If Spc(8) <> 236 And count = 0
      count = 1
      Try Close #ch_db Else Rem
      Call SAIOpenDatabase(ch_db,e,errmess$)
      If e = 0
        DBConnectionTime# = Tim#(0)
        Call WriteLogFile("Database connection re-established in FinalizePayment routine.")
        Retry 
      Else 
        errmess$ = "Error creating entry in Payment_Register_Hdr table, Payment No=" + PaymentRegisterHdr.PaymentNo$ + ".\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10))
        Call WriteLogFile(errmess$)
        Call SAITouchError(errmess$)
        DBConnectionTime# = Tim#(0) - 36000 ! Force a re-open in main loop
      End If 
    Else 
      errmess$ = "Error creating entry in Payment_Register_Hdr table, Payment No=" + PaymentRegisterHdr.PaymentNo$ + ".\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10))
      Call WriteLogFile(errmess$)
      Call SAITouchError(errmess$)
    End Try 
  End If 
  ! Ticket Control No
  Call GenerateTicketControlNo()
  ! Ticket Database
  Clear PurTicketHdr.
  PurTicketHdr.TicketNo$ = TicketHeader.TicketNo$
  PurTicketHdr.ShipmentDate# = TicketHeader.ShipmentDate#
  PurTicketHdr.Branch$ = TicketHeader.Branch$
  PurTicketHdr.ControlNo = TicketHeader.ControlNo
  PurTicketHdr.TktType$ = TicketHeader.TktType$
  If TicketHeader.TktMode$ = "T"
    PurTicketHdr.TktType$ = "T"
  Else If Dirt$ = "Y"
    PurTicketHdr.TktType$ = "D"
  End If 
  PurTicketHdr.TktStatus$ = ""
  PurTicketHdr.SupplierNo$ = TicketHeader.EntityNo$
  PurTicketHdr.SupplierName$ = TicketHeader.Name$
  PurTicketHdr.Address1$ = TicketHeader.Address1$
  PurTicketHdr.Address2$ = TicketHeader.Address2$
  PurTicketHdr.City$ = TicketHeader.City$
  PurTicketHdr.State$ = TicketHeader.State$
  PurTicketHdr.PostCode$ = TicketHeader.PostCode$
  PurTicketHdr.PhoneNo$ = TicketHeader.PhoneNo$
  PurTicketHdr.IDNumber$ = TicketHeader.IDNumber$
  PurTicketHdr.InYardID$ = TicketHeader.InYardID$
  PurTicketHdr.RFID$ = TicketHeader.RFID$
  PurTicketHdr.TaxID$ = TicketHeader.TaxID$
  PurTicketHdr.TaxID2$ = TicketHeader.TaxID2$
  If PurTicketHdr.SupplierNo$[1,3] = "CP0"
    If TicketIdentity.TaxRegistered Let PurTicketHdr.TaxRegistered = TicketIdentity.TaxRegistered
  Else If Supplier.HaveTaxID$ = "Y"
    PurTicketHdr.TaxRegistered = 1
  End If 
  If (TicketHeader.OrderNo$ = "" Or TicketHeader.OrderNo$ = "UNKNOWN") And Items.[1].MaterialCode$[1,2] <> "*M"
    SQL$ = "SELECT InventoryClass FROM Inventory_Master WHERE"
    SQL$ = SQL$ + " InventoryCode=" + SQLV$(Items.[1].InventoryCode$)
    SQL$ = SQL$ + " AND YardCode=" + SQLV$(Items.[1].YardCode$)
    SQL$ = SQL$ + " AND Branch=" + SQLV$(TicketHeader.Branch$)
    Search #ch_db;SQL$
    If Chf(ch_db)
      Map #ch_db;
      Read #ch_db;temp$
      Select Case temp$
        Case "F"
          If Supplier.FeTraderCode$ Let TicketHeader.Trader$ = Supplier.FeTraderCode$
        Case "N"
          If Supplier.NFTraderCode$ Let TicketHeader.Trader$ = Supplier.NFTraderCode$
      End Select 
    End If 
  End If 
  PurTicketHdr.Trader$ = TicketHeader.Trader$
  PurTicketHdr.VehType$ = TicketHeader.VehType$
  PurTicketHdr.VehSize$ = TicketHeader.VehSize$
  PurTicketHdr.VehNo$ = TicketHeader.VehNo$
  PurTicketHdr.PUBarcode$ = TicketHeader.PUBarcode$
  PurTicketHdr.TrailerBarcode$ = TicketHeader.TrailerBarcode$
  PurTicketHdr.AxleCount = TicketHeader.AxleCount \ If PurTicketHdr.AxleCount > 127 Let PurTicketHdr.AxleCount = 0
  PurTicketHdr.PONo$ = TicketHeader.OrderNo$
  PurTicketHdr.POLine$ = TicketHeader.OrderLine$
  PurTicketHdr.ShipmentNo$ = TicketHeader.ShipmentNo$
  If FullPONo$
    ktemp$ = SAISpaceFill$(TicketHeader.EntityNo$,6) + FullPONo$
    Call SAIGetRecord(ch_1210ro,recdef_1210.,ktemp$,1,"Y","U",rtemp,PODetail$,PODetail[],e,errmess$)
    If e = 0 Let TicketHeader.ShipFromTo$ = Trim$(PODetail$[31,34])
  End If 
  PurTicketHdr.ShipFrom$ = TicketHeader.ShipFromTo$
  PurTicketHdr.FundsType$ = TicketHeader.FundsType$
  PurTicketHdr.ExchangeRate = ExchangeRate
  PurTicketHdr.CarrierNo$ = TicketHeader.CarrierNo$
  PurTicketHdr.CarrierRefNo$ = TicketHeader.CarrierRefNo$
  PurTicketHdr.TripTicketNo$ = TicketHeader.TripTicketNo$
  PurTicketHdr.SuppShipNo$ = TicketHeader.SuppShipNo$
  PurTicketHdr.SuppInvNo$ = TicketHeader.SuppInvNo$
  PurTicketHdr.SuppRefNo$ = TicketHeader.ShipOrdNo$
  PurTicketHdr.SrcBranch$ = TicketHeader.SrcBranch$
  PurTicketHdr.SrcYard$ = TicketHeader.SrcYard$
  PurTicketHdr.SrcInvCode$ = TicketHeader.SrcInvCode$
  PurTicketHdr.SrcTicketNo$ = TicketHeader.SrcTicketNo$
  PurTicketHdr.AlloyContainedPct = TicketHeader.AlloyContainedPct
  PurTicketHdr.RFID_InBound = TicketHeader.RFID_InBound
  PurTicketHdr.RFID_OutBound = TicketHeader.RFID_OutBound
  PurTicketHdr.Photo = TicketHeader.Photo
  PurTicketHdr.VehGrossWt = Items.[1].GrossWt
  Try Let PurTicketHdr.VehGrossWtTime# = Items.[1].GrossWtTime# Else Clear PurTicketHdr.VehGrossWtTime#
  PurTicketHdr.VehGrossWtScale$ = Items.[1].GrossWtScale$
  PurTicketHdr.VehGrossWtWM$ = Items.[1].GrossWtWM$
  PurTicketHdr.VehTareWt = Items.[1].TareWt
  Try Let PurTicketHdr.VehTareWtTime# = Items.[1].TareWtTime# Else Clear PurTicketHdr.VehTareWtTime#
  PurTicketHdr.VehTareWtScale$ = Items.[1].TareWtScale$
  PurTicketHdr.VehTareWtWM$ = Items.[1].TareWtWM$
  PurTicketHdr.VehNetWt = PurTicketHdr.VehGrossWt - PurTicketHdr.VehTareWt
  StartItem = 1
  If TicketHeader.TktType$ = "R"
    PurTicketHdr.WeightType = 3 ! Mixed Load
    PurTicketHdr.VehAdjWt = Items.[1].AdjWt
    PurTicketHdr.VehAdjCode$ = Items.[1].AdjCode$
    PurTicketHdr.VehDiffWt = VehDiffWt
    StartItem = 2 ! skip *MIX detail line
  Else If Items.[1].MaterialCode$[1,4] = "*MIX"
    PurTicketHdr.WeightType = 3 ! Mixed Load
    PurTicketHdr.VehAdjWt = Items.[1].AdjWt
    PurTicketHdr.VehAdjCode$ = Items.[1].AdjCode$
    PurTicketHdr.VehDiffWt = 0
    StartItem = ItemCount + 1 ! don't create *MIX line as a detail line
  Else If ItemCount > 1
    PurTicketHdr.WeightType = 2 ! Multi-Weigh
    PurTicketHdr.VehTareWt = Items.[ItemCount].TareWt
    Try Let PurTicketHdr.VehTareWtTime# = Items.[ItemCount].TareWtTime# Else Clear PurTicketHdr.VehTareWtTime#
    PurTicketHdr.VehTareWtScale$ = Trim$(Items.[ItemCount].TareWtScale$)
    PurTicketHdr.VehTareWtWM$ = Trim$(Items.[ItemCount].TareWtWM$)
    PurTicketHdr.VehAdjWt = 0
    PurTicketHdr.VehDiffWt = 0
  Else 
    PurTicketHdr.WeightType = 1 ! Single Wt
    PurTicketHdr.VehAdjWt = Items.[1].AdjWt
    PurTicketHdr.VehDiffWt = 0
  End If 
  PurTicketHdr.FreightHrs = TicketHeader.FreightHrs
  If TicketHeader.StartTime# Let PurTicketHdr.StartTime# = TicketHeader.StartTime# Else Let PurTicketHdr.StartTime# = Tim#(0)
  PurTicketHdr.EndTime# = Tim#(0)
  PurTicketHdr.TktComment$ = TicketHeader.TktComment$
  PurTicketHdr.InspectionComment$ = TicketHeader.InspectionComment$
  PurTicketHdr.InspectionState$ = TicketHeader.InspectionState$
  Try 
    Search #ch_db;"INSERT INTO Pur_Ticket_Hdr (" + SQLN$(PurTicketHdr.) + ") VALUES (" + SQLV$(PurTicketHdr.) + ")"
  Else 
    errmess$ = "Error creating entry in Pur_Ticket_Hdr table. TicketNo=" + TicketHeader.TicketNo$ + "\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10))
    Call WriteLogFile(errmess$)
    Call SAITouchError(errmess$)
  End Try 
  For i = StartItem To ItemCount
    Clear PurTicketDtl.
    PurTicketDtl.TicketNo$ = PurTicketHdr.TicketNo$
    PurTicketDtl.ShipmentDate# = PurTicketHdr.ShipmentDate#
    PurTicketDtl.ItemNo = i
    PurTicketDtl.Qty = 0
    PurTicketDtl.Container$ = ""
    PurTicketDtl.Branch$ = PurTicketHdr.Branch$
    PurTicketDtl.YardCode$ = Items.[i].YardCode$
    PurTicketDtl.MaterialCode$ = Items.[i].MaterialCode$
    PurTicketDtl.MaterialDesc$ = Items.[i].MaterialDesc$
    PurTicketDtl.InventoryCode$ = Items.[i].InventoryCode$
    PurTicketDtl.StockPile$ = Items.[i].StockPile$
    PurTicketDtl.POLine$ = Items.[i].DetailOrderLine$
    PurTicketDtl.ShipmentNo$ = Items.[i].ShipmentNo$
    If Items.[i].CFCFlag Let PurTicketDtl.CFCFlag = 1 Else Let PurTicketDtl.CFCFlag = 0
    PurTicketDtl.DirtFlag = Items.[i].DirtFlag
    PurTicketDtl.RedType$ = Items.[i].RedType$
    PurTicketDtl.RedMat$ = Items.[i].RedMat$
    PurTicketDtl.Price = Items.[i].Price
    PurTicketDtl.Price_UM$ = Items.[i].PriceUM$
    PurTicketDtl.GrossWt = Items.[i].GrossWt
    Try Let PurTicketDtl.GrossWtTime# = Items.[i].GrossWtTime# Else Clear PurTicketDtl.GrossWtTime#
    PurTicketDtl.GrossWtScale$ = Items.[i].GrossWtScale$
    PurTicketDtl.GrossWtWM$ = Items.[i].GrossWtWM$
    PurTicketDtl.GrossWt_BGRead = Items.[i].GrossWt_BGRead
    PurTicketDtl.GrossWt_BGStatus = Items.[i].GrossWt_BGStatus
    PurTicketDtl.TareWt = Items.[i].TareWt
    Try Let PurTicketDtl.TareWtTime# = Items.[i].TareWtTime# Else Clear PurTicketDtl.TareWtTime#
    PurTicketDtl.TareWtScale$ = Items.[i].TareWtScale$
    PurTicketDtl.TareWtWM$ = Items.[i].TareWtWM$
    PurTicketDtl.TareWt_BGRead = Items.[i].TareWt_BGRead
    PurTicketDtl.TareWt_BGStatus = Items.[i].TareWt_BGStatus
    PurTicketDtl.NetWt = Items.[i].NetWt
    If Dirt$ = "Y" Let PurTicketDtl.NetWt = - (PurTicketDtl.NetWt)
    PurTicketDtl.AdjWt = Items.[i].AdjWt
    PurTicketDtl.AdjPercent = Items.[i].AdjPercent
    PurTicketDtl.AdjCode$ = Items.[i].AdjCode$
    PurTicketDtl.InspectedBy$ = Items.[i].InspectedBy$
    PurTicketDtl.CarBodies = Items.[i].CarBodies
    PurTicketDtl.Bales = Items.[i].Bales
    PurTicketDtl.ManReason$ = Items.[i].ManReason$
    PurTicketDtl.OrigMaterialCode$ = Items.[i].OrigMaterialCode$
    PurTicketDtl.MatCodeChg = Items.[i].MatCodeChg
    PurTicketDtl.MatDescChg = Items.[i].MatDescChg
    PurTicketDtl.PriceChg = Items.[i].PriceChg
    PurTicketDtl.RedCount = Items.[i].RedCount
    PurTicketDtl.RedNetWt = Items.[i].RedNetWt
    PurTicketDtl.RedRate = Items.[i].RedRate
    PurTicketDtl.RedExt = Items.[i].RedExt
    PurTicketDtl.MatGST = Items.[i].MatGST
    PurTicketDtl.MatPST = Items.[i].MatPST
    PurTicketDtl.FrtGST = Items.[i].FrtGST
    PurTicketDtl.FrtPST = Items.[i].FrtPST
    PurTicketDtl.CbkGST = Items.[i].CbkGST
    PurTicketDtl.CbkPST = Items.[i].CbkPST
    PurTicketDtl.FrtExt = Items.[i].FrtExt
    PurTicketDtl.FrtCbk = Items.[i].FrtCbk
    PurTicketDtl.MatExt = Items.[i].MatExt
    If Dirt$ = "Y" Let PurTicketDtl.MatExt = - (PurTicketDtl.MatExt)
    Try 
      Search #ch_db;"INSERT INTO Pur_Ticket_Dtl (" + SQLN$(PurTicketDtl.) + ") VALUES (" + SQLV$(PurTicketDtl.) + ")"
    Else 
      errmess$ = "Error creating entry in Pur_Ticket_Dtl table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10))
      Call WriteLogFile(errmess$)
      Call SAITouchError(errmess$)
    End Try 
  Next i
  For i = 1 To LevyItemCount
    Clear PurTicketDtl.
    PurTicketDtl.TicketNo$ = PurTicketHdr.TicketNo$
    PurTicketDtl.ShipmentDate# = PurTicketHdr.ShipmentDate#
    PurTicketDtl.ItemNo = ItemCount + i
    PurTicketDtl.Branch$ = PurTicketHdr.Branch$
    PurTicketDtl.YardCode$ = LevyItems.[i].YardCode$
    PurTicketDtl.MaterialCode$ = LevyItems.[i].LevyMaterialCode$
    PurTicketDtl.MaterialDesc$ = LevyItems.[i].LevyMaterialDesc$
    PurTicketDtl.InventoryCode$ = LevyItems.[i].InventoryCode$
    PurTicketDtl.StockPile$ = ""
    PurTicketDtl.ShipmentNo$ = Trim$(PurTicketHdr.TicketNo$) ! Have to assume non-contract at this point
    PurTicketDtl.Price = LevyItems.[i].Price
    PurTicketDtl.Price_UM$ = LevyItems.[i].PriceUM$
    PurTicketDtl.RedNetWt = LevyItems.[i].NetWt
    PurTicketDtl.MatExt = LevyItems.[i].MatExt
    PurTicketDtl.MatGST = LevyItems.[i].MatGST
    Try 
      Search #ch_db;"INSERT Pur_Ticket_Dtl (" + SQLN$(PurTicketDtl.) + ") VALUES (" + SQLV$(PurTicketDtl.) + ")"
    Else 
      Call SAITouchError("Error creating Levy entry in Pur_Ticket_Dtl table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
    End Try 
  Next i
  ! InYard_ID_Default table
  If TicketHeader.TktMode$ <> "T"
    If SupplierDefaultFromID$ = "S" And TicketHeader.EntityNo$[1,3] = "CP0"
      ! Don't write it out
    Else 
      Clear InYardIDDefault.
      InYardIDDefault.InYardID$ = TicketHeader.InYardID$
      InYardIDDefault.Branch$ = TicketHeader.Branch$
      InYardIDDefault.TktType$ = "P"
      InYardIDDefault.EntityNo$ = TicketHeader.EntityNo$
      Try 
        Search #ch_db;"REPLACE InYard_ID_Default (" + SQLN$(InYardIDDefault.) + ") VALUES (" + SQLV$(InYardIDDefault.) + ")"
      Else 
        Call SAITouchError("Error creating entry in InYard_ID_Default table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
      End Try 
    End If 
  End If 
  ! Check for MixUnloadMode
  If MixUnloadMode$ = "Y" And TicketHeader.OrderNo$ And TicketHeader.OrderNo$ <> "UNKNOWN"
    If Trim$(Items.[1].MaterialCode$) = "*MIX"
      SQL$ = "UPDATE Pur_Mix_Hdr SET VehGrossWt=" + SQLV$(Items.[1].GrossWt) + ", VehTareWt=" + SQLV$(Items.[1].TareWt) + ", VehNetWt=" + SQLV$(Items.[1].NetWt)
      If TicketTemp.MixUnload = 1
        SQL$ = SQL$ + ", InUse=" + SQLV$(0) + ", InUseBy=" + SQLV$("") + ", InUsePort=" + SQLV$("")
      End If 
      SQL$ = SQL$ + " WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
      Try 
        Search #ch_db;SQL$
      Else 
        Call SAITouchError("Error updating entry in Pur_Mix_Hdr table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
      End Try 
    End If 
  End If 
  ! Delete Notice
  If TicketHeader.Noticed
    Try 
      Search #ch_db;"DELETE FROM Pur_Notice WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$)
    Else 
      errmess$ = "Error deleting entry from Pur_Notice table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10))
      Call WriteLogFile(errmess$)
      Call SAITouchError(errmess$)
    End Try 
    If FullPONo$ And TicketHeader.ShipmentNo$ <> TicketHeader.TicketNo$
      ktemp$ = FullPONo$ + TicketHeader.ShipmentNo$
      Call SAIGetRecord(ch_1220,recdef_1220.,ktemp$,1,"F","L",rtemp,PurchaseShipments$,PurchaseShipments3[],PurchaseShipments4[],stat,errmess$)
      If stat = 0
        PurchaseShipments$[54,59] = SAISpaceFill$(TicketHeader.TicketNo$,6)
        Call SAIWriteRecord(ch_1220,recdef_1220.,"U",rtemp,PurchaseShipments$,PurchaseShipments3[],PurchaseShipments4[],stat,errmess$)
      End If 
    End If 
  End If 
  ! Delete InYard record
  Call DeleteInYard(stat)
End Sub 
Sub WriteSalesTicket()
  SalesTicket$ = " ",SalesTicket$
  Clear SalesTicket3[],SalesTicket4[]
  RoundAmt = 0
  UpdateSplitLoad = 0
  If TicketHeader.SplitLoad And TicketHeader.Noticed
    ktemp$ = SAISpaceFill$(TicketHeader.TicketNo$,6) + SAISpaceFill$(TicketHeader.EntityNo$,6) + SAISpaceFill$(Items.[1].MaterialCode$,8)
    Search #ch_8430,2,1;ktemp$,rec_8430,stat
    If stat = 0
      Call SAIReadRecord(ch_8430,recdef_8430.,"Y","L",rec_8430,SalesTicket$,SalesTicket3[],SalesTicket4[],stat,errmess$)
      If stat = 0 Let UpdateSplitLoad = 1 !flag as update split load instead of create split load
    End If 
  End If 
  ! 8430 Header record
  SalesTicket$[1,6] = SAISpaceFill$(TicketHeader.TicketNo$,6)
  SalesTicket$[7,12] = SAISpaceFill$(TicketHeader.EntityNo$,6)
  SalesTicket$[13,20] = SAISpaceFill$(Items.[1].MaterialCode$,8)
  ! We feel the line below is not needed as the shipment date question when not equal to rundate is always confirmed in the Ticket Completion action. 9/16/15 JPT
  !  if TicketHeader.Noticed AND Items.[1].MaterialCode$<>"*MIX" Let TicketHeader.ShipmentDate#=RunDate# !plug ship date on non-multimat releases
  SalesTicket$[21,26] = SAISpaceFill$(SAIConvertDate$(TicketHeader.ShipmentDate#),6)
  SalesTicket$[27,37] = SAISpaceFill$(TicketHeader.VehNo$,11)
  SalesTicket$[44,45] = SAISpaceFill$(Items.[1].PriceUM$,2)
  SalesTicket$[49,54] = SAISpaceFill$(SAIConvertDate$(TicketHeader.EntryDate#),6)
  SalesTicket$[55,55] = SAISpaceFill$(TicketHeader.VehType$,1)
  SalesTicket$[56,61] = SAISpaceFill$(TicketHeader.ShipmentNo$,6)
  SalesTicket$[62,69] = SAISpaceFill$(Items.[1].InventoryCode$,8)
  SalesTicket$[70,70] = SAISpaceFill$(Items.[1].YardCode$,1)
  SalesTicket$[85,89] = "NNNNN" ! Set all Update Flags to "N"
  SalesTicket$[107,116] = SAISpaceFill$(TicketHeader.SealNo$,10)
  SalesTicket$[148,157] = SAISpaceFill$(TicketHeader.CustReleaseNo$,10)
  SalesTicket$[205,216] = SAISpaceFill$(TicketHeader.ContainerNo$,12)
  If Customer.IntercompanyType$ = "I" And TicketHeader.TktType$ <> "W" Let SalesTicket$[89,89] = "I" ! Transfer
  !split load logic
  If TicketHeader.SplitLoad !inyard is flagged as a split load
    SLIntransFound = 0 !clear split load intransit found flag
    SLFinalFound = 0 !clear split load final leg found flag
    ktemp$ = SalesTicket$[1,20] ! Check 8530 file
    Do 
      Search #ch_8530ro,3,1;ktemp$,r,e
      If ktemp$[1,20] <> SalesTicket$[1,20] Let e = 99 !diff tkt/mat code
      If e Exit Do !done with current ticket
      Call SAIReadRecord(ch_8530ro,recdef_8530.,"Y","U",r,RetailSales$,RetailSales[],stat,errmess$)
      If RetailSales$[161,162] <> "  "
        SLIntransFound = 1 !at least one non-final leg exists on ticket
      Else 
        SLFinalFound = 1 !final leg exists on ticket
      End If 
    Loop 
    If SLIntransFound = 1 And SLFinalFound = 0 !Split load intransit found but no final leg found
      SalesTicket$[89,89] = "I" !flag 8430 as intransit split load
    End If 
  End If !split load logic
  SalesTicket$[90,101] = SAIFill$(TicketHeader.OrderNo$,"R"," ",10) + SAISpaceFill$(TicketHeader.OrderLine$,2) ! SO #
  SalesTicket$[102,102] = " " ! Was Price Class - No longer using
  SalesTicket$[121,121] = SAISpaceFill$(Items.[1].AdjCode$,1)
  SalesTicket$[124,135] = SAIFill$(TicketHeader.MatReqNo$,"R"," ",10) + SAISpaceFill$(TicketHeader.MatReqLine$,2) ! Material Req
  SalesTicket$[136,136] = "Y" ! Update Veh Trakcing
  SalesTicket$[137,142] = SAISpaceFill$(TicketHeader.BOLNo$,6)
  SalesTicket$[143,143] = SAISpaceFill$(Items.[1].GrossWtScale$,1)
  SalesTicket$[144,144] = SAISpaceFill$(Items.[1].TareWtScale$,1)
  If TicketHeader.Noticed Let SalesTicket$[145,145] = "Y"
  If TicketHeader.TktType$ = "W"
    If Items.[1].GrossWt And Items.[1].TareWt
      SalesTicket$[146,146] = "W"
    Else If Items.[1].GrossWt
      SalesTicket$[146,146] = "G"
    Else 
      SalesTicket$[146,146] = "T"
    End If 
  End If 
  If TicketHeader.ReleaseNo Let SalesTicket$[147,147] = "Y"
  SalesTicket$[148,157] = SAISpaceFill$(TicketHeader.CustReleaseNo$,10)
  SalesTicket$[163,164] = SAISpaceFill$(TicketHeader.VehSize$,2) ! Veh Size
  SalesTicket$[165,166] = SAISpaceFill$(Branch$,2) ! Accounting Branch
  SalesTicket$[168,169] = SAISpaceFill$(Branch$,2) ! Company
  SalesTicket$[170,170] = "S" ! Ticket Type (Sale)
  SalesTicket$[178,183] = SAISpaceFill$(TicketHeader.CarrierNo$,6)
  !??  SalesTicket$[184,194]=SAISpaceFill$(TicketHeader.InYardID$,11) ! ID
  SalesTicket$[199,204] = SAISpaceFill$(TicketHeader.TripTicketNo$,6)
  SalesTicket$[229,229] = SAISpaceFill$(Items.[1].ManReason$,1)
  SalesTicket$[231,232] = SAISpaceFill$(TicketHeader.FundsType$,2)
  SalesTicket$[233,233] = SAISpaceFill$(Customer.TaxableFlag$,1)
  SalesTicket$[234,234] = SAISpaceFill$(Customer.TaxCode$,1)
  If Trim$(SalesTicket$[90,101]) !if valid SO exists use tax data from SO
    If SODetail$[261,262] <> " " Let SalesTicket$[231,232] = SODetail$[261,262] !funds type from SO
    If SODetail$[188,188] <> " " Let SalesTicket$[233,233] = SODetail$[188,188] !tax flag from SO
    If SODetail$[293,293] <> " " Let SalesTicket$[234,234] = SODetail$[293,293] !tax juris from SO
  End If 
  If Trim$(SalesTicket$[13,20]) <> "*MIX"
    SalesTicket3[0] = Items.[1].GrossWt
    SalesTicket3[1] = Items.[1].TareWt
    SalesTicket3[2] = Items.[1].NetWt
  End If 
  SalesTicket3[3] = Items.[1].GrossWt
  If SalesTicket3[4] = 0
    SalesTicket3[4] = Items.[1].TareWt !only update if zero to have split loads keep previous tare wt
    SalesTicket3[5] = Items.[1].NetWt
  Else 
    SalesTicket3[5] = SalesTicket3[3] - SalesTicket3[4] !retailing split load orig tare, recalc net
  End If 
  SalesTicket3[6] = Items.[1].AdjWt
  SalesTicket3[7] = Items.[1].CarBodies
  SalesTicket3[13] = TicketHeader.FreightHrs
  SalesTicket4[0] = Items.[1].Price
  If Trim$(SalesTicket$[90,101]) ! if SO, Commission Calculation
    If SODetail$[208,209] <> "  " And SODetail[4] <> 0
      Call SAICalcPriceExt(ch_110Aro,Items.[1].NetWt + Items.[1].AdjWt,gbl_um$,SODetail[4],SODetail$[208,209],2,SalesTicket4[9],stat)
      Items.[1].MatExt = Items.[1].MatExt + SalesTicket4[9] ! Add Commission into Extended Price
    End If 
  End If 
  SalesTicket4[1] = Items.[1].MatExt
  ! Calculate Exchange Rate here and put in SalesTicket4[13]
  ExchangeRate = 0
  If gbl.MultiCurrency$ = "Y"
    If TicketHeader.FundsType$ <> gbl.BranchFundsType$
      ExchangeRate = SAIGetFXRate2(ch_db,TicketHeader.FundsType$,gbl.BranchFundsType$,TicketHeader.ShipmentDate#)
    Else 
      ExchangeRate = 1
    End If 
    SalesTicket4[13] = ExchangeRate
  End If 
  ! Check for Contract Freight
  If TicketHeader.MatReqNo$
    FullPONo$ = SAIFill$(TicketHeader.MatReqNo$,"R"," ",10) + SAISpaceFill$(TicketHeader.MatReqLine$,2)
  Else 
    FullPONo$ = ""
  End If 
  If FullPONo$ ! Frt Calc
    ShipmentNo$ = ""
    If TicketHeader.ShipmentNo$ = "" Let TicketHeader.ShipmentNo$ = TicketHeader.TicketNo$
    If SalesTicket$[13,14] = "*M"
      If TicketHeader.ShipmentNo$ <> TicketHeader.TicketNo$ Let ShipmentNo$ = SAISpaceFill$(TicketHeader.ShipmentNo$,6) !use 8530 ship# previously plugged
      SalesTicket$[42,43] = "* "
    Else 
      k1$ = SalesTicket$[124,135] ! 2nd Dir. 1210 (Material Req No)
      k2$ = SalesTicket$[90,101] ! 2nd Dir. 1310 (SO No)
      ShipmentNo$ = " ",ShipmentNo$
      veh_tp$ = SAISpaceFill$(TicketHeader.VehType$,1) + SAISpaceFill$(TicketHeader.VehSize$,2)
      ph_status$ = "N "
      frtrte$ = "ESI"
      cbk_frt = SalesTicket3[13] ! FreightHrs
      If TicketHeader.Noticed And TicketHeader.ShipmentNo$ <> TicketHeader.TicketNo$ ! Notice with existing Shipment No.
        ShipmentNo$ = SAISpaceFill$(TicketHeader.ShipmentNo$,6)
        If ScrapSRecord$[111,111] <> "Y" Or TicketHeader.TripTicketNo$ = "" ! Not using Synergistic or no Trip Ticket
          ph_status$ = "  "
        End If 
        Call "sub.frt_calc","DESD",k1$,SalesTicket$[124,135],ShipmentNo$,SalesTicket$[62,69],SalesTicket$[70,70],veh_tp$,SalesTicket$[178,183],SalesTicket$[21,26],ph_status$,SalesTicket3[5] + SalesTicket3[6],tot_frt,k2$,cbk_frt,frtrte$,z$,status,errmess_frtcalc$,fgpw[],cbgpw[],supcbgpw[]
      End If 
      FrtCalcMode$ = "IESD"
      If TicketHeader.ReleaseNo > 0 And SalesRelease.TMS_Flag
        Try 
          Search #ch_db;"SELECT TotalFrtExt, TotalFrtExtUM FROM TMS_FreightCharges WHERE SAIReferenceID=" + SQLV$(TicketHeader.ReleaseNo) + " AND IsFinal=" + SQLV$(0) + " AND SAIReferenceType=" + SQLV$("PROCMG")
          nr = Chf(ch_db)
        Else 
          nr = 0
        End Try 
        If nr
          Map #ch_db;
          Read #ch_db;TMS_TotalFrtExt,TMS_TotalFrtExtUM$;
        Else 
          TMS_TotalFrtExt = 0
          TMS_TotalFrtExtUM$ = "er"
        End If 
        FrtCalcMode$ = FrtCalcMode$ + ",FLATRATE=" + Str$(TMS_TotalFrtExt) + "," + SAISpaceFill$(TMS_TotalFrtExtUM$,2)
      Else If OTMFreight$ = "Y" And TicketHeader.CarrierRefNo$
        SQL$ = "SELECT * FROM OTM_Freight_Interface WHERE"
        SQL$ = SQL$ + " OTMRefNo=" + SQLV$(TicketHeader.CarrierRefNo$)
        SQL$ = SQL$ + " AND TicketNo=" + SQLV$(TicketHeader.TicketNo$)
        Try 
          Search #ch_db;SQL$
          nr = Chf(ch_db)
        Else 
          nr = 0
        End Try 
        If nr
          Map Record #ch_db As OTM_Freight_Interface
          Read Record #ch_db;OTMFreightInterface.
          OTMFreightInterface.Status$ = "C"
          !          OTMFreightInterface.TicketNo$=TicketHeader.TicketNo$
          OTMFreightInterface.NetWt = Items.[1].NetWt
          OTMFreightInterface.NetWtUM$ = gbl_um$
          Call OTMUpdate(stat)
        Else 
          tot_frt = 0
          OTMFreightInterface.FrtAccrualUM$ = "er"
        End If 
        FrtCalcMode$ = FrtCalcMode$ + ",FLATRATE=" + Str$(OTMFreightInterface.FrtAccrualAmt) + "," + SAISpaceFill$(OTMFreightInterface.FrtAccrualUM$,2)
        tot_frt = 0
      End If 
      Call "sub.frt_calc",FrtCalcMode$,k1$,SalesTicket$[124,135],ShipmentNo$,SalesTicket$[62,69],SalesTicket$[70,70],veh_tp$,SalesTicket$[178,183],SalesTicket$[21,26],ph_status$,SalesTicket3[5] + SalesTicket3[6],tot_frt,k2$,cbk_frt,frtrte$,z$,status,errmess_frtcalc$,fgpw[],cbgpw[],supcbgpw[]
      If status And z$[644,646] = "323" ! SA
        Call SAITouchWarning(errmess_frtcalc$,"Freight Error")
      End If 
      Try 
        SalesTicket4[2] = Val(frtrte$[1,10]) ! Frt Rate
      Else 
        SalesTicket4[2] = 0
      End Try 
      SalesTicket4[3] = tot_frt ! Extended Frt Charge
      SalesTicket4[4] = cbk_frt ! Charge back Frt
      SalesTicket$[42,43] = SAISpaceFill$(frtrte$[11,12],2)
    End If 
    If Trim$(ShipmentNo$)
      SalesTicket$[56,61] = SAISpaceFill$(ShipmentNo$,6)
      TicketHeader.ShipmentNo$ = Trim$(ShipmentNo$)
      Items.[1].ShipmentNo$ = TicketHeader.ShipmentNo$
    End If 
  End If 
  If UpdateSplitLoad = 0
    Call SAIAddRecord(ch_8430,recdef_8430.,SalesTicket$,SalesTicket3[],SalesTicket4[],status,errmess$)
  Else !update existing split load data (key data remains the same as original leg)
    Call SAIWriteRecord(ch_8430,recdef_8430.,"U",rec_8430,SalesTicket$,SalesTicket3[],SalesTicket4[],status,errmess$)
  End If 
  If status
    Call SAITouchError("Error writing " + Items.[i].MaterialCode$ + " record to 8430 file!\15\" + errmess$)
    Exit Sub 
  End If 
  ! 8326 Header Record
DefineSales8326Records: !
  ScaleTicAudit$ = " ",ScaleTicAudit$
  Clear ScaleTicAudit[]
  UpdateSplitLoad = 0
  If TicketHeader.SplitLoad And TicketHeader.Noticed
    ktemp$ = SalesTicket$[1,20]
    Search #ch_8326,2,2;ktemp$,r,stat
    If stat = 0
      Call SAIReadRecord(ch_8326,recdef_8326.,"Y","U",r,ScaleTicAudit$,ScaleTicAudit[],stat,errmess$)
      If stat = 0
        UpdateSplitLoad = 1
        Call SAIDeleteRecord(ch_8326,recdef_8326.,ScaleTicAudit$,rec_8326,stat,errmess$) !delete orig 8326 as key data has changed
      End If 
    End If 
  End If 
  ScaleTicAudit$[1,11] = SAISpaceFill$(TicketHeader.InYardID$,11)
  ScaleTicAudit$[12,17] = SAISpaceFill$(SAIConvertDate$(TicketHeader.ShipmentDate#),6)
  ScaleTicAudit$[18,19] = "00" ! Sequence
  ScaleTicAudit$[20,25] = SAISpaceFill$(TicketHeader.TicketNo$,6)
  ScaleTicAudit$[26,31] = SAISpaceFill$(TicketHeader.EntityNo$,6)
  ! 32,39 - Material Code
  ScaleTicAudit$[40,40] = SAISpaceFill$(TicketHeader.VehType$,1)
  ScaleTicAudit$[44,44] = SAISpaceFill$(Customer.HaveTaxID$,1)
  ! 45,59 - Yard Code, Orig Mat, Gross & Tare WM
  ScaleTicAudit$[60,65] = SAISpaceFill$(TicketHeader.ShipmentNo$,6)
  If TicketHeader.Noticed Let ScaleTicAudit$[66,66] = "Y"
  !  if MultiItemTicket$="Y" Let ScaleTicAudit$[67,67]="Y"
  !??  ScaleTicAudit$[68,68]=SAISpaceFill$(Supplier.TaxJurisdiction$,1) ! Tax Jurisdiction
  ! 69,119 - Gross & Tare Date & Time, Mat Change, & Mat Desc.
  ScaleTicAudit$[120,121] = SAISpaceFill$(Branch$,2)
  ! 122,126 - Gross & Tare Scale, Price Changed, Price U/M
  ! 128,139 - Inbound transfer source fields not used on sales ticket
  ! 140,140 - Adj Code
  ScaleTicAudit$[141,141] = "Y" ! Update Veh Tracking
  ScaleTicAudit$[142,152] = SAISpaceFill$(TicketHeader.VehNo$,11)
  ScaleTicAudit$[153,153] = SAISpaceFill$(TicketHeader.TktType$,1)
  If TicketHeader.OrderNo$
    ScaleTicAudit$[154,163] = SAIFill$(TicketHeader.OrderNo$,"R"," ",10)
    ScaleTicAudit$[164,165] = SAISpaceFill$(TicketHeader.OrderLine$,2)
  End If 
  ScaleTicAudit$[166,171] = SAISpaceFill$(TicketHeader.CarrierNo$,6)
  If TicketHeader.MatReqNo$
    ScaleTicAudit$[172,181] = SAIFill$(TicketHeader.MatReqNo$,"R"," ",10)
    ScaleTicAudit$[182,183] = SAISpaceFill$(TicketHeader.MatReqLine$,2)
  End If 
  ! 184,186 - Stock Pile
  If TicketHeader.TktType$ = "W" Let ScaleTicAudit$[187,187] = SalesTicket$[146,146] ! G/T Only
  ! 188,188 - VEN-INV-ENT
  ! 189,189 - Skip Std Cost
  !  ScaleTicAudit$[190,195]=SAISpaceFill$(TicketHeader.SrcTicketNo$,6) not used on sales ticket
  ! 196,196 - Man Reason
  ScaleTicAudit$[197,198] = SAISpaceFill$(TicketHeader.VehSize$,2)
  ScaleTicAudit$[199,204] = SAISpaceFill$(TicketHeader.TripTicketNo$,6)
  ! 205 - 242 Custom Fields (None used on sales ticket
  ScaleTicAudit$[247,247] = YesNoFlag$(TicketHeader.Photo) ! Jpegger flag
  ScaleTicAudit[13] = TicketHeader.FreightHrs
  If UpdateSplitLoad !Split load - update gross, use previous tare, recalc net, and save orig wts
    Items.[0] = Items.[1] ! Use item 0 to populate the 8326 so the current item values are not destroyed
    Items.[0].TareWt = ScaleTicAudit[1] ! Use original leg's tare
    Items.[0].NetWt = Items.[0].GrossWt - Items.[0].TareWt ! Recalculate net
    Call Populate8326Item(0)
  Else 
    Call Populate8326Item(1)
  End If 
  Call Write8326(status)
  If status
    Call SAITouchError("Error writing " + Items.[i].MaterialCode$ + " record to 8326 file!\15\" + errmess$)
    Exit Sub 
  End If 
  ! Write Ticket Comment if one exists
  If TicketHeader.TktComment$
    GblCmt$ = " ",GblCmt$
    GblCmt$[1,1] = "C"
    GblCmt$[2,7] = SAISpaceFill$(TicketHeader.EntityNo$,6)
    GblCmt$[8,19] = SAIFill$(TicketHeader.OrderNo$,"R"," ",10) + SAISpaceFill$(TicketHeader.OrderLine$,2) ! SO #
    GblCmt$[20,25] = SAISpaceFill$(TicketHeader.ShipmentNo$,6) ! Shipment #
    GblCmt$[26,30] = "SHP01"
    GblCmt$[31,80] = SAISpaceFill$(TicketHeader.TktComment$,50)
    ktemp$ = GblCmt$[1,30]
    Search #ch_1115,2,1;ktemp$,r,e
    If e
      Call SAIAddRecord(ch_1115,recdef_1115.,GblCmt$,stat,errmess$)
      If stat Call SAITouchError("Error adding ticket comment.\15\" + errmess$)
    Else 
      Call SAIReadRecord(ch_1115,recdef_1115.,"Y","L",r,GblCmtTmp$,stat,errmess$)
      If stat = 0
        Call SAIWriteRecord(ch_1115,recdef_1115.,"U",r,GblCmt$,stat,errmess$)
        If stat Call SAITouchError("Error updating the comments file.\15\" + errmess$)
      End If 
    End If 
  End If 
  ! InYard_ID_Default table
  Clear InYardIDDefault.
  InYardIDDefault.InYardID$ = TicketHeader.InYardID$
  InYardIDDefault.Branch$ = TicketHeader.Branch$
  InYardIDDefault.TktType$ = "S"
  If TicketHeader.TktMode$ = "T"
    InYardIDDefault.TktType$ = "T"
  Else If WeightOnly
    InYardIDDefault.TktType$ = "W"
  End If 
  InYardIDDefault.EntityNo$ = TicketHeader.EntityNo$
  Try 
    Search #ch_db;"REPLACE InYard_ID_Default (" + SQLN$(InYardIDDefault.) + ") VALUES (" + SQLV$(InYardIDDefault.) + ")"
  Else 
    errmess$ = "Error creating entry in InYard_ID_Default table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10))
    Call WriteLogFile(errmess$)
    Call SAITouchError(errmess$)
  End Try 
  ! Ticket Control No
  Call GenerateTicketControlNo()
  ! Ticket Database
  If TicketHeader.ReleaseNo > 0 And UpdateSplitLoad = 0
    Try 
      Search #ch_db;"UPDATE Sales_Release SET LoadsInProcess=LoadsInProcess-1, LoadsRemaining=LoadsRemaining-1 WHERE ReleaseNo=" + SQLV$(TicketHeader.ReleaseNo)
    Else 
      errmess$ = "Error updating Load Count in Sales_Release table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10))
      Call WriteLogFile(errmess$)
      Call SAITouchError(errmess$)
    End Try 
    Try 
      Search #ch_db;"SELECT LoadsRemaining FROM Sales_Release WHERE ReleaseNo=" + SQLV$(TicketHeader.ReleaseNo)
      If Chf(ch_db)
        Read #ch_db;x;
        If x = 0
          Try 
            Search #ch_db;"UPDATE Sales_Release SET Status=" + SQLV$("C") + ", CompleteDateTime=" + SQLV$(Tim#(0)) + " WHERE ReleaseNo=" + SQLV$(TicketHeader.ReleaseNo)
          Else 
            errmess$ = "Error updating Load Count in Sales_Release table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10))
            Call WriteLogFile(errmess$)
            Call SAITouchError(errmess$)
          End Try 
        End If 
      End If 
    Else 
    End Try 
  End If 
  Clear SalesTicketHdr.
  If Items.[1].MaterialCode$[1,2] = "*M" And WeightOnly = 0 !AND TicketHeader.TktMode$<>"T" ! Multi-Material Sale/Transfer
    Try 
      Search #ch_db;"SELECT * FROM Sales_Ticket_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#) + " AND Branch=" + SQLV$(Branch$)
      If Chf(ch_db)
        Map Record #ch_db As Sales_Ticket_Hdr
        Read Record #ch_db;SalesTicketHdr.
        SalesTicketHdr.ControlNo = TicketHeader.ControlNo
        SalesTicketHdr.TktType$ = TicketHeader.TktType$
        If TicketHeader.TktMode$ = "T" Let SalesTicketHdr.TktType$ = "T"
        SalesTicketHdr.TktStatus$ = ""
        SalesTicketHdr.CustomerNo$ = TicketHeader.EntityNo$
        SalesTicketHdr.CustomerName$ = Trim$(TicketHeader.Name$)
        SalesTicketHdr.Address1$ = Trim$(TicketHeader.Address1$)
        SalesTicketHdr.Address2$ = Trim$(TicketHeader.Address2$)
        SalesTicketHdr.City$ = Trim$(TicketHeader.City$)
        SalesTicketHdr.State$ = Trim$(TicketHeader.State$)
        SalesTicketHdr.PostCode$ = Trim$(TicketHeader.PostCode$)
        SalesTicketHdr.InYardID$ = Trim$(TicketHeader.InYardID$)
        SalesTicketHdr.RFID$ = Trim$(TicketHeader.RFID$)
        SalesTicketHdr.TaxID$ = Trim$(TicketHeader.TaxID$)
        SalesTicketHdr.TaxID2$ = Trim$(TicketHeader.TaxID2$)
        SalesTicketHdr.Trader$ = Trim$(TicketHeader.Trader$)
        SalesTicketHdr.VehType$ = Trim$(TicketHeader.VehType$)
        SalesTicketHdr.VehSize$ = Trim$(TicketHeader.VehSize$)
        SalesTicketHdr.VehNo$ = Trim$(TicketHeader.VehNo$)
        SalesTicketHdr.PUBarcode$ = TicketHeader.PUBarcode$
        SalesTicketHdr.TrailerBarcode$ = TicketHeader.TrailerBarcode$
        SalesTicketHdr.AxleCount = TicketHeader.AxleCount \ If SalesTicketHdr.AxleCount > 127 Let SalesTicketHdr.AxleCount = 0
        If SalesTicketHdr.ContainerTareWt = 0 Let SalesTicketHdr.ContainerTareWt = TicketHeader.ContainerTareWt
        SalesTicketHdr.TripTicketNo$ = Trim$(TicketHeader.TripTicketNo$)
        SalesTicketHdr.CustRefNo$ = Trim$(TicketHeader.ShipOrdNo$)
        SalesTicketHdr.FundsType$ = TicketHeader.FundsType$
        SalesTicketHdr.ExchangeRate = ExchangeRate
        SalesTicketHdr.BOLNo$ = Trim$(TicketHeader.BOLNo$)
        SalesTicketHdr.RouteNo$ = Trim$(TicketHeader.RouteNo$)
        SalesTicketHdr.DeliveryAddr$ = Trim$(TicketHeader.DeliveryAddr$)
        SalesTicketHdr.DeliveringCarrier$ = Trim$(TicketHeader.DeliveringCarrier$)
        SalesTicketHdr.CarInitials$ = Trim$(TicketHeader.CarInitials$)
        SalesTicketHdr.CarNo$ = Trim$(TicketHeader.CarNo$)
        SalesTicketHdr.CustReleaseNo$ = Trim$(TicketHeader.CustReleaseNo$)
        SalesTicketHdr.SealNo$ = Trim$(TicketHeader.SealNo$)
        SalesTicketHdr.Seal2No$ = Trim$(TicketHeader.Seal2No$)
        SalesTicketHdr.Seal3No$ = Trim$(TicketHeader.Seal3No$)
        SalesTicketHdr.ContainerNo$ = Trim$(TicketHeader.ContainerNo$)
        SalesTicketHdr.BookingNo$ = Trim$(TicketHeader.BookingNo$)
        SalesTicketHdr.RFID_InBound = TicketHeader.RFID_InBound
        SalesTicketHdr.RFID_OutBound = TicketHeader.RFID_OutBound
        SalesTicketHdr.VehGrossWt = Items.[1].GrossWt
        Try Let SalesTicketHdr.VehGrossWtTime# = Items.[1].GrossWtTime# Else Clear SalesTicketHdr.VehGrossWtTime#
        SalesTicketHdr.VehGrossWtScale$ = Trim$(Items.[1].GrossWtScale$)
        SalesTicketHdr.VehGrossWtWM$ = Trim$(Items.[1].GrossWtWM$)
        SalesTicketHdr.VehTareWt = Items.[1].TareWt
        Try Let SalesTicketHdr.VehTareWtTime# = Items.[1].TareWtTime# Else Clear SalesTicketHdr.VehTareWtTime#
        SalesTicketHdr.VehTareWtScale$ = Trim$(Items.[1].TareWtScale$)
        SalesTicketHdr.VehTareWtWM$ = Trim$(Items.[1].TareWtWM$)
        SalesTicketHdr.VehNetWt = Items.[1].NetWt
        SalesTicketHdr.WeightType = 3 ! Mixed Load
        SalesTicketHdr.VehAdjWt = Items.[1].AdjWt
        SalesTicketHdr.VehAdjCode$ = Items.[1].AdjCode$
        If tot_sls_net Let SalesTicketHdr.VehDiffWt = tot_sls_net - SalesTicketHdr.VehNetWt
        If TicketHeader.StartTime# Let SalesTicketHdr.StartTime# = TicketHeader.StartTime# Else Let SalesTicketHdr.StartTime# = Tim#(0)
        SalesTicketHdr.EndTime# = Tim#(0)
        SalesTicketHdr.TktComment$ = TicketHeader.TktComment$
        Try 
          Search #ch_db;"UPDATE Sales_Ticket_Hdr SET " + SQLNV$(SalesTicketHdr.) + " WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND Branch=" + SQLV$(Branch$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
        Else 
          errmess$ = "Error updating entry in Sales_Ticket_Hdr table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10))
          Call WriteLogFile(errmess$)
          Call SAITouchError(errmess$)
        End Try 
        Goto SkipSalesTicketDatabase
      End If 
    Else 
    End Try 
  End If 
  SalesTicketHdr.TicketNo$ = TicketHeader.TicketNo$
  SalesTicketHdr.ShipmentDate# = TicketHeader.ShipmentDate#
  SalesTicketHdr.Leg = 1
  SalesTicketHdr.Branch$ = TicketHeader.Branch$
  SalesTicketHdr.ControlNo = TicketHeader.ControlNo
  SalesTicketHdr.TktType$ = TicketHeader.TktType$
  If TicketHeader.TktMode$ = "T"
    SalesTicketHdr.TktType$ = "T"
  Else If WeightOnly
    SalesTicketHdr.TktType$ = "W"
  End If 
  SalesTicketHdr.TktStatus$ = ""
  SalesTicketHdr.CustomerNo$ = TicketHeader.EntityNo$
  SalesTicketHdr.CustomerName$ = TicketHeader.Name$
  SalesTicketHdr.Address1$ = TicketHeader.Address1$
  SalesTicketHdr.Address2$ = TicketHeader.Address2$
  SalesTicketHdr.City$ = TicketHeader.City$
  SalesTicketHdr.State$ = TicketHeader.State$
  SalesTicketHdr.PostCode$ = TicketHeader.PostCode$
  SalesTicketHdr.InYardID$ = TicketHeader.InYardID$
  SalesTicketHdr.RFID$ = TicketHeader.RFID$
  SalesTicketHdr.TaxID$ = TicketHeader.TaxID$
  SalesTicketHdr.TaxID2$ = TicketHeader.TaxID2$
  SalesTicketHdr.Trader$ = TicketHeader.Trader$
  SalesTicketHdr.VehType$ = TicketHeader.VehType$
  SalesTicketHdr.VehSize$ = TicketHeader.VehSize$
  SalesTicketHdr.VehNo$ = TicketHeader.VehNo$
  SalesTicketHdr.PUBarcode$ = TicketHeader.PUBarcode$
  SalesTicketHdr.TrailerBarcode$ = TicketHeader.TrailerBarcode$
  SalesTicketHdr.AxleCount = TicketHeader.AxleCount \ If SalesTicketHdr.AxleCount > 127 Let SalesTicketHdr.AxleCount = 0
  SalesTicketHdr.ContainerTareWt = TicketHeader.ContainerTareWt
  SalesTicketHdr.ReleaseNo = TicketHeader.ReleaseNo
  SalesTicketHdr.SONo$ = TicketHeader.OrderNo$
  SalesTicketHdr.SOLine$ = TicketHeader.OrderLine$
  SalesTicketHdr.FundsType$ = TicketHeader.FundsType$
  SalesTicketHdr.ExchangeRate = ExchangeRate
  SalesTicketHdr.MatReqNo$ = TicketHeader.MatReqNo$
  SalesTicketHdr.MatReqLine$ = TicketHeader.MatReqLine$
  SalesTicketHdr.ShipmentNo$ = Items.[1].ShipmentNo$
  SalesTicketHdr.CarrierNo$ = TicketHeader.CarrierNo$
  SalesTicketHdr.CarrierRefNo$ = TicketHeader.CarrierRefNo$
  SalesTicketHdr.TripTicketNo$ = TicketHeader.TripTicketNo$
  SalesTicketHdr.CustRefNo$ = TicketHeader.ShipOrdNo$
  SalesTicketHdr.BOLNo$ = TicketHeader.BOLNo$
  SalesTicketHdr.RouteNo$ = TicketHeader.RouteNo$
  SalesTicketHdr.DeliveryAddr$ = TicketHeader.DeliveryAddr$
  SalesTicketHdr.DeliveringCarrier$ = TicketHeader.DeliveringCarrier$
  SalesTicketHdr.CarInitials$ = TicketHeader.CarInitials$
  SalesTicketHdr.CarNo$ = TicketHeader.CarNo$
  SalesTicketHdr.CustReleaseNo$ = TicketHeader.CustReleaseNo$
  SalesTicketHdr.SealNo$ = TicketHeader.SealNo$
  SalesTicketHdr.Seal2No$ = TicketHeader.Seal2No$
  SalesTicketHdr.Seal3No$ = TicketHeader.Seal3No$
  SalesTicketHdr.ContainerNo$ = TicketHeader.ContainerNo$
  SalesTicketHdr.BookingNo$ = TicketHeader.BookingNo$
  SalesTicketHdr.BargeConstPlmntDate# = TicketHeader.BargeConstPlmntDate#
  SalesTicketHdr.BargeReleaseDate# = TicketHeader.BargeReleaseDate#
  SalesTicketHdr.RFID_InBound = TicketHeader.RFID_InBound
  SalesTicketHdr.RFID_OutBound = TicketHeader.RFID_OutBound
  SalesTicketHdr.Photo = TicketHeader.Photo
  SalesTicketHdr.VehGrossWt = Items.[1].GrossWt
  Try Let SalesTicketHdr.VehGrossWtTime# = Items.[1].GrossWtTime# Else Clear SalesTicketHdr.VehGrossWtTime#
  SalesTicketHdr.VehGrossWtScale$ = Items.[1].GrossWtScale$
  SalesTicketHdr.VehGrossWtWM$ = Items.[1].GrossWtWM$
  SalesTicketHdr.VehTareWt = Items.[1].TareWt
  Try Let SalesTicketHdr.VehTareWtTime# = Items.[1].TareWtTime# Else Clear SalesTicketHdr.VehTareWtTime#
  SalesTicketHdr.VehTareWtScale$ = Items.[1].TareWtScale$
  SalesTicketHdr.VehTareWtWM$ = Items.[1].TareWtWM$
  SalesTicketHdr.VehNetWt = Items.[1].NetWt
  StartItem = 1
  If TicketHeader.TktType$ = "W"
    SalesTicketHdr.WeightType = 1 ! Single Wt
    SalesTicketHdr.VehAdjWt = Items.[1].AdjWt
    SalesTicketHdr.VehAdjCode$ = Items.[1].AdjCode$
    SalesTicketHdr.VehDiffWt = 0
    If Trim$(Items.[1].MaterialCode$) = "" Let StartItem = ItemCount + 1 ! No need to build an item if no material code
  Else If Items.[1].MaterialCode$[1,2] = "*M" ! Multi-Material Sale
    ! Should never get here, but just in case
    SalesTicketHdr.WeightType = 3 ! Mixed Load
    SalesTicketHdr.VehAdjWt = Items.[1].AdjWt
    SalesTicketHdr.VehAdjCode$ = Items.[1].AdjCode$
    If tot_sls_net Let SalesTicketHdr.VehDiffWt = tot_sls_net - SalesTicketHdr.VehNetWt
    StartItem = ItemCount + 1 ! don't create *M line as a detail line
  Else 
    SalesTicketHdr.WeightType = 1 ! Single Wt
    !    SalesTicketHdr.VehAdjWt=Items.[1].AdjWt
    SalesTicketHdr.VehDiffWt = 0
  End If 
  SalesTicketHdr.FreightHrs = TicketHeader.FreightHrs
  If TicketHeader.StartTime# Let SalesTicketHdr.StartTime# = TicketHeader.StartTime# Else Let SalesTicketHdr.StartTime# = Tim#(0)
  SalesTicketHdr.EndTime# = Tim#(0)
  SalesTicketHdr.EntryDate# = RunDate#
  SalesTicketHdr.TktComment$ = TicketHeader.TktComment$
  Try 
    Search #ch_db;"INSERT INTO Sales_Ticket_Hdr (" + SQLN$(SalesTicketHdr.) + ") VALUES (" + SQLV$(SalesTicketHdr.) + ")"
  Else 
    errmess$ = "Error creating entry in Sales_Ticket_Hdr table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10))
    Call SAITouchError(errmess$)
    Call WriteLogFile(errmess$)
  End Try 
  For i = StartItem To ItemCount
    Clear SalesTicketDtl.
    SalesTicketDtl.TicketNo$ = SalesTicketHdr.TicketNo$
    SalesTicketDtl.ShipmentDate# = SalesTicketHdr.ShipmentDate#
    SalesTicketDtl.Leg = SalesTicketHdr.Leg
    SalesTicketDtl.ItemNo = i
    SalesTicketDtl.ContainerQty = 0
    SalesTicketDtl.Container$ = ""
    SalesTicketDtl.Branch$ = SalesTicketHdr.Branch$
    SalesTicketDtl.YardCode$ = Items.[i].YardCode$
    SalesTicketDtl.MaterialCode$ = Items.[i].MaterialCode$
    SalesTicketDtl.MaterialDesc$ = Trim$(Items.[i].MaterialDesc$)
    SalesTicketDtl.InventoryCode$ = Items.[i].InventoryCode$
    SalesTicketDtl.StockPile$ = Trim$(Items.[i].StockPile$)
    SalesTicketDtl.SOLine$ = SalesTicketHdr.SOLine$
    SalesTicketDtl.MatReqLine$ = SalesTicketHdr.MatReqLine$
    SalesTicketDtl.ShipmentNo$ = Trim$(Items.[i].ShipmentNo$)
    SalesTicketDtl.Price = Items.[i].Price
    SalesTicketDtl.Price_UM$ = Items.[i].PriceUM$
    SalesTicketDtl.GrossWt = Items.[i].GrossWt
    Try Let SalesTicketDtl.GrossWtTime# = Items.[i].GrossWtTime# Else Clear SalesTicketDtl.GrossWtTime#
    SalesTicketDtl.GrossWtScale$ = Trim$(Items.[i].GrossWtScale$)
    SalesTicketDtl.GrossWtWM$ = Trim$(Items.[i].GrossWtWM$)
    SalesTicketDtl.GrossWt_BGRead = Items.[i].GrossWt_BGRead
    SalesTicketDtl.GrossWt_BGStatus = Items.[i].GrossWt_BGStatus
    SalesTicketDtl.TareWt = Items.[i].TareWt
    Try Let SalesTicketDtl.TareWtTime# = Items.[i].TareWtTime# Else Clear SalesTicketDtl.TareWtTime#
    SalesTicketDtl.TareWtScale$ = Trim$(Items.[i].TareWtScale$)
    SalesTicketDtl.TareWtWM$ = Trim$(Items.[i].TareWtWM$)
    SalesTicketDtl.TareWt_BGRead = Items.[i].TareWt_BGRead
    SalesTicketDtl.TareWt_BGStatus = Items.[i].TareWt_BGStatus
    SalesTicketDtl.NetWt = Items.[i].NetWt
    SalesTicketDtl.AdjWt = Items.[i].AdjWt
    SalesTicketDtl.AdjPercent = Items.[i].AdjPercent
    SalesTicketDtl.AdjCode$ = Trim$(Items.[i].AdjCode$)
    SalesTicketDtl.CarBodies = Items.[i].CarBodies
    SalesTicketDtl.Bales = Items.[i].Bales
    SalesTicketDtl.ManReason$ = Trim$(Items.[i].ManReason$)
    SalesTicketDtl.OrigMaterialCode$ = Items.[i].OrigMaterialCode$
    SalesTicketDtl.MatCodeChg = Items.[i].MatCodeChg
    SalesTicketDtl.MatDescChg = Items.[i].MatDescChg
    SalesTicketDtl.PriceChg = Items.[i].PriceChg
    SalesTicketDtl.MatExt = Items.[i].MatExt
    Try 
      Search #ch_db;"INSERT INTO Sales_Ticket_Dtl (" + SQLN$(SalesTicketDtl.) + ") VALUES (" + SQLV$(SalesTicketDtl.) + ")"
    Else 
      errmess$ = "Error creating entry in Sales_Ticket_Dtl table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10))
      Call WriteLogFile(errmess$)
      Call SAITouchError(errmess$)
    End Try 
  Next i
SkipSalesTicketDatabase: !
  If VGM_Interface And TicketHeader.BookingNo$ And SalesRelease.VehType$ And (SLFinalFound Or TicketHeader.SplitLoad = 0)
    Clear VGMInterface.
    k$ = "P" + FullPONo$ + Rep$(" ",6)
    ksav$ = k$
    Do 
      Search #ch_1215ro,3,1;k$,r,e
      If e Exit Do 
      If k$[1,Len(ksav$)] <> ksav$
        Exit Do 
      End If 
      Call SAIReadRecord(ch_1215ro,recdef_1215.,"Y","U",r,POFreight$,POFreight[],stat,errmess$)
      !  Vehicle Type matches                        Not flagged for delete       Not generic carrier
      If POFreight$[45,45] = TicketHeader.VehType$ And POFreight$[134,134] <> "Y" And POFreight$[273,273] <> "Y"
        If Trim$(POFreight$[46,47]) = TicketHeader.VehSize$ Or Trim$(POFreight$[46,47]) = ""
          ktemp$ = "C" + POFreight$[33,38]
          Call SAIGetRecord(ch_110Aro,recdef_110A.,ktemp$,1,"Y","U",rec_110A,ScrapCode$,ScrapCode[],stat,errmess$)
          If ScrapCode$[98,98] = "Y"
            VGMInterface.CarrierNo$ = Trim$(ScrapCode$[2,7])
            VGMInterface.SCAC_Code$ = Trim$(ScrapCode$[99,102])
            Exit Do 
          End If 
        End If 
      End If 
    Loop 
    x = 0
    If TicketHeader.SplitLoad
      Search #ch_db;"SELECT VehTareWt FROM Sales_Ticket_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#) + " AND Leg=" + SQLV$(1)
      If Chf(ch_db)
        Map #ch_db;
        Read #ch_db;x
      End If 
    End If 
    If x = 0 Let x = Items.[1].TareWt
    VGMInterface.VGM_Weight = Items.[1].GrossWt - x + TicketHeader.ContainerTareWt
    VGMInterface.TicketNo$ = TicketHeader.TicketNo$
    VGMInterface.ShipmentDate# = TicketHeader.ShipmentDate#
    VGMInterface.Branch$ = TicketHeader.Branch$
    VGMInterface.BookingNo$ = TicketHeader.BookingNo$
    VGMInterface.ContainerNo$ = TicketHeader.VehNo$
    VGMInterface.VGM_UM$ = gbl_um$
    VGMInterface.WeighMaster$ = WeighMaster$
    VGMInterface.SubmissionDate# = Tim#(0)
    VGMInterface.Status$ = ""
    Try 
      Search #ch_db;"INSERT INTO VGM_Interface (" + SQLN$(VGMInterface.) + ") VALUES (" + SQLV$(VGMInterface.) + ")"
    Else 
      errmess$ = "Error creating entry in VGM_Interface table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10))
      Call WriteLogFile(errmess$)
      Call SAITouchError(errmess$)
    End Try 
  End If 
  ! Log Sales Ticket Complete
  If SalesTicketLog And TicketHeader.TktType$ = "S" And TicketHeader.TktMode$ <> "T"
    If SalesTicketHdr.MultiLeg
      If SalesTicketHdr.LegDestinationBranch$ = ""
        Call WriteSalesTicketLog("COMPLETED")
      End If 
    Else 
      Call WriteSalesTicketLog("COMPLETED")
    End If 
  End If 
  ! Delete InYard record
  Call DeleteInYard(stat)
End Sub 
Sub RepriceItems()
  For i = 1 To ItemCount
    TicketDetail. = Items.[i]
    Call GetMaterialPrice(TicketDetail.MaterialCode$,status)
    If status = 0
      If Material.StockPileFlag
        If TicketDetail.InventoryCode$[1,4] = Material.InventoryCode$[1,4] And TicketDetail.YardCode$ = Material.YardCode$
          Material.InventoryCode$ = TicketDetail.InventoryCode$
          Material.StockPile$ = TicketDetail.StockPile$
        End If 
      End If 
      Call PopulateMaterialDetail()
    Else 
      TicketDetail.Price = 0
    End If 
    !  Call CheckRedemption(RedFlag)
    Call CalcExtPrice()
    Items.[i] = TicketDetail.
    Try 
      Search #ch_db;"UPDATE InYard_Dtl SET " + SQLNV$(TicketDetail.) + " WHERE TicketNo=" + SQLV$(TicketDetail.TicketNo$) + " AND ItemNo=" + SQLV$(TicketDetail.ItemNo)
    Else 
      errmess$ = "Error updating item number " + Str$(ItemNo) + " in InYard_Dtl table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10))
      Call WriteLogFile(errmess$)
      Call SAITouchError(errmess$)
    End Try 
    If TicketAudit
      ItemNo = i
      Call LoadTicketAudit()
      TicketAudit.Event$ = "Item Re-Priced"
      Call WriteTicketAudit()
    End If 
  Next i
End Sub 
Sub GetPeddlerInfo(status)
  ysize = 270
  chwin1 = SAIOpenWindow("Identity Information",800,ysize,1)
  Print #chwin1;PChr$(bgcolor1);'BACKCOLOR CS WCSETCOLOR';
  Print #chwin1;PChr$("Arial");'FONTFACE 12FONTSIZE EBOLD WCSETFONT';
  x0 = 10 \ x1 = 150 \ bw = 100
  x = x1 + 455
  y = 10 \ dy = 30 \ dx = 400
  Print #chwin1;PChr$(110,x0,y,x1,y + 14,"License/ID No:");'WCLABEL';
  Print #chwin1;PChr$(10,x1,y - 1,x1 + dx,y + 15,"",2,FmtOf(TicketHeader.IDNumber$));'WCSTRING';
  Print #chwin1;'10WCSELECT WCRESETCOLOR 0WCSELECT';
  Print #chwin1;PChr$(30,x,y - 5,x + bw,y + 20,"Keyboard",0);'WCBUTTON';
  y = y + dy \ dx = 450
  Print #chwin1;PChr$(111,x0,y,x1,y + 14,"Name:");'WCLABEL';
  Print #chwin1;PChr$(11,x1,y - 1,x1 + dx,y + 15,"",2,FmtOf(TicketHeader.Name$));'WCSTRING';
  Print #chwin1;'11WCSELECT WCRESETCOLOR 0WCSELECT';
  Print #chwin1;PChr$(31,x,y - 5,x + bw,y + 20,"Keyboard",0);'WCBUTTON';
  y = y + dy \ dx = 400
  Print #chwin1;PChr$(112,x0,y,x1,y + 14,"Address:");'WCLABEL';
  Print #chwin1;PChr$(12,x1,y - 1,x1 + dx,y + 15,"",2,FmtOf(TicketHeader.Address1$));'WCSTRING';
  Print #chwin1;'12WCSELECT WCRESETCOLOR 0WCSELECT';
  Print #chwin1;PChr$(32,x,y - 5,x + bw,y + 20,"Keyboard",0);'WCBUTTON';
  y = y + dy \ dx = 400
  Print #chwin1;PChr$(113,x0,y,x1,y + 14,"City:");'WCLABEL';
  Print #chwin1;PChr$(13,x1,y - 1,x1 + dx,y + 15,"",2,FmtOf(TicketHeader.City$));'WCSTRING';
  Print #chwin1;'13WCSELECT WCRESETCOLOR 0WCSELECT';
  Print #chwin1;PChr$(33,x,y - 5,x + bw,y + 20,"Keyboard",0);'WCBUTTON';
  y = y + dy \ dx = 70
  Print #chwin1;PChr$(114,x0,y,x1,y + 14,"State:");'WCLABEL';
  Print #chwin1;PChr$(14,x1,y - 1,x1 + dx,y + 15,"",2,gbl_stlen);'WCSTRING';
  Print #chwin1;'14WCSELECT WCRESETCOLOR 0WCSELECT';
  x = x1 + 150 + 5
  Print #chwin1;PChr$(34,x,y - 5,x + bw,y + 20,"List",0);'WCBUTTON';
  y = y + dy \ dx = 150
  Print #chwin1;PChr$(115,x0,y,x1,y + 14,"Postal Code:");'WCLABEL';
  Print #chwin1;PChr$(15,x1,y - 1,x1 + dx,y + 15,"",2,FmtOf(TicketHeader.PostCode$));'WCSTRING';
  Print #chwin1;'15WCSELECT WCRESETCOLOR 0WCSELECT';
  x = x1 + dx + 5
  Print #chwin1;PChr$(35,x,y - 5,x + bw,y + 20,"Keyboard",0);'WCBUTTON';
  y = y + dy \ dx = 150
  Print #chwin1;PChr$(116,x0,y,x1,y + 14,"Phone No:");'WCLABEL';
  Print #chwin1;PChr$(16,x1,y - 1,x1 + dx,y + 15,"",2,FmtOf(TicketHeader.PhoneNo$));'WCSTRING';
  Print #chwin1;'16WCSELECT WCRESETCOLOR 0WCSELECT';
  x = x1 + dx + 5
  Print #chwin1;PChr$(36,x,y - 5,x + bw,y + 20,"Keyboard",0);'WCBUTTON';
  y = y + 25
  Print #chwin1;PChr$(200,x0,y,200,y + 14,"",0);'WCTEXT';
  Print #chwin1;'200WCSELECT';PChr$(-1,ReqColor);'WCSETCOLOR';"Required Field";'0WCSELECT';
  Call SAIButtons(chwin1,2,1,"Submit~Cancel",800,ysize - 30,25,100,20)
  Print #chwin1;PChr$(3,10,ysize - 30,200,ysize - 5,"Identity Lookup",2);'WCBUTTON';
  y = ysize - 30
  If CardReaders$[0]
    Print #chwin1;PChr$(4,600,y,790,y + 25,"Read License",2);'WCBUTTON';
    y = y - 30
  End If 
  If PhotoCameras
    Print #chwin1;PChr$(5,600,y,790,y + 25,"Capture Photo",2);'WCBUTTON';
    y = y - 30
  End If 
  If PhotoURL$
    Print #chwin1;PChr$(6,600,y,790,y + 25,"View Photos",2);'WCBUTTON';
  End If 
  Print #chwin1;'10WCSELECT CU';Trim$(TicketHeader.IDNumber$);
  Print #chwin1;'11WCSELECT CU';Trim$(TicketHeader.Name$);
  Print #chwin1;'12WCSELECT CU';Trim$(TicketHeader.Address1$);
  TicketHeader.Address2$ = ""
  Print #chwin1;'13WCSELECT CU';Trim$(TicketHeader.City$);
  Print #chwin1;'14WCSELECT CU';Trim$(TicketHeader.State$);
  Print #chwin1;'15WCSELECT CU';Trim$(TicketHeader.PostCode$);
  Print #chwin1;'16WCSELECT CU';Trim$(TicketHeader.PhoneNo$);'0WCSELECT';
  Print #chwin1;'10WCFOCUS';
  Do 
    Input #chwin1; Len (1);w$
    Select Case w$
      Case 'F1' ! Submit
        w$ = Trim$(SAIQuery$(chwin1,11))
        If w$ = ""
          Call SAITouchError("You must enter a Name")
        Else 
          stat = 0
          Print #chwin1;PChr$(10,16);'WCQUERY';
          Input #chwin1,1;TicketHeader.IDNumber$
          Input #chwin1,1;TicketHeader.Name$
          Input #chwin1,1;TicketHeader.Address1$
          Input #chwin1,1;TicketHeader.City$
          Input #chwin1,1;TicketHeader.State$
          Input #chwin1,1;TicketHeader.PostCode$
          Input #chwin1,1;TicketHeader.PhoneNo$
          If Trim$(TicketHeader.State$)
            Try 
              Search #ch_db;"SELECT State FROM Codes_State WHERE State=" + SQLV$(Trim$(TicketHeader.State$))
              nr = Chf(ch_db)
            Else 
              nr = 0
            End Try 
            If nr
              TicketHeader.State$ = SAISpaceFill$(UCase$(Trim$(TicketHeader.State$)),gbl_stlen)
            Else 
              stat = 2
            End If 
          End If 
          If stat = 0
            IdentityInfo = 1
            status = 0
            Exit Do 
            !        else if stat=1
            !          Call SAITouchError("You must enter a full address.")
          Else If stat = 2
            Call SAITouchError("Invalid State entered.")
          End If 
        End If 
      Case 'F2' ! Cancel
        status = 1
        Exit Do 
      Case 'F3' ! Identity Lookup
        Call SAIRetrieveSupplierID(ch_db,SupplierID.,CardReaders$[],status)
        If status = 0
          Print #chwin1;'10WCSELECT CU';SupplierID.IDNumber$
          Print #chwin1;'11WCSELECT CU';SupplierID.FullName$
          Print #chwin1;'12WCSELECT CU';SupplierID.Address1$
          Print #chwin1;'13WCSELECT CU';SupplierID.City$
          Print #chwin1;'14WCSELECT CU';SupplierID.State$
          Print #chwin1;'15WCSELECT CU';SupplierID.PostCode$;
          Print #chwin1;'16WCSELECT CU';SupplierID.PhoneNo$;'0WCSELECT';
          Clear SupplierID.
        End If 
      Case 'F4' ! Read Drivers License
        Print #chwin1;PChr$(1,3);'WCDISABLE';
        Device$ = SAISelectCardReader$(CardReaders$[])
        If Device$
          Call SAIReadLicense2(Device$,2,DriversLicense.,status)
          If status = 0
            Call SAIFormatName(DefaultNameOrder$,DriversLicense.)
            Print #chwin1;'10WCSELECT CU';DriversLicense.LicenseNo$
            Print #chwin1;'11WCSELECT CU';DriversLicense.FullName$
            Print #chwin1;'12WCSELECT CU';DriversLicense.Address1$
            Print #chwin1;'13WCSELECT CU';DriversLicense.City$
            Print #chwin1;'14WCSELECT CU';DriversLicense.State$
            Print #chwin1;'15WCSELECT CU';DriversLicense.PostCode$;'0WCSELECT';
          End If 
        End If 
        Print #chwin1;PChr$(1,3);'WCENABLE';
      Case 'F5' ! Capture ID
        If z$[644,646] = "323" And TicketHeader.EntityNo$[1,3] = "CP0" ! SA Recycling - Peddler
          temp$ = ""
        Else 
          temp$ = TicketHeader.Name$
        End If 
        Call SAICapturePhoto(CameraDefs$[],TicketHeader.TicketNo$,"P",Branch$,TicketHeader.EntityNo$,temp$,WeighMaster$,PhotoCaptured)
        If PhotoCaptured > 0 Let TicketHeader.Photo = 1
      Case 'F6' ! View Photos
        Call SAIViewPhotos(TicketHeader.TicketNo$,Branch$,PhotoURL$,TicketHeader.ShipmentDate#)
      Case 'F30' ! License No
        w$ = Trim$(SAIQuery$(chwin1,10))
        Call SAIKeyBoardGen("Enter License/ID No.",KBParams.alphacase,FmtOf(TicketHeader.IDNumber$),0,w$,status)
        If status = 0
          Print #chwin1;'10WCSELECT CU';w$;'0WCSELECT';
        End If 
      Case 'F31' ! Name
        w$ = Trim$(SAIQuery$(chwin1,11))
        Call SAIKeyBoardGen("Enter Name",KBParams.alphacase,FmtOf(TicketHeader.Name$),0,w$,status)
        If status = 0
          Print #chwin1;'11WCSELECT CU';w$;'0WCSELECT';
        End If 
      Case 'F32' ! Address
        w$ = Trim$(SAIQuery$(chwin1,12))
        Call SAIKeyBoardGen("Enter Address",KBParams.alphacase,FmtOf(TicketHeader.Address1$),0,w$,status)
        If status = 0
          Print #chwin1;'12WCSELECT CU';w$;'0WCSELECT';
        End If 
      Case 'F33' ! City
        w$ = Trim$(SAIQuery$(chwin1,13))
        Call SAIKeyBoardGen("Enter City",KBParams.alphacase,FmtOf(TicketHeader.City$),0,w$,status)
        If status = 0
          Print #chwin1;'13WCSELECT CU';w$;'0WCSELECT';
        End If 
      Case 'F34' ! State
        k$ = Trim$(SAIQuery$(chwin1,14))
        Call ListStates(k$,w$)
        If w$ Print #chwin1;'14WCSELECT CU';w$;'0WCSELECT';
      Case 'F35' ! Zip
        w$ = Trim$(SAIQuery$(chwin1,15))
        Call SAIKeyBoardGen("Enter Postal Code",KBParams.alphacase,FmtOf(TicketHeader.PostCode$),0,w$,status)
        If status = 0
          Print #chwin1;'15WCSELECT CU';w$;'0WCSELECT';
        End If 
      Case 'F36' ! Phone
        w$ = Trim$(SAIQuery$(chwin1,16))
        Call SAIKeyBoardGen("Enter Phone Number",KBParams.alphacase,FmtOf(TicketHeader.PhoneNo$),0,w$,status)
        If status = 0
          Print #chwin1;'16WCSELECT CU';w$;'0WCSELECT';
        End If 
    End Select 
  Loop 
  Close #chwin1
End Sub 
Sub AddRFID(RFID$,status)
  Clear RFIDMaster.,SupplierID.
  ysize = 290
  bgcolor1 = SAIColorRGB(230,230,230)
  chrfid = SAIOpenWindow("Add RFID Vehicle",800,ysize,1)
  Print #chrfid;PChr$("Arial");'FONTFACE';
  Print #chrfid;PChr$(bgcolor1);'BACKCOLOR CS';
  Print #chrfid;'WCSETCOLOR';
  Print #chrfid;'12FONTSIZE WCSETFONT';
  x0 = 10 \ x1 = 180 \ bw = 100
  y = 5 \ dy = 18
  x = x0 \ dx = 70
  Print #chrfid;PChr$(140,x,y + 1,x + dx,y + 14,"RFID:");'WCLABEL';
  x = x0 + dx \ dx = 320
  Print #chrfid;PChr$(40,x,y,x + dx,y + 14,"",0);'WCTEXT';
  Print #chrfid;'40WCSELECT WCSETCOLOR';RFID$;'0WCSELECT';
  x = x + dx + 20 \ dx = 110
  Print #chrfid;PChr$(110,x,y + 1,x + dx,y + 15,"In-Yard ID:");'WCLABEL';
  x = x + dx \ dx = 250
  Print #chrfid;PChr$(10,x,y,x + dx,y + 15,"",2,FmtOf(RFIDMaster.InYardID$));'WCSTRING';
  Print #chrfid;'10WCSELECT';PChr$(-1,16777215);'WCSETCOLOR';'0WCSELECT';
  y = y + dy
  y0 = y \ y = y + 15
  x = x0 + 10 \ dx = 180
  Print #chrfid;PChr$(111,x,y + 1,x + dx,y + 15,"Veh Tag State:");'WCLABEL';
  x = x + dx \ dx = 70
  Print #chrfid;PChr$(11,x,y,x + dx,y + 15,"",2,FmtOf(RFIDMaster.VehicleTagState$));'WCSTRING';
  Print #chrfid;'11WCSELECT';PChr$(-1,16777215);'WCSETCOLOR 0WCSELECT';
  x = x + dx + 40 \ dx = 140
  Print #chrfid;PChr$(112,x,y + 1,x + dx,y + 15,"Veh Tag No:");'WCLABEL';
  x = x + dx \ dx = 300
  Print #chrfid;PChr$(12,x,y,x + dx,y + 15,"",2,FmtOf(RFIDMaster.VehicleTagNo$));'WCSTRING';
  Print #chrfid;'12WCSELECT';PChr$(-1,16777215);'WCSETCOLOR 0WCSELECT';
  y = y + dy
  x = x0 + 10 \ dx = 180
  Print #chrfid;PChr$(113,x,y + 1,x + dx,y + 15,"Veh Description:");'WCLABEL';
  x = x + dx \ dx = 550
  Print #chrfid;PChr$(13,x,y,x + dx,y + 15,"",2,FmtOf(RFIDMaster.VehicleDesc$));'WCSTRING';
  Print #chrfid;'13WCSELECT';PChr$(-1,16777215);'WCSETCOLOR 0WCSELECT';
  y = y + 20
  Print #chrfid;'10FONTSIZE BI WCSETFONT';
  Print #chrfid;PChr$(300,x0,y0,790,y,"Vehicle Information");'WCGROUP';
  Print #chrfid;'12FONTSIZE EI WCSETFONT';
  y00 = y
  y0 = y + 10
  x = x0 + 30 \ dx = 150
  y = y + 22
  Print #chrfid;PChr$(141,x,y + 1,x + dx,y + 14,"Full Name:");'WCLABEL';
  x = x + dx \ dx = 470
  Print #chrfid;PChr$(41,x,y,x + dx,y + 14,"",0);'WCTEXT';
  y = y + dy
  x = x0 + 30 \ dx = 150
  Print #chrfid;PChr$(142,x,y + 1,x + dx,y + 14,"License/ID No:");'WCLABEL';
  x = x + dx \ dx = 280
  Print #chrfid;PChr$(42,x,y,x + dx,y + 14,"",0);'WCTEXT';
  x = x + dx + 40 \ dx = 80
  Print #chrfid;PChr$(143,x,y + 1,x + dx,y + 14,"State:");'WCLABEL';
  x = x + dx \ dx = 70
  Print #chrfid;PChr$(43,x,y,x + dx,y + 14,"",0);'WCTEXT';
  y = y + 20
  Print #chrfid;'10FONTSIZE BI WCSETFONT';
  Print #chrfid;PChr$(310,20,y0,670,y,"Driver Identity");'WCGROUP';
  Print #chrfid;'310WCSELECT';PChr$(255,bgcolor1);'WCSETCOLOR 0WCSELECT';
  Print #chrfid;'12FONTSIZE EI WCSETFONT';
  Print #chrfid;PChr$(30,680,y0 + 5,780,y0 + 25,"Select",2);'WCBUTTON';
  Print #chrfid;PChr$(31,680,y0 + 30,780,y0 + 50,"Create",2);'WCBUTTON';
  Print #chrfid;@320,y;'10FONTSIZE 255FONTCOLOR';"- OR -";'12FONTSIZE';
  y0 = y + 5
  x = x0 + 30 \ dx = 620
  y = y + 18
  Print #chrfid;PChr$(44,x,y,x + dx,y + 14,"",0);'WCTEXT';
  y = y + dy \ dx = 200
  Print #chrfid;PChr$(32,x,y,x + dx,y + 14,"Branch Peddler",6);'WCCHECK';
  y = y + 16
  Print #chrfid;'10FONTSIZE BI WCSETFONT';
  Print #chrfid;PChr$(320,20,y0,670,y,"Supplier");'WCGROUP';
  Print #chrfid;'320WCSELECT';PChr$(255,bgcolor1);'WCSETCOLOR 0WCSELECT';
  Print #chrfid;'12FONTSIZE EI WCSETFONT';
  Print #chrfid;PChr$(33,680,y0 + 15,780,y0 + 35,"Select",2);'WCBUTTON';
  Print #chrfid;@320,y;'10FONTSIZE';"- OR -";'-1FONTCOLOR 12FONTSIZE';
  y0 = y + 5
  x = x0 + 30 \ dx = 620
  y = y + 18
  Print #chrfid;PChr$(45,x,y,x + dx,y + 14,"",0);'WCTEXT';
  y = y + 20
  Print #chrfid;'10FONTSIZE BI WCSETFONT';
  Print #chrfid;PChr$(330,20,y0,670,y,"Carrier");'WCGROUP';
  Print #chrfid;'330WCSELECT';PChr$(255,bgcolor1);'WCSETCOLOR 0WCSELECT';
  Print #chrfid;'12FONTSIZE EI WCSETFONT';
  Print #chrfid;PChr$(34,680,y0 + 10,780,y0 + 30,"Select",2);'WCBUTTON';
  y = y + 5
  Print #chrfid;PChr$(340,x0,y00,790,y,"");'WCGROUP';
  y = y + 8 \ elem = elem + 1
  x = x0
  dx = 130
  Print #chrfid;PChr$(114,x,y + 1,x + dx,y + 15,"Comment:");'WCLABEL';
  x = x + dx \ dx = 520
  Print #chrfid;PChr$(14,x,y,x + dx,y + 15,"",2,FmtOf(RFIDMaster.Comment$));'WCSTRING';
  Print #chrfid;'14WCSELECT';PChr$(-1,16777215);'WCSETCOLOR 0WCSELECT';
  Call SAIButtons(chrfid,2,1,"Submit~Cancel",800,ysize - 30,25,100,20)
  Print #chrfid;'10WCFOCUS';
  Do 
    Input #chrfid; Len (1);w$
    Select Case w$
      Case 'F1' ! Submit
        RFIDMaster.RFID$ = RFID$
        Print #chrfid;PChr$(10,14);'WCQUERY';
        RFIDMaster.InYardID$ = SAIQueryInput$(chrfid,0)
        RFIDMaster.VehicleTagState$ = SAIQueryInput$(chrfid,0)
        RFIDMaster.VehicleTagNo$ = SAIQueryInput$(chrfid,0)
        RFIDMaster.VehicleDesc$ = SAIQueryInput$(chrfid,0)
        RFIDMaster.Comment$ = SAIQueryInput$(chrfid,0)
        RFIDMaster.DateCreated# = Tim#(0)
        RFIDMaster.DateLastUsed# = Tim#(0)
        RFIDMaster.BranchCreated$ = Branch$
        RFIDMaster.BranchLastUsed$ = Branch$
        Try 
          Search #ch_db;"INSERT INTO RFID_Master (" + SQLN$(RFIDMaster.) + ") VALUES (" + SQLV$(RFIDMaster.) + ")"
          status = 0
          If RFIDMaster.SupplierID And Trim$(SupplierID.SupplierNo$)
            RFIDMaster.SupplierType$ = "S"
            RFIDMaster.SupplierNo$ = SupplierID.SupplierNo$
            If SupplierID.SupplierNo$ = "******"
              RFIDMaster.SupplierNo$ = BranchPeddlerNo$
            Else 
              RFIDMaster.SupplierNo$ = SupplierID.SupplierNo$
            End If 
          End If 
          Exit Do 
        Else 
          Call SAITouchError("Error creating entry in RFID_Master table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
        End Try 
      Case 'F2' ! Cancel
        Clear RFIDMaster.
        status = 1
        Exit Do 
      Case 'F30' ! Select Supplier ID
        Call SAIRetrieveSupplierID(ch_db,SupplierID.,CardReaders$[],status)
        If status = 0
          Print #chrfid;'41WCSELECT CU';SupplierID.FullName$;
          Print #chrfid;'42WCSELECT CU';SupplierID.IDNumber$;
          Print #chrfid;'43WCSELECT CU';SupplierID.State$;
          Print #chrfid;'32WCSELECT CU 44WCSELECT CU 45WCSELECT 0WCSELECT';
          RFIDMaster.SupplierID = SupplierID.rowid
          RFIDMaster.SupplierType$ = "S"
          RFIDMaster.SupplierNo$ = ""
        End If 
      Case 'F31' ! Create Supplier ID
        Call SAICreateIdentity(z$,ch_db,ConfigFile$,rowid)
        If rowid
          Clear SupplierID.
          Try 
            Search #ch_db;"SELECT * FROM Supplier_ID WHERE rowid=" + SQLV$(rowid)
            Map Record #ch_db As Supplier_ID
            Read Record #ch_db;SupplierID.
            Print #chrfid;'41WCSELECT CU';SupplierID.FullName$;
            Print #chrfid;'42WCSELECT CU';SupplierID.IDNumber$;
            Print #chrfid;'43WCSELECT CU';SupplierID.State$;
            Print #chrfid;'32WCSELECT CU 44WCSELECT CU 45WCSELECT 0WCSELECT';
            RFIDMaster.SupplierID = SupplierID.rowid
            RFIDMaster.SupplierType$ = "S"
            RFIDMaster.SupplierNo$ = ""
          Else 
          End Try 
        End If 
      Case 'F32' ! Branch Peddler
        Print #chrfid;'41WCSELECT CU 42WCSELECT CU 43WCSELECT CU 45WCSELECT CU 0WCSELECT';
        RFIDMaster.SupplierID = 0
        bp = SAIQuery$(chrfid,32)
        If bp
          Print #chrfid;'44WCSELECT CU';"******: Branch Peddler";'0WCSELECT';
          RFIDMaster.SupplierType$ = "S"
          RFIDMaster.SupplierNo$ = "******"
        Else 
          Print #chrfid;'44WCSELECT CU 0WCSELECT';
          RFIDMaster.SupplierType$ = ""
          RFIDMaster.SupplierNo$ = ""
        End If 
      Case 'F33' ! Select Supplier
        Call GetSupplier()
        If SupplierNo$
          Print #chrfid;'32WCSELECT CU 41WCSELECT CU 42WCSELECT CU 43WCSELECT CU 45WCSELECT CU';
          Print #chrfid;'44WCSELECT CU';SupplierNo$;": ";Supplier.Name$;'0WCSELECT';
          RFIDMaster.SupplierType$ = "S"
          RFIDMaster.SupplierNo$ = SupplierNo$
          RFIDMaster.SupplierID = 0
        End If 
      Case 'F34' ! Select Carrier
        VehicleType$ = DefaultVehType$
        Call GetCarrier(VehicleType$,CarrierNo$,status)
        If CarrierNo$
          Print #chrfid;'32WCSELECT CU 41WCSELECT CU 42WCSELECT CU 43WCSELECT CU 44WCSELECT CU';
          Print #chrfid;'45WCSELECT CU';CarrierNo$;": ";Trim$(ScrapCode$[15,34]);'0WCSELECT';
          RFIDMaster.SupplierType$ = "C"
          RFIDMaster.SupplierNo$ = CarrierNo$
          RFIDMaster.SupplierID = 0
        End If 
    End Select 
  Loop 
  Close #chrfid
End Sub 
Sub GetRFID(RFID$,RFIDMaster. As RFID_Master,status)
  Clear RFIDMaster.,RFID$
  Clear SupplierID.
  If RFReader$[ReadScale] = "demo"
    RFID$ = "07C72731412DA003"
    RFIDAge = 10
    status = 0
  Else 
    Call SAIReadRFID(RFReader$[ReadScale],RFID$,RFIDAge,status,errmess$)
  End If 
  If status
    Call SAITouchError("Error reading RFID Tag!\15\" + errmess$)
    Exit Sub 
  Else If RFID$ = ""
    status = -1
    Exit Sub 
  End If 
  Try 
    Search #ch_db;"SELECT * FROM RFID_Master WHERE RFID=" + SQLV$(RFID$)
    If Chf(ch_db)
      Map Record #ch_db As RFID_Master
      Read Record #ch_db;RFIDMaster.
      RFIDMaster.DateLastUsed# = Tim#(0)
      RFIDMaster.BranchLastUsed$ = Branch$
      Try Search #ch_db;"UPDATE RFID_Master SET DateLastUsed=" + SQLV$(RFIDMaster.DateLastUsed#) + ", BranchLastUsed=" + SQLV$(RFIDMaster.BranchLastUsed$) + " WHERE RFID=" + SQLV$(RFIDMaster.RFID$)  else rem
      If RFIDMaster.SupplierID
        Try 
          Search #ch_db;"SELECT * FROM Supplier_ID WHERE rowid=" + SQLV$(RFIDMaster.SupplierID)
          If Chf(ch_db)
            Map Record #ch_db As Supplier_ID
            Read Record #ch_db;SupplierID.
            If Trim$(SupplierID.SupplierNo$)
              RFIDMaster.SupplierType$ = "S"
              RFIDMaster.SupplierNo$ = SupplierID.SupplierNo$
            End If 
          Else 
            RFIDMaster.SupplierID = 0
          End If 
        Else 
          RFIDMaster.SupplierID = 0
        End Try 
      End If 
      If RFIDMaster.SupplierType$ = "S" And RFIDMaster.SupplierNo$ Let RFIDMaster.SupplierNo$ = BranchPeddlerNo$
    End If 
  Else 
  End Try 
  If RFIDMaster.RFID$
    status = 0
  Else If RFMaxAge And RFIDAge > RFMaxAge
    temp$ = "RFID Tag read, but not on file\15\and exceeded maximum age of " + Str$(RFMaxAge) + ".\15\\15\"
    temp$ = temp$ + "RFID: " + RFID$ + "   Age: " + Str$(RFIDAge) + "\15\\15\"
    temp$ = temp$ + "Current date: " + DateUsing$(Tim#(0),DateformatText$ + " HH:NN")
    Call SAITouchWarning(temp$)
    status = 1
  Else If RFCreateMaster$ = "Y"
    ans = SAITouchYesNo("RFID Tag read, but not on file.  Do you wish to add?")
    If ans
      Call AddRFID(RFID$,status)
      If status = 0 ! Created RFID record
        ID$ = RFIDMaster.InYardID$
      Else 
        Clear RFIDMaster.
      End If 
    End If 
    status = 0
  Else 
    status = 0
  End If 
End Sub 
Sub DisplayRFIDInfo(status)
  ysize = 270
  chrfid = SAIOpenWindow("RFID Vehicle",800,ysize,1)
  Print #chrfid;PChr$("Arial");'FONTFACE';
  Print #chrfid;PChr$(bgcolor1);'BACKCOLOR CS';
  Print #chrfid;'WCSETCOLOR';
  Print #chrfid;'12FONTSIZE WCSETFONT';
  x0 = 10 \ x1 = 180
  y = 10 \ dy = 20
  elem = 10
  dx = 320
  Print #chrfid;PChr$(100 + elem,x0,y,x1,y + 14,"RFID:");'WCLABEL';
  Print #chrfid;PChr$(elem,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chrfid;PChr$(elem);'WCSELECT';Trim$(RFIDMaster.RFID$);'0WCSELECT';
  y = y + dy \ elem = elem + 1
  dx = 250
  Print #chrfid;PChr$(100 + elem,x0,y,x1,y + 14,"In-Yard ID:");'WCLABEL';
  Print #chrfid;PChr$(elem,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chrfid;PChr$(elem);'WCSELECT';Trim$(RFIDMaster.InYardID$);'0WCSELECT';
  y = y + dy + 10 \ elem = elem + 1
  dx = 70
  Print #chrfid;PChr$(100 + elem,x0,y,x1,y + 14,"Veh Tag State:");'WCLABEL';
  Print #chrfid;PChr$(elem,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chrfid;PChr$(elem);'WCSELECT';Trim$(RFIDMaster.VehicleTagState$);'0WCSELECT';
  x = x1 + dx + 40 \ dx = 180 \ elem = elem + 1
  Print #chrfid;PChr$(100 + elem,x,y,x + dx,y + 14,"Veh Tag Number:");'WCLABEL';
  x = x + dx \ dx = 200
  Print #chrfid;PChr$(elem,x,y,x + dx,y + 14,"",0);'WCTEXT';
  Print #chrfid;PChr$(elem);'WCSELECT';Trim$(RFIDMaster.VehicleTagNo$);'0WCSELECT';
  y = y + dy \ elem = elem + 1
  dx = 400
  Print #chrfid;PChr$(100 + elem,x0,y,x1,y + 14,"Veh Description:");'WCLABEL';
  Print #chrfid;PChr$(elem,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chrfid;PChr$(elem);'WCSELECT';Trim$(RFIDMaster.VehicleDesc$);'0WCSELECT';
  y = y + dy + 10 \ elem = elem + 1
  dx = 250
  Print #chrfid;PChr$(100 + elem,x0,y,x1,y + 14,"Driver Name:");'WCLABEL';
  Print #chrfid;PChr$(elem,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  y = y + dy \ elem = elem + 1
  dx = 250
  Print #chrfid;PChr$(100 + elem,x0,y,x1,y + 14,"License/ID No:");'WCLABEL';
  Print #chrfid;PChr$(elem,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  x = x1 + dx + 40 \ dx = 70 \ elem = elem + 1
  Print #chrfid;PChr$(100 + elem,x,y,x + dx,y + 14,"State:");'WCLABEL';
  x = x + dx \ dx = 70
  Print #chrfid;PChr$(elem,x,y,x + dx,y + 14,"",0);'WCTEXT';
  If RFIDMaster.SupplierID
    Print #chrfid;PChr$(elem - 2);'WCSELECT';Trim$(SupplierID.FullName$);'0WCSELECT';
    Print #chrfid;PChr$(elem - 1);'WCSELECT';Trim$(SupplierID.IDNumber$);'0WCSELECT';
    Print #chrfid;PChr$(elem);'WCSELECT';Trim$(SupplierID.State$);'0WCSELECT';
  End If 
  y = y + dy \ elem = elem + 1
  dx = 600
  If RFIDMaster.SupplierType$ = "C"
    temp$ = "Carrier:"
  Else 
    temp$ = "Supplier:"
  End If 
  Print #chrfid;PChr$(100 + elem,x0,y,x1,y + 14,temp$);'WCLABEL';
  Print #chrfid;PChr$(elem,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chrfid;PChr$(elem);'WCSELECT';Trim$(RFIDMaster.SupplierNo$);": ";SAIGetEntityName$(ch_db,"Supplier_Master","SupplierNo",RFIDMaster.SupplierNo$);'0WCSELECT';
  y = y + dy + 10 \ elem = elem + 1
  dx = 600
  Print #chrfid;PChr$(100 + elem,x0,y,x1,y + 14,"Comment:");'WCLABEL';
  Print #chrfid;PChr$(elem,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chrfid;PChr$(elem);'WCSELECT';Trim$(RFIDMaster.Comment$);'0WCSELECT';
  y = y + dy + 10 \ elem = elem + 1
  dx = 600
  Print #chrfid;PChr$(100 + elem,x0,y,x1,y + 14,"Tag Read:");'WCLABEL';
  Print #chrfid;PChr$(elem,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  If RFIDAge > 60
    Age = SAIDivide(RFIDAge,60,1)
    temp$ = Str$(Age) + " minutes ago"
  Else 
    temp$ = Str$(RFIDAge) + " seconds ago"
  End If 
  If RFMaxAge And RFIDAge > RFMaxAge
    temp$ = temp$ + ":  EXCEEDS MAX AGE OF " + Str$(SAIDivide(RFMaxAge,60,1)) + " minutes!"
    Print #chrfid;PChr$(elem);'WCSELECT';PChr$(-1,16711680);'WCSETCOLOR';temp$;'0WCSELECT';
  Else 
    Print #chrfid;PChr$(elem);'WCSELECT';temp$;'0WCSELECT';
  End If 
  Call SAIButtons(chrfid,2,1,"&&&Accept~&Cancel",800,ysize - 35,25,100,20)
  If SupplierID.IDPhoto And AutoViewID$ = "Y"
    Call SAILicView(SupplierID.IDNumber$,PhotoURL$)
  End If 
  Print #chrfid;'1WCFOCUS';
  Do 
    Input #chrfid; Len (1);w$
    Select Case w$
      Case 'F1' ! Accept
        SupplierNo$ = ""
        CarrierNo$ = ""
        If RFIDMaster.SupplierType$ = "S"
          SupplierNo$ = RFIDMaster.SupplierNo$
        Else If RFIDMaster.SupplierType$ = "C"
          CarrierNo$ = RFIDMaster.SupplierNo$
        End If 
        ID$ = RFIDMaster.InYardID$
        If RFIDMaster.SupplierID
          Clear TicketIdentity.
          Call SAISetTicketIdentity(TicketIdentity.,SupplierID.)
          TicketIdentity.IDPhoto = SupplierID.IDPhoto
          TicketIdentity.VehicleTagState$ = RFIDMaster.VehicleTagState$
          TicketIdentity.VehicleTagNo$ = RFIDMaster.VehicleTagNo$
          TicketIdentity.VehicleDesc$ = RFIDMaster.VehicleDesc$
        End If 
        status = 0
        Exit Do 
      Case 'F2' ! Cancel
        Clear RFIDMaster.,TicketIdentity.
        status = 1
        Exit Do 
    End Select 
  Loop 
  Close #chrfid
End Sub 
Sub RFIDInYardLookup(RFID$,status)
  status = 1
  Search #ch_db;"SELECT * FROM InYard_Hdr WHERE RFID=" + SQLV$(RFID$) + " AND Branch=" + SQLV$(Branch$)
  If Chf(ch_db)
    Map Record #ch_db As Ticket_Header
    Read Record #ch_db;TicketHeader.
    TicketHeader.RFID_OutBound = 1
    Try Search #ch_db;"UPDATE InYard_Hdr SET RFID_OutBound=" + SQLV$(TicketHeader.RFID_OutBound) + " WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) Else Rem
    If TicketHeader.InUse
      PortNumber = TicketHeader.InUsePort$
      TicketHeader.InUse = SAICheckInUse(PortNumber,TicketHeader.InUseBy$,"truckscale,retailscale,multimatsales,mixunload")
      If TicketHeader.InUse Call TicketInUse(TicketHeader.InUsePort$,TicketHeader.InUseBy$,TicketHeader.InUse)
    End If 
    If TicketHeader.InUse
      status = 1
    Else 
      status = 0
    End If 
  End If 
End Sub 
Sub GetInYardID(mode$,ID$,status)
  !
  ! mode$  ="P" for purchase
  !        ="S" for sale
  !        ="NL" for No List option, and enforce ID not in use
  ! status =0  Available ID successfully entered
  !        =-1 Operation cancelled
  !        =1  ID entered and exists in InYard table
  !
  Clear ID$,RFID$,RFIDMaster.,SupplierID.
  If RFReader$[ReadScale] And RFAutoRead$ = "Y"
    Call GetRFID(RFID$,RFIDMaster.,status)
    If status = 0
      Call RFIDInYardLookup(RFID$,status)
      If status = 0
        If mode$ = "NL"
          Clear RFID$,RFIDMaster. ! Ignore read
        Else 
          ID$ = TicketHeader.InYardID$
          status = 1
          Exit Sub 
        End If 
      End If 
      If RFIDMaster.RFID$
        Call DisplayRFIDInfo(status)
        If status = 0
          If Trim$(RFIDMaster.InYardID$)
            ID$ = RFIDMaster.InYardID$
            Call RetrieveInYard(ID$,"",status)
            If status = 1
              status = 0 ! ID does not exist - good to use
              Exit Sub 
            Else If status = 0
              status = 1 ! ID is already in use
              Exit Sub 
            Else If status = 3 ! ID used and marked in use
              ! Do nothing
            End If 
          End If 
        End If 
      End If 
    End If 
  End If 
  If QuickID
    ysize = 290
    y = 10
  Else 
    ysize = 230
    y = 20
  End If 
  chid = SAIOpenWindow("Enter In-Yard ID",820,ysize,1)
  Print #chid;PChr$("Arial");'FONTFACE';
  Print #chid;PChr$(bgcolor1);'BACKCOLOR CS';
  Print #chid;'WCSETCOLOR';
  Print #chid;'12FONTSIZE WCSETFONT';
  x = 20
  dx = 115
  If RFReader$[ReadScale] = "" Let x = x + 105
  Print #chid;PChr$(200,x,y + 2,x + dx,y + 18,"In-Yard ID:");'WCLABEL';
  Print #chid;'WCRESETCOLOR EBOLD WCSETFONT';
  x = x + dx
  dx = 250
  KBParams.InputElement = 4
  Print #chid;PChr$(KBParams.InputElement,x,y,x + dx,y + 18,"",2,11);'WCSTRING';
  x = x + dx + 10
  Print #chid;PChr$(5,x,y - 3,x + 200,y + 21,"List In-Yard",2);'WCBUTTON';
  If mode$ = "NL" Print #chid;'5WCDISABLE';
  x = x + 210
  If RFReader$[ReadScale] Print #chid;PChr$(6,x,y - 3,x + 200,y + 21,"Read RFID (" + Str$(ReadScale) + ")",2);'WCBUTTON';
  If QuickID
    Print #chid;'10FONTSIZE WCSETFONT';
    x0 = 15 \ y0 = y + 35
    bw = 120 \ bh = 25
    dx = 125 \ dy = 27
    elem = 1
    y = y0
    For r = 1 To 3
      x = x0
      For i = 1 To 3
        temp$ = QuickIDSet1$[elem]
        If temp$
          temp$ = Replace$(temp$,"&","&&")
          Print #chid;PChr$(elem + 30,x,y,x + bw,y + bh,temp$,2);'WCBUTTON';
        Else 
          Print #chid;PChr$(elem + 30,x,y,x + bw,y + bh,"",1);'WCBUTTON';
        End If 
        elem = elem + 1
        x = x + dx
      Next i
      y = y + dy
    Next r
    elem = 1
    y = y0 \ x0 = 435
    For r = 1 To 3
      x = x0
      For i = 1 To 3
        temp$ = QuickIDSet2$[elem]
        If temp$
          temp$ = Replace$(temp$,"&","&&")
          Print #chid;PChr$(elem + 40,x,y,x + bw,y + bh,temp$,2);'WCBUTTON';
        Else 
          Print #chid;PChr$(elem + 40,x,y,x + bw,y + bh,"",1);'WCBUTTON';
        End If 
        elem = elem + 1
        x = x + dx
      Next i
      y = y + dy
    Next r
  End If 
  KBParams.StartX = 15
  If QuickID Let KBParams.StartY = 135 Else Let KBParams.StartY = 60
  KBParams.ButtonHeight = 25
  KBParams.ButtonWidth = 50
  KBParams.FontSize1 = 14
  KBParams.FontSize2 = 12
  KBParams.IELength = 0
  KBParams.IEMaxChar = 11
  KBParams.FuncBtnLen = 0
  Call SAIDrawKeyboard(chid,KBParams.,0)
  Print #chid;'0WCSELECT';
  Print #chid;PChr$(KBParams.InputElement);'WCFOCUS';
  ishift = 0
  istring$ = ""
  Do 
    Input #chid; Len (1);w$
    Select Case w$
      Case 'F5' ! List In-Yard
        If mode$ <> "NL"
          Call InYardList(mode$,status)
          If status = 0
            status = 1 ! Selected existing InYard
            Exit Do 
          End If 
        End If 
      Case 'F6' ! Read RFID
        Call GetRFID(RFID$,RFIDMaster.,status)
        If status = 0
          Call RFIDInYardLookup(RFID$,status)
          If status = 0
            ID$ = TicketHeader.InYardID$
            status = 1
            Exit Do 
          End If 
          If RFIDMaster.RFID$
            Call DisplayRFIDInfo(status)
            If status = 0
              If Trim$(RFIDMaster.InYardID$)
                ID$ = RFIDMaster.InYardID$
                Call RetrieveInYard(ID$,"",status)
                If status = 1
                  status = 0 ! ID does not exist - good to use
                  Exit Do 
                Else If status = 0
                  status = 1 ! ID is already in use
                  Exit Do 
                Else If status = 3 ! ID used and marked in use
                  ! Do nothing
                End If 
              End If 
            End If 
          End If 
        Else If status = -1
          Call SAITouchMessage("No RFID tag present.")
        End If 
      Case 'F31' To 'F39'
        i = Asc(w$) - Asc('F30')
        istring$ = SAIQuery$(chid,KBParams.InputElement) + QuickIDSet1$[i]
        If Len(istring$) > 11 Let istring$ = istring$[1,11]
        Print #chid;PChr$(KBParams.InputElement);'WCSELECT CU';istring$;'0WCSELECT';
      Case 'F41' To 'F49'
        i = Asc(w$) - Asc('F40')
        istring$ = SAIQuery$(chid,KBParams.InputElement) + QuickIDSet2$[i]
        If Len(istring$) > 11 Let istring$ = istring$[1,11]
        Print #chid;PChr$(KBParams.InputElement);'WCSELECT CU';istring$;'0WCSELECT';
      Case Else 
        Call SAIKeyBoardInput(chid,chid,KBParams.,ishift,w$,istring$,istatus)
        If istatus = -1
          status = -1 ! Cancel
          Exit Do 
        Else If istatus
          ID$ = Trim$(istring$)
          If ID$
            Call RetrieveInYard(ID$,"",status)
            If status = 1
              status = 0 ! ID does not exist - good to use
              Exit Do 
            Else If status = 0
              If mode$ = "NL"
                Call SAITouchWarning("That ID is already in use.")
              Else 
                status = 1 ! ID is already in use
                Exit Do 
              End If 
            Else If status = 3 ! ID used and marked in use
              ! Do nothing
            End If 
          Else 
            Call SAITouchWarning("You must enter an ID.")
          End If 
          Clear ID$,istring$
          Print #chid;PChr$(KBParams.InputElement);'WCCU';
          Print #chid;PChr$(KBParams.InputElement);'WCFOCUS';
        End If 
    End Select 
  Loop 
  Close #chid
End Sub 
Sub DefaultVehicleNo(TicketNo$)
  If TicketHeader.VehType$ ! AND UpdateVehTracking="Y"
    Search #ch_db;"SELECT " + SQLN$(CodesVehicleType.) + "FROM Codes_Vehicle_Type WHERE VehicleType=" + SQLV$(TicketHeader.VehType$)
    If Chf(ch_db)
      Map Record #ch_db As Codes_Vehicle_Type
      Read Record #ch_db;CodesVehicleType.
      VehPrefixLen = CalcVehPrefixLen(CodesVehicleType.TwoPartVehOverride$,ScrapSRecord$[133,133])
      If VehPrefixLen
        If Len(Trim$(TicketHeader.VehNo$)) <= VehPrefixLen
          If z$[644,646] = "255" Or z$[644,646] = "355"
            TicketHeader.VehNo$ = SAISpaceFill$(TicketHeader.VehNo$,VehPrefixLen) + Trim$(SAISpaceFill$(TicketHeader.InYardID$,11 - VehPrefixLen))
          Else 
            TicketHeader.VehNo$ = SAISpaceFill$(TicketHeader.VehNo$,VehPrefixLen) + Trim$(SAISpaceFill$(TicketNo$,11 - VehPrefixLen))
          End If 
        End If 
      Else 
        If TicketHeader.VehNo$ = "" Let TicketHeader.VehNo$ = TicketNo$
      End If 
    End If 
  End If 
End Sub 
Sub VehicleSelection(VehType1$,VehType2$,status)
  ForceVehPrompt = 0
  ! Used to use RFID Vehicle type and number here
  If DefaultVehType$
    If DefaultVehType$ = VehType1$ Or DefaultVehType$ = VehType2$
      TicketHeader.VehType$ = DefaultVehType$
      If ValidateContainer$ <> "V"
        TicketHeader.VehNo$ = DefaultVehPrefix$
      End If 
    Else 
      Search #ch_db;"SELECT " + SQLN$(CodesVehicleType.) + "FROM Codes_Vehicle_Type WHERE VehicleType=" + SQLV$(Trim$(VehType1$))
      If Chf(ch_db) = 0 And VehType2$
        Search #ch_db;"SELECT " + SQLN$(CodesVehicleType.) + "FROM Codes_Vehicle_Type WHERE VehicleType=" + SQLV$(Trim$(VehType2$))
      End If 
      If Chf(ch_db)
        Map Record #ch_db As Codes_Vehicle_Type
        Read Record #ch_db;CodesVehicleType.
        TicketHeader.VehType$ = CodesVehicleType.VehicleType$
        !  if CodesVehicleType.UpdateVehTracking Ignoring this flag
        If CodesVehicleType.DefaultPrefix$ And ValidateContainer$ <> "V"
          TicketHeader.VehNo$ = CodesVehicleType.DefaultPrefix$
        End If 
        ForceVehPrompt = 1
      Else ! Use default
        TicketHeader.VehType$ = DefaultVehType$
        If ValidateContainer$ <> "V" ! Update Veh Tracking
          TicketHeader.VehNo$ = DefaultVehPrefix$
        End If 
        ForceVehPrompt = 1
      End If 
    End If 
  End If 
  status = 0
  If PromptVehInfo$ = "Y" Or ForceVehPrompt = 1
    VehicleType$ = TicketHeader.VehType$
    VehicleSize$ = TicketHeader.VehSize$
    VehicleNo$ = TicketHeader.VehNo$
    Call GetVehicleInfo(status)
    If status = 0
      TicketHeader.VehType$ = VehicleType$
      TicketHeader.VehSize$ = VehicleSize$
      TicketHeader.VehNo$ = VehicleNo$
    End If 
  End If 
End Sub 
Sub OTMSelectFromList(status)
  If nr > ilistmax
    ilistmax = nr
    Dim ilist$[ilistmax,ilistlen]
  End If 
  If nr > ilistselmax
    ilistselmax = nr
    Dim ilistsel$[ilistselmax,ilistlen]
  End If 
  Clear ilist$[],ilistsel$[]
  Map Record #ch_db As OTM_Freight_Interface
  For i = 1 To nr
    Read Record #ch_db;OTMFreightInterface.
    ilistsel$[i] = OTMFreightInterface.OTMFrtInterfaceID
    If OTMFreightInterface.VehicleNo$ = "" Let OTMFreightInterface.VehicleNo$ = Str$(i)
    ilist$[i] = SAISpaceFill$(OTMFreightInterface.VehicleNo$,FmtOf(OTMFreightInterface.VehicleNo$))
  Next i
  imax = 9 \ wwidth = 500
  Call SAITouchListSelect(imax,wwidth,"Select OTM Vehicle","",ilist$[],nr,isel,status)
  If status = 0
    SQL$ = "SELECT * FROM OTM_Freight_Interface WHERE"
    SQL$ = SQL$ + " OTMFrtInterfaceID=" + SQLV$(ilistsel$[isel])
    Search #ch_db;SQL$
    If Chf(ch_db)
      Map Record #ch_db As OTM_Freight_Interface
      Read Record #ch_db;OTMFreightInterface.
    Else 
      status = 1
    End If 
  Else 
    status = 1
  End If 
End Sub 
Sub GetOTMRefNo(OTMRefNo$,status)
  KBParams.StartX = 5
  KBParams.StartY = 55
  KBParams.ButtonHeight = 25
  KBParams.ButtonWidth = 50
  KBParams.FontSize1 = 14
  KBParams.FontSize2 = 12
  KBParams.InputElement = 10
  KBParams.IELength = 0
  KBParams.IEMaxChar = 13
  KBParams.IELabel$ = ""
  KBParams.FuncBtnLen = 0
  KBParams.FunctionBtn$ = ""
  chwin2 = SAIOpenWindow("Enter OTM Reference Number",800,220,1)
  Print #chwin2;PChr$("Arial");'FONTFACE';
  Print #chwin2;PChr$(SAIColorRGB(230,230,230));'BACKCOLOR CS WCSETCOLOR';
  Print #chwin2;'12FONTSIZE WCSETFONT';
  x = 300 \ y = 17
  Print #chwin2;PChr$(900,x - 190,y + 2,x,y + 16,"OTM Reference No:");'WCLABEL WCRESETCOLOR';
  Print #chwin2;PChr$(KBParams.InputElement,x,y,x + 180,y + 18,"",2,KBParams.IEMaxChar);'WCSTRING';
  x = x + 185 \ y = y - 3
  Print #chwin2;PChr$(24,x,y,x + 100,y + 25,"Reset",2);'WCBUTTON';
  Call SAIDrawKeyboard(chwin2,KBParams.,0)
  If OTMRefNo$ Print #chwin2;PChr$(KBParams.InputElement);'WCSELECT CU';OTMRefNo$;'BEGIN 0WCSELECT';
  Print #chwin2;PChr$(KBParams.InputElement);'WCFOCUS';
  Clear OTMFreightKey.
  ! Leave LocationCode blank for internal side of transaction
  Select Case TicketHeader.TktType$
    Case "P"
      If TicketHeader.TktMode$ = "T"
        OTMFreightKey.OriginEntityNo$ = TicketHeader.EntityNo$
        !      OTMFreightKey.OriginLocationCode$="0000"
        OTMFreightKey.DestEntityNo$ = IntSupplierNo$
        !      OTMFreightKey.DestLocationCode$="0000"
      Else If TicketHeader.TktMode$ = "D"
        OTMFreightKey.OriginEntityNo$ = YardSupplierNo$
        !      OTMFreightKey.OriginLocationCode$="0000"
        OTMFreightKey.DestEntityNo$ = TicketHeader.EntityNo$
        OTMFreightKey.DestLocationCode$ = Trim$(PODetail$[31,34])
      Else 
        OTMFreightKey.OriginEntityNo$ = TicketHeader.EntityNo$
        OTMFreightKey.OriginLocationCode$ = Trim$(PODetail$[31,34])
        OTMFreightKey.DestEntityNo$ = YardSupplierNo$
        !      OTMFreightKey.DestLocationCode$="0000"
      End If 
    Case "S"
      If TicketHeader.TktMode$ = "T"
        Call SAITouchWarning("OTM not valid on outbound transfers.")
        OTMRefNo$ = ""
        status = 0
        Close #chwin2
        Exit Sub 
      Else 
        OTMFreightKey.OriginEntityNo$ = Trim$(PODetail$[1,6])
        !      OTMFreightKey.OriginLocationCode$="0000"
        OTMFreightKey.DestEntityNo$ = TicketHeader.EntityNo$
        OTMFreightKey.DestLocationCode$ = Trim$(SODetail$[31,34])
      End If 
    Case Else 
      Call SAITouchWarning("Invalid Transaction type for OTM.")
      status = 99
      Close #chwin2
      Exit Sub 
  End Select 
  If TicketHeader.VehType$ <> "T" And TicketHeader.VehNo$
    OTMFreightKey.VehicleNo$ = TicketHeader.VehNo$
  End If 
  istring$ = OTMRefNo$
  Do 
    Input #chwin2; Len (1);w$
    Select Case w$
      Case 'F24' ! Reset
        istring$ = OTMRefNo$
        Print #chwin2;PChr$(KBParams.InputElement);'WCSELECT CU';istring$;'0WCSELECT';
      Case Else 
        Call SAIKeyBoardInput(chwin2,chwin2,KBParams.,ishift,w$,istring$,istatus)
        If istatus = -1
          status = 1
          Exit Do 
        Else If istatus
          OTMFreightKey.OTMRefNo$ = Trim$(SAIQuery$(chwin2,KBParams.InputElement))
          If OTMFreightKey.OTMRefNo$
            SQL$ = "SELECT * FROM OTM_Freight_Interface WHERE"
            SQL$ = SQL$ + " OTMRefNo=" + SQLV$(OTMFreightKey.OTMRefNo$)
            SQL$ = SQL$ + " AND OriginEntityNo=" + SQLV$(OTMFreightKey.OriginEntityNo$)
            If OTMFreightKey.OriginLocationCode$
              SQL$ = SQL$ + " AND OriginLocationCode=" + SQLV$(OTMFreightKey.OriginLocationCode$)
            End If 
            SQL$ = SQL$ + " AND DestEntityNo=" + SQLV$(OTMFreightKey.DestEntityNo$)
            If OTMFreightKey.DestLocationCode$
              SQL$ = SQL$ + " AND DestLocationCode=" + SQLV$(OTMFreightKey.DestLocationCode$)
            End If 
            If OTMFreightKey.VehicleNo$
              SQL$ = SQL$ + " AND VehicleNo=" + SQLV$(OTMFreightKey.VehicleNo$)
            End If 
            Search #ch_db;SQL$
            nr = Chf(ch_db)
            If nr = 1
              Map Record #ch_db As OTM_Freight_Interface
              Read Record #ch_db;OTMFreightInterface.
              If OTMFreightInterface.Status$ <> ""
                Clear OTMFreightInterface.
                Call SAITouchWarning("OTM Reference Number is aleady in use.")
              Else 
                If TicketHeader.TicketNo$ ! This means we are changing on an existing ticket
                  Call OTMUpdateTicketNo(stat)
                End If 
                OTMRefNo$ = OTMFreightInterface.OTMRefNo$
                status = 0
                Exit Do 
              End If 
            Else If nr > 1
              SQL$ = SQL$ + " AND Status=" + SQLV$("")
              Search #ch_db;SQL$
              nr = Chf(ch_db)
              If nr = 1
                Map Record #ch_db As OTM_Freight_Interface
                Read Record #ch_db;OTMFreightInterface.
                If TicketHeader.TicketNo$ ! This means we are changing on an existing ticket
                  Call OTMUpdateTicketNo(stat)
                End If 
                OTMRefNo$ = OTMFreightInterface.OTMRefNo$
                status = 0
                Exit Do 
              Else If nr > 1
                Call OTMSelectFromList(status)
                If status = 0
                  If TicketHeader.TicketNo$ ! This means we are changing on an existing ticket
                    Call OTMUpdateTicketNo(stat)
                  End If 
                  OTMRefNo$ = OTMFreightInterface.OTMRefNo$
                  status = 0
                Else 
                  status = 1
                End If 
                Exit Do 
              Else 
                Clear OTMFreightInterface.
                Call SAITouchWarning("OTM Reference Number is aleady in use.")
              End If 
            Else 
              Search #ch_db;"SELECT * FROM OTM_Freight_Interface WHERE OTMRefNo=" + SQLV$(OTMFreightKey.OTMRefNo$)
              If Chf(ch_db)
                Map Record #ch_db As OTM_Freight_Interface
                Read Record #ch_db;OTMFreightInterface.
                temp$ = "OTM data does not match your transaction data."
                If OTMFreightInterface.OriginEntityNo$ <> OTMFreightKey.OriginEntityNo$
                  temp$ = temp$ + "\15\OTM OriginEntityNo=" + OTMFreightInterface.OriginEntityNo$ + ", Selected OriginEntityNo=" + OTMFreightKey.OriginEntityNo$
                End If 
                If OTMFreightKey.OriginLocationCode$ And OTMFreightInterface.OriginLocationCode$ <> OTMFreightKey.OriginLocationCode$
                  temp$ = temp$ + "\15\OTM OriginLocationCode=" + OTMFreightInterface.OriginLocationCode$ + ", Selected OriginLocationCodeo=" + OTMFreightKey.OriginLocationCode$
                End If 
                If OTMFreightInterface.DestEntityNo$ <> OTMFreightKey.DestEntityNo$
                  temp$ = temp$ + "\15\OTM DestEntityNo=" + OTMFreightInterface.DestEntityNo$ + ", Selected DestEntityNo=" + OTMFreightKey.DestEntityNo$
                End If 
                If OTMFreightKey.DestLocationCode$ And OTMFreightInterface.DestLocationCode$ <> OTMFreightKey.DestLocationCode$
                  temp$ = temp$ + "\15\OTM DestLocationCode=" + OTMFreightInterface.DestLocationCode$ + ", Selected DestLocationCode=" + OTMFreightKey.DestLocationCode$
                End If 
                If OTMFreightKey.VehicleNo$ And OTMFreightInterface.VehicleNo$ <> OTMFreightKey.VehicleNo$
                  temp$ = temp$ + "\15\OTM VehicleNo=" + OTMFreightInterface.VehicleNo$ + ", Selected VehicleNo=" + OTMFreightKey.VehicleNo$
                End If 
                Call SAITouchWarning(temp$)
                Clear OTMFreightInterface.
              Else 
                Call SAITouchWarning("OTM Reference Number does not exist.")
              End If 
            End If 
          Else 
            ! Decide what to do if clearing the number versus cancel
          End If 
        End If 
    End Select 
  Loop 
  Close #chwin2
  If status = 0
    If OTMFreightInterface.VehicleNo$ = ""
      Do 
        Call SAIKeyBoardGen("Enter Equipment No.",KBParams.alphacase,25,0,OTMFreightInterface.EquipNo$,stat)
        If stat = 0
          If Trim$(OTMFreightInterface.EquipNo$)
            SQL$ = "UPDATE OTM_Freight_Interface SET"
            SQL$ = SQL$ + " EquipNo=" + SQLV$(OTMFreightInterface.EquipNo$)
            SQL$ = SQL$ + " WHERE OTMFrtInterfaceID=" + SQLV$(OTMFreightInterface.OTMFrtInterfaceID)
            Try 
              Search #ch_db;SQL$
              stat = 0
            Else 
              Call SAITouchError("Error updating Status in OTM_Freight_Interface table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
              stat = Spc(8)
            End Try 
            Exit Do 
          End If 
        End If 
        Call SAITouchWarning("Equipment No. is required.")
      Loop 
    End If 
  End If 
End Sub 
Sub GetComment(element)
  temp$ = ""
  Print #chti;PChr$(element);'WCQUERY';
  Do 
    Input #chti,1;w$
    If w$ = "" Exit Do 
    w$ = Trim$(w$)
    If w$
      If temp$ = ""
        temp$ = w$
      Else 
        temp$ = temp$ + " " + w$
      End If 
    End If 
  Loop 
  TicketHeader.TktComment$ = temp$
End Sub 
Sub TIRefreshContractInfo()
  Print #chti;'13WCSELECT CU';
  If TicketHeader.OrderNo$
    If TicketHeader.OrderNo$ = "UNKNOWN"
      Print #chti;TicketHeader.OrderNo$;
    Else 
      Print #chti;TicketHeader.OrderNo$;"-";TicketHeader.OrderLine$;
    End If 
  End If 
  If TicketHeader.CarrierNo$ ! Carrier
    Print #chti;'15WCSELECT CU';TicketHeader.CarrierNo$;": ";Trim$(SAICodesFileDesc$(ch_110Aro,"C",SAISpaceFill$(TicketHeader.CarrierNo$,6)));'0WCSELECT';
    Print #chti;'16WCSELECT CU';
    If OTMFreight$ = "Y"
      Print #chti;TicketHeader.CarrierRefNo$;'0WCSELECT';
    Else If TicketHeader.TripTicketNo$
      Print #chti;TicketHeader.TripTicketNo$;'0WCSELECT 36WCENABLE';
    Else 
      Print #chti;'0WCSELECT 36WCDISABLE';
    End If 
    If TicketHeader.FreightHrs
      If TicketHeader.FreightHrs < 0 Let num = 0 Else Let num = TicketHeader.FreightHrs
      Print #chti;'120WCENABLE 20WCENABLE 40WCENABLE'; ! Frt Hrs
      Print #chti;'20WCSELECT CU';Str$(num);'0WCSELECT';
    Else 
      Print #chti;'20WCSELECT CU 0WCSELECT 120WCDISABLE 20WCDISABLE 40WCDISABLE'; ! Frt Hrs
    End If 
  Else 
    TicketHeader.FreightHrs = 0
    Print #chti;'15WCSELECT CU';
    Print #chti;'16WCSELECT CU';
    If TicketHeader.TripTicketNo$ ! Trip Ticket
      Print #chti;TicketHeader.TripTicketNo$; ! Display if one exists but disable button
    End If 
    Print #chti;'0WCSELECT 36WCDISABLE';
    Print #chti;'20WCSELECT CU 0WCSELECT 120WCDISABLE 20WCDISABLE 40WCDISABLE'; ! Frt Hrs
  End If 
  Print #chti;'0WCSELECT';
End Sub 
Sub TicketInfo(status)
  y = 295 \ dy = 30
  If Mill$ = "Y" Or SupplierShipNoPrompt$ <> "N" Or Supplier.SuppShipNoHandling$ <> "N" Or TicketHeader.SuppShipNo$ Let y = y + dy
  If TicketHeader.InspectionComment$ Let y = y + dy
  chti = SAIOpenWindow("Ticket Information",800,y,1)
  Print #chti;PChr$(bgcolor1);'BACKCOLOR CS WCSETCOLOR';
  Print #chti;PChr$("Arial");'FONTFACE 12FONTSIZE EBOLD WCSETFONT';
  x0 = 10 \ x1 = 180 \ bw = 100
  y = 5 \ dx = 180
  Print #chti;PChr$(109,x0,y,x1,y + 14,"ID:");'WCLABEL';
  Print #chti;PChr$(9,x1,y,x1 + dx,y + 14,"",0);'WCTEXT 9WCSELECT';Trim$(ID$);'0WCSELECT';
  x = x1 + dx + 50 \ dx = 150
  Print #chti;PChr$(110,x,y,x + 150,y + 14,"Ticket No:");'WCLABEL';
  Print #chti;PChr$(10,x + 150,y,x + 150 + dx,y + 14,"",0);'WCTEXT 10WCSELECT';TicketNo$;'0WCSELECT';
  y = y + dy - 5 \ dx = 200
  Print #chti;PChr$(111,x0,y,x1,y + 14,"Ship Date:");'WCLABEL';
  Print #chti;PChr$(11,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chti;'11WCSELECT WCRESETCOLOR';DateUsing$(TicketHeader.ShipmentDate#,dateformat$);'0WCSELECT';
  Print #chti;PChr$(31,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Change",2);'WCBUTTON';
  y = y + dy \ dx = 500
  Print #chti;PChr$(112,x0,y,x1,y + 14,"Supplier:");'WCLABEL';
  Print #chti;PChr$(12,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chti;'12WCSELECT WCRESETCOLOR';TicketHeader.EntityNo$;": ";TicketHeader.Name$;'0WCSELECT';
  Print #chti;PChr$(32,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Change",2);'WCBUTTON';
  Print #chti;PChr$(48,x1 + dx + 5,y + 20,x1 + dx + 5 + bw,y + 45,"Identity\15\Info",2);'WCBUTTON';
  y = y + dy \ dx = 200
  Print #chti;PChr$(113,x0,y,x1,y + 14,"Purchase Order:");'WCLABEL';
  Print #chti;PChr$(13,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chti;'13WCSELECT WCRESETCOLOR';
  If TicketHeader.OrderNo$
    If TicketHeader.OrderNo$ = "UNKNOWN"
      Print #chti;"UNKNOWN";
    Else 
      Print #chti;TicketHeader.OrderNo$;"-";TicketHeader.OrderLine$;
    End If 
  End If 
  Print #chti;'0WCSELECT';
  Print #chti;PChr$(33,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Change",2);'WCBUTTON';
  y = y + dy \ dx = 200
  Print #chti;PChr$(114,x0,y,x1,y + 14,"Vehicle Info:");'WCLABEL';
  Print #chti;PChr$(14,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chti;'14WCSELECT WCRESETCOLOR';TicketHeader.VehNo$;'0WCSELECT';
  Print #chti;PChr$(34,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Change",2);'WCBUTTON';
  x = x1 + dx + 5 + bw + 20
  Print #chti;PChr$(49,x,y - 5,x + 150,y + 20,"Advanced Info",2);'WCBUTTON';
  y = y + dy \ dx = 500
  Print #chti;PChr$(115,x0,y,x1,y + 14,"Carrier:");'WCLABEL';
  Print #chti;PChr$(15,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chti;'15WCSELECT WCRESETCOLOR';
  If TicketHeader.CarrierNo$ Print #chti;TicketHeader.CarrierNo$;": ";Trim$(SAICodesFileDesc$(ch_110Aro,"C",SAISpaceFill$(TicketHeader.CarrierNo$,6)));
  Print #chti;'0WCSELECT';
  Print #chti;PChr$(35,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Change",2);'WCBUTTON';
  y = y + dy \ dx = 120
  If OTMFreight$ = "Y"
    Print #chti;PChr$(116,x0,y,x1,y + 14,"OTM Ref No:");'WCLABEL';
    Print #chti;PChr$(16,x1,y,x1 + dx + bw,y + 14,"",0);'WCTEXT';
    Print #chti;'16WCSELECT WCRESETCOLOR';TicketHeader.CarrierRefNo$;'0WCSELECT';
  Else 
    Print #chti;PChr$(116,x0,y,x1,y + 14,"Trip Ticket No:");'WCLABEL';
    Print #chti;PChr$(16,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
    Print #chti;'16WCSELECT WCRESETCOLOR';TicketHeader.TripTicketNo$;'0WCSELECT';
    Print #chti;PChr$(36,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Change",2);'WCBUTTON';
    If TicketHeader.TripTicketNo$ = "" Print #chti;'36WCDISABLE';
  End If 
  x = x1 + dx + 5 + bw + 60 \ dx = 145
  Print #chti;PChr$(120,x,y,x + dx,y + 14,"Freight Hours:");'WCLABEL';
  x = x + dx \ dx = 70
  Print #chti;PChr$(20,x,y,x + dx,y + 14,"",0);'WCTEXT';
  Print #chti;'20WCSELECT WCRESETCOLOR 0WCSELECT';
  x = x + dx + 5
  Print #chti;PChr$(40,x,y - 5,x + bw,y + 20,"Change",2);'WCBUTTON';
  If TicketHeader.FreightHrs
    If TicketHeader.FreightHrs < 0 Let num = 0 Else Let num = TicketHeader.FreightHrs
    Print #chti;'20WCSELECT';Str$(num);'0WCSELECT';
  Else 
    Print #chti;'120WCDISABLE 20WCDISABLE 40WCDISABLE';
  End If 
  If SunValley And SupplierNo$ = SV_SupplierNo$
    y = y + dy \ dx = 500
    Print #chti;PChr$(117,x0,y,x1,y + 14,"L.A. Info:");'WCLABEL';
    Print #chti;PChr$(17,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
    Print #chti;'17WCSELECT WCRESETCOLOR';
    Print #chti;"Driver=";TicketHeader.LAInfo_DriversName$;", District=";TicketHeader.LAInfo_District$;", Route=";TicketHeader.LAInfo_Route$;", Sect=";TicketHeader.LAInfo_Section$;
    Print #chti;'0WCSELECT';
    Print #chti;PChr$(37,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Change",2);'WCBUTTON';
  Else ! if z$[644,646]="255" OR z$[644,646]="355" OR ScrapSRecord$[126,128]="DJJ"
    y = y + dy \ dx = 200
    Print #chti;PChr$(117,x0,y,x1,y + 14,"Supp. Invoice No:");'WCLABEL';
    Print #chti;PChr$(17,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
    Print #chti;'17WCSELECT WCRESETCOLOR';
    If TicketHeader.SuppInvNo$ Print #chti;TicketHeader.SuppInvNo$;
    Print #chti;'0WCSELECT';
    Print #chti;PChr$(37,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Change",2);'WCBUTTON';
  End If 
  If Mill$ = "Y" Or SupplierShipNoPrompt$ <> "N" Or Supplier.SuppShipNoHandling$ <> "N" Or TicketHeader.SuppShipNo$
    y = y + dy \ dx = 200
    Print #chti;PChr$(118,x0,y,x1,y + 14,"Supp. Shpmnt No:");'WCLABEL';
    Print #chti;PChr$(18,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
    Print #chti;'18WCSELECT WCRESETCOLOR';
    If TicketHeader.SuppShipNo$ Print #chti;TicketHeader.SuppShipNo$;
    Print #chti;'0WCSELECT';
    Print #chti;PChr$(38,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Change",2);'WCBUTTON';
  End If 
  y = y + dy \ dx = 500
  Print #chti;PChr$(119,x0,y,x1,y + 14,"Ticket Comment:");'WCLABEL';
  Print #chti;'10FONTSIZE WCSETFONT';
  Print #chti;PChr$(19,x1,y - 5,x1 + dx,y + 20,"",2,50);'WCMEMO';
  Print #chti;'12FONTSIZE WCSETFONT 19WCSELECT WCRESETCOLOR';
  If TicketHeader.TktComment$ Print #chti;TicketHeader.TktComment$;
  Print #chti;'0WCSELECT';
  Print #chti;PChr$(39,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Keyboard",2);'WCBUTTON';
  If TicketHeader.InspectionComment$
    y = y + dy
    Print #chti;PChr$(121,x0,y,x1,y + 14,"Inspctn Comment:");'WCLABEL';
    Print #chti;'10FONTSIZE WCSETFONT';
    Print #chti;PChr$(21,x1,y - 5,x1 + dx,y + 20,"",2);'WCTEXT';
    Print #chti;'12FONTSIZE WCSETFONT 21WCSELECT WCRESETCOLOR';
    Print #chti;TicketHeader.InspectionComment$;
    Print #chti;'0WCSELECT';
    Print #chti;'10FONTSIZE WCSETFONT';
    Print #chti;PChr$(41,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Copy to Tkt Comment",2);'WCBUTTON';
    Print #chti;'12FONTSIZE WCSETFONT';
  End If 
  If TicketHeader.Noticed And TicketHeader.OriginWtSrc$ <> "SCALE"
    Print #chti;PChr$(31,35);'WCDISABLE'; ! Can't edit if a Notice
    If TicketHeader.ShipmentNo$ = TicketHeader.TicketNo$ ! ShipmentNo=TicketNo, ScrapRunner notice
      Print #chti;'33WCENABLE'; ! Allow PO change if none or unknown
    End If 
    If TicketHeader.CarrierNo$ = "" Print #chti;'35WCENABLE'; ! Allow Carrier change if blank
  Else If ItemCount > 1 ! OR (TicketHeader.OrderLine$="00" AND Items.[1].MaterialCode$[1,4]<>"*MIX")
    If Trim$(TicketHeader.OrderNo$) ! Check for order
      Print #chti;'32WCDISABLE'; ! Can't change Supplier on Contract *MULT
    End If 
    Print #chti;'33WCDISABLE'; ! Can't change PO No if *MULT
  Else If TicketHeader.TktType$ = "R"
    Print #chti;'33WCDISABLE'; ! Can't add PO No if Retail *MIX
    Print #chti;'35WCDISABLE'; ! Can't add Carrier if Retail *MIX
  End If 
  If TicketHeader.TktMode$ = "T"
    Print #chti;'32WCDISABLE'; ! Can't change Supplier on Transfer
    Print #chti;'33WCDISABLE'; ! Can't change PO on Transfer
  End If 
  If TicketTemp.MixUnload
    If TicketTemp.MixUnload = 1
      Search #ch_db;"SELECT TicketNo FROM Pur_Mix_Lot WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
      nr = Chf(ch_db)
    Else ! Don't allow edits if in use
      nr = 1
    End If 
    If nr
      Print #chti;'31WCDISABLE'; ! Can't change Shipment Date
      Print #chti;'32WCDISABLE'; ! Can't change Supplier
      Print #chti;'33WCDISABLE'; ! Can't change PO
    End If 
  End If 
  If TicketHeader.CarrierRefNo$
    If OTMFreight$ = "Y"
      Print #chti;'32WCDISABLE'; ! Can't change Supplier
      Print #chti;'35WCDISABLE'; ! Can't change Carrier
    Else If TicketHeader.TktMode$ = "T"
      If OTMBranch(ch_db,TicketHeader.SrcBranch$)
        Print #chti;'32WCDISABLE'; ! Can't change Supplier
        Print #chti;'35WCDISABLE'; ! Can't change Carrier
      End If 
    End If 
  End If 
  y = y + 25
  Print #chti;PChr$(1,350,y,450,y + 25,"&OK",2);'WCBUTTON';
  Print #chti;'1WCFOCUS';
  Do 
    Input #chti; Len (1);w$
    Select Case w$
      Case 'F1' ! OK
        If TicketHeader.TktMode$ = "T" And InBoundTransferCarrierRequired$ = "Y" And Trim$(TicketHeader.CarrierNo$) = ""
          Call SAITouchWarning("A Carrier is required on a Transfer.")
        Else 
          Call GetComment(19)
          Call UpdateInYard(stat)
          Exit Do 
        End If 
      Case 'F31' ! Ship Date
        temp$ = SAIConvertDate$(TicketHeader.ShipmentDate#)
        Call SAITouchCalendar(temp$,w$)
        If w$
          If SAIConvertYear$(4,w$[5,6]) + w$[1,2] > FuturePeriodEnd$
            ans = SAITouchYesNo("Shipment Date is greater than the Future Period End Date.\15\\15\Is this correct?","Shipment Date Warning")
          Else 
            ans = 1
          End If 
          If ans
            SaveDate# = TicketHeader.ShipmentDate#
            TicketHeader.ShipmentDate# = SAIConvertDate#(w$)
            Print #chti;'11WCSELECT CU';DateUsing$(TicketHeader.ShipmentDate#,dateformat$);'0WCSELECT';
            Try 
              If TicketIdentity.TicketNo$
                TicketIdentity.ShipmentDate# = TicketHeader.ShipmentDate#
                Search #ch_db;"UPDATE Pur_Ticket_Identity SET ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#) + " WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(SaveDate#)
              End If 
              Search #ch_db;"UPDATE Pur_Ticket_VIN SET ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#) + " WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(SaveDate#)
            Else 
            End Try 
            If TicketTemp.MixUnload
              Try 
                Search #ch_db;"UPDATE Pur_Mix_Hdr SET ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#) + " WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(SaveDate#)
              Else 
                Call SAITouchError("Error updating entry in Pur_Mix_Hdr table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
              End Try 
            End If 
          End If 
        End If 
      Case 'F32' ! Change Supplier
TicketInfoSupplier: !
        Call GetSupplier()
        ! Retrieve Identity record
        Search #ch_db;"SELECT * FROM Pur_Ticket_Identity WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
        If Chf(ch_db)
          Map Record #ch_db As Pur_Ticket_Identity
          Read Record #ch_db;TicketIdentity.
        End If 
        If SupplierNo$ And Trim$(SupplierNo$) <> TicketHeader.EntityNo$
          Call DisplaySupplierComments(SupplierNo$,status)
          If status Goto TicketInfoSupplier
          If FullPONo$ = "" And ItemCount < 2
            If SupplierNo$[1,3] <> "CP0" And TicketHeader.TktType$ <> "R"
              If Supplier.PORequired
                e = 0
              Else 
                k1$ = SAISpaceFill$(SupplierNo$,6) ! First determine if any contracts exist for Supplier (valid or invalid)
                Search #ch_1210ro,3,1;k1$,r,e
                If e = 0 And k1$[1,6] <> SAISpaceFill$(SupplierNo$,6) Let e = 1
              End If 
              If e = 0
                Call ListSupplierPOs(SupplierNo$,FullPONo$,status)
                If status Goto TicketInfoSupplier
              Else 
                FullPONo$ = ""
              End If 
            Else 
              FullPONo$ = ""
            End If 
          End If 
          POHeader$ = ""
          If ItemCount < 2 And FullPONo$ And Trim$(FullPONo$) <> "UNKNOWN"
            MaterialCode$ = Trim$(PODetail$[50,57])
            If MaterialCode$ = MultPrice.MaterialCode$ ! *MULT contract selected
              Call GetMultPOLine(FullPONo$,status)
              If status Goto TicketInfoSupplier
              If Trim$(PODetail$[50,57]) = "999"
                MaterialCode$ = Items.[1].MaterialCode$ ! Don't use 999 as the material code
                PODetail$[111,140] = SAISpaceFill$(Items.[1].MaterialDesc$,30) ! Preserve material desc also
              Else 
                MaterialCode$ = Trim$(PODetail$[50,57])
              End If 
              FullPONo$[11,12] = "00" ! Restore 00 line in FullPONo
            End If 
            If OTMFreight$ = "Y"
              Call CarrierOptions(TicketHeader.VehType$,FullPONo$,k$,count) ! count=-1 for Generic, 0 for no carrier, or >0 for number of contract carriers found
              If count
                If TicketHeader.CarrierRefNo$ = ""
                  temp$ = DateUsing$(Tim#(0),"YYYY")
                  Call GetOTMRefNo(temp$,status)
                  If status
                    Goto TicketInfoPO
                  Else 
                    TicketHeader.CarrierRefNo$ = OTMFreightInterface.OTMRefNo$
                    CarrierNo$ = OTMFreightInterface.CarrierNo$
                    TicketHeader.CarrierNo$ = OTMFreightInterface.CarrierNo$
                  End If 
                End If 
              End If 
            End If 
            ktemp$ = PODetail$[1,16]
            Call SAIGetRecord(ch_1200,recdef_1200.,ktemp$,1,"Y","U",rtemp,POHeader$,POHeader[],stat,errmess$)
            If stat = 0
              If Trim$(POHeader$[214,216]) Let TicketHeader.Trader$ = Trim$(POHeader$[214,216])
              TicketHeader.FundsType$ = Trim$(POHeader$[211,212])
            Else 
              POHeader$ = ""
            End If 
            Call GetMaterialPrice(MaterialCode$,status)
            If status
              Call SAITouchWarning("No valid Pricing found for contracted material: " + MaterialCode$)
              MaterialCode$ = ""
              Clear Material.
            Else 
              If Material.StockPileFlag ! Check for StockPile
                Call SelectStockPile(Material.InventoryCode$,Material.YardCode$,Branch$,Material.StockPile$,"","R",ExitStatus)
                If ExitStatus
                  MaterialCode$ = ""
                  Clear Material.
                  Goto TicketInfoSupplier
                End If 
              End If 
              If MaterialCode$
                If PODetail$[204,204] <> "Y" ! Use contract pricing instead of price file
                  If PODetail$[47,47] <> " "
                    Material.Price = 0 ! Estimated price - zero out
                  Else 
                    Material.Price = PODetail[2]
                  End If 
                  Material.PriceUM$ = Trim$(PODetail$[42,43])
                End If 
                If Trim$(PODetail$[111,140]) Let Material.MaterialDesc$ = Trim$(PODetail$[111,140])
                If ItemCount = 0 ! Initialize item
                  Clear TicketDetail.
                  ItemCount = 1
                  TicketDetail.TicketNo$ = TicketNo$
                  TicketDetail.ItemNo = 1
                  TicketDetail.ShipmentNo$ = TicketNo$
                  TicketDetail.DetailOrderLine$ = Trim$(PODetail$[17,18])
                  Call PopulateMaterialDetail()
                  Call CalcExtPrice()
                  Items.[1] = TicketDetail.
                  Try 
                    Search #ch_db;"INSERT INTO InYard_Dtl (" + SQLN$(Items.[1]) + ") VALUES (" + SQLV$(Items.[1]) + ")"
                  Else 
                    errmess$ = "Error creating item number " + Str$(ItemNo) + " in InYard_Dtl table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10))
                    Call WriteLogFile(errmess$)
                    Call SAITouchError(errmess$)
                  End Try 
                  If TicketAudit
                    ItemNo = 1
                    Call LoadTicketAudit()
                    TicketAudit.Event$ = "Item Added"
                    Call WriteTicketAudit()
                  End If 
                Else 
                  TicketDetail. = Items.[1]
                  TicketDetail.DetailOrderLine$ = Trim$(PODetail$[17,18])
                  Call PopulateMaterialDetail()
                  Call CalcExtPrice()
                  Items.[1] = TicketDetail.
                  Try 
                    Search #ch_db;"UPDATE InYard_Dtl SET " + SQLNV$(TicketDetail.) + " WHERE TicketNo=" + SQLV$(TicketDetail.TicketNo$) + " AND ItemNo=" + SQLV$(TicketDetail.ItemNo)
                  Else 
                    Call SAITouchError("Error updating item number " + Str$(ItemNo) + " in InYard_Dtl table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
                  End Try 
                  If TicketAudit
                    ItemNo = 1
                    Call LoadTicketAudit()
                    TicketAudit.Event$ = "Item Contract Changed"
                    Call WriteTicketAudit()
                  End If 
                End If 
                MaterialCode$ = ""
                Clear Material.
              End If 
            End If 
          End If 
          If Trim$(FullPONo$) = "UNKNOWN"
            If TicketTemp.MixUnload And TicketHeader.OrderNo$ And TicketHeader.OrderNo$ <> "UNKNOWN"
              Try 
                Search #ch_db;"DELETE FROM Pur_Mix_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
              Else 
                Call SAITouchError("Error deleting entry from Pur_Mix_Hdr table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
              End Try 
              TicketTemp.MixUnload = 0
            End If 
            TicketHeader.OrderNo$ = "UNKNOWN"
            TicketHeader.Trader$ = Supplier.TraderCode$
            Clear TicketHeader.OrderLine$,TicketHeader.ShipFromTo$,TicketHeader.ShippingInst$,TicketHeader.ShipOrdNo$,TicketHeader.FundsType$
          Else If FullPONo$
            TicketHeader.OrderNo$ = Trim$(FullPONo$[1,10])
            TicketHeader.OrderLine$ = Trim$(FullPONo$[11,12])
            TicketHeader.ShipFromTo$ = Trim$(PODetail$[31,34])
            TicketHeader.ShippingInst$ = Trim$(PODetail$[66,95])
            TicketHeader.ShipOrdNo$ = Trim$(PODetail$[214,233])
          Else 
            TicketHeader.Trader$ = Supplier.TraderCode$
            Clear TicketHeader.OrderNo$,TicketHeader.OrderLine$,TicketHeader.ShipFromTo$,TicketHeader.ShippingInst$,TicketHeader.ShipOrdNo$,TicketHeader.FundsType$
          End If 
          If SunValley
            If TicketHeader.EntityNo$ = SV_SupplierNo$ Or SupplierNo$ = SV_SupplierNo$
              Clear TicketHeader.SuppInvNo$
              Clear TicketHeader.LAInfo_DriversName$
              Clear TicketHeader.LAInfo_District$
              Clear TicketHeader.LAInfo_Route$
              Clear TicketHeader.LAInfo_Section$
              Print #chti;'117WCDELETE 17WCSELECT CU 0WCSELECT';
            End If 
          End If 
          TicketHeader.EntityNo$ = SupplierNo$
          TicketHeader.CurbSideCity$ = CurbSideCity$
          If TicketHeader.OrderNo$ And TicketHeader.OrderNo$ <> "UNKNOWN" And POHeader$ = ""
            ktemp$ = SAISpaceFill$(TicketHeader.EntityNo$,6) + SAIFill$(TicketHeader.OrderNo$,"R"," ",10)
            Call SAIGetRecord(ch_1200,recdef_1200.,ktemp$,1,"Y","U",rtemp,POHeader$,POHeader[],stat,errmess$)
            If stat = 0
              If Trim$(POHeader$[214,216]) Let TicketHeader.Trader$ = Trim$(POHeader$[214,216])
              TicketHeader.FundsType$ = Trim$(POHeader$[211,212])
            Else 
              POHeader$ = ""
            End If 
          End If 
          If TicketHeader.OrderNo$
            If OTMFreight$ = "Y" And TicketHeader.CarrierRefNo$
              Clear TicketHeader.TripTicketNo$
            Else 
              Clear TicketHeader.CarrierNo$,TicketHeader.TripTicketNo$
            End If 
          End If 
          If Trim$(TicketIdentity.TicketNo$)
            TicketHeader.IDNumber$ = Trim$(TicketIdentity.IDNumber$)
            If SupplierNo$[1,3] = "CP0"
              TicketHeader.Name$ = TicketIdentity.FullName$
              TicketHeader.Address1$ = TicketIdentity.Address1$
              TicketHeader.Address2$ = TicketIdentity.Address2$
              TicketHeader.City$ = TicketIdentity.City$
              TicketHeader.State$ = TicketIdentity.State$
              TicketHeader.PostCode$ = TicketIdentity.PostCode$
              TicketHeader.PhoneNo$ = TicketIdentity.PhoneNo$
              TicketHeader.TaxID$ = TicketIdentity.TaxID$
            Else 
              Call PopulateSupplierAddress()
            End If 
          Else 
            If SupplierNo$[1,3] = "CP0"
              If IdentityInfo = 0
                TicketHeader.Name$ = Supplier.Name$
                ! Clear the rest
                TicketHeader.Address1$ = ""
                TicketHeader.Address2$ = ""
                TicketHeader.City$ = ""
                TicketHeader.State$ = ""
                TicketHeader.PostCode$ = ""
                TicketHeader.PhoneNo$ = ""
              End If 
            Else 
              Call PopulateSupplierAddress()
            End If 
          End If 
          ! Carrier Selection
          If TicketHeader.OrderNo$ And (TicketHeader.CarrierRefNo$ = "" Or OTMFreight$ <> "Y")
            VehicleType$ = TicketHeader.VehType$
            FullPONo$ = SAIFill$(TicketHeader.OrderNo$,"R"," ",10) + SAISpaceFill$(TicketHeader.OrderLine$,2)
            Call CarrierSelection(VehicleType$,VehicleSize$,FullPONo$,CarrierNo$,status)
          End If 
          Print #chti;'12WCSELECT CU';TicketHeader.EntityNo$;": ";TicketHeader.Name$;'0WCSELECT';
          Call TIRefreshContractInfo()
          If TicketAudit
            Call LoadTicketAuditHeader()
            TicketAudit.Event$ = "Supplier Changed"
            Call WriteTicketAudit()
          End If 
          If PhotoViewerTrigger$ Call SendPhotoViewerTrigger(PhotoViewerTrigger$,"SupplierChanged")
          If ItemCount And (TicketHeader.OrderNo$ = "" Or TicketHeader.OrderNo$ = "UNKNOWN")
            If EditPrice$ = "Y" Or EditPrice$ = "P" Or (EditPrice$ = "PEDDLER" And TicketHeader.EntityNo$[1,3] = "CP0")
              If AlwaysRepriceOnSupplierChange$ = "Y"
                ans = 1
              Else 
                ans = SAITouchYesNo("Do you wish to re-price all items?")
              End If 
            Else 
              ans = 1
            End If 
            If ans Call RepriceItems()
          End If 
          If TicketTemp.MixUnload
            If Trim$(Items.[1].MaterialCode$) = "*MIX"
              Try 
                TicketTemp.RecoveryMode = 0
                If POHeader$
                  If POHeader$[181,181] = "Y" Let TicketTemp.RecoveryMode = 1
                End If 
                Search #ch_db;"UPDATE Pur_Mix_Hdr SET SupplierNo=" + SQLV$(TicketHeader.EntityNo$) + ", PONo=" + SQLV$(TicketHeader.OrderNo$) + ", RecoveryMode=" + SQLV$(TicketTemp.RecoveryMode) + " WHERE TicketNo=" + SQLV$(PurMixHdr.TicketNo$) + " AND ShipmentDate=" + SQLD$(PurMixHdr.ShipmentDate#)
              Else 
                Call SAITouchError("Error updating entry in Pur_Mix_Hdr table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
              End Try 
            Else 
              Try 
                Search #ch_db;"DELETE FROM Pur_Mix_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
              Else 
                Call SAITouchError("Error deleting entry from Pur_Mix_Hdr table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
              End Try 
              TicketTemp.MixUnload = 0
            End If 
          Else If MixUnloadMode$ = "Y" And TicketHeader.OrderNo$ And TicketHeader.OrderNo$ <> "UNKNOWN"
            If Trim$(Items.[1].MaterialCode$) = "*MIX"
              Clear PurMixHdr.
              PurMixHdr.TicketNo$ = TicketHeader.TicketNo$
              PurMixHdr.ShipmentDate# = TicketHeader.ShipmentDate#
              PurMixHdr.Branch$ = TicketHeader.Branch$
              PurMixHdr.SupplierNo$ = TicketHeader.EntityNo$
              PurMixHdr.PONo$ = TicketHeader.OrderNo$
              If POHeader$
                If POHeader$[181,181] = "Y" Let PurMixHdr.RecoveryMode = 1
              End If 
              Try 
                Search #ch_db;"INSERT INTO Pur_Mix_Hdr (" + SQLN$(PurMixHdr.) + ") VALUES (" + SQLV$(PurMixHdr.) + ")"
                TicketTemp.MixUnload = 1
              Else 
                Call SAITouchError("Error creating entry in Pur_Mix_Hdr table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
              End Try 
            End If 
          End If 
          Call UpdateInYard(stat)
          Call DisplayTicket()
        Else If SupplierNo$
          TicketHeader.CurbSideCity$ = CurbSideCity$
          Call UpdateInYard(stat)
        Else ! Restore original SupplierNo and Order data
          SupplierNo$ = TicketHeader.EntityNo$
          Call RetrieveSupplier(TicketHeader.EntityNo$,Supplier.,stat)
          If TicketHeader.OrderNo$ And TicketHeader.OrderNo$ <> "UNKNOWN"
            k1$ = SAISpaceFill$(TicketHeader.EntityNo$,6) + SAIFill$(TicketHeader.OrderNo$,"R"," ",10) + SAISpaceFill$(TicketHeader.OrderLine$,2)
            Call SAIGetRecord(ch_1210ro,recdef_1210.,k1$,1,"Y","U",r,PODetail$,PODetail[],e,errmess$)
            If e = 0 Let TicketHeader.ShippingInst$ = Trim$(PODetail$[66,95])
          End If 
        End If 
      Case 'F33' ! Purchase Order
TicketInfoPO: !
        Call ListSupplierPOs(SupplierNo$,FullPONo$,status)
        If status = 0
          POHeader$ = ""
          If FullPONo$ And Trim$(FullPONo$) <> "UNKNOWN" And FullPONo$ <> SAIFill$(TicketHeader.OrderNo$,"R"," ",10) + SAISpaceFill$(TicketHeader.OrderLine$,2) And ItemCount = 1
            MaterialCode$ = Trim$(PODetail$[50,57])
            If MaterialCode$ = MultPrice.MaterialCode$ ! *MULT contract selected
              Call GetMultPOLine(FullPONo$,status)
              If status Goto TicketInfoPO
              If Trim$(PODetail$[50,57]) = "999"
                MaterialCode$ = Items.[1].MaterialCode$ ! Don't use 999 as the material code
                PODetail$[111,140] = SAISpaceFill$(Items.[1].MaterialDesc$,30) ! Preserve material desc also
              Else 
                MaterialCode$ = Trim$(PODetail$[50,57])
              End If 
              FullPONo$[11,12] = "00" ! Restore 00 line in FullPONo
            End If 
            If OTMFreight$ = "Y"
              Call CarrierOptions(TicketHeader.VehType$,FullPONo$,k$,count) ! count=-1 for Generic, 0 for no carrier, or >0 for number of contract carriers found
              If count
                If TicketHeader.CarrierRefNo$ = ""
                  temp$ = DateUsing$(Tim#(0),"YYYY")
                  Call GetOTMRefNo(temp$,status)
                  If status
                    Goto TicketInfoPO
                  Else 
                    TicketHeader.CarrierRefNo$ = OTMFreightInterface.OTMRefNo$
                    CarrierNo$ = OTMFreightInterface.CarrierNo$
                    TicketHeader.CarrierNo$ = OTMFreightInterface.CarrierNo$
                  End If 
                End If 
              Else If TicketHeader.CarrierRefNo$
                Call OTMClearStatus(TicketHeader.CarrierRefNo$,stat)
                TicketHeader.CarrierRefNo$ = ""
                CarrierNo$ = ""
                TicketHeader.CarrierNo$ = ""
              End If 
            End If 
            ktemp$ = SAISpaceFill$(TicketHeader.EntityNo$,6) + FullPONo$
            Call SAIGetRecord(ch_1200,recdef_1200.,ktemp$,1,"Y","U",rtemp,POHeader$,POHeader[],stat,errmess$)
            If stat = 0
              If Trim$(POHeader$[214,216]) Let TicketHeader.Trader$ = Trim$(POHeader$[214,216])
              TicketHeader.FundsType$ = Trim$(POHeader$[211,212])
            Else 
              POHeader$ = ""
            End If 
            Call GetMaterialPrice(MaterialCode$,status)
            If status
              Call SAITouchWarning("No valid Pricing found for contracted material: " + Trim$(MaterialCode$))
              MaterialCode$ = ""
              Clear Material.
            Else 
              If Material.StockPileFlag ! Check for StockPile
                Call SelectStockPile(Material.InventoryCode$,Material.YardCode$,Branch$,Material.StockPile$,"","R",ExitStatus)
                If ExitStatus
                  MaterialCode$ = ""
                  Clear Material.
                  Goto TicketInfoPO
                End If 
              End If 
              If MaterialCode$
                If PODetail$[204,204] <> "Y" ! Use contract pricing instead of price file
                  If PODetail$[47,47] <> " "
                    Material.Price = 0 ! Estimated price - zero out
                  Else 
                    Material.Price = PODetail[2]
                  End If 
                  Material.PriceUM$ = Trim$(PODetail$[42,43])
                End If 
                If Trim$(PODetail$[111,140]) Let Material.MaterialDesc$ = Trim$(PODetail$[111,140])
                TicketDetail. = Items.[1]
                TicketDetail.DetailOrderLine$ = Trim$(PODetail$[17,18])
                Call PopulateMaterialDetail()
                Call CalcExtPrice()
                Items.[1] = TicketDetail.
                Try 
                  Search #ch_db;"UPDATE InYard_Dtl SET " + SQLNV$(TicketDetail.) + " WHERE TicketNo=" + SQLV$(TicketDetail.TicketNo$) + " AND ItemNo=" + SQLV$(TicketDetail.ItemNo)
                Else 
                  Call SAITouchError("Error updating item number " + Str$(ItemNo) + " in InYard_Dtl table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
                End Try 
                If TicketAudit
                  ItemNo = 1
                  Call LoadTicketAudit()
                  TicketAudit.Event$ = "Item Contract Changed"
                  Call WriteTicketAudit()
                End If 
                MaterialCode$ = ""
                Clear Material.
              End If 
            End If 
          End If 
          If TicketTemp.MixUnload And (Trim$(FullPONo$) = "UNKNOWN" Or Trim$(FullPONo$) = "")
            If TicketHeader.OrderNo$ And TicketHeader.OrderNo$ <> "UNKNOWN"
              Try 
                Search #ch_db;"DELETE FROM Pur_Mix_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
              Else 
                Call SAITouchError("Error deleting entry from Pur_Mix_Hdr table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
              End Try 
              TicketTemp.MixUnload = 0
            End If 
          End If 
          If Trim$(FullPONo$) = "UNKNOWN" Or FullPONo$ = ""
            If FullPONo$ = ""
              Clear TicketHeader.OrderNo$
            Else 
              TicketHeader.OrderNo$ = "UNKNOWN"
            End If 
            If gbl.MultiCurrency$ = "Y" And TicketHeader.FundsType$ <> gbl.BranchFundsType$
              For i = 1 To ItemCount
                Items.[i].MaterialCode$ = "999"
                Items.[i].MaterialDesc$ = "Unknown"
                Items.[i].InventoryCode$ = "999"
                Clear Items.[i].YardCode$,Items.[i].Price,Items.[i].MaterialCmt1$,Items.[i].MaterialCmt2$
              Next i
            End If 
            For i = 1 To ItemCount
              Items.[i].DetailOrderLine$ = ""
            Next i
            TicketHeader.Trader$ = Supplier.TraderCode$
            Clear TicketHeader.OrderLine$,TicketHeader.ShippingInst$,TicketHeader.ShipOrdNo$,TicketHeader.FundsType$
            If TicketHeader.Noticed = 0 Clear TicketHeader.ShipFromTo$
          Else If FullPONo$
            TicketHeader.OrderNo$ = Trim$(FullPONo$[1,10])
            TicketHeader.OrderLine$ = Trim$(FullPONo$[11,12])
            TicketHeader.ShipFromTo$ = Trim$(PODetail$[31,34])
            TicketHeader.ShippingInst$ = Trim$(PODetail$[66,95])
            TicketHeader.ShipOrdNo$ = Trim$(PODetail$[214,233])
          End If 
          If OTMFreight$ = "Y"
            If Trim$(FullPONo$) = "UNKNOWN" Or FullPONo$ = ""
              TicketHeader.CarrierNo$ = ""
              If TicketHeader.CarrierRefNo$
                Call OTMClearStatus(TicketHeader.CarrierRefNo$,stat)
                TicketHeader.CarrierRefNo$ = ""
              End If 
            End If 
          Else 
            If TicketHeader.Noticed = 0
              Clear TicketHeader.CarrierNo$,TicketHeader.TripTicketNo$ ! Clear Carrier and Trip ticket if not a notice
            End If 
          End If 
          If TicketHeader.OrderNo$ And TicketHeader.OrderNo$ <> "UNKNOWN" And POHeader$ = ""
            ktemp$ = SAISpaceFill$(TicketHeader.EntityNo$,6) + SAIFill$(TicketHeader.OrderNo$,"R"," ",10)
            Call SAIGetRecord(ch_1200,recdef_1200.,ktemp$,1,"Y","U",rtemp,POHeader$,POHeader[],stat,errmess$)
            If stat = 0
              If Trim$(POHeader$[214,216]) Let TicketHeader.Trader$ = Trim$(POHeader$[214,216])
              TicketHeader.FundsType$ = Trim$(POHeader$[211,212])
            Else 
              POHeader$ = ""
            End If 
          End If 
          ! Carrier Selection
          If FullPONo$ And (TicketHeader.Noticed = 0 Or TicketHeader.CarrierNo$ = "") And (TicketHeader.CarrierRefNo$ = "" Or OTMFreight$ <> "Y")
            VehicleType$ = TicketHeader.VehType$
            Call CarrierSelection(VehicleType$,VehicleSize$,FullPONo$,CarrierNo$,status)
          End If 
          If TicketTemp.MixUnload
            If Trim$(Items.[1].MaterialCode$) = "*MIX"
              Try 
                TicketTemp.RecoveryMode = 0
                If POHeader$
                  If POHeader$[181,181] = "Y" Let TicketTemp.RecoveryMode = 1
                End If 
                Search #ch_db;"UPDATE Pur_Mix_Hdr SET PONo=" + SQLV$(TicketHeader.OrderNo$) + ", RecoveryMode=" + SQLV$(TicketTemp.RecoveryMode) + " WHERE TicketNo=" + SQLV$(PurMixHdr.TicketNo$) + " AND ShipmentDate=" + SQLD$(PurMixHdr.ShipmentDate#)
              Else 
                Call SAITouchError("Error updating entry in Pur_Mix_Hdr table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
              End Try 
            Else 
              Try 
                Search #ch_db;"DELETE FROM Pur_Mix_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
              Else 
                Call SAITouchError("Error deleting entry from Pur_Mix_Hdr table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
              End Try 
              TicketTemp.MixUnload = 0
            End If 
          Else If MixUnloadMode$ = "Y" And TicketHeader.OrderNo$ And TicketHeader.OrderNo$ <> "UNKNOWN"
            If Trim$(Items.[1].MaterialCode$) = "*MIX"
              Clear PurMixHdr.
              PurMixHdr.TicketNo$ = TicketHeader.TicketNo$
              PurMixHdr.ShipmentDate# = TicketHeader.ShipmentDate#
              PurMixHdr.Branch$ = TicketHeader.Branch$
              PurMixHdr.SupplierNo$ = TicketHeader.EntityNo$
              PurMixHdr.PONo$ = TicketHeader.OrderNo$
              If POHeader$
                If POHeader$[181,181] = "Y" Let PurMixHdr.RecoveryMode = 1
              End If 
              Try 
                Search #ch_db;"INSERT INTO Pur_Mix_Hdr (" + SQLN$(PurMixHdr.) + ") VALUES (" + SQLV$(PurMixHdr.) + ")"
                TicketTemp.MixUnload = 1
              Else 
                Call SAITouchError("Error creating entry in Pur_Mix_Hdr table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
              End Try 
            End If 
          End If 
          Call TIRefreshContractInfo()
        Else ! Restore PO data
          k1$ = SAISpaceFill$(TicketHeader.EntityNo$,6) + SAIFill$(TicketHeader.OrderNo$,"R"," ",10) + SAISpaceFill$(TicketHeader.OrderLine$,2)
          Call SAIGetRecord(ch_1210ro,recdef_1210.,k1$,1,"Y","U",r,PODetail$,PODetail[],e,errmess$)
          If e = 0 Let TicketHeader.ShippingInst$ = Trim$(PODetail$[66,95])
        End If 
      Case 'F34' ! Vehicle Info
        VehicleType$ = TicketHeader.VehType$
        VehicleSize$ = TicketHeader.VehSize$
        VehicleNo$ = TicketHeader.VehNo$
        Call GetVehicleInfo(status)
        If status = 0
          TicketHeader.VehType$ = VehicleType$
          TicketHeader.VehSize$ = VehicleSize$
          TicketHeader.VehNo$ = VehicleNo$
          Print #chti;'14WCSELECT CU';TicketHeader.VehNo$;'0WCSELECT';
        End If 
      Case 'F35' ! Carrier
        VehicleType$ = TicketHeader.VehType$
        If TicketHeader.OrderNo$ = "UNKNOWN"
          FullPONo$ = TicketHeader.OrderNo$
        Else If TicketHeader.OrderNo$
          FullPONo$ = SAIFill$(TicketHeader.OrderNo$,"R"," ",10) + SAISpaceFill$(TicketHeader.OrderLine$,2)
        Else 
          FullPONo$ = ""
        End If 
        ! status=-1 for No Carrier, 0 for Carrier selected, or 1 for Cancel
        Call CarrierSelection(VehicleType$,VehicleSize$,FullPONo$,CarrierNo$,status)
        If status <= 0
          If TicketHeader.CarrierNo$ = "" And TicketHeader.ShipmentNo$ <> TicketHeader.TicketNo$
            ! Reset ShipmentNo equal to TicketNo
            TicketHeader.ShipmentNo$ = TicketHeader.TicketNo$
            For i = 1 To ItemCount
              Items.[i].ShipmentNo$ = TicketHeader.TicketNo$
            Next i
          End If 
          Call TIRefreshContractInfo()
        End If 
      Case 'F36' ! Trip Ticket No.
        CarrierNo$ = TicketHeader.CarrierNo$
        Call GetTripTicketNumber()
        Print #chti;'16WCSELECT CU';TicketHeader.TripTicketNo$;'0WCSELECT';
      Case 'F37' ! SunValley or Supplier Inv. No.
        If SunValley And SupplierNo$ = SV_SupplierNo$
          Call GetSVLAInfo(status)
          If status = 0
            Print #chti;'17WCSELECT CU';"Driver=";TicketHeader.LAInfo_DriversName$;", District=";TicketHeader.LAInfo_District$;", Route=";TicketHeader.LAInfo_Route$;", Sect=";TicketHeader.LAInfo_Section$;'0WCSELECT';
          End If 
        Else 
          w$ = TicketHeader.SuppInvNo$
          Call SAIKeyBoardGen("Enter Supplier Invoice No.",KBParams.alphacase,10,0,w$,stat)
          If stat = 0
            TicketHeader.SuppInvNo$ = Trim$(w$)
            Print #chti;'17WCSELECT CU';TicketHeader.SuppInvNo$;'0WCSELECT';
          End If 
        End If 
      Case 'F38' ! Supplier Shipment No.
        w$ = TicketHeader.SuppShipNo$
        Call SAIKeyBoardGen("Enter Supplier Shipment No.",KBParams.alphacase,10,0,w$,stat)
        w$ = Trim$(w$)
        If stat = 0
          If SupplierShipNoPrompt$ = "R" Or Supplier.SuppShipNoHandling$ = "R" Or Supplier.SuppShipNoHandling$ = "S" Or Supplier.SuppShipNoHandling$ = "V"
            If w$ = ""
              Call SAITouchWarning("Supplier Shipment No. is required.")
            Else If Supplier.SuppShipNoHandling$ = "S" Or Supplier.SuppShipNoHandling$ = "V"
              Call ValidateSupplierShipmentNo(w$,stat)
              If stat = 0 Let TicketHeader.SuppShipNo$ = Trim$(w$)
            Else 
              TicketHeader.SuppShipNo$ = w$
            End If 
          Else 
            TicketHeader.SuppShipNo$ = w$
          End If 
          Print #chti;'18WCSELECT CU';TicketHeader.SuppShipNo$;'0WCSELECT';
        End If 
      Case 'F39' ! Comment
        Call GetComment(19)
        Call SAIKeyBoardGen("Enter Comment",KBParams.alphacase,50,0,temp$,stat)
        If stat = 0 Print #chti;'19WCSELECT CU';Trim$(temp$);'0WCSELECT';
      Case 'F40' ! Freight Hours
        Do 
          Call SAIKeyPad("Enter Freight Hours",num,0,status)
          If status = 0
            If num <> 0
              TicketHeader.FreightHrs = num
              Exit Do 
            Else 
              ans = SAITouchYesNo("Are you sure that zero hours are desired?")
              If ans
                TicketHeader.FreightHrs = -9.99
                Exit Do 
              End If 
            End If 
          Else 
            Exit Do 
          End If 
        Loop 
        If status = 0
          Print #chti;'20WCSELECT CU';Str$(TicketHeader.FreightHrs);'0WCSELECT';
        End If 
      Case 'F41' ! Copy Inspection Comment to Tkt Comment
        If TicketHeader.TktComment$
          ans = SAITouchYesNo("Are you sure you want to overwrite existing Ticket Comment?")
        Else 
          ans = 1
        End If 
        If ans
          TicketHeader.TktComment$ = TicketHeader.InspectionComment$
          Print #chti;'19WCSELECT CU';TicketHeader.TktComment$;'0WCSELECT';
        End If 
      Case 'F48' ! Identity Info
        Call AdvancedIdentityInfo(status)
        If status = 0 And PhotoViewerTrigger$ Call SendPhotoViewerTrigger(PhotoViewerTrigger$,"IdentityChanged")
      Case 'F49' ! Advanced Vehicle Info
        Call SAIAdvancedVehicleInfo(z$,ch_db,ConfigFile$,TicketHeader.TicketNo$,TicketHeader.ShipmentDate#,TicketIdentity.,TicketHeader.EntityNo$,WeighMaster$,status)
    End Select 
  Loop 
  Close #chti
End Sub 
Sub SalesTIRefreshContractInfo()
  Print #chti;'13WCSELECT CU';
  If Trim$(TicketHeader.OrderNo$)
    Print #chti;TicketHeader.OrderNo$;"-";TicketHeader.OrderLine$;
  Else 
    Print #chti;"UNKNOWN";
  End If 
  Print #chti;'14WCSELECT CU';
  If TicketHeader.MatReqNo$
    Print #chti;TicketHeader.MatReqNo$;"-";TicketHeader.MatReqLine$;
  Else 
    Print #chti;"UNKNOWN";
  End If 
  If TicketHeader.CarrierNo$
    Print #chti;'16WCSELECT CU';TicketHeader.CarrierNo$;": ";Trim$(SAICodesFileDesc$(ch_110Aro,"C",TicketHeader.CarrierNo$));'0WCSELECT';
    Print #chti;'17WCSELECT CU';
    If OTMFreight$ = "Y"
      Print #chti;TicketHeader.CarrierRefNo$;'0WCSELECT';
    Else If TicketHeader.TripTicketNo$ ! Trip Ticket
      Print #chti;TicketHeader.TripTicketNo$;'0WCSELECT 37WCENABLE';
    Else 
      Print #chti;'0WCSELECT 37WCDISABLE';
    End If 
    If TicketHeader.FreightHrs
      If TicketHeader.FreightHrs < 0 Let num = 0 Else Let num = TicketHeader.FreightHrs
      Print #chti;'120WCENABLE 20WCENABLE 40WCENABLE'; ! Frt Hrs
      Print #chti;'20WCSELECT CU';Str$(num);'0WCSELECT';
    Else 
      Print #chti;'20WCSELECT CU 0WCSELECT 120WCDISABLE 20WCDISABLE 40WCDISABLE'; ! Frt Hrs
    End If 
  Else 
    TicketHeader.FreightHrs = 0
    Print #chti;'16WCSELECT CU';
    Print #chti;'17WCSELECT CU 0WCSELECT 37WCDISABLE';
    Print #chti;'20WCSELECT CU 0WCSELECT 120WCDISABLE 20WCDISABLE 40WCDISABLE'; ! Frt Hrs
  End If 
  Print #chti;'0WCSELECT';
End Sub 
Sub SalesTicketInfo(status)
  MultiSales = 0
  If Items.[1].MaterialCode$[1,4] = "*MIX" And WeightOnly = 0 !AND TicketHeader.TktMode$<>"T"
    Search #ch_db;"SELECT TicketNo FROM Sales_Ticket_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#) + " AND Branch=" + SQLV$(Branch$)
    If Chf(ch_db)
      MultiSales = 2 ! Multi-Sales for this branch
    Else 
      Search #ch_db;"SELECT TicketNo FROM Sales_Ticket_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
      If Chf(ch_db)
        MultiSales = 1 ! Multi-Sales exist but not for this branch
      End If 
    End If 
  End If 
  chti = SAIOpenWindow("Ticket Information",800,295,1)
  Print #chti;PChr$(bgcolor1);'BACKCOLOR CS WCSETCOLOR';
  Print #chti;PChr$("Arial");'FONTFACE 12FONTSIZE EBOLD WCSETFONT';
  x0 = 10 \ x1 = 180 \ bw = 100
  y = 5 \ dy = 30
  dx = 180
  Print #chti;PChr$(109,x0,y,x1,y + 14,"ID:");'WCLABEL';
  Print #chti;PChr$(9,x1,y,x1 + dx,y + 14,"",0);'WCTEXT 9WCSELECT';TicketHeader.InYardID$;'0WCSELECT';
  x = x1 + dx + 50 \ dx = 150
  Print #chti;PChr$(110,x,y,x + 150,y + 14,"Ticket No:");'WCLABEL';
  Print #chti;PChr$(10,x + 150,y,x + 150 + dx,y + 14,"",0);'WCTEXT 10WCSELECT';TicketHeader.TicketNo$;'0WCSELECT';
  y = y + dy - 5 \ dx = 200
  Print #chti;PChr$(111,x0,y,x1,y + 14,"Ship Date:");'WCLABEL';
  Print #chti;PChr$(11,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chti;'11WCSELECT WCRESETCOLOR';DateUsing$(TicketHeader.ShipmentDate#,dateformat$);'0WCSELECT';
  Print #chti;PChr$(31,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Change",2);'WCBUTTON';
  y = y + dy \ dx = 500
  Print #chti;PChr$(112,x0,y,x1,y + 14,"Customer:");'WCLABEL';
  Print #chti;PChr$(12,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chti;'12WCSELECT WCRESETCOLOR';TicketHeader.EntityNo$;": ";TicketHeader.Name$;'0WCSELECT';
  Print #chti;PChr$(32,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Change",2);'WCBUTTON';
  y = y + dy \ dx = 200
  Print #chti;PChr$(113,x0,y,x1,y + 14,"Sales Order:");'WCLABEL';
  Print #chti;PChr$(13,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chti;'13WCSELECT WCRESETCOLOR';
  If TicketHeader.OrderNo$
    Print #chti;TicketHeader.OrderNo$;"-";TicketHeader.OrderLine$;
  Else If TicketHeader.TktType$ <> "W"
    Print #chti;"UNKNOWN";
  End If 
  Print #chti;'0WCSELECT';
  Print #chti;PChr$(33,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Change",2);'WCBUTTON';
  y = y + dy \ dx = 200
  Print #chti;PChr$(114,x0,y,x1,y + 14,"Material Req:");'WCLABEL';
  Print #chti;PChr$(14,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chti;'14WCSELECT WCRESETCOLOR';
  If TicketHeader.MatReqNo$
    Print #chti;TicketHeader.MatReqNo$;"-";TicketHeader.MatReqLine$;
  Else If TicketHeader.TktType$ <> "W"
    Print #chti;"UNKNOWN";
  End If 
  Print #chti;'0WCSELECT';
  Print #chti;PChr$(34,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Change",2);'WCBUTTON';
  y = y + dy \ dx = 200
  Print #chti;PChr$(115,x0,y,x1,y + 14,"Vehicle Info:");'WCLABEL';
  Print #chti;PChr$(15,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chti;'15WCSELECT WCRESETCOLOR';TicketHeader.VehNo$;'0WCSELECT';
  Print #chti;PChr$(35,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Change",2);'WCBUTTON';
  y = y + dy \ dx = 500
  Print #chti;PChr$(116,x0,y,x1,y + 14,"Carrier:");'WCLABEL';
  Print #chti;PChr$(16,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chti;'16WCSELECT WCRESETCOLOR';
  If TicketHeader.CarrierNo$ Print #chti;TicketHeader.CarrierNo$;": ";Trim$(SAICodesFileDesc$(ch_110Aro,"C",SAISpaceFill$(TicketHeader.CarrierNo$,6)));
  Print #chti;'0WCSELECT';
  Print #chti;PChr$(36,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Change",2);'WCBUTTON';
  y = y + dy \ dx = 120
  If OTMFreight$ = "Y"
    Print #chti;PChr$(117,x0,y,x1,y + 14,"OTM Ref No:");'WCLABEL';
    Print #chti;PChr$(17,x1,y,x1 + dx + bw,y + 14,"",0);'WCTEXT';
    Print #chti;'17WCSELECT WCRESETCOLOR';TicketHeader.CarrierRefNo$;'0WCSELECT';
  Else 
    Print #chti;PChr$(117,x0,y,x1,y + 14,"Trip Ticket No:");'WCLABEL';
    Print #chti;PChr$(17,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
    Print #chti;'17WCSELECT WCRESETCOLOR';TicketHeader.TripTicketNo$;'0WCSELECT';
    Print #chti;PChr$(37,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Change",2);'WCBUTTON';
    If TicketHeader.TripTicketNo$ = "" Print #chti;'37WCDISABLE';
  End If 
  x = x1 + dx + 5 + bw + 60 \ dx = 145
  Print #chti;PChr$(120,x,y,x + dx,y + 14,"Freight Hours:");'WCLABEL';
  x = x + dx \ dx = 70
  Print #chti;PChr$(20,x,y,x + dx,y + 14,"",0);'WCTEXT';
  Print #chti;'20WCSELECT WCRESETCOLOR 0WCSELECT';
  x = x + dx + 5
  Print #chti;PChr$(40,x,y - 5,x + bw,y + 20,"Change",2);'WCBUTTON';
  If TicketHeader.FreightHrs
    If TicketHeader.FreightHrs < 0 Let num = 0 Else Let num = TicketHeader.FreightHrs
    Print #chti;'20WCSELECT';Str$(num);'0WCSELECT';
  Else 
    Print #chti;'120WCDISABLE 20WCDISABLE 40WCDISABLE';
  End If 
  y = y + dy \ dx = 500
  Print #chti;PChr$(119,x0,y,x1,y + 14,"Ticket Comment:");'WCLABEL';
  Print #chti;'10FONTSIZE WCSETFONT';
  Print #chti;PChr$(19,x1,y - 5,x1 + dx,y + 20,"",2,50);'WCMEMO';
  Print #chti;'12FONTSIZE WCSETFONT 19WCSELECT WCRESETCOLOR';
  If TicketHeader.TktComment$ Print #chti;TicketHeader.TktComment$;
  Print #chti;'0WCSELECT';
  Print #chti;PChr$(39,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Keyboard",2);'WCBUTTON';
  If TicketHeader.Noticed
    Print #chti;PChr$(32,33);'WCDISABLE'; ! Can't edit if a Release
    If TicketHeader.MatReqNo$ Print #chti;'34WCDISABLE';
    If SalesRelease.CarrierNo$ Print #chti;'36WCDISABLE'; ! Allow change if Release did not specify carrier
  End If 
  If MultiSales
    Print #chti;PChr$(31,33);'WCDISABLE'; ! Can't change Shipment Date, Customer or Order if Multi-Sales
    If MultiSales = 2 Print #chti;'34WCDISABLE'; ! Can't change MatReq if Multi-Sales for this branch
  End If 
  If TicketHeader.TktType$ = "W"
    Print #chti;PChr$(33,34);'WCDISABLE'; ! No SO# or MR# if WeightOnly
  End If 
  If OTMFreight$ = "Y" And TicketHeader.CarrierRefNo$
    Print #chti;'32WCDISABLE'; ! Can't change Customer
    Print #chti;'36WCDISABLE'; ! Can't change Carrier
  End If 
  Print #chti;PChr$(1,350,265,450,290,"&OK",2);'WCBUTTON';
  Print #chti;'1WCFOCUS';
  Do 
SalesTicketInfoInput: !
    Input #chti; Len (1);w$
    Select Case w$
      Case 'F1' ! OK
        If TicketHeader.TktMode$ = "T" And OutBoundTransferCarrierRequired$ = "Y" And Trim$(TicketHeader.CarrierNo$) = ""
          Call SAITouchWarning("A Carrier is required on a Transfer.")
        Else 
          Call GetComment(19)
          Call UpdateInYard(stat)
          Call DisplaySalesTicket()
          Exit Do 
        End If 
      Case 'F31' ! Ship Date
        temp$ = SAIConvertDate$(TicketHeader.ShipmentDate#)
        Call SAITouchCalendar(temp$,w$)
        If w$
          If SAIConvertYear$(4,w$[5,6]) + w$[1,2] > FuturePeriodEnd$
            ans = SAITouchYesNo("Shipment Date is greater than the Future Period End Date.\15\\15\Is this correct?","Shipment Date Warning")
          Else 
            ans = 1
          End If 
          If ans
            TicketHeader.ShipmentDate# = SAIConvertDate#(w$)
            Print #chti;'11WCSELECT CU';DateUsing$(TicketHeader.ShipmentDate#,dateformat$);'0WCSELECT';
          End If 
        End If 
      Case 'F32' ! Change Customer
        SaveTransferMode$ = TicketHeader.TktMode$
        If TicketHeader.TktMode$ = "T" Let TransferMode = 1 Else Let TransferMode = 0
        FullSONo$ = ""
SalesTicketInfoCustomer: !
        Call GetCustomer()
        If CustomerNo$ And Trim$(CustomerNo$) <> TicketHeader.EntityNo$
          Call DisplayCustomerComments(CustomerNo$,status)
          If status Goto SalesTicketInfoCustomer
          If SaveTransferMode$ <> "T"
            If Customer.IntercompanyType$ = "I"
              ans = SAITouchConfirm("You are about to convert this transaction from a Sale to a Transfer.")
              If ans = 0
                SaveTransferMode$ = TicketHeader.TktMode$
                Goto SalesTicketInfoCustomer
              Else 
                TicketHeader.TktMode$ = "T"
              End If 
            Else 
              TicketHeader.TktMode$ = ""
            End If 
          Else 
            If Customer.IntercompanyType$ <> "I"
              ans = SAITouchConfirm("You are about to convert this transaction from a Transfer to a Sale.")
              If ans = 0
                SaveTransferMode$ = TicketHeader.TktMode$
                Goto SalesTicketInfoCustomer
              Else 
                TicketHeader.TktMode$ = ""
              End If 
            Else 
              TicketHeader.TktMode$ = "T"
            End If 
          End If 
SalesTicketInfoCustomerSO: !
          If Customer.IntercompanyType$ = "I" ! Look to see if there are any contracts for Inter-Company Customer
            Call OutBoundTransferOrderCheck(CustomerNo$,icount)
          Else 
            icount = 1
          End If 
          If icount
            If FullSONo$ = ""
              Call ListCustomerSOs(CustomerNo$,FullSONo$,status)
              If status
                Clear CustomerNo$,Customer.
                Goto SalesTicketInfoCustomer
              End If 
            End If 
          End If 
          If FullSONo$
            If WarnSalesOrderOvership$ = "Y" And SODetail[0] And FullSONo$[11,12] <> "00" And SODetail[1] >= SODetail[0]
              Call SAITouchWarning("Sales Order quantity has been met or exceeded.")
            End If 
            ktemp$ = SODetail$[1,16]
            Call SAIGetRecord(ch_1300,recdef_1300.,ktemp$,1,"Y","U",rtemp,SOHeader$,SOHeader[],stat,errmess$)
            If stat = 0
              !ValidateContainer$=SOHeader$[210,210]
              TicketHeader.FundsType$ = Trim$(SOHeader$[211,212])
            End If 
            MaterialCode$ = Trim$(SODetail$[50,57])
            Call GetSalesMaterialPrice(MaterialCode$,SODetail$[158,159],status)
            If status And Material.MaterialCode$ <> MaterialCode$
              Call SAITouchWarning("No valid Sales Material record found for contracted material: " + MaterialCode$)
              Clear FullSONo$,SODetail$,SODetail[],SOHeader$,SOHeader[]
              Goto SalesTicketInfoCustomerSO
            End If 
            ! Select/Determine Material Req (if only one exists, automatically select it)
            Call GetMaterialReq(FullPONo$,status)
            If status Goto SalesTicketInfoCustomerSO
            If Trim$(FullPONo$)
              MaterialCode$ = Trim$(PODetail$[50,57])
              TicketHeader.ShippingInst$ = Trim$(PODetail$[66,95])
              Call GetSalesMaterialPrice(MaterialCode$,Branch$,status)
              If status And Material.MaterialCode$ <> MaterialCode$
                Call SAITouchWarning("No valid Sales Material record found for requisitioned material: " + MaterialCode$)
                Clear FullSONo$,FullPONo$,SODetail$,SODetail[],SOHeader$,SOHeader[]
                Goto SalesTicketInfoCustomerSO
              Else 
                If OTMFreight$ = "Y"
                  Call CarrierOptions(TicketHeader.VehType$,FullPONo$,k$,count) ! count=-1 for Generic, 0 for no carrier, or >0 for number of contract carriers found
                  If count
                    If TicketHeader.CarrierRefNo$ = ""
                      temp$ = DateUsing$(Tim#(0),"YYYY")
                      Call GetOTMRefNo(temp$,status)
                      If status
                        Clear FullSONo$,FullPONo$,SODetail$,SODetail[]
                        Goto SalesTicketInfoCustomerSO
                      Else 
                        TicketHeader.CarrierRefNo$ = OTMFreightInterface.OTMRefNo$
                        CarrierNo$ = OTMFreightInterface.CarrierNo$
                        TicketHeader.CarrierNo$ = OTMFreightInterface.CarrierNo$
                      End If 
                    End If 
                  Else 
                    Clear TicketHeader.CarrierRefNo$
                  End If 
                End If 
              End If 
            Else 
              Clear TicketHeader.ShippingInst$,TicketHeader.CarrierRefNo$
            End If 
            If Material.StockPileFlag ! Check for StockPile
              Call SelectStockPile(Material.InventoryCode$,Material.YardCode$,Branch$,Material.StockPile$,"","D",ExitStatus)
              If ExitStatus
                Clear FullSONo$,FullPONo$,SODetail$,SODetail[]
                Goto SalesTicketInfoCustomerSO
              End If 
            End If 
            If SODetail$[47,47] = "e" ! Estimated price on contract, unprice the ticket
              Material.Price = 0
              Material.PriceUM$ = Trim$(SODetail$[42,43])
            Else If SODetail$[204,204] <> "Y" ! Use contract pricing instead of price file
              Material.Price = SODetail[2]
              Material.PriceUM$ = Trim$(SODetail$[42,43])
            End If 
            If Trim$(SODetail$[111,140]) Let Material.MaterialDesc$ = Trim$(SODetail$[111,140])
            TicketDetail. = Items.[1]
            Call PopulateMaterialDetail()
            Call CalcExtPrice()
            Items.[1] = TicketDetail.
            Try 
              Search #ch_db;"UPDATE InYard_Dtl SET " + SQLNV$(TicketDetail.) + " WHERE TicketNo=" + SQLV$(TicketDetail.TicketNo$) + " AND ItemNo=" + SQLV$(TicketDetail.ItemNo)
            Else 
              Call SAITouchError("Error updating item number " + Str$(ItemNo) + " in InYard_Dtl table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
            End Try 
            MaterialCode$ = ""
            Clear Material.
          Else 
            Clear TicketHeader.OrderNo$,TicketHeader.OrderLine$,TicketHeader.MatReqNo$,TicketHeader.MatReqLine$,TicketHeader.ShippingInst$,TicketHeader.CarrierRefNo$,TicketHeader.FundsType$
            Clear FullSONo$,FullPONo$
          End If 
          TicketHeader.EntityNo$ = Trim$(CustomerNo$)
          If FullSONo$
            TicketHeader.OrderNo$ = Trim$(FullSONo$[1,10])
            TicketHeader.OrderLine$ = Trim$(FullSONo$[11,12])
            TicketHeader.ShipOrdNo$ = Trim$(SODetail$[214,233])
          Else 
            Clear TicketHeader.OrderNo$,TicketHeader.OrderLine$
          End If 
          If FullPONo$
            TicketHeader.MatReqNo$ = Trim$(FullPONo$[1,10])
            TicketHeader.MatReqLine$ = Trim$(FullPONo$[11,12])
          Else 
            Clear TicketHeader.MatReqNo$,TicketHeader.MatReqLine$
          End If 
          If OTMFreight$ = "Y" And TicketHeader.CarrierRefNo$
            ! Don't clear carrier
          Else 
            TicketHeader.CarrierNo$ = ""
          End If 
          Call PopulateCustomerAddress()
          ! Carrier Selection
          If FullPONo$ And (TicketHeader.CarrierRefNo$ = "" Or OTMFreight$ <> "Y")
            VehicleType$ = TicketHeader.VehType$
            Call CarrierSelection(VehicleType$,VehicleSize$,FullPONo$,CarrierNo$,status)
          End If 
          Print #chti;'12WCSELECT CU';TicketHeader.EntityNo$;": ";TicketHeader.Name$;'0WCSELECT';
          Call SalesTIRefreshContractInfo()
        Else ! Restore original CustomerNo and SO detail
          CustomerNo$ = TicketHeader.EntityNo$
          Call RetrieveCustomer(CustomerNo$,Customer.,stat)
          If Customer.IntercompanyType$ = "I" Let TicketHeader.TktMode$ = "T" Else Let TicketHeader.TktMode$ = ""
          If TicketHeader.OrderNo$
            k1$ = SAISpaceFill$(TicketHeader.EntityNo$,6) + SAIFill$(TicketHeader.OrderNo$,"R"," ",10) + SAISpaceFill$(TicketHeader.OrderLine$,2)
            Call SAIGetRecord(ch_1310ro,recdef_1310.,k1$,1,"Y","U",r,SODetail$,SODetail[],e,errmess$)
          Else 
            Clear SODetail$,SODetail[]
          End If 
        End If 
      Case 'F33' ! Sales Order
SalesTicketInfoSO: !
        Call ListCustomerSOs(CustomerNo$,FullSONo$,status)
        If status = 0
          If FullSONo$ And FullSONo$ <> SAIFill$(TicketHeader.OrderNo$,"R"," ",10) + SAISpaceFill$(TicketHeader.OrderLine$,2)
            If WarnSalesOrderOvership$ = "Y" And SODetail[0] And FullSONo$[11,12] <> "00" And SODetail[1] >= SODetail[0]
              Call SAITouchWarning("Sales Order quantity has been met or exceeded.")
            End If 
            ktemp$ = SODetail$[1,16]
            Call SAIGetRecord(ch_1300,recdef_1300.,ktemp$,1,"Y","U",rtemp,SOHeader$,SOHeader[],stat,errmess$)
            If stat = 0
              !ValidateContainer$=SOHeader$[210,210]
              TicketHeader.FundsType$ = Trim$(SOHeader$[211,212])
            End If 
            MaterialCode$ = Trim$(SODetail$[50,57])
            Call GetSalesMaterialPrice(MaterialCode$,SODetail$[158,159],status)
            If status And Material.MaterialCode$ <> MaterialCode$
              Call SAITouchWarning("No valid Sales Material record found for contracted material: " + MaterialCode$)
              FullSONo$ = ""
              Goto SalesTicketInfoSO
            End If 
            ! Select/Determine Material Req (if only one exists, automatically select it)
            Call GetMaterialReq(FullPONo$,status)
            If status Goto SalesTicketInfoSO
            If FullPONo$
              MaterialCode$ = Trim$(PODetail$[50,57])
              TicketHeader.ShippingInst$ = Trim$(PODetail$[66,95])
              Call GetSalesMaterialPrice(MaterialCode$,Branch$,status)
              If status And Material.MaterialCode$ <> MaterialCode$
                Call SAITouchWarning("No valid Sales Material record found for requisitioned material: " + MaterialCode$)
                FullSONo$ = ""
                Goto SalesTicketInfoSO
              End If 
            Else 
              TicketHeader.ShippingInst$ = ""
            End If 
            If Material.StockPileFlag ! Check for StockPile
              Call SelectStockPile(Material.InventoryCode$,Material.YardCode$,Branch$,Material.StockPile$,"","D",ExitStatus)
              If ExitStatus
                Clear FullSONo$,SODetail$,SODetail[]
                Goto SalesTicketInfoSO
              End If 
            End If 
            If OTMFreight$ = "Y" And FullPONo$
              Call CarrierOptions(TicketHeader.VehType$,FullPONo$,k$,count) ! count=-1 for Generic, 0 for no carrier, or >0 for number of contract carriers found
              If count
                If TicketHeader.CarrierRefNo$ = ""
                  temp$ = DateUsing$(Tim#(0),"YYYY")
                  Call GetOTMRefNo(temp$,status)
                  If status
                    Clear FullSONo$,SODetail$,SODetail[]
                    Goto SalesTicketInfoSO
                  Else 
                    TicketHeader.CarrierRefNo$ = OTMFreightInterface.OTMRefNo$
                    CarrierNo$ = OTMFreightInterface.CarrierNo$
                    TicketHeader.CarrierNo$ = OTMFreightInterface.CarrierNo$
                  End If 
                End If 
              Else If TicketHeader.CarrierRefNo$
                Call OTMClearStatus(TicketHeader.CarrierRefNo$,stat)
                TicketHeader.CarrierRefNo$ = ""
                CarrierNo$ = ""
                TicketHeader.CarrierNo$ = ""
              End If 
            Else If OTMFreight$ = "Y" And TicketHeader.CarrierRefNo$
              Call OTMClearStatus(TicketHeader.CarrierRefNo$,stat)
              TicketHeader.CarrierRefNo$ = ""
              CarrierNo$ = ""
              TicketHeader.CarrierNo$ = ""
            End If 
            If SODetail$[47,47] = "e" ! Estimated price on contract, unprice the ticket
              Material.Price = 0
              Material.PriceUM$ = Trim$(SODetail$[42,43])
            Else If SODetail$[204,204] <> "Y" ! Use contract pricing instead of price file
              Material.Price = SODetail[2]
              Material.PriceUM$ = Trim$(SODetail$[42,43])
            End If 
            If Trim$(SODetail$[111,140]) Let Material.MaterialDesc$ = Trim$(SODetail$[111,140])
            TicketHeader.ShipOrdNo$ = Trim$(SODetail$[214,233])
            TicketDetail. = Items.[1]
            Call PopulateMaterialDetail()
            Call CalcExtPrice()
            Items.[1] = TicketDetail.
            Try 
              Search #ch_db;"UPDATE InYard_Dtl SET " + SQLNV$(TicketDetail.) + " WHERE TicketNo=" + SQLV$(TicketDetail.TicketNo$) + " AND ItemNo=" + SQLV$(TicketDetail.ItemNo)
            Else 
              Call SAITouchError("Error updating item number " + Str$(ItemNo) + " in InYard_Dtl table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
            End Try 
            MaterialCode$ = ""
            Clear Material.
          Else If FullSONo$ = ""
            If gbl.MultiCurrency$ = "Y" And TicketHeader.FundsType$ <> gbl.BranchFundsType$
              For i = 1 To ItemCount
                Items.[i].MaterialCode$ = "999"
                Items.[i].MaterialDesc$ = "Unknown"
                Items.[i].InventoryCode$ = "999"
                Clear Items.[i].YardCode$,Items.[i].Price,Items.[i].MaterialCmt1$,Items.[i].MaterialCmt2$
              Next i
            End If 
            Clear FullPONo$,TicketHeader.ShipOrdNo$,TicketHeader.ShippingInst$,TicketHeader.FundsType$
            If TicketHeader.CarrierRefNo$
              Call OTMClearStatus(TicketHeader.CarrierRefNo$,stat)
              TicketHeader.CarrierRefNo$ = ""
            End If 
          End If 
          If FullSONo$
            TicketHeader.OrderNo$ = Trim$(FullSONo$[1,10])
            TicketHeader.OrderLine$ = Trim$(FullSONo$[11,12])
          Else 
            Clear TicketHeader.OrderNo$,TicketHeader.OrderLine$
          End If 
          If FullPONo$
            TicketHeader.MatReqNo$ = Trim$(FullPONo$[1,10])
            TicketHeader.MatReqLine$ = Trim$(FullPONo$[11,12])
          Else 
            Clear TicketHeader.MatReqNo$,TicketHeader.MatReqLine$
          End If 
          If OTMFreight$ = "Y" And TicketHeader.CarrierRefNo$
            ! Don't clear carrier
          Else 
            TicketHeader.CarrierNo$ = ""
          End If 
          ! Carrier Selection
          If TicketHeader.MatReqNo$ And (TicketHeader.CarrierRefNo$ = "" Or OTMFreight$ <> "Y")
            VehicleType$ = TicketHeader.VehType$
            Call CarrierSelection(VehicleType$,VehicleSize$,FullPONo$,CarrierNo$,status)
          End If 
          Call SalesTIRefreshContractInfo()
        Else ! Restore original SO Line data
          If TicketHeader.OrderNo$
            k1$ = SAISpaceFill$(TicketHeader.EntityNo$,6) + SAIFill$(TicketHeader.OrderNo$,"R"," ",10) + SAISpaceFill$(TicketHeader.OrderLine$,2)
            Call SAIGetRecord(ch_1310ro,recdef_1310.,k1$,1,"Y","U",r,SODetail$,SODetail[],e,errmess$)
          Else 
            Clear SODetail$,SODetail[]
          End If 
        End If 
      Case 'F34' ! Material Req.
        If TicketHeader.OrderNo$
SalesTicketInfoMatReq: !
          MaterialCode$ = Trim$(SODetail$[50,57]) ! Need to get this again to get correct yard
          Call GetSalesMaterialPrice(MaterialCode$,SODetail$[158,159],status)
          If status And Material.MaterialCode$ <> MaterialCode$
            Call SAITouchWarning("No valid Sales Material record found for contracted material: " + MaterialCode$)
            Goto SalesTicketInfoInput
          End If 
          reqcount = -1
          Call ListMaterialReqs(FullPONo$,reqcount,status)
          If status = 0
            If FullPONo$ <> SAIFill$(TicketHeader.MatReqNo$,"R"," ",10) + SAISpaceFill$(TicketHeader.MatReqLine$,2)
              If Trim$(FullPONo$)
                MaterialCode$ = Trim$(PODetail$[50,57])
                Call GetSalesMaterialPrice(MaterialCode$,Branch$,status)
                If status And Material.MaterialCode$ <> MaterialCode$
                  Call SAITouchWarning("No valid Sales Material record found for requisitioned material: " + MaterialCode$)
                  FullPONo$ = ""
                  Goto SalesTicketInfoMatReq
                End If 
                If Material.StockPileFlag ! Check for StockPile
                  Call SelectStockPile(Material.InventoryCode$,Material.YardCode$,Branch$,Material.StockPile$,"","D",ExitStatus)
                  If ExitStatus Goto SalesTicketInfoMatReq
                End If 
                If OTMFreight$ = "Y"
                  Call CarrierOptions(TicketHeader.VehType$,FullPONo$,k$,count) ! count=-1 for Generic, 0 for no carrier, or >0 for number of contract carriers found
                  If count
                    If TicketHeader.CarrierRefNo$ = ""
                      temp$ = DateUsing$(Tim#(0),"YYYY")
                      Call GetOTMRefNo(temp$,status)
                      If status
                        FullPONo$ = ""
                        Goto SalesTicketInfoMatReq
                      Else 
                        TicketHeader.CarrierRefNo$ = OTMFreightInterface.OTMRefNo$
                        CarrierNo$ = OTMFreightInterface.CarrierNo$
                        TicketHeader.CarrierNo$ = OTMFreightInterface.CarrierNo$
                      End If 
                    End If 
                  Else If TicketHeader.CarrierRefNo$
                    Call OTMClearStatus(TicketHeader.CarrierRefNo$,stat)
                    TicketHeader.CarrierRefNo$ = ""
                  End If 
                End If 
                If SODetail$[47,47] = "e" ! Estimated price on contract, unprice the ticket
                  Material.Price = 0
                  Material.PriceUM$ = Trim$(SODetail$[42,43])
                Else If SODetail$[204,204] <> "Y" ! Use contract pricing instead of price file
                  Material.Price = SODetail[2]
                  Material.PriceUM$ = Trim$(SODetail$[42,43])
                End If 
                TicketDetail. = Items.[1]
                Call PopulateMaterialDetail()
                Call CalcExtPrice()
                Items.[1] = TicketDetail.
                Try 
                  Search #ch_db;"UPDATE InYard_Dtl SET " + SQLNV$(TicketDetail.) + " WHERE TicketNo=" + SQLV$(TicketDetail.TicketNo$) + " AND ItemNo=" + SQLV$(TicketDetail.ItemNo)
                Else 
                  Call SAITouchError("Error updating item number " + Str$(ItemNo) + " in InYard_Dtl table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
                End Try 
                MaterialCode$ = ""
                Clear Material.
                TicketHeader.MatReqNo$ = Trim$(FullPONo$[1,10])
                TicketHeader.MatReqLine$ = Trim$(FullPONo$[11,12])
                TicketHeader.ShippingInst$ = Trim$(PODetail$[66,95])
              Else 
                TicketHeader.ShippingInst$ = ""
                Clear TicketHeader.MatReqNo$,TicketHeader.MatReqLine$
                If OTMFreight$ = "Y" And TicketHeader.CarrierRefNo$
                  Call OTMClearStatus(TicketHeader.CarrierRefNo$,stat)
                  TicketHeader.CarrierRefNo$ = ""
                End If 
              End If 
              If OTMFreight$ = "Y" And TicketHeader.CarrierRefNo$
                ! Don't clear carrier
              Else 
                TicketHeader.CarrierNo$ = ""
              End If 
              ! Carrier Selection
              If TicketHeader.MatReqNo$ And (TicketHeader.CarrierRefNo$ = "" Or OTMFreight$ <> "Y")
                VehicleType$ = TicketHeader.VehType$
                Call CarrierSelection(VehicleType$,VehicleSize$,FullPONo$,CarrierNo$,status)
              End If 
            Else If FullPONo$ = ""
              TicketHeader.ShippingInst$ = ""
              Clear TicketHeader.MatReqNo$,TicketHeader.MatReqLine$
            End If 
            Call SalesTIRefreshContractInfo()
          End If 
        Else 
          Call SAITouchWarning("Cannot select a Material Req. until a Sales Order has been selected.")
        End If 
      Case 'F35' ! Vehicle Info
        VehicleType$ = TicketHeader.VehType$
        VehicleSize$ = TicketHeader.VehSize$
        VehicleNo$ = TicketHeader.VehNo$
        Call GetVehicleInfo(status)
        If status = 0
          TicketHeader.VehType$ = VehicleType$
          TicketHeader.VehSize$ = VehicleSize$
          TicketHeader.VehNo$ = VehicleNo$
          Print #chti;'15WCSELECT CU';TicketHeader.VehNo$;'0WCSELECT';
        End If 
      Case 'F36' ! Carrier
        VehicleType$ = TicketHeader.VehType$
        If Trim$(TicketHeader.MatReqNo$)
          FullPONo$ = SAIFill$(TicketHeader.MatReqNo$,"R"," ",10) + SAISpaceFill$(TicketHeader.MatReqLine$,2)
        Else 
          FullPONo$ = ""
        End If 
        ! status=-1 for No Carrier, 0 for Carrier selected, or 1 for Cancel
        Call CarrierSelection(VehicleType$,VehicleSize$,FullPONo$,CarrierNo$,status)
        If status <> 1
          If status = -1 Call SAITouchMessage("No Carrier required on this transaction.")
          Call SalesTIRefreshContractInfo()
        End If 
      Case 'F37' ! Trip Ticket No.
        CarrierNo$ = TicketHeader.CarrierNo$
        Call GetTripTicketNumber()
        Print #chti;'17WCSELECT CU';TicketHeader.TripTicketNo$;'0WCSELECT';
      Case 'F39' ! Comment
        Call GetComment(19)
        Call SAIKeyBoardGen("Enter Comment",KBParams.alphacase,50,0,temp$,stat)
        If stat = 0 Print #chti;'19WCSELECT CU';Trim$(temp$);'0WCSELECT';
      Case 'F40' ! Freight Hours
        Do 
          Call SAIKeyPad("Enter Freight Hours",num,0,status)
          If status = 0
            If num <> 0
              TicketHeader.FreightHrs = num
              Exit Do 
            Else 
              ans = SAITouchYesNo("Are you sure that zero hours are desired?")
              If ans
                TicketHeader.FreightHrs = -9.99
                Exit Do 
              End If 
            End If 
          Else 
            Exit Do 
          End If 
        Loop 
        If status = 0
          Print #chti;'20WCSELECT CU';Str$(TicketHeader.FreightHrs);'0WCSELECT';
        End If 
    End Select 
  Loop 
  Close #chti
End Sub 
Sub UpdateComment(temp$)
  If GblCmt$ = "" And temp$ = "" Exit Sub 
  ktemp$ = CommentKey$
  Call SAIGetRecord(ch_1115,recdef_1115.,ktemp$,1,"Y","L",r,GblCmt$,stat,errmess$)
  If stat = 0
    If Trim$(temp$)
      GblCmt$[31,80] = SAISpaceFill$(temp$,50)
      Call SAIWriteRecord(ch_1115,recdef_1115.,"U",r,GblCmt$,stat,errmess$)
      If stat Call SAITouchError("Error updating the comments file.\15\" + errmess$)
    Else 
      Call SAIDeleteRecord(ch_1115,recdef_1115.,GblCmt$,r,stat,errmess$)
      If stat
        Call SAITouchError("Error deleting the comments file.\15\" + errmess$)
      Else 
        Clear GblCmt$
      End If 
    End If 
  Else If stat = 123
    Call SAITouchWarning("Comment not updated!")
    Exit Sub 
  Else If Trim$(temp$)
    GblCmt$ = " ",GblCmt$
    GblCmt$[1,30] = SAISpaceFill$(CommentKey$,30)
    GblCmt$[31,80] = SAISpaceFill$(temp$,50)
    Call SAIAddRecord(ch_1115,recdef_1115.,GblCmt$,stat,errmess$)
    If stat Call SAITouchError("Error adding comment.\15\" + errmess$)
  End If 
  TicketHeader.TktComment$ = temp$
  If TicketHeader.TktType$ = "P" Or TicketHeader.TktType$ = "R"
    Try Search #ch_db;"UPDATE Pur_Ticket_Hdr SET TktComment=" + SQLV$(TicketHeader.TktComment$) + " WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#) Else Rem
  Else 
    Try Search #ch_db;"UPDATE Sales_Ticket_Hdr SET TktComment=" + SQLV$(TicketHeader.TktComment$) + " WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#) Else Rem
  End If 
End Sub 
External Function SimsANZServiceMaterialCode(MatCode$)
  Dim 1%,match,2%,x
  If Len(MatCode$) = 6
    If MatCode$[1,3] = "TNO" Or MatCode$[1,3] = "TRI" Or MatCode$[1,3] = "564"
      x = MatCode$[4,6]
      If x Using "&&&" = MatCode$[4,6]
        Select Case MatCode$[1,3]
          Case "TNO"
            If x >= 400 And x <= 499 Let match = 1
          Case "TRI"
            If x >= 300 And x <= 399 Let match = 1
          Case "564"
            If x >= 1 And x <= 100 Let match = 1
        End Select 
      End If 
    End If 
  End If 
End Function match
Sub GetGSTTaxRate(GSTTaxRate)
  GSTTaxRate = 0
  If ScrapSRecord$[78,78] = "Y"
    If SAISafeDateUsing$(TicketHeader.ShipmentDate#,"YYYYMMDD") > CurrentPeriodEnd$ Let ktemp$ = "N" Else Let ktemp$ = " " ! Check if ShipDate is in next period
    k$ = "HG" + ktemp$ + Branch$ + SAISpaceFill$(TicketHeader.FundsType$,2)
    Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
    If stat
      k$ = "HG" + ktemp$ + "  " + SAISpaceFill$(TicketHeader.FundsType$,2) ! Search with no branch
      Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
    End If 
    If stat = 0
      GSTTaxRate = ScrapCode[0]
    End If 
  End If 
End Sub 
Sub GetTaxRates(TaxFlag$,TaxJurisdiction$,TaxRates[],status)
  Clear TaxRates[]
  If Trim$(TaxFlag$) = ""
    status = 0
    Exit Sub 
  End If 
  If SAISafeDateUsing$(TicketHeader.ShipmentDate#,"YYYYMMDD") > CurrentPeriodEnd$ Let ktemp$ = "N" Else Let ktemp$ = " " ! Check if ShipDate is in next period
  Select Case TaxFlag$
    Case "G","H" ! GST/HST
      k$ = "H" + SAISpaceFill$(TaxJurisdiction$,1) + ktemp$ + Branch$ + SAISpaceFill$(TicketHeader.FundsType$,2)
      Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],status,errmess$)
      If status = 0 Let TaxRates[1] = ScrapCode[0]
    Case "P" ! PST
      k$ = "H" + SAISpaceFill$(TaxJurisdiction$,1) + ktemp$ + Branch$ + SAISpaceFill$(TicketHeader.FundsType$,2)
      Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],status,errmess$)
      If status = 0 Let TaxRates[2] = ScrapCode[0]
    Case "B" ! Both
      k$ = "HG" + ktemp$ + Branch$ + SAISpaceFill$(TicketHeader.FundsType$,2) ! Hardcode "G" Jurisdiction for GST
      Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],status,errmess$)
      If status
        Exit Sub 
      Else 
        TaxRates[1] = ScrapCode[0]
      End If 
      k$ = "H" + SAISpaceFill$(TaxJurisdiction$,1) + ktemp$ + Branch$ + SAISpaceFill$(TicketHeader.FundsType$,2)
      Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],status,errmess$)
      If status = 0 Let TaxRates[2] = ScrapCode[0]
    Case "W" ! Withholding
      k$ = "HW" + ktemp$ + Branch$ + SAISpaceFill$(TicketHeader.FundsType$,2)
      Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],status,errmess$)
      If status = 0 Let TaxRates[3] = - ScrapCode[0] ! Negate rate for withholding
    Case "I" ! Imputed
      k$ = "HI" + ktemp$ + Branch$ + SAISpaceFill$(TicketHeader.FundsType$,2)
      Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],status,errmess$)
      If status = 0 Let TaxRates[4] = ScrapCode[0]
    Case Else 
      status = 1
  End Select 
End Sub 
Sub TaxOptions(status)
  Clear TaxRates[],PrintStatementofSupply$
  !  TicketHeader.TaxID$=""
  If Supplier.SupplierNo$[1,3] <> "CP0"
    If Supplier.HaveTaxID$ = "Y"
      If TicketHeader.TaxID$
        Call GetTaxRates(Supplier.TaxableFlag$,Supplier.TaxJurisdiction$,TaxRates[],status)
        If status = 0
          Goto TaxOptionsCalc
        Else 
          Call SAITouchWarning("Tax Jurisdiction record not found (" + Supplier.TaxableFlag$ + ").")
          Supplier.TaxableFlag$ = ""
          Supplier.TaxJurisdiction$ = ""
        End If 
      End If 
    Else If z$[644,646] = "355" ! Sims NZ - react to Supplier Master file setting
      Select Case Supplier.TaxableFlag$
        Case "N"," ",""
          status = 0 ! Force calculations
          Goto TaxOptionsCalc ! No tax
        Case "I"
          Call GetTaxRates(Supplier.TaxableFlag$,Supplier.TaxJurisdiction$,TaxRates[],status)
          If status = 0
            Goto TaxOptionsCalc
          Else 
            Call SAITouchWarning("Tax Jurisdiction record not found (" + Supplier.TaxableFlag$ + ").")
            Supplier.TaxableFlag$ = ""
            Supplier.TaxJurisdiction$ = ""
          End If 
      End Select 
    End If 
  Else If TicketIdentity.IDNumber$ And TicketIdentity.TaxID$ ! Peddler has TaxID specified from Identity
    If z$[644,646] = "255" Or z$[644,646] = "355" ! SimsANZ
      If TicketIdentity.TaxRegistered = 0
        ans = SAITouchYesNo("Is Supplier registered for GST?")
        If ans
          TicketIdentity.TaxRegistered = 1
          SQL$ = "UPDATE Supplier_ID SET TaxRegistered=" + SQLV$(TicketIdentity.TaxRegistered)
          SQL$ = SQL$ + " WHERE IDNumber=" + SQLV$(TicketIdentity.IDNumber$)
          SQL$ = SQL$ + " AND IDType=" + SQLV$(TicketIdentity.IDType$)
          SQL$ = SQL$ + " AND IDIssuer=" + SQLV$(TicketIdentity.IDIssuer$)
          Search #ch_db;SQL$
          SQL$ = "UPDATE Pur_Ticket_Identity SET TaxRegistered=" + SQLV$(TicketIdentity.TaxRegistered)
          SQL$ = SQL$ + " WHERE TicketNo=" + SQLV$(TicketIdentity.TicketNo$)
          SQL$ = SQL$ + " AND ShipmentDate=" + SQLD$(TicketIdentity.ShipmentDate#)
          Search #ch_db;SQL$
        End If 
      End If 
      If TicketIdentity.TaxRegistered
        Supplier.TaxableFlag$ = "G"
        Supplier.TaxJurisdiction$ = "G"
        Call GetTaxRates(Supplier.TaxableFlag$,Supplier.TaxJurisdiction$,TaxRates[],status)
        If status
          Call SAITouchWarning("Tax Jurisdiction record not found (" + Supplier.TaxableFlag$ + ").\15\Taxes cannont be calculated!")
          Supplier.TaxableFlag$ = ""
          Supplier.TaxJurisdiction$ = ""
        End If 
      Else 
        Supplier.TaxableFlag$ = "" ! Tax Flag
        Supplier.TaxJurisdiction$ = "" ! Tax Jurisdiction
      End If 
    Else 
      Call GetTaxRates(Supplier.TaxableFlag$,Supplier.TaxJurisdiction$,TaxRates[],status)
    End If 
    Goto TaxOptionsCalc
  End If 
  Call GetTaxRates("W","W",TaxRates[],status) ! Check to see if Withholding record built
  If status Let taxwhopt = 0 Else Let taxwhopt = 1
  Call GetTaxRates("I","I",TaxRates[],status) ! Check to see if Imputed record built
  If status Let taximpopt = 0 Else Let taximpopt = 1
  Call GetTaxRates("P","P",TaxRates[],status) ! Check to see if PST record built
  If status Let taxPSTopt = 0 Else Let taxPSTopt = 1
  bw = 200 \ bh = 30 \ space = 15
  ysize = 165 + taxwhopt * bh * 1.5 + taximpopt * bh * 1.5
  chtax = SAIOpenWindow("Tax Options",500,ysize,1)
  Print #chtax;PChr$("Arial");'FONTFACE 12FONTSIZE WCSETFONT';
  y = 8
  Print #chtax;PChr$(100,20,y,490,y + 14,"Supplier not registered or does not have " + gbl_bin$ + " no.");'WCLABEL';
  y = y + 25 \ x = 150
  Print #chtax;PChr$(1,x,y,x + bw,y + bh,"Enter " + gbl_bin$ + " number",2);'WCBUTTON';
  If z$[644,646] = "255" And Supplier.SupplierNo$[1,3] <> "CP0" Print #chtax;'1WCDISABLE';
  If taxwhopt
    y = y + bh * 1.5
    Print #chtax;PChr$(2,x,y,x + bw,y + bh,"Withhold Tax",2);'WCBUTTON';
  End If 
  If taximpopt And z$[644,646] <> "355" ! Sims NZ doesn't get separate Imputed Tax choice
    y = y + bh * 1.5
    Print #chtax;PChr$(3,x,y,x + bw,y + bh,"Imputed Tax",2);'WCBUTTON';
  End If 
  y = y + bh * 1.5
  Print #chtax;PChr$(4,x,y,x + bw,y + bh,"No Tax",2);'WCBUTTON';
  y = y + bh * 1.5
  Print #chtax;PChr$(5,x,y,x + bw,y + bh,"Cancel",2);'WCBUTTON';
  Print #chtax;'1WCFOCUS';
  Do 
TaxInput: !
    Input #chtax; Len (1);w$
    If z$[644,646] = "355" And w$ = 'F4' And taximpopt Let w$ = 'F3' ! Sims NZ - No Tax = Imputed
    Select Case w$
      Case 'F1' ! Enter BIN
        If z$[644,646] = "255" And Supplier.SupplierNo$[1,3] <> "CP0" Goto TaxInput
        w$ = ""
        If z$[644,646] = "255" Let ilen = 11 Else Let ilen = 15
        Call SAIKeyBoardGen("Enter " + gbl_bin$ + " number",KBParams.alphacase,ilen,0,w$,stat)
        If stat = 0
          w$ = Trim$(w$)
          If SAIValidTaxID(z$,ch_db,w$) = 0
            Call SAITouchWarning("Invalid " + gbl_bin$ + " number entered.")
            Goto TaxInput
          End If 
          TicketHeader.TaxID$ = w$
          Supplier.HaveTaxID$ = "Y"
          If taxPSTopt
            w$ = SAITouchGeneric$("Tax Type","Which tax type applies?",2,"GST~P/HST","GP")
            If w$ = "G"
              Supplier.TaxableFlag$ = "G" ! Tax Flag
              Supplier.TaxJurisdiction$ = "G" ! Tax Jurisdiction
            Else 
              Supplier.TaxableFlag$ = "P" ! Tax Flag
              Supplier.TaxJurisdiction$ = "P" ! Tax Jurisdiction
            End If 
          Else 
            Supplier.TaxableFlag$ = "G" ! Tax Flag
            Supplier.TaxJurisdiction$ = "G" ! Tax Jurisdiction
          End If 
          If Supplier.SupplierNo$[1,3] <> "CP0"
            Supplier.TaxID$ = TicketHeader.TaxID$
            SQL$ = "UPDATE Supplier_Master SET"
            SQL$ = SQL$ + " HaveTaxID=" + SQLV$(Supplier.HaveTaxID$)
            SQL$ = SQL$ + ", TaxID=" + SQLV$(Supplier.TaxID$)
            SQL$ = SQL$ + ", TaxableFlag=" + SQLV$(Supplier.TaxableFlag$)
            SQL$ = SQL$ + ", TaxJurisdiction=" + SQLV$(Supplier.TaxJurisdiction$)
            SQL$ = SQL$ + " WHERE SupplierNo=" + SQLV$(Supplier.SupplierNo$)
            Try 
              Search #ch_db;SQL$
            Else 
              Call SAITouchError("Unable to update Supplier record with Tax info.")
            End Try 
          Else If z$[644,646] = "255" Or z$[644,646] = "355"
            ans = SAITouchYesNo("Is Supplier registered for GST?")
            If ans = 0
              Supplier.TaxableFlag$ = "" ! Tax Flag
              Supplier.TaxJurisdiction$ = "" ! Tax Jurisdiction
            End If 
            If TicketIdentity.IDNumber$
              TicketIdentity.TaxID$ = TicketHeader.TaxID$
              If ans
                TicketIdentity.TaxRegistered = 1
              Else 
                TicketIdentity.TaxRegistered = 0
              End If 
              SQL$ = "UPDATE Supplier_ID SET TaxID=" + SQLV$(TicketIdentity.TaxID$)
              SQL$ = SQL$ + ",TaxRegistered=" + SQLV$(TicketIdentity.TaxRegistered)
              SQL$ = SQL$ + " WHERE IDNumber=" + SQLV$(TicketIdentity.IDNumber$)
              SQL$ = SQL$ + " AND IDType=" + SQLV$(TicketIdentity.IDType$)
              SQL$ = SQL$ + " AND IDIssuer=" + SQLV$(TicketIdentity.IDIssuer$)
              Search #ch_db;SQL$
              SQL$ = "UPDATE Pur_Ticket_Identity SET TaxID=" + SQLV$(TicketIdentity.TaxID$)
              SQL$ = SQL$ + ",TaxRegistered=" + SQLV$(TicketIdentity.TaxRegistered)
              SQL$ = SQL$ + " WHERE TicketNo=" + SQLV$(TicketIdentity.TicketNo$)
              SQL$ = SQL$ + " AND ShipmentDate=" + SQLD$(TicketIdentity.ShipmentDate#)
              Search #ch_db;SQL$
            End If 
          End If 
          If Supplier.TaxableFlag$
            Call GetTaxRates(Supplier.TaxableFlag$,Supplier.TaxJurisdiction$,TaxRates[],status)
            If status
              Call SAITouchWarning("Tax Jurisdiction record not found (" + Supplier.TaxableFlag$ + ").\15\Taxes cannont be calculated!")
              Supplier.TaxableFlag$ = ""
              Supplier.TaxJurisdiction$ = ""
            End If 
          End If 
          status = 0
          Exit Do 
        End If 
      Case 'F2' ! Withhold Tax
        If taxwhopt
          If TicketTotals.TotalPrice > 50
            ans = 1
          Else 
            ans = SAITouchYesNo("Ticket is less than $50.00.  Withholding not required.\15\\15\Do you still wish to withhold tax?")
          End If 
          If ans = 0
            Supplier.TaxableFlag$ = ""
            Supplier.TaxJurisdiction$ = ""
            TicketHeader.TaxID$ = ""
          Else 
            Supplier.TaxableFlag$ = "W"
            Supplier.TaxJurisdiction$ = "W"
            TicketHeader.TaxID$ = "Withholding Tax"
            Call GetTaxRates(Supplier.TaxableFlag$,Supplier.TaxJurisdiction$,TaxRates[],status)
            If status
              Call SAITouchWarning("Tax Jurisdiction record not found (" + Supplier.TaxableFlag$ + ").\15\Taxes cannont be calculated!")
              Supplier.TaxableFlag$ = ""
              Supplier.TaxJurisdiction$ = ""
              TicketHeader.TaxID$ = ""
            End If 
          End If 
          Supplier.HaveTaxID$ = ""
          status = 0
          Exit Do 
        End If 
      Case 'F3' ! Imputed Tax
        If taximpopt
          Supplier.TaxableFlag$ = "I"
          Supplier.TaxJurisdiction$ = "I"
          Supplier.HaveTaxID$ = ""
          Call GetTaxRates(Supplier.TaxableFlag$,Supplier.TaxJurisdiction$,TaxRates[],status)
          If status
            Call SAITouchWarning("Tax Jurisdiction record not found (I).\15\Taxes cannont be calculated!")
            Supplier.TaxableFlag$ = ""
            Supplier.TaxJurisdiction$ = ""
          End If 
          status = 0
          Exit Do 
        End If 
      Case 'F4' ! No Tax
        If (z$[644,646] = "255" Or z$[644,646] = "355") And Supplier.SupplierNo$[1,3] = "CP0" And TicketIdentity.IDNumber$ ! SimsANZ and Peddler
          Call SAIPeddlerVolumeQuery(ch_db,Branch$,TicketIdentity.IDNumber$,FiscalYrBeginDate#,FYTDPurchases)
          If FYTDPurchases > gbl.PeddlerLimit
            ans = SAITouchYesNo("YTD Purchase threshold has been exceeded.\15\\15\YTD total purchases = " + Trim$(FYTDPurchases Using "$$$,$$$,$$&.##") + "\15\\15\Charge Withholding?")
            If ans
              Supplier.TaxableFlag$ = "W"
              Supplier.TaxJurisdiction$ = "W"
              Call GetTaxRates(Supplier.TaxableFlag$,Supplier.TaxJurisdiction$,TaxRates[],status)
              If status
                Call SAITouchWarning("Tax Jurisdiction record not found (" + Supplier.TaxableFlag$ + ").\15\Taxes cannont be calculated!")
                Supplier.TaxableFlag$ = ""
                Supplier.TaxJurisdiction$ = ""
              End If 
              status = 0
              Exit Do 
            End If 
          Else If FYTDPurchases + TicketTotals.TotalPrice > gbl.PeddlerLimit
            temp$ = "This transaction will cause YTD Purchase threshold to be exceeded.\15\\15\"
            temp$ = temp$ + "YTD total purchases = " + Trim$(FYTDPurchases Using "###,###,##&.##") + " + " + Trim$(TicketTotals.TotalPrice Using "###,###,##&.##")
            temp$ = temp$ + " = " + Trim$((FYTDPurchases + TicketTotals.TotalPrice) Using "$$$,$$$,$$&.##")
            Call SAITouchWarning(temp$)
          End If 
          If TicketTotals.TotalPrice >= 75
            PrintStatementofSupply$ = "Y"
          End If 
        End If 
        ans = SAITouchConfirm("No Tax will be calculated.")
        If ans
          Supplier.TaxableFlag$ = ""
          Supplier.TaxJurisdiction$ = ""
          Supplier.HaveTaxID$ = ""
          TicketHeader.TaxID$ = ""
          status = 0
          Exit Do 
        End If 
      Case 'F5' ! Cancel
        status = 1
        Exit Do 
    End Select 
  Loop 
  Close #chtax
TaxOptionsCalc: !
  If status = 0
    TicketTotals.TotalMatGST = 0
    TicketTotals.TotalMatPST = 0
    GSTTaxRate = 0
    If z$[644,646] = "255" Or z$[644,646] = "355" Call GetGSTTaxRate(GSTTaxRate) ! Sims AUS/NZ
    For i = 1 To ItemCount
      Items.[i].MatGST = 0
      Items.[i].MatPST = 0
      TaxableAmt = Items.[i].MatExt
      If Dirt$ = "Y" Let TaxableAmt = - TaxableAmt ! Negate Ext Amt on Dirt Ticket
      Select Case Supplier.TaxableFlag$
        Case "G","H" ! GST/HST
          Items.[i].MatGST = Round(TaxableAmt * TaxRates[1],2)
        Case "P" ! PST
          Items.[i].MatPST = Round(TaxableAmt * TaxRates[2],2)
        Case "B" ! Both
          Items.[i].MatGST = Round(TaxableAmt * TaxRates[1],2)
          Items.[i].MatPST = Round(TaxableAmt * TaxRates[2],2)
        Case "W" ! Withholding
          If z$[644,646] = "255" Or z$[644,646] = "355" ! Sims AUS/NZ
            If GSTTaxRate And TaxableAmt < 0 And SimsANZServiceMaterialCode(Trim$(Items.[i].MaterialCode$))
              Items.[i].MatGST = Round(TaxableAmt * GSTTaxRate,2)
            Else 
              Items.[i].MatGST = Round(TaxableAmt * TaxRates[3],2)
            End If 
          Else 
            Items.[i].MatGST = Round(TaxableAmt * TaxRates[3],2)
          End If 
        Case "I" ! Imputed
          ! Do nothing for Imputed here
        Case Else 
          If z$[644,646] = "255" Or z$[644,646] = "355" ! Sims AUS/NZ
            If GSTTaxRate And TaxableAmt < 0 And SimsANZServiceMaterialCode(Trim$(Items.[i].MaterialCode$))
              Items.[i].MatGST = Round(TaxableAmt * GSTTaxRate,2)
            End If 
          End If 
      End Select 
      TicketTotals.TotalMatGST = TicketTotals.TotalMatGST + Items.[i].MatGST
      TicketTotals.TotalMatPST = TicketTotals.TotalMatPST + Items.[i].MatPST
    Next i
  End If 
End Sub 
Sub CheckLevyFlag(MaterialCode$,LevyFlag$,LevyMaterialCode$)
  Clear LevyFlag$,LevyMaterialCode$
  Call RetrievePurchaseMaterial(Supplier.SupplierNo$,MaterialCode$,stat)
  If stat And Supplier.SupplierNo$ <> "CP000*"
    ! Check Supplier Class Price
    If SAIAltPriceClassMaterial(ch_db,MaterialCode$,Branch$)
      temp$ = Trim$(Supplier.AltPriceClass$)
    Else 
      temp$ = Trim$(Supplier.PriceClass$)
    End If 
    If temp$
      Call RetrievePurchaseMaterial("CP000" + temp$,MaterialCode$,stat)
    End If 
    If stat
      ! Check CP000* Price
      Call RetrievePurchaseMaterial("CP000*",MaterialCode$,stat)
    End If 
  End If 
  If stat = 0
    If PMatPrice.Dirt_CFC_Levy$ = "L" And PMatPrice.RedMaterial$
      LevyFlag$ = "Y"
      LevyMaterialCode$ = PMatPrice.RedMaterial$
    End If 
  End If 
End Sub 
Sub CheckWeightAdjLevyFlag(WeightAdjCode$,LevyFlag$,LevyMaterialCode$)
  Clear LevyFlag$,LevyMaterialCode$
  Try 
    Search #ch_db;"SELECT * FROM Codes_Levy_WeightAdj WHERE Branch=" + SQLV$(Branch$) + " AND WeightAdjCode=" + SQLV$(WeightAdjCode$)
    If Chf(ch_db)
      Map Record #ch_db As Codes_Levy_WeightAdj
      Read Record #ch_db;CodesLevyWeightAdj.
      LevyMaterialCode$ = Trim$(CodesLevyWeightAdj.LevyMaterialCode$)
      If LevyMaterialCode$ Let LevyFlag$ = "Y"
    End If 
  Else 
  End Try 
End Sub 
Sub LevyCalculation()
  Clear LevyItemCount,Levy2ItemCount,LevyItems.[]
  If Trim$(TicketHeader.OrderNo$) = "UNKNOWN" Exit Sub 
  For i = 1 To ItemCount
    Call CheckLevyFlag(Items.[i].MaterialCode$,LevyFlag$,LevyMaterialCode$)
    If LevyFlag$ = "Y"
      ifound = 0
      For n = 1 To LevyItemCount
        If LevyItems.[n].LevyMaterialCode$ = LevyMaterialCode$
          ifound = 1
          LevyItems.[LevyItemCount].NetWt = LevyItems.[LevyItemCount].NetWt + Items.[i].NetWt + Items.[i].AdjWt
          Exit For 
        End If 
      Next n
      If ifound = 0
        LevyMatl$ = LevyMaterialCode$ ! Set levy material mode
        Call GetMaterialPrice(LevyMaterialCode$,status)
        LevyMatl$ = ""
        If status = 0
          LevyItemCount = LevyItemCount + 1
          LevyItems.[LevyItemCount].LevyMaterialCode$ = LevyMaterialCode$
          LevyItems.[LevyItemCount].LevyMaterialDesc$ = Material.MaterialDesc$
          LevyItems.[LevyItemCount].PriceUM$ = Material.PriceUM$
          LevyItems.[LevyItemCount].InventoryCode$ = Material.InventoryCode$
          LevyItems.[LevyItemCount].YardCode$ = Material.YardCode$
          LevyItems.[LevyItemCount].Price = Material.Price
          LevyItems.[LevyItemCount].NetWt = Items.[i].NetWt + Items.[i].AdjWt
        End If 
      End If 
    End If 
  Next i
  If LevyItemCount = 0 Exit Sub 
  ans = SAITouchYesNo("This material attracts a levy deduction.\15\      Remove levy from this load?","Question","N")
  If ans = 1
    Clear LevyItemCount,LevyItems.[]
  End If 
  ! Look for WeightAdj Levy
  For i = 1 To ItemCount ! Spin through first to see if any exist
    If Items.[i].AdjCode$
      Call CheckWeightAdjLevyFlag(Items.[i].AdjCode$,LevyFlag$,LevyMaterialCode$)
      If LevyFlag$ = "Y"
        Levy2ItemCount = Levy2ItemCount + 1
        Exit For 
      End If 
    End If 
  Next i
  If Levy2ItemCount
    Clear Levy2ItemCount
    ans = SAITouchYesNo("This ticket attracts a weight adjustment levy deduction.\15\              Remove levy from this load?","Question","N")
    If ans = 0
      For i = 1 To ItemCount
        If Items.[i].AdjCode$
          Call CheckWeightAdjLevyFlag(Items.[i].AdjCode$,LevyFlag$,LevyMaterialCode$)
          If LevyFlag$ = "Y"
            Levy2ItemCount = Levy2ItemCount + 1
            ifound = 0
            For n = 1 To LevyItemCount
              If LevyItems.[n].LevyMaterialCode$ = LevyMaterialCode$
                ifound = 1
                LevyItems.[LevyItemCount].NetWt = LevyItems.[LevyItemCount].NetWt - Items.[i].AdjWt
                Exit For 
              End If 
            Next n
            If ifound = 0
              LevyMatl$ = LevyMaterialCode$ ! Set levy material mode
              Call GetMaterialPrice(LevyMaterialCode$,status)
              LevyMatl$ = ""
              If status = 0
                LevyItemCount = LevyItemCount + 1
                LevyItems.[LevyItemCount].LevyMaterialCode$ = LevyMaterialCode$
                LevyItems.[LevyItemCount].LevyMaterialDesc$ = Material.MaterialDesc$
                LevyItems.[LevyItemCount].PriceUM$ = Material.PriceUM$
                LevyItems.[LevyItemCount].InventoryCode$ = Material.InventoryCode$
                LevyItems.[LevyItemCount].YardCode$ = Material.YardCode$
                LevyItems.[LevyItemCount].Price = Material.Price
                LevyItems.[LevyItemCount].NetWt = - Items.[i].AdjWt
              End If 
            End If 
          End If 
        End If 
      Next i
    End If 
  End If 
  If LevyItemCount
    Call GetGSTTaxRate(GSTTaxRate)
    For i = 1 To LevyItemCount
      Call SAICalcPriceExt(ch_110Aro,LevyItems.[i].NetWt,gbl_um$,LevyItems.[i].Price,SAISpaceFill$(LevyItems.[i].PriceUM$,2),2,LevyItems.[i].MatExt,stat)
      If LevyItems.[i].MatExt = 0
        k$ = "U" + SAISpaceFill$(LevyItems.[i].PriceUM$,2)
        Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
        If ScrapCode$[133,133] <> "*" Let UnpricedItem = 1
      Else 
        If ScrapSRecord$[78,78] = "Y"
          LevyItems.[i].MatGST = Round(LevyItems.[i].MatExt * GSTTaxRate,2)
          TicketTotals.TotalMatGST = TicketTotals.TotalMatGST + LevyItems.[i].MatGST
        End If 
        TicketTotals.TotalPrice = TicketTotals.TotalPrice + LevyItems.[i].MatExt
      End If 
    Next i
  End If 
End Sub 
Sub PrintCDUClaimCheck(CDUReceiptNo$,status)
  Call InitializeThermalPrinter(CDUPrinter$,CDUPrinterType$,TicketLineSpacing$,status)
  If status Exit Sub 
  Print #chprt;Rep$(" ",15) + "* * * CASH DISBURSEMENT RECEIPT * * * " + LineTerm$
  Print #chprt;LineTerm$
  Select Case CDUPrinterType$
    Case "ZEBRA"
      Print #chprt;"! U1 CENTER";LineTerm$
      Print #chprt;"! U1 BARCODE 128 2 0 75 275 0 ";CDUReceiptNo$;LineTerm$
      Print #chprt;LineTerm$
      Print #chprt;"! U1 SETLP 0 5 24";LineTerm$
      Print #chprt;LineTerm$
      Print #chprt;LineTerm$
      Print #chprt;Rep$(" ",14);"Receipt # ";ReceiptNo$;LineTerm$
      Print #chprt;"! U1 SETLP 0 2 12";LineTerm$
      Print #chprt;LineTerm$
    Case "STAR"
      Print #chprt;Rep$(" ",24);'ESC';"b612P";CDUReceiptNo$;"\36\"
      Print #chprt;Rep$(" ",(5 - TicketNoSize) * 7);BX$;"Receipt # ";ReceiptNo$;EX$;LineTerm$
    Case "CITIZEN"
      Print #chprt;'ESC';"a1"; ! Center
      Print #chprt;'GS';"h";Chr$(80); ! Barcode Height
      Print #chprt;'GS';"kI";Chr$(Len(CDUReceiptNo$) + 2);"{B";CDUReceiptNo$;LineTerm$ ! Code 128, Codeset B
      Print #chprt;BX$;"Receipt # ";ReceiptNo$;EX$;LineTerm$
      Print #chprt;'ESC';"a0" ! Left Justify
    Case Else 
      Print #chprt;Rep$(" ",25);"Receipt # ";ReceiptNo$;LineTerm$
  End Select 
  Print #chprt;LineTerm$
  Print #chprt;"Receipt Date: ";DateUsing$(RunDate#,dateformat$);LineTerm$
  Print #chprt;LineTerm$
  For i = 1 To nheader
    Print #chprt;TicketHeader$[i];LineTerm$
  Next i
  If nheader Print #chprt;LineTerm$
  Print #chprt;"Ticket # ";TicketHeader.TicketNo$;LineTerm$
  Call PrintTicketHeader(chprt,LineTerm$)
  Print #chprt;LineTerm$
  Print #chprt;LineTerm$
  temp$ = " Total Paid via CDU Receipt No. " + ReceiptNo$
  Print #chprt; Using "$---,--#.##";BB$;SAISpaceFill$(temp$,58);TicketTotals.TotalPaid;EB$;LineTerm$
  Print #chprt;" Payment Date:  ";DateUsing$(Tim#(0),dateformat$ + "  hh:NNpm");LineTerm$
  Print #chprt;LineTerm$
  If ncdufooter
    For i = 1 To ncdufooter
      Print #chprt;CDUReceiptFooter$[i];LineTerm$
    Next i
    Print #chprt;LineTerm$
  End If 
  Print #chprt;LineTerm$
  For i = 1 To CDUReceiptBlankLines
    Print #chprt;LineTerm$
  Next i
  Print #chprt;CutPaper$;
  Close #chprt
  status = 0
End Sub 
Sub GetPriceMask(Price,UM$,d,mask$)
  If Abs(Price) > 999
    mask$ = "------#.##"
  Else 
    If UMConvertable(UM$)
      mask$ = "----#.####"
    Else 
      mask$ = "------#.##"
    End If 
  End If 
  If d = 9 Let mask$ = mask$[2]
End Sub 
Sub FormatReceiptHeader(temp$)
  Clear temp$
  If z$[644,646] = "255" Or z$[644,646] = "355" ! Sims AUS/NZ
    temp$ = " TICKET# SHP DATE COMMODITY" + Rep$(" ",22) + "DOCKET #   ADJ NET    ADJ REASON"
    If TaxFlag$ = "G"
      temp$ = temp$ + Rep$(" ",7) + "G.S.T."
    Else If TaxFlag$ = "W"
      temp$ = temp$ + "   W/HOLD TAX"
    Else 
      temp$ = temp$ + Rep$(" ",13)
    End If 
    If z$[644,646] = "355"
      temp$ = temp$ + "    PRICE UM   NET AMT TOTAL AMT"
    Else 
      temp$ = temp$ + "    PRICE UM   MAT AMT TOTAL AMT"
    End If 
  Else 
    Select Case DocLang$
      Case "FC"
        temp$ = " BILLET# DATE EXP PRODUIT                          BRUT     TARE     NET"
        If ScrapSRecord$[69,70] = "CA" ! CA Redemption
          If PaymentWeightAdjustmentAsPrice$ = "Y"
            temp$ = temp$ + "          RD CT/WT   RD EXT     PRICE UM  FRT EXT TOTAL AMT"
          Else 
            temp$ = temp$ + "    ADJ   RD CT/WT   RD EXT     PRICE UM  FRT EXT TOTAL AMT"
          End If 
        Else If ScrapSRecord$[78,78] = "Y" ! GST
          If PaymentWeightAdjustmentAsPrice$ = "Y"
            temp$ = temp$ + "        PRIX UM    MAT EXT      FRET  TAXES VENTE MNT TOTAL"
          Else 
            temp$ = temp$ + "    AJT PDS PAY\311\ TAXES VENTE     PRIX UM     FRET MNT TOTAL"
          End If 
        Else 
          If PaymentWeightAdjustmentAsPrice$ = "Y"
            Call StringTab(temp$,88)
          Else 
            temp$ = temp$ + "    AJT PDS PAY\311\"
          End If 
          If LaserReceiptOptionColumn$ = "VEHICLENO"
            temp$ = temp$ + "V\311\HICLE #"
          Else If LaserReceiptOptionColumn$ = "INYARDID"
            temp$ = temp$ + "V\311\HICLE ID"
          Else If LaserReceiptOptionColumn$ = "SUPPLIERINVNO"
            temp$ = temp$ + "SUPP INV #"
          Else If LaserReceiptOptionColumn$ = "SUPPLIERSHIPNO"
            temp$ = temp$ + "SUPP SHP #"
          End If 
          Call StringTab(temp$,104)
          temp$ = temp$ + " PRIX UM     FRET MNT TOTAL"
        End If 
      Case Else 
        temp$ = " TICKET# SHP DATE COMMODITY                        GROSS    TARE     NET"
        If ScrapSRecord$[69,70] = "CA" ! CA Redemption
          If PaymentWeightAdjustmentAsPrice$ = "Y"
            temp$ = temp$ + "          RD CT/WT   RD EXT     PRICE UM  FRT EXT TOTAL AMT"
          Else 
            temp$ = temp$ + "    ADJ   RD CT/WT   RD EXT     PRICE UM  FRT EXT TOTAL AMT"
          End If 
        Else If ScrapSRecord$[78,78] = "Y" ! GST
          If PaymentWeightAdjustmentAsPrice$ = "Y"
            temp$ = temp$ + "       PRICE UM    MAT EXT   FRT EXT  H/GST TAX   TOTAL AMT"
          Else 
            temp$ = temp$ + "    ADJ PAID WT  H/GST TAX      PRICE UM  FRT EXT TOTAL AMT"
          End If 
        Else 
          If PaymentWeightAdjustmentAsPrice$ = "Y"
            Call StringTab(temp$,88)
          Else 
            temp$ = temp$ + "    ADJ PAID WT "
          End If 
          If LaserReceiptOptionColumn$ = "VEHICLENO"
            temp$ = temp$ + "VEHICLE #"
          Else If LaserReceiptOptionColumn$ = "INYARDID"
            temp$ = temp$ + "VEHICLE ID"
          Else If LaserReceiptOptionColumn$ = "SUPPLIERINVNO"
            temp$ = temp$ + "SUPP INV #"
          Else If LaserReceiptOptionColumn$ = "SUPPLIERSHIPNO"
            temp$ = temp$ + "SUPP SHIP #"
          End If 
          Call StringTab(temp$,104)
          temp$ = temp$ + "PRICE UM  FRT EXT TOTAL AMT"
        End If 
    End Select 
  End If 
End Sub 
Sub FormatReceiptLine(PD. As PaymentDetail,TextLines$[],nlines)
  Clear TextLines$[]
  nlines = 1
  TextLines$[nlines] = "  " + PD.TicketNo$ + " " + SAIDateDisplay$(PD.ShipDate$) + " "
  If z$[644,646] = "255" Or z$[644,646] = "355" ! Sims AUS/NZ
    TextLines$[nlines] = TextLines$[nlines] + SAISpaceFill$(PD.MaterialCode$,8) + " " + SAISpaceFill$(PD.MaterialDesc$,21) + " "
    TextLines$[nlines] = TextLines$[nlines] + SAISpaceFill$(PD.SuppInvNo$,10) + " " ! Docket #
    TextLines$[nlines] = TextLines$[nlines] + (PD.NetWt + PD.AdjWt Using "------#")
    TextLines$[nlines] = TextLines$[nlines] + (PD.AdjWt Using "------#") + " "
    If PD.AdjWt
      TextLines$[nlines] = TextLines$[nlines] + SAISpaceFill$(SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",PD.AdjCode$),10)
    Else 
      TextLines$[nlines] = TextLines$[nlines] + Rep$(" ",10)
    End If 
    If TaxFlag$ = "G" Or TaxFlag$ = "W"
      TextLines$[nlines] = TextLines$[nlines] + (PD.TaxAmt Using "-----#.##")
    Else 
      TextLines$[nlines] = TextLines$[nlines] + Rep$(" ",9)
    End If 
    Call GetPriceMask(PD.Price,PD.PriceUM$,9,mask$)
    TextLines$[nlines] = TextLines$[nlines] + PD.Price Using mask$ + " " + PD.PriceUM$
    TextLines$[nlines] = TextLines$[nlines] + PD.MatExt Using "------#.##" + PD.PaymentAmt Using "------#.##"
  Else 
    TextLines$[nlines] = TextLines$[nlines] + SAISpaceFill$(PD.MaterialDesc$,30)
    TextLines$[nlines] = TextLines$[nlines] + FormatWeight$(PD.GrossWt,8) + FormatWeight$(PD.TareWt,8) + FormatWeight$(PD.NetWt,8)
    MatExt = PD.MatExt
    TaxAmt = PD.TaxAmt
    TotalAmt = PD.PaymentAmt
    If PaymentWeightAdjustmentAsPrice$ = "Y" And PD.AdjWt
      Call SAICalcPriceExt(ch_110Aro,PD.NetWt,gbl_um$,PD.Price,SAISpaceFill$(PD.PriceUM$,2),2,MatExt,stat)
      If PD.TaxAmt Let TaxAmt = Round((PD.TaxAmt / PD.MatExt) * MatExt,2)
      TotalAmt = MatExt + PD.RedExt + PD.FrtExt + TaxAmt
    End If 
    If ScrapSRecord$[78,78] = "Y" And PaymentWeightAdjustmentAsPrice$ = "Y" ! GST w/Price Adj
      Call StringTab(TextLines$[nlines],74)
      Call GetPriceMask(PD.Price,PD.PriceUM$,10,mask$)
      TextLines$[nlines] = TextLines$[nlines] + PD.Price Using mask$ + " " + PD.PriceUM$
      Call StringTab(TextLines$[nlines],88)
      TextLines$[nlines] = TextLines$[nlines] + MatExt Using "------#.##" + " " + PD.FrtExt Using "-----#.##" + " "
      TextLines$[nlines] = TextLines$[nlines] + TaxAmt Using "------#.##" + "  " + TotalAmt Using "------#.##"
      If PD.AdjWt
        nlines = 2
        Select Case DocLang$
          Case "FC"
            TextLines$[nlines] = Rep$(" ",19) + "RAISON AJT: "
          Case Else 
            TextLines$[nlines] = Rep$(" ",19) + "ADJ REASON: "
        End Select 
        TextLines$[nlines] = TextLines$[nlines] + SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",PD.AdjCode$)
        If ScaleCodes$[67,67] = "Y" And PD.CarBodies ! Car Bodies
          Call StringTab(TextLines$[nlines],51)
          TextLines$[nlines] = TextLines$[nlines] + "NO. CAR BODIES:" + PD.CarBodies Using "-----#"
        End If 
        If PD.PaymentAmt <> TotalAmt
          x = PD.MatExt - MatExt
          Call SAICalcAveCost(ch_110Aro,PD.NetWt,gbl_um$,x,SAISpaceFill$(PD.PriceUM$,2),4,Price,stat)
          TotalAmt = x + PD.TaxAmt - TaxAmt
          Call StringTab(TextLines$[nlines],74)
          TextLines$[nlines] = TextLines$[nlines] + Price Using mask$ + " " + PD.PriceUM$
          Call StringTab(TextLines$[nlines],88)
          TextLines$[nlines] = TextLines$[nlines] + x Using "------#.##"
          If TaxAmt
            Call StringTab(TextLines$[nlines],109)
            TextLines$[nlines] = TextLines$[nlines] + (PD.TaxAmt - TaxAmt) Using "------#.##"
          End If 
          Call StringTab(TextLines$[nlines],121)
          TextLines$[nlines] = TextLines$[nlines] + TotalAmt Using "------#.##"
        End If 
      Else If ScaleCodes$[67,67] = "Y" And PD.CarBodies ! Car Bodies
        If nlines = 1 Let nlines = 2
        Call StringTab(TextLines$[nlines],51)
        TextLines$[nlines] = TextLines$[nlines] + "NO. CAR BODIES:" + PD.CarBodies Using "-----#"
      End If 
    Else 
      If PaymentWeightAdjustmentAsPrice$ <> "Y"
        If ScrapSRecord$[69,70] = "CA" ! CA Redemption
          TextLines$[nlines] = TextLines$[nlines] + FormatWeight$(PD.AdjWt,7)
        Else 
          TextLines$[nlines] = TextLines$[nlines] + FormatWeight$(PD.AdjWt,7) + FormatWeight$(PD.PaidWt,8)
        End If 
      End If 
      If ScrapSRecord$[69,70] = "CA"
        Call StringTab(TextLines$[nlines],79)
        If PD.RedCount
          TextLines$[nlines] = TextLines$[nlines] + PD.RedCount Using "----------#"
        Else 
          TextLines$[nlines] = TextLines$[nlines] + PD.RedWgt Using "--------#.#"
        End If 
        TextLines$[nlines] = TextLines$[nlines] + PD.RedExt Using "-----#.##"
      Else If ScrapSRecord$[78,78] = "Y" ! GST
        Call StringTab(TextLines$[nlines],87)
        TextLines$[nlines] = TextLines$[nlines] + TaxAmt Using "-------#.##"
      Else 
        Call StringTab(TextLines$[nlines],88)
        If LaserReceiptOptionColumn$ = "VEHICLENO"
          TextLines$[nlines] = TextLines$[nlines] + PD.VehNo$
        Else If LaserReceiptOptionColumn$ = "INYARDID"
          TextLines$[nlines] = TextLines$[nlines] + PD.InYardID$
        Else If LaserReceiptOptionColumn$ = "SUPPLIERINVNO"
          TextLines$[nlines] = TextLines$[nlines] + PD.SuppInvNo$
        Else If LaserReceiptOptionColumn$ = "SUPPLIERSHIPNO"
          TextLines$[nlines] = TextLines$[nlines] + PD.SuppShipNo$
        End If 
      End If 
      Call StringTab(TextLines$[nlines],99)
      Call GetPriceMask(PD.Price,PD.PriceUM$,10,mask$)
      TextLines$[nlines] = TextLines$[nlines] + PD.Price Using mask$ + " " + PD.PriceUM$
      TextLines$[nlines] = TextLines$[nlines] + PD.FrtExt Using "-----#.##" + TotalAmt Using "------#.##"
      If PaymentWeightAdjustmentAsPrice$ = "Y" And PD.AdjWt
        nlines = 2
        Select Case DocLang$
          Case "FC"
            TextLines$[nlines] = Rep$(" ",19) + "RAISON AJT: "
          Case Else 
            TextLines$[nlines] = Rep$(" ",19) + "ADJ REASON: "
        End Select 
        TextLines$[nlines] = TextLines$[nlines] + SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",PD.AdjCode$)
        If ScaleCodes$[67,67] = "Y" And PD.CarBodies ! Car Bodies
          Call StringTab(TextLines$[nlines],51)
          TextLines$[nlines] = TextLines$[nlines] + "NO. CAR BODIES:" + PD.CarBodies Using "-----#"
        End If 
        If PD.PaymentAmt <> TotalAmt
          If TaxAmt
            Call StringTab(TextLines$[nlines],87)
            TextLines$[nlines] = TextLines$[nlines] + (PD.TaxAmt - TaxAmt) Using "-------#.##"
          End If 
          x = PD.MatExt - MatExt
          Call SAICalcAveCost(ch_110Aro,PD.NetWt,gbl_um$,x,SAISpaceFill$(PD.PriceUM$,2),4,Price,stat)
          TotalAmt = x + PD.TaxAmt - TaxAmt
          Call StringTab(TextLines$[nlines],99)
          TextLines$[nlines] = TextLines$[nlines] + Price Using mask$ + " " + PD.PriceUM$
          TextLines$[nlines] = TextLines$[nlines] + Rep$(" ",9) + TotalAmt Using "------#.##"
        End If 
      Else 
        If PD.AdjWt
          nlines = 2
          Select Case DocLang$
            Case "FC"
              TextLines$[nlines] = Rep$(" ",19) + "RAISON AJT: "
            Case Else 
              TextLines$[nlines] = Rep$(" ",19) + "ADJ REASON: "
          End Select 
          TextLines$[nlines] = TextLines$[nlines] + SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",PD.AdjCode$)
        End If 
        If ScaleCodes$[67,67] = "Y" And PD.CarBodies ! Car Bodies
          If nlines = 1 Let nlines = 2
          Call StringTab(TextLines$[nlines],51)
          TextLines$[nlines] = TextLines$[nlines] + "NO. CAR BODIES:" + PD.CarBodies Using "-----#"
        End If 
      End If 
    End If 
  End If 
  If PD.MaterialCode$[1,2] <> "*M"
    TotalGross = TotalGross + PD.GrossWt
    TotalTare = TotalTare + PD.TareWt
    TotalNet = TotalNet + PD.NetWt
    TotalAdj = TotalAdj + PD.AdjWt
    TotalPaidWt = TotalPaidWt + PD.NetWt + PD.AdjWt
  End If 
  TotalMatExt = TotalMatExt + PD.MatExt
  TotalFrtExt = TotalMatExt + PD.FrtExt
  TotalTaxAmt = TotalTaxAmt + PD.TaxAmt
End Sub 
Sub FormatReceiptTotals(temp$)
  Select Case DocLang$
    Case "FC"
      temp$ = " FOURN. " + TicketHeader.EntityNo$ + "  TOTAL (" + gbl_descum$ + "s):"
    Case Else 
      temp$ = " VENDOR " + TicketHeader.EntityNo$ + " TOTALS (" + gbl_descum$ + "s):"
  End Select 
  If z$[644,646] = "255" Or z$[644,646] = "355" ! Sims AUS/NZ
    Call StringTab(temp$,58)
    temp$ = temp$ + FormatWeight$(TotalPaidWt,9)
    If TaxFlag$ = "G" Or "W" Or TotalTaxAmt
      Call StringTab(temp$,84)
      temp$ = temp$ + TotalTaxAmt Using "------#.##"
    End If 
    Call StringTab(temp$,106)
    temp$ = temp$ + TotalMatExt Using "------#.##"
    temp$ = temp$ + TicketTotals.TotalPaid Using "------#.##"
  Else 
    Call StringTab(temp$,64)
    If ScrapSRecord$[69,70] = "CA" ! CA Redemption
      temp$ = temp$ + FormatWeight$(TotalNet,8)
      If PaymentWeightAdjustmentAsPrice$ <> "Y"
        temp$ = temp$ + FormatWeight$(TotalAdj,7)
      End If 
    Else 
      temp$ = temp$ + FormatWeight$(TotalNet,8)
      If PaymentWeightAdjustmentAsPrice$ <> "Y"
        temp$ = temp$ + FormatWeight$(TotalAdj,7) + FormatWeight$(TotalPaidWt,8)
      End If 
    End If 
    Call StringTab(temp$,107)
    Select Case DocLang$
      Case "FC"
        temp$ = temp$ + "       D\333\:"
      Case Else 
        temp$ = temp$ + "TOTAL DUE:"
    End Select 
    Call StringTab(temp$,118)
    temp$ = temp$ + TicketTotals.TotalPaid Using "$--------#.##"
  End If 
End Sub 
Sub GetAltCheckAddress(status)
  status = 0
  SQL$ = "SELECT " + SQLN$(AltAddress.) + " FROM Alt_Address"
  SQL$ = SQL$ + " WHERE AddressType IN (" + SQLV$("C") + "," + SQLV$("Y") + ")"
  SQL$ = SQL$ + " AND EntityNo=" + SQLV$(Trim$(TicketHeader.EntityNo$))
  Search #ch_db;SQL$
  icount = Chf(ch_db)
  If icount
    Map Record #ch_db As Alt_Address
    Clear ilist$[]
    For n = 1 To icount
      Read Record #ch_db;AltAddress.
      ilist$[n] = AltAddress.AddressType$ + AltAddress.SeqNo$ + 'HT' + SAISpaceFill$(AltAddress.SeqNo$,6) + SAISpaceFill$(AltAddress.Name$,30) + "\15\" + Rep$(" ",6) + SAISpaceFill$(AltAddress.Address1$,30)
    Next n
    If icount = 1
      LaserCheckHdr.Payee$ = AltAddress.Name$
      LaserCheckHdr.Address1$ = AltAddress.Address1$
      LaserCheckHdr.Address2$ = AltAddress.Address2$
      If AltAddress.City$ Or AltAddress.State$ Or AltAddress.PostCode$
        LaserCheckHdr.Address3$ = AltAddress.City$ + ", " + AltAddress.State$ + "  " + AltAddress.PostCode$
      End If 
      status = 0
    Else 
      Call SAITouchListSelect(9,550,"Select " + gbl_check$ + " Payee/Address"," CODE  PAYEE/ADDRESS",ilist$[],icount,isel,status)
      If status = 0
        SQL$ = "SELECT " + SQLN$(AltAddress.) + " FROM Alt_Address"
        SQL$ = SQL$ + " WHERE AddressType=" + SQLV$(ilist$[isel][1,1])
        SQL$ = SQL$ + " AND EntityNo=" + SQLV$(Trim$(TicketHeader.EntityNo$))
        SQL$ = SQL$ + " AND SeqNo=" + SQLV$(Trim$(ilist$[isel][2] To 'HT'))
        Search #ch_db;SQL$
        If Chf(ch_db)
          Read Record #ch_db;AltAddress.
          LaserCheckHdr.Payee$ = AltAddress.Name$
          LaserCheckHdr.Address1$ = AltAddress.Address1$
          LaserCheckHdr.Address2$ = AltAddress.Address2$
          If AltAddress.City$ Or AltAddress.State$ Or AltAddress.PostCode$
            LaserCheckHdr.Address3$ = AltAddress.City$ + ", " + AltAddress.State$ + "  " + AltAddress.PostCode$
          End If 
          status = 0
        Else 
          status = 0
        End If 
      End If 
    End If 
  Else 
    status = 0
  End If 
End Sub 
Sub CashEnvelopeHeader()
  Print #chprt;'1LANDSCAPE 1000,72GRIDENGLISH';
  Print #chprt;'144,180MARGIN';
  Try 
    Call DrawImage(chprt,"global/images/cash_envelope_logo.gif",225,0,375,75)
  Else 
    Call DrawImage(chprt,"global/images/cash_envelope_logo.jpg",225,0,375,75)
  End Try 
  Print #chprt;PChr$("Arial") + 'FONTFACE 12FONTSIZE BBOLD';
  Print #chprt;@0,0;"PAYOUT ENVELOPE  ";
  y = 25
  Print #chprt;'8FONTSIZE';
  Print #chprt;@10,y;"Account:   ";TicketHeader.EntityNo$
  y = y + 12
  Print #chprt;@10,y;TicketHeader.Name$
  dy = 11 \ y = y + dy
  Print #chprt;@10,y;TicketHeader.Address1$
  y = y + dy
  If RTicketHdr.Address2$
    Print #chprt;@10,y;TicketHeader.Address2$
    y = y + dy
  End If 
  If Trim$(TicketHeader.City$ + TicketHeader.State$ + TicketHeader.PostCode$)
    Print #chprt;@10,y;Trim$(TicketHeader.City$) + ", " + Trim$(TicketHeader.State$) + "  " + Trim$(TicketHeader.PostCode$)
  End If 
  Print #chprt;'8FONTSIZE EBOLD';
  Print #chprt;@260,62;Trim$(Company$[93,117]);
  Print #chprt;@260,72;Trim$(Company$[143,167 - gbl_st]);", ";Company$[168 - gbl_st,169];"  ";Trim$(Company$[170,179])
  Print #chprt;'10FONTSIZE BBOLD';
  t = 450
  Print #chprt;@t,0;"Receipt #: ";
  Print #chprt;@t,16;"Ticket #: ";
  Print #chprt;@t,32;"Recv Date: ";
  Print #chprt;@t,48;"Trader: ";
  Print #chprt;'EBOLD';
  t = 510
  Print #chprt;@t,0;TicketHeader.PaymentNo$;
  Print #chprt;@t,16;TicketHeader.TicketNo$;
  Print #chprt;@t,32;DateUsing$(TicketHeader.ShipmentDate#,DateFormat1$);
  Print #chprt;@t,48;SAICodesTableDesc$(ch_db,"Codes_Trader","TraderCode",TicketHeader.Trader$)
  y = 90
  Print #chprt;'10FONTSIZE BBOLD';
  Print #chprt;@0,y;PChr$(648,y);'LINETO';
  y = y + 5
  Print #chprt;@0,y; Tab 10;"Description"; Tab 212;"Gross"; Tab 269;"Tare"; Tab 320;"Net"; Tab 370;"Adj"; Tab 398;"Paid Wt"; Tab 478;"Price  /  UM"; Tab 565;"Amount";
  y = y + 13
  Print #chprt;@0,y;PChr$(648,y);'LINETO';
  y = y + 6
  Print #chprt;PChr$("Arial Mono for dl4") + 'FONTFACE 10FONTSIZE EBOLD';
  Print #chprt;@0,y;
  !  print #chprt;                                        Tab t1;"  GROSS    TARE     NET     ADJ   PD WT      PRICE / UM       AMOUNT"
  !  print #chprt;Tab t0;"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";Tab t1;"####### ####### ####### ####### ####### ----#.#### / XX ----,--#.##"
End Sub 
Sub PrintCashEnvelope()
  chprt = FindChannel()
  Try 
    Select Case UCase$(CashEnvelopePrinter$)
      Case "DEFAULT"
        Open #chprt,"(binary=false)filler" As "Default Terminal Printer"
      Case "PROMPT"
        Open #chprt,"(binary=false)filler" As "Window Terminal Printer"
      Case Else 
        Open #chprt,"(binary=false)" + CashEnvelopePrinter$ As "Terminal Printer"
    End Select 
  Else 
    Call SAITouchError("Cannot open Cash Envelope Printer.")
    Exit Sub 
  End Try 
  Call CashEnvelopeHeader()
  t0 = 10
  t1 = 200
  LineCount = 0 \ MaxLines = 9
  For i = 1 To ItemCount
    If LineCount = MaxLines
      Print #chprt;
      Print #chprt; Tab 500;"Continued..."
      Call CashEnvelopeHeader()
      Print #chprt; Tab 215;"(Continued from previous)"
      LineCount = 1 \ y = y + 12
    End If 
    Print #chprt; Tab t0;Items.[i].MaterialDesc$; Tab t1;FormatWeight$(Items.[i].GrossWt,7);" ";FormatWeight$(Items.[i].TareWt,7);" ";FormatWeight$(Items.[i].NetWt,7);" ";
    Print #chprt;FormatWeight$(Items.[i].AdjWt,7);" ";FormatWeight$(Items.[i].NetWt + Items.[i].AdjWt,7);" ";
    Print #chprt;Items.[i].Price Using "----#.####";" / ";SAISpaceFill$(Items.[i].PriceUM$,2);" ";Items.[i].MatExt Using "----,--#.##"
    y = y + 12
    LineCount = LineCount + 1
  Next i
  y = y + 1
  Print #chprt;@390,y;PChr$(435,y);'LINETO';@535,y;PChr$(602,y);'LINETO';
  y = y + 3
  Print #chprt;PChr$("Arial") + 'FONTFACE BBOLD';
  Print #chprt;@350,y;"Totals";
  Print #chprt;PChr$("Arial Mono for dl4") + 'FONTFACE EBOLD';
  Print #chprt;@392,y;TicketTotals.TotalNet + TicketTotals.TotalAdj Using "------#";
  Print #chprt;'14FONTSIZE BBOLD';@510,y;TicketTotals.TotalPaid Using "$$$$,$$#.##"
  Close #chprt
End Sub 
Sub PayTicket(status)
  TicketHeader.PaymentCode$ = ""
  TicketTotals.TotalPaid = 0
  TicketHeader.CDUReceiptNo$ = ""
  CDUReceiptNo$ = ""
  If SupplierNo$[1,3] = "CP0" And RequireIdentity$ = "N"
    Call AdvancedIdentityInfo(status)
    If status Exit Sub 
  End If 
  If TicketIdentity.IDNumber$ And TicketIdentity.IDNumber$ = "999999"
    Call SAITouchWarning("You cannot pay a ticket with a License/ID No. = '999999'")
    status = 1
    Exit Sub 
  End If 
  If PhotoViewerTrigger$ Call SendPhotoViewerTrigger(PhotoViewerTrigger$,"PaymentRequested")
  If NumPaymentMethods > 1
    x = 50 \ bw = 150 \ bh = 30 \ y = 10 \ space = 15
    ysize = y + (NumPaymentMethods + 1) * (bh + space)
    chpmt = SAIOpenWindow("Payment Method",bw + 100,ysize,1)
    Print #chpmt;PChr$("Arial");'FONTFACE 12FONTSIZE WCSETFONT';
    For i = 1 To NumPaymentMethods
      temp$ = PaymentMethods$[i]
      If PaymentMethods$[i] = "CHECK" Let temp$ = UCase$(gbl_check$)
      Print #chpmt;PChr$(i + 10,x,y,x + bw,y + bh,temp$,2);'WCBUTTON';
      If Supplier.DoNotPay$ = "R" And PaymentMethods$[i] <> "CHECK" And PaymentMethods$[i] <> "EFT" Print #chpmt;PChr$(i + 10);'WCDISABLE';
      If PaymentMethods$[i] = "EFT"
        If TicketHeader.EntityNo$[1,3] = "CP0" Or Trim$(Supplier.EFTBankAccount$) = "" Print #chpmt;PChr$(i + 10);'WCDISABLE';
      End If 
      y = y + bh + space
    Next i
    Print #chpmt;PChr$(50,x,y,x + bw,y + bh,"Cancel",2);'WCBUTTON';
    Print #chpmt;'50WCFOCUS';
    Do 
      Input #chpmt; Len (1);w$
      Select Case w$
        Case 'F50' ! Cancel
          status = 1
          Close #chpmt
          Exit Sub 
        Case 'F11' To 'F20'
          i = Asc(w$) - Asc('F10')
          If i > 0 And i <= NumPaymentMethods
            If Supplier.DoNotPay$ = "R" And PaymentMethods$[i] <> "CHECK" And PaymentMethods$[i] <> "EFT"
              Call SAITouchWarning("Cash type payments are not allowed to this supplier.")
            Else If PaymentMethods$[i] = "EFT" And (TicketHeader.EntityNo$[1,3] = "CP0" Or Trim$(Supplier.EFTBankAccount$) = "")
              If TicketHeader.EntityNo$[1,3] = "CP0"
                Call SAITouchWarning("EFT payments cannot be used on a Peddler account.")
              Else 
                Call SAITouchWarning("EFT payments cannot be used, Supplier has no bank info on file.")
              End If 
            Else 
              PayType = i
              Exit Do 
            End If 
          End If 
      End Select 
    Loop 
    Close #chpmt
  Else 
    PayType = 1
  End If 
  Select Case PaymentMethods$[PayType]
    Case "ATM","CDU"
      Call GenerateReceiptNo(PaymentCodes$[PayType],BankCodes$[PayType],ReceiptNo$)
      If ReceiptNo$
        c$ = "C" + ReceiptNo$
        TicketTotals.TotalPaid = TicketTotals.TotalPrice + TicketTotals.TotalMatGST + TicketTotals.TotalMatPST
        TicketTotals.TotalPaid = SAIRoundPayment(TicketTotals.TotalPaid,RoundATM$)
        If PaymentMethods$[PayType] = "CDU" Let w$ = CDUAddr$ Else Let w$ = ATMEncoder$
        If PaymentMethods$[PayType] = "CDU" Let GraphicsType = 3 Else Let GraphicsType = 2
        If w$ = "demo"
          Call SAITouchMessage("This is a demostration of encoding ATM cards.")
          If PaymentMethods$[PayType] = "CDU"
            CDUReceiptNo$ = "1234567890"
            If CDUPrinterType$ <> "LASER"
              Call PrintCDUClaimCheck(CDUReceiptNo$,status)
              TicketHeader.CDUReceiptNo$ = CDUReceiptNo$
              CDUReceiptNo$ = ""
            End If 
          End If 
          status = 0
        Else 
          temp$ = ScaleCodes$ !store original scale codes to be passed to ATM routine
          If MaxATM Let temp$[115,123] = MaxATM Using "#########" !Plug in max ATM override
          Call SAIATMEncode(w$,c$,z$,temp$,GraphicsType,TicketTotals.TotalPrice,TicketTotals.TotalPaid,status,errmess$,CDUReceiptNo$)
          If status = 0 And PaymentMethods$[PayType] = "CDU"
            !CDUReceiptNo$=errmess$[8,9] + errmess$[29,32] + errmess$[14,17]
            If CDUPrinterType$ <> "LASER"
              Call PrintCDUClaimCheck(CDUReceiptNo$,status)
              TicketHeader.CDUReceiptNo$ = CDUReceiptNo$
              CDUReceiptNo$ = ""
            End If 
            status = 0
          End If 
        End If 
        If status = 0
          TicketHeader.PaymentCode$ = PaymentCodes$[PayType]
          TicketHeader.PaymentType$ = PaymentTypes$[PayType]
          TicketHeader.BankCode$ = BankCodes$[PayType]
          TicketHeader.PaymentNo$ = SAISpaceFill$(ReceiptNo$,6)
          If JPegger$ = "Y"
            Clear FieldName$[],FieldValue$[] \ NumFields = 0
            NumFields = NumFields + 1 \ FieldName$[NumFields] = "event_code" \ FieldValue$[NumFields] = "MAP"
            NumFields = NumFields + 1 \ FieldName$[NumFields] = "ticket_nbr" \ FieldValue$[NumFields] = TicketHeader.TicketNo$
            NumFields = NumFields + 1 \ FieldName$[NumFields] = "receipt_nbr" \ FieldValue$[NumFields] = TicketHeader.PaymentNo$
            If z$[644,646] = "323" And TicketHeader.EntityNo$[1,3] = "CP0" ! SA Recycling - Peddler
              NumFields = NumFields + 1 \ FieldName$[NumFields] = "payment_type" \ FieldValue$[NumFields] = "PAID"
              NumFields = NumFields + 1 \ FieldName$[NumFields] = "bank_code" \ FieldValue$[NumFields] = Branch$
            Else 
              NumFields = NumFields + 1 \ FieldName$[NumFields] = "payment_type" \ FieldValue$[NumFields] = TicketHeader.PaymentType$
              NumFields = NumFields + 1 \ FieldName$[NumFields] = "bank_code" \ FieldValue$[NumFields] = TicketHeader.BankCode$
            End If 
            NumFields = NumFields + 1 \ FieldName$[NumFields] = "location" \ FieldValue$[NumFields] = Branch$
            NumFields = NumFields + 1 \ FieldName$[NumFields] = "branch_code" \ FieldValue$[NumFields] = Branch$
            Call SAIJPeggerCommand("map",Branch$,JPServer$,NumFields,FieldName$[],FieldValue$[],stat)
          End If 
          If ATMCamera$ Call PaymentPhotoCapture("ATM",ATMCamera$)
          status = 0
        Else 
          If PaymentMethods$[PayType] = "CDU"
            Call SAITouchError(errmess$,"EZCash Error")
          Else 
            Call SAITouchError(errmess$,"ATM Encoding Error")
          End If 
          TicketTotals.TotalPaid = 0
          Clear CDUReceiptNo$,TicketHeader.CDUReceiptNo$
        End If 
      Else 
        status = 1
      End If 
    Case "CASH"
      x = ScaleCodes$[115,123]
      If MaxCash <> 0 Let x = MaxCash !config maximum cash overrides 's' code value
      TicketTotals.TotalPaid = TicketTotals.TotalPrice + TicketTotals.TotalMatGST + TicketTotals.TotalMatPST
      TicketTotals.TotalPaid = SAIRoundPayment(TicketTotals.TotalPaid,RoundCASH$)
      If x > 0 And TicketTotals.TotalPaid > x
        temp$ = x Using "---,---,---.##"
        ans = SAITouchYesNo("Cash amount is greater than $" + Trim$(temp$) + ".\15\\15\" + Rep$(" ",14) + "Pay Cash?")
      Else 
        ans = 1
      End If 
      If ans
        Call DisplayPayment(TicketTotals.TotalPaid,status)
      Else 
        status = 1
      End If 
      If status = 0
        Call GenerateReceiptNo(PaymentCodes$[PayType],BankCodes$[PayType],ReceiptNo$)
        If ReceiptNo$
          TicketHeader.PaymentCode$ = PaymentCodes$[PayType]
          TicketHeader.PaymentType$ = PaymentTypes$[PayType]
          TicketHeader.BankCode$ = BankCodes$[PayType]
          TicketHeader.PaymentNo$ = SAISpaceFill$(ReceiptNo$,6)
          If CASHCamera$ Call PaymentPhotoCapture("CASH",CASHCamera$)
        Else 
          TicketTotals.TotalPaid = 0
          status = 1
        End If 
      Else 
        TicketTotals.TotalPaid = 0
      End If 
    Case "CHECK"
      x = ScaleCodes$[73,81]
      TicketTotals.TotalPaid = TicketTotals.TotalPrice + TicketTotals.TotalMatGST + TicketTotals.TotalMatPST
      If x > 0 And TicketTotals.TotalPaid > x
        ans = SAITouchYesNo(gbl_check$ + " amount is greater than $" + Trim$(ScaleCodes$[73,81]) + ".\15\\15\" + Rep$(" ",12) + "Print " + gbl_check$ + "?")
      Else 
        ans = 1
      End If 
      If ans
        Call GenerateReceiptNo(PaymentCodes$[PayType],BankCodes$[PayType],ReceiptNo$)
      Else 
        ReceiptNo$ = ""
        TicketTotals.TotalPaid = 0
      End If 
      If ReceiptNo$
        Clear TotalGross,TotalTare,TotalNet,TotalAdj,TotalPaidWt,TotalMatExt,TotalFrtExt,TotalTaxAmt
        Clear LaserCheckHdr.,LaserCheckDtl.,CheckDetails$[]
        LaserCheckHdr.Branch$ = Branch$
        LaserCheckHdr.BankCode$ = BankCodes$[PayType]
        If PrintBankCode$ = "Y"
          LaserCheckHdr.CheckNo$ = SAIPrefixBankCode$(LaserCheckHdr.BankCode$) + ReceiptNo$
        Else 
          LaserCheckHdr.CheckNo$ = ReceiptNo$
        End If 
        LaserCheckHdr.CheckDate# = RunDate#
        LaserCheckHdr.SupplierNo$ = TicketHeader.EntityNo$
        LaserCheckHdr.Payee$ = Trim$(TicketHeader.Name$)
        LaserCheckHdr.Address1$ = Trim$(TicketHeader.Address1$)
        LaserCheckHdr.Address2$ = Trim$(TicketHeader.Address2$)
        If Trim$(TicketHeader.City$ + TicketHeader.State$ + TicketHeader.PostCode$)
          LaserCheckHdr.Address3$ = Trim$(TicketHeader.City$) + ", " + Trim$(TicketHeader.State$) + "  " + Trim$(TicketHeader.PostCode$)
        End If 
        ! Look for alternate check address(es)
        If ScaleCodes$[58,58] = "Y" And TicketHeader.EntityNo$[1,3] <> "CP0"
          Call GetAltCheckAddress(status)
          If status Exit Sub 
        End If 
        LaserCheckHdr.Amount = TicketTotals.TotalPaid
        If PreNumberedCheck$ = "N"
          LaserCheckHdr.MICRText$ = SAIFormatMICRText$(z$,ONUS$,TRANSIT$,"",CheckDigitOpt$,LaserCheckHdr.CheckNo$,TransitNo$,BankAccount$)
        End If 
        LaserCheckHdr.FormName$ = CheckFormName$
        If CheckSignatureLimit And LaserCheckHdr.Amount <= CheckSignatureLimit And LaserCheckHdr.Amount > 0
          If CheckFormSig$ Let LaserCheckHdr.FormName$ = CheckFormSig$
        End If 
        LaserCheckHdr.ProgramNo$ = z$[58,61]
        LaserCheckHdr.CreateDateTime# = Tim#(0)
        ! Open Printer
        Try 
          chprt = FindChannel()
          Open #chprt,"$dynpaper cpi=16.67 lpi=8 lm=1 p=" + CheckPrinter$
        Else 
          Call SAITouchError("Error opening Check Printer.  Ticket not paid!")
          status = 1
          Exit Sub 
        End Try 
        ! Header
        TaxFlag$ = Supplier.TaxableFlag$
        Call FormatReceiptHeader(temp$)
        ndetails = 1
        CheckDetails$[ndetails] = temp$
        ! Details
        For i = 1 To ItemCount
          Clear PD.
          PD.TicketNo$ = TicketHeader.TicketNo$
          PD.ShipDate$ = SAIConvertDate$(TicketHeader.ShipmentDate#)
          PD.TicketType$ = TicketHeader.TktType$
          PD.InYardID$ = TicketHeader.InYardID$
          PD.SuppInvNo$ = TicketHeader.SuppInvNo$
          PD.SuppShipNo$ = TicketHeader.SuppShipNo$
          PD.VehNo$ = TicketHeader.VehNo$
          PD.PONo$ = TicketHeader.OrderNo$
          PD.POLine$ = TicketHeader.OrderLine$
          PD.MaterialCode$ = Items.[i].MaterialCode$
          PD.MaterialDesc$ = Items.[i].MaterialDesc$
          PD.TaxFlag$ = TaxFlag$
          PD.RedCount = Items.[i].RedCount
          PD.RedWgt = Items.[i].RedNetWt
          PD.RedExt = Items.[i].RedExt
          PD.GrossWt = Items.[i].GrossWt
          PD.TareWt = Items.[i].TareWt
          PD.NetWt = Items.[i].NetWt
          PD.AdjWt = Items.[i].AdjWt
          PD.AdjCode$ = Items.[i].AdjCode$
          PD.PaidWt = PD.NetWt + PD.AdjWt
          PD.Price = Items.[i].Price
          PD.PriceUM$ = Items.[i].PriceUM$
          PD.MatExt = Items.[i].MatExt
          PD.CarBodies = Items.[i].CarBodies
          PD.FrtExt = 0 ! Freight is never paid here
          PD.TaxAmt = Items.[i].MatGST + Items.[i].MatPST
          PD.PaymentAmt = PD.MatExt + PD.RedExt + PD.FrtExt + PD.TaxAmt
          Call FormatReceiptLine(PD.,TextLines$[],nlines)
          For n = 1 To nlines
            ndetails = ndetails + 1
            CheckDetails$[ndetails] = TextLines$[n]
          Next n
        Next i
        ndetails = ndetails + 1 \ CheckDetails$[ndetails] = ""
        ! Levy Items
        If LevyItemCount
          Clear LevyItems.[0]
          ndetails = ndetails + 1
          If z$[644,646] = "355"
            CheckDetails$[ndetails] = SAISpaceFill$(" LESS WASTE DISPOSAL " + LevyWord$,64) + "NET" + Rep$(" ",21) + "G.S.T.    PRICE UM   NET AMT TOTAL AMT"
          Else 
            CheckDetails$[ndetails] = SAISpaceFill$(" LESS WASTE DISPOSAL " + LevyWord$,64) + "NET" + Rep$(" ",21) + "G.S.T.    PRICE UM   MAT AMT TOTAL AMT"
          End If 
          For i = 1 To LevyItemCount
            ndetails = ndetails + 1
            CheckDetails$[ndetails] = "    " + LevyItems.[i].LevyMaterialDesc$
            Call StringTab(CheckDetails$[ndetails],60)
            CheckDetails$[ndetails] = CheckDetails$[ndetails] + (LevyItems.[i].NetWt Using "------#")
            Call StringTab(CheckDetails$[ndetails],85)
            CheckDetails$[ndetails] = CheckDetails$[ndetails] + (LevyItems.[i].MatGST Using "-----#.##")
            Call GetPriceMask(LevyItems.[i].Price,LevyItems.[i].PriceUM$,9,mask$)
            CheckDetails$[ndetails] = CheckDetails$[ndetails] + LevyItems.[i].Price Using mask$ + " " + LevyItems.[i].PriceUM$
            CheckDetails$[ndetails] = CheckDetails$[ndetails] + LevyItems.[i].MatExt Using "------#.##"
            CheckDetails$[ndetails] = CheckDetails$[ndetails] + ((LevyItems.[i].MatExt + LevyItems.[i].MatGST) Using "------#.##")
            LevyItems.[0].MatExt = LevyItems.[0].MatExt + LevyItems.[i].MatExt
            LevyItems.[0].MatGST = LevyItems.[0].MatGST + LevyItems.[i].MatGST
            TotalMatExt = TotalMatExt + LevyItems.[i].MatExt
            TotalTaxAmt = TotalTaxAmt + LevyItems.[i].MatGST
          Next i
          If LevyItemCount > 1
            ndetails = ndetails + 1
            CheckDetails$[ndetails] = SAISpaceFill$(" TOTAL WASTE DISPOSAL " + LevyWord$,85) + (LevyItems.[0].MatGST Using "-----#.##")
            Call StringTab(CheckDetails$[ndetails],106)
            CheckDetails$[ndetails] = CheckDetails$[ndetails] + LevyItems.[0].MatExt Using "------#.##"
            CheckDetails$[ndetails] = CheckDetails$[ndetails] + ((LevyItems.[0].MatExt + LevyItems.[0].MatGST) Using "------#.##")
          End If 
          ndetails = ndetails + 1 \ CheckDetails$[ndetails] = ""
        End If 
        !      if (z$[644,646]="255" OR z$[644,646]="355") AND TaxFlag$="G" ! SIMS AUS & NZ
        If z$[644,646] = "255" And TaxFlag$ = "G" ! SIMS AUS Only
          ndetails = ndetails + 1 \ CheckDetails$[ndetails] = "RECIPIENT CREATED TAX INVOICE"
          ndetails = ndetails + 1 \ CheckDetails$[ndetails] = "THE GST SHOWN IS PAYABLE BY THE SUPPLIER, " + gbl_bin$ + " # " + TicketHeader.TaxID$
        End If 
        ! Totals
        If z$[644,646] = "255" Or z$[644,646] = "355" Let x = 126 Else Let x = 131 ! SIMS AUS & NZ
        ndetails = ndetails + 1 \ CheckDetails$[ndetails] = Rep$("-",x)
        Call FormatReceiptTotals(temp$)
        ndetails = ndetails + 1
        CheckDetails$[ndetails] = temp$
        CheckWordOverride$ = ""
        ! Tax only
        If z$[644,646] = "355" ! SIMS NZ
          If TaxFlag$ = "G"
            CheckWordOverride$ = "B.C.T.I."
            ndetails = ndetails + 1 \ CheckDetails$[ndetails] = ""
            ndetails = ndetails + 1 \ CheckDetails$[ndetails] = "BUYER CREATED TAX INVOICE - IRD APPROVED"
            ndetails = ndetails + 1 \ CheckDetails$[ndetails] = "SUPPLIER " + gbl_bin$ + " # " + TicketHeader.TaxID$
          End If 
          ndetails = ndetails + 1 \ CheckDetails$[ndetails] = ""
          ndetails = ndetails + 1 \ CheckDetails$[ndetails] = LaserCheckHdr.Payee$
          ndetails = ndetails + 1 \ CheckDetails$[ndetails] = LaserCheckHdr.Address1$
          If Trim$(LaserCheckHdr.Address2$)
            ndetails = ndetails + 1 \ CheckDetails$[ndetails] = LaserCheckHdr.Address2$
          End If 
          If Trim$(LaserCheckHdr.Address3$)
            ndetails = ndetails + 1 \ CheckDetails$[ndetails] = LaserCheckHdr.Address3$
          End If 
        Else If z$[644,646] = "334" And Trim$(TaxFlag$) ! Schnitzer w/ tax
          ndetails = ndetails + 1 \ CheckDetails$[ndetails] = ""
          ndetails = ndetails + 1 \ CheckDetails$[ndetails] = " Tax I.D.# " + TicketHeader.TaxID$
        End If 
        ! Check Comments
        If CheckCommentLines
          ndetails = ndetails + 1 \ CheckDetails$[ndetails] = ""
          For n = 1 To CheckCommentLines
            ndetails = ndetails + 1 \ CheckDetails$[ndetails] = CheckComments$[n]
          Next n
        End If 
        ! Print Check
        Call SAIPrintLaserCheck7(chprt,LaserCheckHdr.,ndetails,CheckDetails$[],npages,"",CheckWordOverride$)
        For n = 2 To CheckCopies
          Call SAIPrintLaserCheck7(chprt,LaserCheckHdr.,ndetails,CheckDetails$[],npages,"V",CheckWordOverride$)
        Next n
        Close #chprt
        ! Mark ticket data as Paid
        TicketHeader.PaymentCode$ = PaymentCodes$[PayType]
        TicketHeader.PaymentType$ = PaymentTypes$[PayType]
        TicketHeader.BankCode$ = BankCodes$[PayType]
        TicketHeader.PaymentNo$ = SAISpaceFill$(ReceiptNo$,6)
        ! Add to check archive
        LaserCheckDtl.BankCode$ = LaserCheckHdr.BankCode$
        LaserCheckDtl.CheckNo$ = LaserCheckHdr.CheckNo$
        count = 0
        Try 
          Search #ch_db;"INSERT INTO LaserCheck_Hdr (" + SQLN$(LaserCheckHdr.) + ") VALUES (" + SQLV$(LaserCheckHdr.) + ")"
          If CheckWordOverride$
            Try Search #ch_db;"UPDATE LaserCheck_Hdr SET CheckWordOverride=" + SQLV$(CheckWordOverride$) + " WHERE BankCode=" + SQLV$(LaserCheckHdr.BankCode$) + " AND CheckNo=" + SQLV$(LaserCheckHdr.CheckNo$) Else Rem
          End If 
          Try 
            For n = 1 To ndetails
              LaserCheckDtl.LineNo = n
              LaserCheckDtl.DetailText$ = CheckDetails$[n]
              Search #ch_db;"INSERT INTO LaserCheck_Dtl (" + SQLN$(LaserCheckDtl.) + ") VALUES (" + SQLV$(LaserCheckDtl.) + ")"
            Next n
          Else 
            errmess$ = "Error creating entry in LaserCheck_Dtl table, CheckNo=" + LaserCheckHdr.CheckNo$ + "-" + Str$(LaserCheckDtl.LineNo) + ".\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10))
            Call WriteLogFile(errmess$)
            Call SAITouchError(errmess$)
          End Try 
        Else If Spc(8) <> 236 And count = 0
          count = 1
          Try Close #ch_db Else Rem
          Call SAIOpenDatabase(ch_db,e,errmess$)
          If e = 0
            DBConnectionTime# = Tim#(0)
            Call WriteLogFile("Database connection re-established in PrintLaserCheck routine.")
            Retry 
          Else 
            errmess$ = "Error creating entry in LaserCheck_Hdr table, CheckNo=" + LaserCheckHdr.CheckNo$ + ".\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10))
            Call WriteLogFile(errmess$)
            Call SAITouchError(errmess$)
            DBConnectionTime# = Tim#(0) - 36000 ! Force a re-open in main loop
          End If 
        Else 
          errmess$ = "Error creating entry in LaserCheck_Hdr table, CheckNo=" + LaserCheckHdr.CheckNo$ + ".\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10))
          Call WriteLogFile(errmess$)
          Call SAITouchError(errmess$)
        End Try 
        If CHECKCamera$ Call PaymentPhotoCapture("CHECK",CHECKCamera$)
        status = 0
      Else 
        TicketTotals.TotalPaid = 0
        status = 1
      End If 
    Case "EFT"
      x = ScaleCodes$[73,81] ! Use check Max
      If MaxEFT <> 0 Let x = MaxEFT !config maximum EFT overrides 's' code value
      TicketTotals.TotalPaid = TicketTotals.TotalPrice + TicketTotals.TotalMatGST + TicketTotals.TotalMatPST
      BankCode$ = BankCodes$[PayType]
      If Supplier.EFTOverLimit And EFTOverLimitBankCode$
        If EFTOverLimitMax > 0 And TicketTotals.TotalPaid > EFTOverLimitMax
          Call SAITouchWarning("EFT payment amount is greater than Maximum allowed: $" + Trim$(EFTOverLimitMax Using "---,---,---,---.##"),"Over Limit")
          ans = 0
        Else If x > 0 And TicketTotals.TotalPaid > x
          BankCode$ = EFTOverLimitBankCode$
          ans = 1
        Else 
          ans = 1
        End If 
      Else 
        If x > 0 And TicketTotals.TotalPaid > x ! Force Max Limit on EFT
          temp$ = x Using "---,---,---.##"
          Call SAITouchWarning("EFT amount is greater than $" + Trim$(temp$) + ".\15\\15\" + Rep$(" ",14) + "Cannot Pay.","Over Limit")
          ans = 0
        Else 
          ans = 1
        End If 
        If ans And EFTDailyLimit
          SQL$ = "SELECT Sum(Amount) FROM Payment_Register_Hdr"
          SQL$ = SQL$ + " WHERE SupplierNo=" + SQLV$(TicketHeader.EntityNo$)
          SQL$ = SQL$ + " AND PaymentDate=" + SQLD$(RunDate#)
          SQL$ = SQL$ + " AND PaymentType=" + SQLV$("EFT")
          SQL$ = SQL$ + " AND Voided=" + SQLV$(0)
          Search #ch_db;SQL$
          Map #ch_db;
          Read #ch_db;x
          If x = SQLNull() Let x = 0
          If x >= EFTDailyLimit
            Call SAITouchWarning("This Supplier has reached the daily EFT payment limit.","Over Limit")
            ans = 0
          End If 
        End If 
      End If 
      If ans
        Call GenerateReceiptNo(PaymentCodes$[PayType],BankCode$,ReceiptNo$)
      Else 
        ReceiptNo$ = ""
        TicketTotals.TotalPaid = 0
      End If 
      If ReceiptNo$
        Call SAICreateEFTFile(ch_db,z$,BankCode$,TicketHeader.EntityNo$,RunDate#,ReceiptNo$,TicketTotals.TotalPaid,status,errmess$)
        If status
          Call SAITouchError(errmess$,"EFT Payment Error")
          ReceiptNo$ = ""
        End If 
      End If 
      If ReceiptNo$
        TicketHeader.PaymentCode$ = PaymentCodes$[PayType]
        TicketHeader.PaymentType$ = PaymentTypes$[PayType]
        TicketHeader.BankCode$ = BankCode$
        TicketHeader.PaymentNo$ = SAISpaceFill$(ReceiptNo$,6)
        If EFTCamera$ Call PaymentPhotoCapture("EFT",EFTCamera$)
      Else 
        TicketTotals.TotalPaid = 0
        status = 1
      End If 
    Case "PAYCARD"
      status = 1
    Case Else 
      status = 1
  End Select 
  If status = 0
    If PaymentSigID
      ans = SAITouchYesNo("Capture Payment Signature?")
      If ans
        temp$ = "sigcap ticket_nbr=<" + TicketHeader.TicketNo$ + "> sig_id=<" + Str$(PaymentSigID) + "> location=<" + Branch$ + ">"
        temp$ = temp$ + " transaction_type=<P> event_code=<SIGNATURE> branch_code=<" + Branch$ + ">"
        temp$ = temp$ + " cust_nbr=<" + TicketHeader.EntityNo$ + "> cust_name=<" + Trim$(TicketHeader.Name$) + ">"
        temp$ = temp$ + " app_date_time=<" + DateUsing$(Tim#(0),"YYYY-MM-DD HH:NN:SS") + "> initials=<" + WeighMaster$ + ">"
        temp$ = temp$ + " receipt_nbr=<" + TicketHeader.PaymentNo$ + "> amount=<" + Trim$(TicketTotals.TotalPaid Using "--------#.##") + ">"
        temp$ = temp$ + " payment_type=<" + TicketHeader.PaymentType$ + "> bank_code=<" + TicketHeader.BankCode$ + ">"
        If TicketHeader.EntityNo$[1,3] = "CP0"
          If TicketIdentity.FirstName$ Let temp$ = temp$ + " first_name=<" + TicketIdentity.FirstName$ + ">"
          If TicketIdentity.LastName$ Let temp$ = temp$ + " last_name=<" + TicketIdentity.LastName$ + ">"
          If TicketIdentity.EmailAddress$ Let temp$ = temp$ + " email=<" + TicketIdentity.EmailAddress$ + ">"
          If TicketIdentity.PhoneNo$
            temp$ = temp$ + " phone=<" + TicketIdentity.PhoneNo$ + ">"
          Else If TicketIdentity.PhoneNo2$
            temp$ = temp$ + " phone=<" + TicketIdentity.PhoneNo2$ + ">"
          End If 
        End If 
        temp$ = temp$ + "!"
        Do 
          Call SAICaptureSignature(SignaturePad$,temp$,stat,errmess$)
          If stat
            If stat < 0 Let errmess$ = "No Signature received."
            w$ = SAITouchGeneric$("Signature Capture",errmess$,2,"&&&Retry~&Cancel","RC")
            If w$ = "C" Exit Do 
          Else 
            Exit Do 
          End If 
        Loop 
      End If 
    End If 
  Else 
    TicketHeader.PaymentCode$ = ""
    TicketHeader.PaymentType$ = ""
    TicketTotals.TotalPaid = 0
  End If 
End Sub 
Sub RetailTicketSummary()
  Clear Sum1.[],Sum2.[]
  MaterialUnpriced$ = ""
  Sum1Count = 0 \ Sum2Count = 0
  For i = 1 To RetItemCount
    For j = 1 To Sum1Count
      If RItems.[i].MaterialCode$ = Sum1.[j].MaterialCode$
        If RItems.[i].Price = Sum1.[j].Price And RItems.[i].Price_UM$ = Sum1.[j].Price_UM$ Exit For 
      End If 
    Next j
    If j > Sum1Count
      Sum1Count = Sum1Count + 1
      j = Sum1Count
      Sum1.[j] = RItems.[i]
      Sum1.[j].ItemNo = j
    Else 
      !      Sum1.[j].MaterialCode$=RItems.[i].MaterialCode$
      !      Sum1.[j].InventoryCode$=RItems.[i].InventoryCode$
      !      Sum1.[j].MaterialDesc$=RItems.[i].MaterialDesc$
      !      Sum1.[j].Price=RItems.[i].Price
      !      Sum1.[j].Price_UM$=RItems.[i].Price_UM$
      If RItems.[i].UnPriced = 1 Let Sum1.[j].UnPriced = 1
      Sum1.[j].GrossWt = Sum1.[j].GrossWt + RItems.[i].GrossWt
      Sum1.[j].TareWt = Sum1.[j].TareWt + RItems.[i].TareWt
      Sum1.[j].AdjWt = Sum1.[j].AdjWt + RItems.[i].AdjWt
      If RItems.[i].AdjWt Let Sum1.[j].AdjCode$ = RItems.[i].AdjCode$
      Sum1.[j].NetWt = Sum1.[j].NetWt + RItems.[i].NetWt
      Sum1.[j].MatExt = Sum1.[j].MatExt + RItems.[i].MatExt
      If Sum1.[j].GrossWtScale$ <> RItems.[i].GrossWtScale$
        If RItems.[i].GrossWtScale$ = "M"
          Sum1.[j].GrossWtScale$ = "M"
        Else If Sum1.[j].GrossWtScale$ <> "M"
          Sum1.[j].GrossWtScale$ = " "
        End If 
      End If 
      If RItems.[i].TareWt
        If RItems.[i].TareWtScale$ = "M" And Sum1.[j].TareWtScale$ <> "M"
          If RItems.[i].TareContainerUsed
            Sum1.[j].TareWtScale$ = "*"
          Else 
            Sum1.[j].TareWtScale$ = "M"
          End If 
        Else If Sum1.[j].TareWtScale$ <> RItems.[i].TareWtScale$
          If RItems.[i].TareWtScale$ = "M"
            Sum1.[j].TareWtScale$ = "M"
          Else If Sum1.[j].TareWtScale$ <> "M"
            Sum1.[j].TareWtScale$ = " "
          End If 
        End If 
      End If 
      If RItems.[i].RedCount
        Sum1.[j].RedCount = Sum1.[j].RedCount + RItems.[i].RedCount
        Sum1.[j].RedExt = Sum1.[j].RedExt + RItems.[i].RedExt
      Else If RItems.[i].RedNetWt
        Sum1.[j].RedNetWt = Sum1.[j].RedNetWt + RItems.[i].RedNetWt
        Sum1.[j].RedExt = Sum1.[j].RedExt + RItems.[i].RedExt
      End If 
      Clear Sum1.[j].GrossWt_BGRead,Sum1.[j].GrossWt_BGStatus
      Clear Sum1.[j].TareWt_BGRead,Sum1.[j].TareWt_BGStatus
    End If 
  Next i
  For i = 1 To Sum1Count
    For j = 1 To Sum2Count
      If Sum1.[i].MaterialCode$ = Sum2.[j].MaterialCode$ Exit For 
    Next j
    If j > Sum2Count
      Sum2Count = Sum2Count + 1
      j = Sum2Count
      Sum2.[j] = Sum1.[i]
      Sum2.[j].ItemNo = j
    Else 
      !      Sum2.[j].MaterialCode$=Sum1.[i].MaterialCode$
      !      Sum2.[j].InventoryCode$=Sum1.[i].InventoryCode$
      !      Sum2.[j].MaterialDesc$=Sum1.[i].MaterialDesc$
      If Sum1.[i].Price = Sum2.[j].Price And Sum1.[i].Price_UM$ = Sum2.[j].Price_UM$
        Sum2.[j].Price = Sum1.[i].Price
        Sum2.[j].Price_UM$ = Sum1.[i].Price_UM$
      Else 
        Sum2.[j].Price = 0
        Sum2.[j].Price_UM$ = "* "
      End If 
      If Sum1.[i].UnPriced <> Sum2.[j].UnPriced
        MaterialUnpriced$ = SAISpaceFill$(Sum1.[i].MaterialCode$,8) + Sum1.[i].MaterialDesc$
      Else 
        Sum2.[j].GrossWt = Sum2.[j].GrossWt + Sum1.[i].GrossWt
        Sum2.[j].TareWt = Sum2.[j].TareWt + Sum1.[i].TareWt
        Sum2.[j].AdjWt = Sum2.[j].AdjWt + Sum1.[i].AdjWt
        Sum2.[j].NetWt = Sum2.[j].NetWt + Sum1.[i].NetWt
        Sum2.[j].MatExt = Sum2.[j].MatExt + Sum1.[i].MatExt
        If Sum2.[j].Price = 0 And Sum2.[j].Price_UM$ = "* " Let Sum2.[j].Price = Sum2.[j].MatExt
        If Sum2.[j].GrossWtScale$ <> Sum1.[i].GrossWtScale$
          If Sum1.[i].GrossWtScale$ = "M"
            Sum2.[j].GrossWtScale$ = "M"
          Else If Sum2.[j].GrossWtScale$ <> "M"
            Sum2.[j].GrossWtScale$ = " "
          End If 
        End If 
        If Sum1.[i].TareWt
          If Sum2.[j].TareWtScale$ <> Sum1.[i].TareWtScale$
            If Sum1.[i].TareWtScale$ = "M"
              Sum2.[j].TareWtScale$ = "M"
            Else If Sum2.[j].TareWtScale$ <> "M"
              If Sum1.[i].TareWtScale$ = "*"
                Sum2.[j].TareWtScale$ = "*"
              Else 
                Sum2.[j].TareWtScale$ = " "
              End If 
            End If 
          End If 
        End If 
        If Sum1.[i].RedCount
          Sum2.[j].RedCount = Sum2.[j].RedCount + Sum1.[i].RedCount
          Sum2.[j].RedExt = Sum2.[j].RedExt + Sum1.[i].RedExt
        Else If Sum1.[i].RedNetWt
          Sum2.[j].RedNetWt = Sum2.[j].RedNetWt + Sum1.[i].RedNetWt
          Sum2.[j].RedExt = Sum2.[j].RedExt + Sum1.[i].RedExt
        End If 
      End If 
      Clear Sum2.[j].GrossWt_BGRead,Sum2.[j].GrossWt_BGStatus
      Clear Sum2.[j].TareWt_BGRead,Sum2.[j].TareWt_BGStatus
    End If 
  Next i
End Sub 
Sub RetailCalcExtPrice()
  Select Case Material.RedFlag
    Case 1 ! Redemption by Weight
      RTicketDtl.NetWt = RTicketDtl.GrossWt - RTicketDtl.TareWt
      PaidWeight = RTicketDtl.NetWt + RTicketDtl.AdjWt
      RTicketDtl.RedCount = 0
      RTicketDtl.RedNetWt = PaidWeight
      RTicketDtl.RedExt = Round(PaidWeight * RTicketDtl.RedRate,2)
    Case 2 ! Redemption Count Item
      RTicketDtl.UnPriced = 0
      RTicketDtl.RedNetWt = 0
      RTicketDtl.MatExt = 0
      RTicketDtl.RedExt = RTicketDtl.RedCount * RTicketDtl.RedRate
      If RTicketDtl.RedExt = 0 Let RTicketDtl.UnPriced = 1
      If Reimbursement[0] <> 0 And RTicketDtl.RedRate <> 0
        RTicketDtl.GrossWt = Round(RTicketDtl.RedCount / (Reimbursement[0] / RTicketDtl.RedRate),1)
        RTicketDtl.NetWt = RTicketDtl.GrossWt
      End If 
      Exit Sub 
    Case 10 ! Inventory Count Item
      RTicketDtl.NetWt = RTicketDtl.GrossWt
      PaidWeight = RTicketDtl.GrossWt
    Case Else 
      RTicketDtl.NetWt = RTicketDtl.GrossWt - RTicketDtl.TareWt
      PaidWeight = RTicketDtl.NetWt + RTicketDtl.AdjWt
  End Select 
  Call SAICalcPriceExt(ch_110Aro,PaidWeight,gbl_um$,RTicketDtl.Price,SAISpaceFill$(RTicketDtl.Price_UM$,2),2,RTicketDtl.MatExt,stat)
  RTicketDtl.UnPriced = 0
  If RTicketDtl.MatExt = 0
    k$ = "U" + SAISpaceFill$(RTicketDtl.Price_UM$,2)
    Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
    If ScrapCode$[133,133] <> "*" Let RTicketDtl.UnPriced = 1
  End If 
End Sub 
Sub RepriceRetailItems()
  For i = 1 To RetItemCount
    RTicketDtl. = RItems.[i]
    Call GetMaterialPrice(RTicketDtl.MaterialCode$,status)
    If status = 0
      RTicketDtl.InventoryCode$ = Material.InventoryCode$
      RTicketDtl.MaterialDesc$ = Material.MaterialDesc$
      RTicketDtl.YardCode$ = Material.YardCode$
      RTicketDtl.RedType$ = Material.RedType$
      RTicketDtl.RedMat$ = Material.RedMat$
      RTicketDtl.RedRate = Material.RedRate
      RTicketDtl.Price = Material.Price
      RTicketDtl.Price_UM$ = Material.PriceUM$
    Else 
      ! Leave price alone ? RTicketDtl.Price=0
    End If 
    !    Clear TicketDetail.
    !    TicketDetail.RedType$=RTicketDtl.RedType$
    !    TicketDetail.RedMat$=RTicketDtl.RedMat$
    !    TicketDetail.YardCode$=RTicketDtl.YardCode$
    !    Call CheckRedemption(RedFlag) ! Force retail item into TicketDetail structure to use this call
    !    RTicketDtl.RedRate=TicketDetail.RedRate
    !    Clear TicketDetail.
    Call RetailCalcExtPrice()
    RItems.[i] = RTicketDtl.
    Try 
      Search #ch_db;"UPDATE Retail_Ticket_Dtl SET " + SQLNV$(RTicketDtl.) + " WHERE TicketNo=" + SQLV$(RTicketDtl.TicketNo$) + " AND ItemNo=" + SQLV$(RTicketDtl.ItemNo)
    Else 
      Call SAITouchError("Error updating entry in Retail_Ticket_Dtl table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
    End Try 
    ! Skip audit for this procedure
    !    if TicketAudit
    !      ItemNo=i
    !      Call LoadTicketAudit()
    !      TicketAudit.Event$="Item Re-Priced"
    !      Call WriteTicketAudit()
    !    endif
  Next i
End Sub 
Sub UpdateRTicketHdr()
  Try 
    Search #ch_db;"UPDATE Retail_Ticket_Hdr SET " + SQLNV$(RTicketHdr.) + " WHERE TicketNo=" + SQLV$(RTicketHdr.TicketNo$)
  Else 
    Call SAITouchError("Error updating entry in Retail_Ticket_Hdr table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
  End Try 
End Sub 
Sub RetrieveRTicketHdr(TicketNo$,stat)
  Try 
    Search #ch_db;"SELECT * FROM Retail_Ticket_Hdr WHERE TicketNo=" + SQLV$(TicketNo$)
    nr = Chf(ch_db)
    If nr
      Map Record #ch_db As Retail_Ticket_Hdr
      Read Record #ch_db;RTicketHdr.
      stat = 0
    Else 
      Call SAITouchError("Ticket No. " + TicketNo$ + " not found in Retail_Ticket_Hdr table.")
      stat = 1
    End If 
  Else 
    Call SAITouchError("Error retrieving ticket from Retail_Ticket_Hdr table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
    stat = 1
  End Try 
End Sub 
Sub RetrieveRetailTicket(TicketNo$,status)
  Clear RTicketHdr.,RItems.[],RetailTicketTotals.
  RetItemCount = 0
  Call RetrieveRTicketHdr(TicketNo$,stat)
  If stat
    status = 1
    Exit Sub 
  End If 
  Try 
    Search #ch_db;"SELECT * FROM Retail_Ticket_Dtl WHERE TicketNo=" + SQLV$(TicketNo$) + " ORDER BY ItemNo"
    RetItemCount = Chf(ch_db)
    If RetItemCount
      Map Record #ch_db As Retail_Ticket_Dtl
      For n = 1 To RetItemCount
        Read Record #ch_db;RItems.[n]
        RetailTicketTotals.TotalGrossWt = RetailTicketTotals.TotalGrossWt + RItems.[n].GrossWt
        RetailTicketTotals.TotalTareWt = RetailTicketTotals.TotalTareWt + RItems.[n].TareWt
        RetailTicketTotals.TotalNetWt = RetailTicketTotals.TotalNetWt + RItems.[n].NetWt
        RetailTicketTotals.TotalAdjWt = RetailTicketTotals.TotalAdjWt + RItems.[n].AdjWt
        RetailTicketTotals.TotalMatExt = RetailTicketTotals.TotalMatExt + RItems.[n].MatExt
        RetailTicketTotals.TotalMatGST = RetailTicketTotals.TotalMatGST + RItems.[n].MatGST
        RetailTicketTotals.TotalMatPST = RetailTicketTotals.TotalMatPST + RItems.[n].MatPST
        RetailTicketTotals.TotalRedCount = RetailTicketTotals.TotalRedCount + RItems.[n].RedCount
      Next n
    End If 
  Else 
    Call SAITouchError("Error retrieving entries from Retail_Ticket_Dtl table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
    status = 1
    Exit Sub 
  End Try 
  status = 0
  If RTicketHdr.InUse
    PortNumber = RTicketHdr.InUsePort$
    InUse = SAICheckInUse(PortNumber,RTicketHdr.InUseBy$,"retailscale,truckscale")
    If InUse Let status = 123
  End If 
End Sub 
Sub PreviewRetailTicketDisplay(mode$)
  Clear RetailTicketTotals.
  For n = 1 To RetItemCount
    RetailTicketTotals.TotalGrossWt = RetailTicketTotals.TotalGrossWt + RItems.[n].GrossWt
    RetailTicketTotals.TotalTareWt = RetailTicketTotals.TotalTareWt + RItems.[n].TareWt
    RetailTicketTotals.TotalNetWt = RetailTicketTotals.TotalNetWt + RItems.[n].NetWt
    RetailTicketTotals.TotalAdjWt = RetailTicketTotals.TotalAdjWt + RItems.[n].AdjWt
    RetailTicketTotals.TotalMatExt = RetailTicketTotals.TotalMatExt + RItems.[n].MatExt
    RetailTicketTotals.TotalMatGST = RetailTicketTotals.TotalMatGST + RItems.[n].MatGST
    RetailTicketTotals.TotalMatPST = RetailTicketTotals.TotalMatPST + RItems.[n].MatPST
    RetailTicketTotals.TotalRedCount = RetailTicketTotals.TotalRedCount + RItems.[n].RedCount
  Next n
  If mode$ = "COMPLETE"
    temp$ = "TICKET COMPLETE - "
  Else 
    temp$ = "PLACE IN-YARD - "
  End If 
  temp$ = temp$ + "Preview Retail Ticket Items: Ticket No. " + TicketHeader.TicketNo$
  chret = SAIOpenWindow(temp$,900,290,1)
  Print #chret;PChr$(SAIColorRGB(160,160,255));'BACKCOLOR CS';
  y0 = 10 \ y = y0
  Print #chret;PChr$("Courier New");'FONTFACE 8FONTSIZE WCSETFONT';
  Print #chret;PChr$(80,10,y,890,240,"",0);'WCTEXT';
  Print #chret;'80WCSELECT';PChr$(0,16777215);'WCSETCOLOR 0WCSELECT'; ! Set color to Black on White
  y = 242
  Print #chret;PChr$("Arial");'FONTFACE';
  Print #chret;'8FONTSIZE WCSETCOLOR WCSETFONT';
  Print #chret;PChr$(100,10,y + 1,140,y + 10,"Weight Difference:");'WCLABEL';
  Print #chret;'BBOLD WCSETFONT';
  Print #chret;PChr$(81,140,y,300,y + 10,"",0);'WCTEXT';
  Print #chret;PChr$(82,308,y,890,y + 10,"",0);'WCTEXT';
  Print #chret;'81WCSELECT';PChr$(0,16777215);'WCSETCOLOR'; ! Set color to Black on White
  Print #chret;'82WCSELECT';PChr$(0,16777215);'WCSETCOLOR'; ! Set color to Black on White
  Print #chret;'0WCSELECT';
  Print #chret;PChr$("Arial");'FONTFACE 12FONTSIZE EBOLD WCSETFONT';
  Print #chret;'80WCSELECT';
  Print #chret;" Ticket # ";TicketHeader.TicketNo$;Rep$(" ",74);"Date: ";DateUsing$(TicketHeader.ShipmentDate#,dateformat$)
  Print #chret;
  Print #chret;"Purchased From: ";TicketHeader.EntityNo$;Rep$(" ",36);"Vehicle Gross  (";DisplayUM$;") ";TicketTotals.TotalGross Using "-,---,--#";
  Print #chret;ScaleNumber$(Items.[1].GrossWtScale$);"  ";SAISafeDateUsing$(Items.[1].GrossWtTime#,dateformat$ + " HH:NN")
  Print #chret;" ";SAISpaceFill$(TicketHeader.Name$,57);"Vehicle Tare   (";DisplayUM$;") ";TicketTotals.TotalTare Using "-,---,--#";
  Print #chret;ScaleNumber$(Items.[1].TareWtScale$);"  ";SAISafeDateUsing$(Items.[1].TareWtTime#,dateformat$ + " HH:NN")
  Print #chret;" ";SAISpaceFill$(TicketHeader.Address1$,57);"Vehicle Net    (";DisplayUM$;") ";TicketTotals.TotalNet Using "-,---,--#"
  If Trim$(TicketHeader.Address2$)
    Print #chret;" ";SAISpaceFill$(TicketHeader.Address2$,57);"Vehicle Adj    (";DisplayUM$;") ";TicketTotals.TotalAdj Using "-,---,--#"
    Print #chret;" ";SAISpaceFill$(Trim$(TicketHeader.City$) + ", " + Trim$(TicketHeader.State$) + "  " + Trim$(TicketHeader.PostCode$),57);"Item Total Net (";DisplayUM$;") ";RetailTicketTotals.TotalNetWt Using "-,---,--#"
  Else 
    Print #chret;" ";SAISpaceFill$(Trim$(TicketHeader.City$) + ", " + Trim$(TicketHeader.State$) + "  " + Trim$(TicketHeader.PostCode$),57);"Vehicle Adj    (";DisplayUM$;") ";TicketTotals.TotalAdj Using "-,---,--#"
    Print #chret;Rep$(" ",58);"Item Total Net (";DisplayUM$;") ";RetailTicketTotals.TotalNetWt Using "-,---,--#"
  End If 
  !  print #chret;Rep$(" ",58);Rep$("-",29)
  !  print #chret;Rep$(" ",58);"    Difference (lb) ";-VehDiffWt Using "-,---,--#"
  Print #chret;
  Print #chret;"Itm Mat'l Cd Material                    Gross    Tare     Net     Adj  Paid Wt     Price UM $ Total Amt"
  !  print #chret;"##. XXXXXXXX XXXXXXXXXXXXXXXXXXXXXXXXX ###,### ###,### ###,### ###,###  ###,### ####.#### XX  ###,###.##"
  For i = 1 To RetItemCount
    Print #chret;i Using "##. ";SAISpaceFill$(RItems.[i].MaterialCode$,8);" ";SAISpaceFill$(RItems.[i].MaterialDesc$,25);
    Print #chret; Using "----,--#";RItems.[i].GrossWt;RItems.[i].TareWt;RItems.[i].NetWt;RItems.[i].AdjWt;" ";RItems.[i].NetWt + RItems.[i].AdjWt;
    If DisplayPrice$ = "Y" Or DisplayPrice$ = "P"
      Print #chret;RItems.[i].Price Using "-----.####";" ";SAISpaceFill$(RItems.[i].Price_UM$,2);" ";RItems.[i].MatExt Using "----,---.##"
    Else 
      Print #chret;
    End If 
  Next i
  Print #chret;
  Print #chret; Using "----,--#";" Totals";Rep$(" ",31);RetailTicketTotals.TotalGrossWt;RetailTicketTotals.TotalTareWt;RetailTicketTotals.TotalNetWt;RetailTicketTotals.TotalAdjWt;" ";RetailTicketTotals.TotalNetWt + RetailTicketTotals.TotalAdjWt;
  If DisplayPrice$ = "Y" Or DisplayPrice$ = "P"
    Print #chret; Using "----,---.##";Rep$(" ",14);RetailTicketTotals.TotalMatExt
  Else 
    Print #chret;
  End If 
  Print #chret;
  VehDiffWt = (TicketTotals.TotalNet + TicketTotals.TotalAdj) - (RetailTicketTotals.TotalNetWt)
  Print #chret;'81WCSELECT'; - VehDiffWt Using "---,---,--#";
  Print #chret;'82WCSELECT';
  If Abs(VehDiffWt) > Abs(MIXRetailWtTolerance)
    Print #chret;PChr$(16777215,16711680);'WCSETCOLOR'; ! Set color to White on Red
    Print #chret;"WEIGHT DIFFERENCE OUT OF TOLERANCE.";
  Else 
    Print #chret;"Weight Difference within tolerance.";
  End If 
  Print #chret;'0WCSELECT';
  If mode$ = "COMPLETE"
    temp$ = "Complete~Cancel"
  Else 
    temp$ = "Place In-Yard~Cancel"
  End If 
  Call SAIButtons(chret,2,1,temp$,900,260,25,150,20)
End Sub 
Sub PreviewRetailTicket(status)
  Call RetrieveRetailTicket(TicketNo$,status)
  If status = 123 Let status = 0 ! Ignore InUse
  If status
    Call SAITouchWarning("No Retail Ticket found.")
    status = 2
    Exit Sub 
  End If 
  If RetItemCount = 0
    Call SAITouchWarning("Retail Ticket initiated, but no items exist.")
    status = 2
    Exit Sub 
  End If 
  Call PreviewRetailTicketDisplay("INYARD")
  Print #chret;'1WCFOCUS';
  Do 
    Input #chret; Len (1);w$
    Select Case w$
      Case 'F1' ! OK
        status = 0
        Exit Do 
      Case 'F2' ! Cancel
        status = 1
        Exit Do 
    End Select 
  Loop 
  Close #chret
End Sub 
Sub CompleteRetailTicket(status)
  SavedMixAdjWt = Items.[1].AdjWt
  Call RetrieveRetailTicket(TicketNo$,status)
  If status = 123
    temp$ = "Retail Ticket is currently marked as being in use by: \15\\15\"
    temp$ = temp$ + "   User: " + RTicketHdr.InUseBy$ + "\15\"
    temp$ = temp$ + "   Port: " + RTicketHdr.InUsePort$ + "\15\\15\"
    temp$ = temp$ + "Cannot complete."
    Call SAITouchWarning(temp$)
    Exit Sub 
  Else If status
    ans = SAITouchYesNo("No Retail Ticket found.\15\   Complete anyway?")
    If ans
      TicketHeader.TktType$ = "P"
      status = 0
    Else 
      status = 2
    End If 
    Exit Sub 
  End If 
  If RetItemCount = 0
    Call SAITouchWarning("Retail Ticket initiated, but no items exist.")
    status = 2
    Exit Sub 
  End If 
  ! Mark Retail ticket InUse
  RTicketHdr.InUse = 1
  RTicketHdr.InUseBy$ = user$
  RTicketHdr.InUsePort$ = Str$(Spc(6))
  Call UpdateRTicketHdr()
  If RTicketHdr.SupplierNo$ <> TicketHeader.EntityNo$ ! Supplier was changed
    ans = SAITouchYesNo("Supplier has been changed from Retail Ticket.\15\Do you wish to re-price Retail items?")
    If ans Call RepriceRetailItems()
    RTicketHdr.SupplierNo$ = TicketHeader.EntityNo$
    RTicketHdr.SupplierName$ = Trim$(TicketHeader.Name$)
    RTicketHdr.Address1$ = Trim$(TicketHeader.Address1$)
    RTicketHdr.Address2$ = Trim$(TicketHeader.Address2$)
    RTicketHdr.City$ = Trim$(TicketHeader.City$)
    RTicketHdr.State$ = Trim$(TicketHeader.State$)
    RTicketHdr.PostCode$ = Trim$(TicketHeader.PostCode$)
    RTicketHdr.PhoneNo$ = Trim$(TicketHeader.PhoneNo$)
    RTicketHdr.IDNumber$ = Trim$(TicketHeader.IDNumber$)
    Call UpdateRTicketHdr()
  End If 
  Call PreviewRetailTicketDisplay("COMPLETE")
  If Abs(VehDiffWt) > Abs(MIXRetailWtTolerance)
    Print #chret;'2WCFOCUS';
  Else 
    Print #chret;'1WCFOCUS';
  End If 
  Do 
    Input #chret; Len (1);w$
    Select Case w$
      Case 'F1' ! OK
        Exit Do 
      Case 'F2' ! Cancel
        RTicketHdr.InUse = 0
        RTicketHdr.InUseBy$ = ""
        RTicketHdr.InUsePort$ = ""
        Call UpdateRTicketHdr()
        Close #chret
        status = 1
        Exit Sub 
    End Select 
  Loop 
  Call RetailTicketSummary()
  If MaterialUnpriced$
    temp$ = "Ticket CANNOT be completed!        "
    temp$ = temp$ + "\15\Separate items of the same Material"
    temp$ = temp$ + "\15\are both priced and unpriced."
    temp$ = temp$ + "\15\\15\Material Code=" + Trim$(MaterialUnpriced$[1,8])
    temp$ = temp$ + "\15\\15\This must be corrected at the Retail Scale."
    Call SAITouchWarning(temp$)
    RTicketHdr.InUse = 0
    RTicketHdr.InUseBy$ = ""
    RTicketHdr.InUsePort$ = ""
    Call UpdateRTicketHdr()
    Close #chret
    status = 1 ! Cancel completion
    Exit Sub 
  End If 
  If Abs(VehDiffWt) > Abs(MIXRetailWtTolerance)
    Do 
      Call ChangeAdjCode(status)
      If status = 0 Exit Do 
      ans = SAITouchConfirm("Weight Difference is above tolerance!\15\You must select an Adjustment Code to complete ticket.")
      If ans = 0
        RTicketHdr.InUse = 0
        RTicketHdr.InUseBy$ = ""
        RTicketHdr.InUsePort$ = ""
        Call UpdateRTicketHdr()
        Close #chret
        status = 1 ! Cancel completion
        Exit Sub 
      End If 
    Loop 
    Items.[1].AdjCode$ = TicketDetail.AdjCode$
  Else 
    Items.[1].AdjCode$ = "" ! System generated adj
  End If 
  Close #chret
  UnpricedItem = 0
  Items.[1].UnPriced = 0
  Items.[1].AdjWt = Items.[1].AdjWt - VehDiffWt
  TicketTotals.TotalGross = 0
  TicketTotals.TotalTare = 0
  TicketTotals.TotalAdj = 0
  TicketTotals.TotalNet = 0
  TicketTotals.TotalPrice = 0
  For n = 1 To Sum2Count
    ItemCount = ItemCount + 1
    Clear Items.[ItemCount]
    Items.[ItemCount].TicketNo$ = TicketNo$
    Items.[ItemCount].ItemNo = ItemCount
    Items.[ItemCount].MaterialCode$ = Sum2.[n].MaterialCode$
    Items.[ItemCount].InventoryCode$ = Sum2.[n].InventoryCode$
    !  Items.[ItemCount].StockPile$=
    !  Items.[ItemCount].StkPileReq=
    Items.[ItemCount].MaterialDesc$ = Sum2.[n].MaterialDesc$
    !  Items.[ItemCount].MaterialCmt1$=
    !  Items.[ItemCount].MaterialCmt2$=
    Items.[ItemCount].YardCode$ = Sum2.[n].YardCode$
    !  Items.[ItemCount].PONo$=
    Items.[ItemCount].ShipmentNo$ = TicketNo$
    !  Items.[ItemCount].CFCFlag=
    !  Items.[ItemCount].DirtFlag=
    Items.[ItemCount].RedType$ = Sum2.[n].RedType$
    Items.[ItemCount].RedMat$ = Sum2.[n].RedMat$
    If Sum2.[n].UnPriced Let Items.[ItemCount].UnPriced = 1
    Items.[ItemCount].Price = Sum2.[n].Price
    Items.[ItemCount].PriceUM$ = Sum2.[n].Price_UM$
    Items.[ItemCount].GrossWt = Sum2.[n].GrossWt
    Items.[ItemCount].GrossWt_BGRead = Sum2.[n].GrossWt_BGRead
    Items.[ItemCount].GrossWt_BGStatus = Sum2.[n].GrossWt_BGStatus
    Items.[ItemCount].TareWt = Sum2.[n].TareWt
    Items.[ItemCount].TareWt_BGRead = Sum2.[n].TareWt_BGRead
    Items.[ItemCount].TareWt_BGStatus = Sum2.[n].TareWt_BGStatus
    Items.[ItemCount].NetWt = Sum2.[n].NetWt
    Items.[ItemCount].AdjWt = Sum2.[n].AdjWt
    !  Items.[ItemCount].AdjPercent=
    Try Let Items.[ItemCount].GrossWtTime# = Sum2.[n].GrossWtTime# Else Rem
    If Sum2.[n].TareWt
      Try Let Items.[ItemCount].TareWtTime# = Sum2.[n].TareWtTime# Else Rem
    End If 
    !  Items.[ItemCount].CarBodies=
    !  Items.[ItemCount].Bales=
    !  Items.[ItemCount].ManReason$=
    !  Items.[ItemCount].MatCodeChg=
    !  Items.[ItemCount].MatDescChg=
    !  Items.[ItemCount].PriceChg=
    Items.[ItemCount].GrossWtScale$ = Sum2.[n].GrossWtScale$
    Items.[ItemCount].TareWtScale$ = Sum2.[n].TareWtScale$
    Items.[ItemCount].GrossWtWM$ = Sum2.[n].GrossWtWM$
    Items.[ItemCount].TareWtWM$ = Sum2.[n].TareWtWM$
    Items.[ItemCount].AdjCode$ = Sum2.[n].AdjCode$
    Items.[ItemCount].RedCount = Sum2.[n].RedCount
    Items.[ItemCount].RedNetWt = Sum2.[n].RedNetWt
    Items.[ItemCount].RedRate = Sum2.[n].RedRate
    Items.[ItemCount].RedExt = Sum2.[n].RedExt
    !  Items.[ItemCount].MatGST=
    !  Items.[ItemCount].MatPST=
    Items.[ItemCount].MatExt = Sum2.[n].MatExt
    !  Items.[ItemCount].AmtPaid=
    TicketTotals.TotalGross = TicketTotals.TotalGross + Items.[ItemCount].GrossWt
    TicketTotals.TotalTare = TicketTotals.TotalTare + Items.[ItemCount].TareWt
    TicketTotals.TotalAdj = TicketTotals.TotalAdj + Items.[ItemCount].AdjWt
    TicketTotals.TotalNet = TicketTotals.TotalNet + Items.[ItemCount].NetWt
    TicketTotals.TotalPrice = TicketTotals.TotalPrice + Items.[ItemCount].MatExt + Items.[ItemCount].RedExt
    If Items.[ItemCount].UnPriced Let UnpricedItem = 1
  Next n
  RTicketHdr.TktStatus$ = "" ! Mark Retail ticket header as complete
  RTicketHdr.InUse = 0
  RTicketHdr.InUseBy$ = ""
  RTicketHdr.InUsePort$ = ""
  RTicketHdr.EndTime# = Tim#(0)
  Call UpdateRTicketHdr()
  status = 0
End Sub 
Sub ResetMIXRetailTicket()
  For n = 2 To ItemCount
    Clear Items.[n]
  Next n
  ItemCount = 1
  UnpricedItem = 1
  Items.[1].UnPriced = 1
  Items.[1].AdjWt = SavedMixAdjWt ! Reset AdjWt back to original value
  Try 
    Search #ch_db;"UPDATE Retail_Ticket_Hdr SET TktStatus=" + SQLV$("H") + " WHERE TicketNo=" + SQLV$(RTicketHdr.TicketNo$)
  Else 
    Call SAITouchError("Error updating Retail Ticket Header.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
  End Try 
  Call DisplayTicket()
End Sub 
Sub LoadContractMaterial(StockPilePrompt$,status)
  If Trim$(TicketHeader.OrderNo$) <> "UNKNOWN"
    ktemp$ = SAISpaceFill$(Supplier.SupplierNo$,6) + SAIFill$(TicketHeader.OrderNo$,"R"," ",10)
    Call SAIGetRecord(ch_1200,recdef_1200.,ktemp$,1,"Y","U",rtemp,POHeader$,POHeader[],stat,errmess$)
    If stat = 0
      If Trim$(POHeader$[214,216]) Let TicketHeader.Trader$ = Trim$(POHeader$[214,216])
      TicketHeader.FundsType$ = Trim$(POHeader$[211,212])
    End If 
    TicketHeader.ShipOrdNo$ = Trim$(PODetail$[214,233])
    TicketHeader.ShippingInst$ = Trim$(PODetail$[66,95])
    MaterialCode$ = Trim$(PODetail$[50,57])
    If MaterialCode$ = MultPrice.MaterialCode$
      If Dirt$ = "Y"
        Call SAITouchWarning("Multi-Item contracts are not valid for DIRT Tickets.")
        Clear Material.,MaterialCode$,FullPONo$
        status = 1
        Exit Sub 
      End If 
      Clear Material.,MaterialCode$
    Else 
      Call GetMaterialPrice(MaterialCode$,status)
      If status
        Call SAITouchWarning("No valid Pricing found for contracted material: " + Trim$(MaterialCode$))
        MaterialCode$ = "" \ Clear Material.
      Else 
        If Dirt$ = "Y"
          If Material.DirtFlag = 0
            ans = SAITouchYesNo("You have selected a contract line for a Non-DIRT Material type.\15\Do you wish to proceed with this material as a normal purchase?")
            If ans
              Dirt$ = ""
            Else 
              Clear Material.,MaterialCode$,FullPONo$
              status = 1
              Exit Sub 
            End If 
          End If 
        Else 
          If Material.DirtFlag
            ans = SAITouchYesNo("You have selected a contract line for a DIRT Material type.\15\Do you wish to proceed with this material as a DIRT Ticket?")
            If ans
              Dirt$ = "Y"
            Else 
              Clear Material.,MaterialCode$,FullPONo$
              status = 1
              Exit Sub 
            End If 
          End If 
        End If 
        If ScrapSRecord$[69,70] = "CA" ! Redemption check
          If Trim$(Material.RedType$) <> ""
            Call SAITouchWarning("It is not valid to have a Redemption Material on a single item contract.")
            Clear Material.,MaterialCode$,FullPONo$
            status = 1
            Exit Sub 
          End If 
        End If 
        If Material.StockPileFlag And StockPilePrompt$ = "Y" ! Check for StockPile
          Call SelectStockPile(Material.InventoryCode$,Material.YardCode$,Branch$,Material.StockPile$,"","R",ExitStatus)
          If ExitStatus
            Clear Material.,MaterialCode$,FullPONo$
            status = 1
            Exit Sub 
          End If 
        End If 
        If MaterialCode$
          If PODetail$[204,204] <> "Y" ! Use contract pricing instead of price file
            If PODetail$[47,47] <> " "
              Material.Price = 0 ! Estimated price - zero out
            Else 
              Material.Price = PODetail[2]
            End If 
            Material.PriceUM$ = Trim$(PODetail$[42,43])
          End If 
          If Trim$(PODetail$[111,140]) Let Material.MaterialDesc$ = Trim$(PODetail$[111,140])
          Clear TicketDetail.
          ItemCount = 1
          TicketDetail.TicketNo$ = TicketNo$
          TicketDetail.ItemNo = 1
          TicketDetail.ShipmentNo$ = TicketNo$
          TicketDetail.DetailOrderLine$ = Trim$(PODetail$[17,18])
          Call PopulateMaterialDetail()
          If TicketDetail.MaterialCode$ <> "999" Let TicketDetail.OrigMaterialCode$ = TicketDetail.MaterialCode$
          Items.[1] = TicketDetail.
          If Material.CFCFlag = 2
            Call SAITouchWarning("CFC Signature Expired on " + SAISafeDateUsing$(Supplier.CFCFormDate#,dateformat$) + " for this Supplier.")
          Else If Material.CFCFlag
            If z$[644,646] = "342" !Sadoff custom screen message
              Call SAITouchWarning("        Load Inspection Required!\15\   Give Supplier CFC Contract for Signature\15\If Items Were Used For Refrigeration Purposes!")
            Else 
              Call SAITouchWarning("        Load Inspection Required!\15\Give Supplier CFC Contract for Signature!")
            End If 
          End If 
          If Material.CarBody$ = "Y" And (RequireVINonCarBodyMaterial$ = "Y" Or RequireVINonCarBodyMaterial$ = "W")
            Call SAITouchWarning("This material requires VIN detail entry.")
          End If 
          MaterialCode$ = ""
          Clear Material.
        End If 
      End If 
    End If 
  End If 
  status = 0
End Sub 
Sub SupplierLocationSearch(klist$)
  icount = 0
  Clear ilistsel$[]
  If ilistcur > ilistmax
    ilistmax = ilistmax + 10
    Dim ilist$[ilistmax,ilistlen]
  End If 
  ilist$[ilistcur] = klist$
  Print #chlist;PChr$(1,3);'WCDISABLE';
  Print #chlist;PChr$(30,29 + imax);'WCDELETE';
  Print #chlist;SAIMonoFont$();'14FONTSIZE BBOLD WCSETFONT';
  SQL$ = "SELECT " + SQLN$(AltAddress.) + " FROM Alt_Address WHERE AddressType=" + SQLV$("F") + " AND EntityNo=" + SQLV$(TicketHeader.EntityNo$)
  SQL$ = SQL$ + "AND SeqNo > " + SQLV$(klist$) + " ORDER BY SeqNo LIMIT " + Str$(imax)
  Try 
    Search #ch_db;SQL$
    nr = Chf(ch_db)
    If nr
      Map Record #ch_db As Alt_Address
      For i = 1 To nr
        Read Record #ch_db;AltAddress.
        temp$ = SAISpaceFill$(AltAddress.SeqNo$,4) + "  " + SAISpaceFill$(AltAddress.Name$,30) + " " + SAISpaceFill$(AltAddress.Address1$,25) + " "
        temp$ = temp$ + SAISpaceFill$(AltAddress.City$,20) + " " + SAISpaceFill$(AltAddress.State$,3) + " "
        temp$ = Replace$(temp$,"&","&&")
        Print #chlist;PChr$(icount + 30,10,20 + (icount * 30),ilistw - 10,15 + (icount + 1) * 30,temp$,2);'WCBUTTON';
        ilistsel$[icount] = AltAddress.SeqNo$
        icount = icount + 1
      Next i
      klist$ = AltAddress.SeqNo$
    End If 
  Else 
    nr = 0
  End Try 
  Print #chlist;PChr$(1,3);'WCENABLE';
  If nr < imax Print #chlist;'2WCDISABLE';
  If ilistcur = 0 Print #chlist;'1WCDISABLE';
  If icount = 0
    Print #chlist;'3WCFOCUS';
  Else 
    Print #chlist;'30WCFOCUS';
  End If 
End Sub 
Sub SelectSupplierLocation(status)
  icount = 0
  Search #ch_db;"SELECT SeqNo FROM Alt_Address WHERE AddressType=" + SQLV$("F") + " AND EntityNo=" + SQLV$(TicketHeader.EntityNo$)
  nr = Chf(ch_db)
  If nr = 0
    TicketHeader.ShipFromTo$ = "0000"
    status = 0
    Exit Sub 
  Else If nr = 1
    Map #ch_db;
    Read #ch_db;TicketHeader.ShipFromTo$
    status = 0
    Exit Sub 
  End If 
  imax = 8
  Clear ilist$[]
  ilistcur = 0
  ilistw = 920
  wh = imax * 30 + 50
  temp$ = "Select Supplier Ship From Location for Supplier " + TicketHeader.EntityNo$ + ": " + Supplier.Name$
  chlist = SAIOpenWindow(temp$,ilistw,wh,1)
  Print #chlist;PChr$(16777215);'BACKCOLOR CS'
  Print #chlist;'10FONTSIZE';SAIMonoFont$();'BBOLD WCSETFONT';
  Print #chlist;PChr$(-1,SAIColorRGB(255,255,0));'WCSETCOLOR';
  !        SeqNo Name                           Address                   City                State
  !       XXXX  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXXXXXX XXX
  Print #chlist;PChr$(100,10,2,ilistw - 10,16," SeqNo Name" + Rep$(" ",27) + "Address" + Rep$(" ",19) + "City" + Rep$(" ",16) + "State");'WCLABEL';
  Print #chlist;'WCRESETFONT WCRESETCOLOR';
  Print #chlist;'14FONTSIZE';SAIArialFont$();'BBOLD WCSETFONT';
  y = wh - 30
  x = (ilistw - 480) / 2 \ bw = 120
  Print #chlist;PChr$(1,x,y,x + bw,y + 25,"Previous",2);'WCBUTTON';
  x = x + bw + 20
  Print #chlist;PChr$(2,x,y,x + bw,y + 25,"Next",2);'WCBUTTON';
  x = x + bw + 100
  Print #chlist;PChr$(3,x,y,x + bw,y + 25,"Cancel",2);'WCBUTTON';
  Print #chlist;'10FONTSIZE';SAIMonoFont$();'FONTFACE BBOLD WCSETFONT';
  klist$ = ""
  Call SupplierLocationSearch(klist$)
  Do 
    Input #chlist; Len (1);w$
    Select Case w$
      Case 'F1' ! Previous
        If ilistcur > 0
          ilistcur = ilistcur - 1
          klist$ = ilist$[ilistcur]
          Call SupplierLocationSearch(klist$)
        End If 
      Case 'F2' ! Next
        ilistcur = ilistcur + 1
        Call SupplierLocationSearch(klist$)
      Case 'F3' ! Cancel
        status = 1
        Exit Do 
      Case 'F30' To 'F39'
        i = Asc(w$) - Asc('F30')
        TicketHeader.ShipFromTo$ = ilistsel$[i]
        status = 0
        Exit Do 
    End Select 
  Loop 
  Close #chlist
End Sub 
Sub GetManualTicketNo(mode$,TicketNo$,stat)
  Clear KBParams.
  KBParams.StartX = 5
  KBParams.StartY = 55
  KBParams.ButtonHeight = 25
  KBParams.ButtonWidth = 50
  KBParams.FontSize1 = 14
  KBParams.FontSize2 = 12
  KBParams.InputElement = 10
  KBParams.IELength = 200
  KBParams.IEMaxChar = 6
  KBParams.IELabel$ = ""
  If DisableGenerateManualTicketNo$ = "N"
    KBParams.FuncBtnLen = 150
    KBParams.FunctionBtn$ = "&Generate"
  End If 
  chwin2 = -1
  w$ = "M"
  Do 
    Call SAIKeyBoard(chwin2,"Enter Ticket No.",KBParams.,opt,w$,status)
    If status < 0 ! Cancel
      TicketNo$ = ""
      stat = 1
      Exit Do 
    Else If status = 99 ! Generate
      Call GenerateManualTicketNo(mode$,TicketNo$)
      If TicketNo$
        stat = 0
      Else 
        stat = 1
      End If 
      Close #chwin2
      Exit Do 
    Else 
      TicketNo$ = Trim$(w$)
      stat = 0
      Exit Do 
    End If 
  Loop 
End Sub 
Sub GetPurchaseReqdFields(status)
  ysize = 50 \ dy = 28
  If SupplierShipNoPrompt$ = "R" Or Supplier.SuppShipNoHandling$ = "R" Or Supplier.SuppShipNoHandling$ = "S" Or Supplier.SuppShipNoHandling$ = "V" Let ysize = ysize + dy
  If PODetail$[292,292] = "Y" Let ysize = ysize + dy ! ReqAlloyPct
  If PODetail$[293,293] = "Y" Let ysize = ysize + 3 * dy + 10 ! ReqShipWt
  chrf = SAIOpenWindow("Required Data",550,ysize,1)
  Print #chrf;PChr$("Arial");'FONTFACE 12FONTSIZE WCRESETCOLOR WCSETFONT';
  x0 = 20 \ x1 = x0 + 220 \ y = 15 - dy
  ifocus = 0
  If SupplierShipNoPrompt$ = "R" Or Supplier.SuppShipNoHandling$ = "R" Or Supplier.SuppShipNoHandling$ = "S" Or Supplier.SuppShipNoHandling$ = "V"
    y = y + dy \ dx = 150
    Print #chrf;PChr$(110,x0,y,x1,y + 14,"Supplier Shipment No.");'WCLABEL';
    Print #chrf;PChr$(10,x1,y,x1 + dx,y + 14,"",2,10);'WCSTRING';
    If TicketHeader.SuppShipNo$ Print #chrf;'10WCSELECT CU';Trim$(TicketHeader.SuppShipNo$);'0WCSELECT';
    ifocus = 10
  End If 
  If PODetail$[292,292] = "Y"
    y = y + dy \ dx = 150
    Print #chrf;PChr$(111,x0,y,x1,y + 14,"Alloy Contained %");'WCLABEL';
    Print #chrf;PChr$(11,x1,y,x1 + dx,y + 14,"",2);'WCNUMBER';
    If TicketHeader.AlloyContainedPct Print #chrf;'11WCSELECT CU';Str$(TicketHeader.AlloyContainedPct);'0WCSELECT';
    If ifocus = 0 Let ifocus = 11
  End If 
  If PODetail$[293,293] = "Y"
    y = y + dy + 10 \ dx = 150
    y0 = y
    Print #chrf;PChr$(112,x0,y,x1,y + 14,"Gross Weight");'WCLABEL';
    Print #chrf;PChr$(12,x1,y,x1 + dx,y + 14,"",2 + 4);'WCNUMBER';
    If TicketHeader.OriginGrossWt Print #chrf;'12WCSELECT CU';Str$(TicketHeader.OriginGrossWt);'0WCSELECT';
    y = y + dy - 5
    Print #chrf;PChr$(113,x0,y,x1,y + 14,"Tare Weight");'WCLABEL';
    Print #chrf;PChr$(13,x1,y,x1 + dx,y + 14,"",2 + 4);'WCNUMBER';
    If TicketHeader.OriginTareWt Print #chrf;'13WCSELECT CU';Str$(TicketHeader.OriginTareWt);'0WCSELECT';
    y = y + dy - 5
    Print #chrf;PChr$(114,x0,y,x1,y + 14,"Net Weight");'WCLABEL';
    Print #chrf;PChr$(14,x1,y,x1 + dx,y + 14,"");'WCTEXT';
    If TicketHeader.OriginGrossWt > 0 And TicketHeader.OriginTareWt > 0
      TicketHeader.OriginNetWt = TicketHeader.OriginGrossWt - TicketHeader.OriginTareWt
      Print #chrf;'14WCSELECT CU';Str$(TicketHeader.OriginNetWt);'0WCSELECT';
    End If 
    Print #chrf;'10FONTSIZE BI WCSETFONT';
    Print #chrf;PChr$(115,x0 - 8,y0 - 15,x1 + dx + 30,y + 18,"Shipper Weights");'WCGROUP';
    Print #chrf;'12FONTSIZE EI WCSETFONT';
    If ifocus = 0 Let ifocus = 12
    y = y + 10
  End If 
  y = y + 30
  Call SAIButtons(chrf,2,1,"Submit~Cancel",550,y,25,120,20)
  Print #chrf;PChr$(ifocus);'WCFOCUS';
  Do 
GetPurchaseReqdFields_input: !
    Input #chrf; Len (1);w$
    Select Case w$
      Case 'F1' ! Submit
        If SupplierShipNoPrompt$ = "R" Or Supplier.SuppShipNoHandling$ = "R" Or Supplier.SuppShipNoHandling$ = "S" Or Supplier.SuppShipNoHandling$ = "V"
          w$ = Trim$(SAIQuery$(chrf,10))
          If w$ = ""
            Call SAITouchWarning("Supplier Shipment No. is required.")
            Goto GetPurchaseReqdFields_input
          Else If Supplier.SuppShipNoHandling$ = "S" Or Supplier.SuppShipNoHandling$ = "V"
            Call ValidateSupplierShipmentNo(w$,stat)
            If stat Goto GetPurchaseReqdFields_input
          End If 
          TicketHeader.SuppShipNo$ = w$
        End If 
        If PODetail$[292,292] = "Y"
          w$ = Trim$(SAIQuery$(chrf,11))
          TicketHeader.AlloyContainedPct = w$
          If TicketHeader.AlloyContainedPct <= 0
            Call SAITouchWarning("Alloy Contained % is required.")
            Goto GetPurchaseReqdFields_input
          Else If TicketHeader.AlloyContainedPct > 100
            Call SAITouchWarning("Alloy Contained % cannot be greater than 100%.")
            Goto GetPurchaseReqdFields_input
          End If 
        End If 
        If PODetail$[293,293] = "Y"
          If TicketHeader.OriginGrossWt <= 0 Or TicketHeader.OriginTareWt < 0
            Call SAITouchWarning("Shipper Weights are required.")
            Goto GetPurchaseReqdFields_input
          Else If TicketHeader.OriginNetWt < 0
            Call SAITouchWarning("Shipper Net Weight must be greater than 0.")
            Goto GetPurchaseReqdFields_input
          End If 
        End If 
        status = 0
        Exit Do 
      Case 'F2' ! Cancel
        status = 1
        Exit Do 
      Case 'F12' To 'F13' ! Change in weights
        Print #chrf;PChr$(12,13);'WCQUERY';
        TicketHeader.OriginGrossWt = SAIQueryInput$(chrf,0)
        TicketHeader.OriginTareWt = SAIQueryInput$(chrf,0)
        If TicketHeader.OriginGrossWt > 0 And TicketHeader.OriginTareWt > 0
          TicketHeader.OriginNetWt = TicketHeader.OriginGrossWt - TicketHeader.OriginTareWt
          Print #chrf;'14WCSELECT CU';Str$(TicketHeader.OriginNetWt);'0WCSELECT';
        End If 
    End Select 
  Loop 
  Close #chrf
End Sub 
Sub CreateNewMIXTicket()
  MaterialCode$ = "*MIX"
  Call GetMaterialPrice(MaterialCode$,status)
  If status
    Call SAITouchWarning("No valid Price Record found for *MIX!\15\\15\New Ticket not created.")
    Exit Sub 
  End If 
  TicketNo$ = ""
  Call GenerateTicketNo("P",TicketNo$)
  If TicketNo$ = "" Exit Sub 
  TicketHeader.TicketNo$ = TicketNo$
  TicketHeader.ControlNo = 0
  TicketHeader.TktType$ = "P"
  TicketHeader.TktMode$ = ""
  TicketHeader.StartTime# = Tim#(0)
  TicketHeader.EntryDate# = RunDate#
  TicketHeader.ShipmentDate# = RunDate#
  TicketHeader.RFID$ = ""
  TicketHeader.RFID_InBound = 0
  TicketHeader.RFID_OutBound = 0
  TicketHeader.OrderNo$ = ""
  TicketHeader.OrderLine$ = ""
  TicketHeader.FundsType$ = ""
  TicketHeader.ShipmentNo$ = TicketHeader.TicketNo$
  TicketHeader.ShipFromTo$ = ""
  TicketHeader.CarrierNo$ = ""
  TicketHeader.CarrierRefNo$ = ""
  TicketHeader.TripTicketNo$ = ""
  TicketHeader.Photo = 0
  TicketHeader.WMaster$ = WeighMaster$
  TicketHeader.TktComment$ = ""
  TicketHeader.InUse = 0
  TicketHeader.InUseBy$ = ""
  TicketHeader.InUsePort$ = ""
  Clear TicketDetail.
  TicketDetail.TicketNo$ = TicketHeader.TicketNo$
  TicketDetail.ShipmentNo$ = TicketHeader.TicketNo$
  Call PopulateMaterialDetail()
  TicketDetail.GrossWt = Items.[ItemCount].TareWt
  TicketDetail.GrossWtTime# = Items.[ItemCount].TareWtTime#
  TicketDetail.GrossWtScale$ = Items.[ItemCount].TareWtScale$
  TicketDetail.GrossWtWM$ = Items.[ItemCount].TareWtWM$
  Clear Items.[]
  ItemCount = 1
  Items.[1] = TicketDetail.
  Try 
    Search #ch_db;"INSERT INTO InYard_Hdr (" + SQLN$(TicketHeader.) + ") VALUES (" + SQLV$(TicketHeader.) + ")"
  Else 
    errmess$ = "Error creating entry in InYard_Hdr table.\15\"
    errmess$ = errmess$ + Msc$(2) + "\15\"
    errmess$ = errmess$ + "InYardID=" + TicketHeader.InYardID$ + ", TicketNo=" + TicketHeader.TicketNo$ + "\15\"
    errmess$ = errmess$ + "Program Line: " + Str$(Spc(10))
    Call SAITouchError(errmess$)
    Exit Sub 
  End Try 
  Try 
    Search #ch_db;"INSERT INTO InYard_Dtl (" + SQLN$(Items.[1]) + ") VALUES (" + SQLV$(Items.[1]) + ")"
  Else 
    Try Search #ch_db;"DELETE FROM InYard_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) Else Rem
    Call SAITouchError("Error creating entry in InYard_Dtl table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
    Exit Sub 
  End Try 
  If TicketAudit
    ItemNo = 1
    Call LoadTicketAudit()
    TicketAudit.Event$ = "Item Added (Auto created)"
    Call WriteTicketAudit()
  End If 
  If TicketDetail.GrossWtScale$ <> "M"
    p = Pos(ScaleNames$, = TicketDetail.GrossWtScale$)
    If p And ScaleCamera$[p]
      Call ScaleCamera(Str$(p),ScaleCamera$[p],"G",TicketDetail.GrossWt)
    End If 
  End If 
  If TicketIdentity.IDNumber$
    TicketIdentity.TicketNo$ = TicketHeader.TicketNo$
    TicketIdentity.ShipmentDate# = TicketHeader.ShipmentDate#
    TicketIdentity.Branch$ = TicketHeader.Branch$
    TicketIdentity.Photo = 0
    TicketIdentity.IDPhoto = 0
    TicketIdentity.FingerPrint = 0
    Try 
      Search #ch_db;"INSERT INTO Pur_Ticket_Identity (" + SQLN$(TicketIdentity.) + ") VALUES (" + SQLV$(TicketIdentity.) + ")"
    Else 
      Call SAITouchError("Error adding entry in Pur_Ticket_Identity table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
    End Try 
  End If 
  Call SAITouchMessage("*MIX Ticket No. " + TicketHeader.TicketNo$ + " successfully created and placed In-Yard.","New Ticket Created")
End Sub 
Sub PromptInspectionTicket(ans,NumCopies)
  temp$ = "&&&1 Copy" \ temp2$ = "1"
  For i = 2 To NumCopies
    temp$ = temp$ + "~&" + Str$(i) + " Copies" \ temp2$ = temp2$ + Str$(i)
  Next i
  temp$ = temp$ + "~&None" \ temp2$ = temp2$ + "N"
  w$ = SAITouchGeneric$("Question?","Print Inspection Ticket?",NumCopies + 1,temp$,temp2$)
  If w$ = "N"
    ans = 0
  Else 
    ans = 1
    NumCopies = w$
  End If 
End Sub 
Sub DisplayInspectionComment(InspectionStatus$)
  chic = SAIOpenWindow("Inspection Comments",800,180,1)
  Print #chic;PChr$("Arial");'FONTFACE 12FONTSIZE WCSETFONT';
  Print #chic;PChr$(10,10,5,790,145,"",0);'WCTEXT';
  Print #chic;'10WCSELECT';
  Print #chic;TicketHeader.InspectionComment$
  Print #chic;'0WCSELECT';
  Call SAIButtons(chic,1,1,"&&OK",800,150,25,120,20)
  Print #chic;'1WCFOCUS';
  Do 
    Input #chic; Len (1);w$
    Select Case w$
      Case 'F1' ! OK
        status = 0
        Exit Do 
    End Select 
  Loop 
  Close #chic
End Sub 
Sub OpenBuyerEMail(mode$,EmailAddress$,status,errmess$)
  Clear status,errmess$,temp$
  ! Email Syntax:
  !  Open #ch,"(From=emailaddr,CC=emailaddr,Subject=Subject text,AttachAs=Mime) TOemailadddr" As "Email"
  !  Call Env(1,"DL4EMAILFROM",temp2$)
  If gbl.SystemEmailFrom$
    temp$ = "(From=" + gbl.SystemEmailFrom$
  Else 
    temp$ = "(From=noreply@noreply.com"
  End If 
  If CodesBranch.BranchMgrEmail$ And EmailBuyer_ccBranchManager$ <> "N"
    If EmailBuyer_ccBranchManager$ = "Y" Or (EmailBuyer_ccBranchManager$ = "A" And mode$ <> "I")
      temp$ = temp$ + ",CC=" + CodesBranch.BranchMgrEmail$
    End If 
  End If 
  temp$ = temp$ + ",Subject=''Please review Ticket# " + TicketHeader.TicketNo$ + ", Branch " + Branch$ + ", Supplier " + TicketHeader.EntityNo$ + ": " + TicketHeader.Name$ + "''"
  temp$ = temp$ + ",Content=html"
  temp$ = temp$ + ") " + EmailAddress$
  Try 
    ch_email = FindChannel()
    Open #ch_email,temp$ As "Email"
    status = 0
  Else 
    errmess$ = "Erroring attempting to send Email.\15\" + Erm$(Spc(8))
    status = Spc(8)
  End Try 
End Sub 
Sub EmailBuyer(mode$,EmailMessage$)
  w$ = TicketHeader.Trader$
  If ItemCount
    If (TicketHeader.OrderNo$ = "" Or TicketHeader.OrderNo$ = "UNKNOWN") And Items.[1].MaterialCode$[1,2] <> "*M"
      SQL$ = "SELECT InventoryClass FROM Inventory_Master WHERE"
      SQL$ = SQL$ + " InventoryCode=" + SQLV$(Items.[1].InventoryCode$)
      SQL$ = SQL$ + " AND YardCode=" + SQLV$(Items.[1].YardCode$)
      SQL$ = SQL$ + " AND Branch=" + SQLV$(TicketHeader.Branch$)
      Search #ch_db;SQL$
      If Chf(ch_db)
        Map #ch_db;
        Read #ch_db;temp$
        Select Case temp$
          Case "F"
            If Supplier.FeTraderCode$ Let w$ = Supplier.FeTraderCode$
          Case "N"
            If Supplier.NFTraderCode$ Let w$ = Supplier.NFTraderCode$
        End Select 
      End If 
    End If 
  End If 
  If w$ = ""
    If mode$ = "I" Call SAITouchWarning("No Buyer indicated on this ticket.")
    Exit Sub 
  End If 
  Clear CodesTrader.
  Search #ch_db;"SELECT " + SQLN$(CodesTrader.) + " FROM Codes_Trader WHERE TraderCode=" + SQLV$(w$)
  If Chf(ch_db) = 0
    If mode$ = "I" Call SAITouchWarning("Buyer '" + w$ + "' has no Trader Code on file.")
    Exit Sub 
  End If 
  Map Record #ch_db As Codes_Trader
  Read Record #ch_db;CodesTrader.
  If CodesTrader.EmailAddress$ = ""
    If mode$ = "I" Call SAITouchWarning("Buyer '" + w$ + "' has no Email Address on file.")
    Exit Sub 
  End If 
  w$ = ""
  If mode$ = "I"
    w$ = EmailMessage$
    Call SAIKeyBoardGen("Enter Comment to Buyer: " + CodesTrader.Description$,KBParams.alphacase,50,0,w$,stat)
    If stat Exit Sub 
  Else 
    w$ = EmailMessage$
  End If 
  Call OpenBuyerEMail(mode$,CodesTrader.EmailAddress$,status,errmess$)
  If status
    If mode$ = "I" Call SAITouchError(errmess$)
    Exit Sub 
  End If 
  Print #ch_email;"<b>From:  " + WMName$ + "</b><br><br>"
  If w$
    Print #ch_email;"<b>Message:  " + w$ + "</b><br><br>"
  End If 
  !  print #ch_email;"Photos Link:  "+PhotoURL$+"?ticket_nbr="+TicketHeader.TicketNo$+"&location="+Branch$+"<br><br>"
  Print #ch_email;"<a title=''View Photo(s)'' href=''" + PhotoURL$ + "?ticket_nbr=" + TicketHeader.TicketNo$ + "&location=" + Branch$ + "''>Click Here to View Photo(s)</a>"
  Print #ch_email;"<font face=''Courier New''>"
  Print #ch_email;"<pre>"
  Print #ch_email;"====================================================================="
  Select Case DocLang$
    Case "FC"
      temp$ = "Billet/Ticket # "
    Case Else 
      temp$ = "Ticket # "
  End Select 
  temp$ = temp$ + TicketHeader.TicketNo$
  If TicketHeader.TktMode$ = "T"
    temp$ = SAISpaceFill$(temp$,23) + "INBOUND TRANSFER TICKET"
  End If 
  Print #ch_email;SAISpaceFill$(temp$,54);"Date:  ";SAISafeDateUsing$(TicketHeader.EntryDate#,dateformat$)
  Call PrintTicketHeader(ch_email,"")
  If ItemCount = 0 Call PrintTicketItem(ch_email,"",0)
  For ItemNo = 1 To ItemCount
    !    Call TotalTicketItem(ItemNo)
    !    if Items.[ItemNo].Unpriced Let UnpricedItem=1
    Call PrintTicketItem(ch_email,"",ItemNo)
  Next ItemNo
  Select Case DocLang$
    Case "FC"
      Print #ch_email;"   Poids Brut Date/Heure"
      Print #ch_email;"   Gross Wght Date/Time  ";SAISafeDateUsing$(Items.[1].GrossWtTime#,dateformat$ + " HH:NN");
    Case Else 
      Print #ch_email;"   Gross Wght Date/Time  ";SAISafeDateUsing$(Items.[1].GrossWtTime#,dateformat$ + " HH:NN");
  End Select 
  If SuppressTicketSummaryWeight$ <> "Y"
    Print #ch_email;Rep$(" ",17);TicketSummaryWeightDesc$;
  End If 
  Print #ch_email;
  If Items.[ItemCount].TareWt
    Select Case DocLang$
      Case "FC"
        Print #ch_email;"   Poids Tare Date/Heure"
        Print #ch_email;"   Tare  Wght Date/Time  ";SAISafeDateUsing$(Items.[ItemCount].TareWtTime#,dateformat$ + " HH:NN");
      Case Else 
        Print #ch_email;"   Tare  Wght Date/Time  ";SAISafeDateUsing$(Items.[ItemCount].TareWtTime#,dateformat$ + " HH:NN");
    End Select 
    If SuppressTicketSummaryWeight$ <> "Y"
      If PrintTicketWeightAdjustmentAsPr() Let PaidWeight = TicketTotals.TotalNet Else Let PaidWeight = TicketTotals.TotalNet + TicketTotals.TotalAdj
      ReportWt = SAIDivide(PaidWeight,TicketSummaryWeight_cf,4)
      If TicketSummaryWeight_cf = 1
        Print #ch_email;Rep$(" ",17);ReportWt Using "##########";
      Else 
        Print #ch_email;Rep$(" ",17);ReportWt Using "----#.####";
      End If 
    End If 
    Print #ch_email;
  End If 
  If (DisplayPrice$ = "Y" Or DisplayPrice$ = "P") And TicketHeader.TktMode$ <> "T" And Supplier.PrintPriceAtScale$ = ""
    Call PrintMaterialSummary(ch_email,"")
    Print #ch_email;
    If gbl.MultiCurrency$ = "Y" And TicketHeader.FundsType$ <> gbl.BranchFundsType$
      Print #ch_email; Using "$---,--#.##";" Total Due:";Rep$(" ",43);SAISpaceFill$(GetCurrencyCode$(TicketHeader.FundsType$),4);TicketTotals.TotalPrice
    Else 
      Print #ch_email; Using "$---,--#.##";" Total Due:";Rep$(" ",47);TicketTotals.TotalPrice
    End If 
  End If 
  If TicketHeader.TktComment$
    Print #ch_email;
    Select Case DocLang$
      Case "FC"
        Print #ch_email;"Commentaire du Billet/"
        Print #ch_email;"Ticket Comment: ";TicketHeader.TktComment$
      Case Else 
        Print #ch_email;"Ticket Comment: ";TicketHeader.TktComment$
    End Select 
  End If 
  If PrintShippingInstructions$ = "Y" And TicketHeader.ShippingInst$
    Print #ch_email;
    Select Case DocLang$
      Case "FC"
        Print #ch_email;"Instructions d'exp\351\dition/"
        Print #ch_email;"Shipping Instructions: ";TicketHeader.ShippingInst$
      Case Else 
        Print #ch_email;"Shipping Instructions: ";TicketHeader.ShippingInst$
    End Select 
  End If 
  Print #ch_email;"====================================================================="
  Print #ch_email;
  If TicketHeader.InspectionComment$
    Print #ch_email;"Inspection Comment: ";TicketHeader.InspectionComment$
    Print #ch_email;
  End If 
  For i = 1 To ItemCount
    If Items.[i].InspectedBy$
      Print #ch_email;"Item ";Str$(i);" Inspected by:  ";SAICodesTableDesc$(ch_db,"Codes_WeighMaster","WeighMasterCode",Items.[i].InspectedBy$)
    End If 
  Next i
  Print #ch_email;"</pre>"
  Close #ch_email
End Sub 
Sub PurchaseButtons(Bset)
  x = 620 \ y = 20
  bw = 170 \ bh = 30 \ dy = 4
  If Bset = 1
    istart = 1
    iend = 8
  Else 
    istart = 10
    iend = 14
  End If 
  Print PChr$(1,20);'WCDELETE';
  Print PChr$("Arial");'FONTFACE 12FONTSIZE WCSETFONT';
  For i = istart To iend
    Print PChr$(i,x,y,x + bw,y + bh,TicketFunctions$[i],2);'WCBUTTON';
    y = y + bh + dy
  Next i
  If Bset = 2
    If PhotoCameras = 0 Print '11WCDISABLE';
  End If 
End Sub 
Sub Purchase(mode$,status)
  Try 
    TicketFunctions$[1] = "Ticket Info"
    TicketFunctions$[2] = "Add Item"
    TicketFunctions$[3] = "Edit Item"
    TicketFunctions$[4] = "Ticket Comment"
    TicketFunctions$[5] = "View Photos"
    TicketFunctions$[6] = "Place In-Yard"
    TicketFunctions$[7] = "Ticket Complete"
    TicketFunctions$[8] = "More >"
    TicketFunctions$[10] = "<  Back"
    TicketFunctions$[11] = "Capture Photo"
    TicketFunctions$[12] = "Email Buyer"
    TicketFunctions$[13] = "VIN Detail"
    TicketFunctions$[14] = "VOID Ticket"
Purchase_mode: !
    Clear TicketTotals.,TicketDetail.
    Clear Items.[],ItemCount
    Clear LevyItems.[],LevyItemCount,PrintStatementofSupply$
    Clear TicketTemp.,Source.,Material.,ExportAddress.
    Clear TicketNo$,MaterialCode$,CarrierNo$,CurbSideCity$,ValidateContainer$,supplier_id_rowid
    IdentityInfo = 0
    WeightOnly = 0
    If mode$ = "A" Or mode$ = "M"
      Clear TicketHeader.,ID$,SupplierNo$,Supplier.,FullPONo$,GblCmt$
      If mode$ = "M"
        Do 
          Call GetManualTicketNo("P",TicketNo$,stat)
          If stat = 0
            If Len(TicketNo$) = 6
              If TicketNo$[1,1] = "M" Or (TicketNo$[1,1] = "T" And AllowManualTTicket$ = "Y")
                Call TicketNumberCheck("P",TicketNo$,stat)
                If stat = 0 Exit Do 
                Call SAITouchError("Ticket Number " + TicketNo$ + " has already been used.")
              Else 
                Call SAITouchError("Ticket Number must begin with an 'M'.")
              End If 
            Else 
              Call SAITouchWarning("Ticket Number must be 6 characters long.")
            End If 
          Else 
            status = -1
            Exit Sub 
          End If 
        Loop 
      End If 
      If Mill$ = "Y"
        Call GetPO(FullPONo$,status)
        If status Exit Sub 
        If Trim$(FullPONo$) = "UNKNOWN"
          TicketHeader.OrderNo$ = Trim$(FullPONo$)
          TicketHeader.OrderLine$ = ""
        Else If Trim$(FullPONo$)
          TicketHeader.OrderNo$ = Trim$(FullPONo$[1,10])
          TicketHeader.OrderLine$ = Trim$(FullPONo$[11,12])
        End If 
        Call PopulateSupplierAddress()
        ! ** Should check to see if LoadContractMaterial routine could be called here
        TicketHeader.Trader$ = Supplier.TraderCode$
        If TicketHeader.OrderNo$ <> "UNKNOWN"
          ktemp$ = SAISpaceFill$(Supplier.SupplierNo$,6) + SAIFill$(TicketHeader.OrderNo$,"R"," ",10)
          Call SAIGetRecord(ch_1200,recdef_1200.,ktemp$,1,"Y","U",rtemp,POHeader$,POHeader[],stat,errmess$)
          If stat = 0
            If Trim$(POHeader$[214,216]) Let TicketHeader.Trader$ = Trim$(POHeader$[214,216])
            TicketHeader.FundsType$ = Trim$(POHeader$[211,212])
          End If 
          TicketHeader.ShipOrdNo$ = Trim$(PODetail$[214,233])
          TicketHeader.ShippingInst$ = Trim$(PODetail$[66,95])
          MaterialCode$ = Trim$(PODetail$[50,57])
          If MaterialCode$ = MultPrice.MaterialCode$
            MaterialCode$ = ""
            Clear Material.
          Else 
            Call GetMaterialPrice(MaterialCode$,status)
            If status
              Call SAITouchWarning("No valid Pricing found for contracted material: " + MaterialCode$)
              MaterialCode$ = ""
              Goto Purchase_mode
            Else 
              If Material.StockPileFlag ! Check for StockPile
                Call SelectStockPile(Material.InventoryCode$,Material.YardCode$,Branch$,Material.StockPile$,"","R",ExitStatus)
                If ExitStatus
                  MaterialCode$ = ""
                  Goto Purchase_mode
                End If 
              End If 
              If MaterialCode$
                If PODetail$[204,204] <> "Y" ! Use contract pricing instead of price file
                  If PODetail$[47,47] <> " "
                    Material.Price = 0 ! Estimated price - zero out
                  Else 
                    Material.Price = PODetail[2]
                  End If 
                  Material.PriceUM$ = Trim$(PODetail$[42,43])
                End If 
                If Trim$(PODetail$[111,140]) Let Material.MaterialDesc$ = Trim$(PODetail$[111,140])
                ItemCount = 1
                ! TicketDetail.TicketNo$=TicketNo$ No ticket number yet
                TicketDetail.ItemNo = 1
                Call PopulateMaterialDetail()
                Items.[1] = TicketDetail.
                Clear MaterialCode$,Material.
              End If 
            End If 
          End If 
        End If 
      Else 
        If Greeter$ = "Y"
          Call GreeterList(status)
          If status = 0 And MaterialCode$
            Call GetMaterialPrice(MaterialCode$,status)
            If status
              Call SAITouchWarning("No valid Pricing found for Greeter selected material: " + Trim$(MaterialCode$))
              MaterialCode$ = "" \ Clear Material.
              status = 0
            Else 
              If GreeterQueue.[0].Price And GreeterQueue.[0].PriceUM$
                Material.Price = GreeterQueue.[0].Price
                Material.PriceUM$ = GreeterQueue.[0].PriceUM$
              End If 
              If Material.StockPileFlag ! Check for StockPile
                Do 
                  Call SelectStockPile(Material.InventoryCode$,Material.YardCode$,Branch$,Material.StockPile$,"","R",ExitStatus)
                Loop Until ExitStatus = 0
              End If 
              ItemCount = 1
              TicketDetail.TicketNo$ = TicketNo$
              TicketDetail.ItemNo = 1
              Call PopulateMaterialDetail()
              Items.[1] = TicketDetail.
              Clear MaterialCode$,Material.
            End If 
          Else If status = 1
            status = -1
            Exit Sub 
          End If 
        Else 
          status = 2
        End If 
        If status Call GetInYardID("P",ID$,status)
        If status = -1 Exit Sub ! Cancel
        If status ! Matching InYard found
          If TicketHeader.TktType$ = "P" Or TicketHeader.TktType$ = "R"
            ans = SAITouchConfirm("ID: " + ID$ + " already exists In-Yard.\15\Please confirm this is the correct vehicle.","Warning")
            If ans
              mode$ = "E"
              Goto Purchase_mode
            Else 
              Clear TicketHeader.
              status = -1
              Exit Sub 
            End If 
          Else 
            Call SAITouchWarning("ID: " + ID$ + " already exists In-Yard and is not a Purchase transaction.")
            Clear TicketHeader.
            status = -1
            Exit Sub 
          End If 
        End If 
        If SupplierNo$
          Call RetrieveSupplier(SupplierNo$,Supplier.,stat)
          If stat
            Call SAITouchError("Supplier Number does not exist!\15\Please select a Supplier.")
          Else 
            If ValidSupplier(z$,Supplier.) = 0
              Call SAITouchWarning("Invalid Supplier specified!\15\Please select a Supplier.")
              stat = 1
            End If 
          End If 
          If stat
            SupplierNo$ = ""
          Else 
            SupplierNo$ = Supplier.SupplierNo$
            Call ListCurbSideCities(CurbSideCity$,ExitStatus)
            If ExitStatus Let SupplierNo$ = ""
          End If 
        End If 
Purchase0: !
        Clear TicketHeader.,TicketTotals.,Material.
        MaterialCode$ = ""
        If SupplierNo$ = "" Call GetSupplier()
        If SupplierNo$ = ""
          status = -1
          Exit Sub 
        End If 
        If Trim$(FullPONo$) = "UNKNOWN"
          TicketHeader.OrderNo$ = Trim$(FullPONo$)
          TicketHeader.OrderLine$ = ""
        Else If Trim$(FullPONo$)
          TicketHeader.OrderNo$ = Trim$(FullPONo$[1,10])
          TicketHeader.OrderLine$ = Trim$(FullPONo$[11,12])
        Else 
          Clear TicketHeader.OrderNo$,TicketHeader.OrderLine$
        End If 
        If RFID$ Let TicketHeader.RFID$ = RFID$
        If GreeterQueueID And supplier_id_rowid
          TicketHeader.supplier_id_rowid = supplier_id_rowid
        End If 
        If SupplierNo$[1,3] = "CP0"
          If TicketIdentity.IDNumber$
            TicketHeader.IDNumber$ = TicketIdentity.IDNumber$
            TicketHeader.Name$ = TicketIdentity.FullName$
            TicketHeader.Address1$ = TicketIdentity.Address1$
            TicketHeader.Address2$ = TicketIdentity.Address2$
            TicketHeader.City$ = TicketIdentity.City$
            TicketHeader.State$ = TicketIdentity.State$
            TicketHeader.PostCode$ = TicketIdentity.PostCode$
            TicketHeader.PhoneNo$ = TicketIdentity.PhoneNo$
            TicketHeader.TaxID$ = TicketIdentity.TaxID$
          Else 
            TicketHeader.Name$ = Supplier.Name$ ! Only populate Peddler Name
          End If 
        Else 
          Call PopulateSupplierAddress()
        End If 
        TicketHeader.Trader$ = Supplier.TraderCode$
        ! Welcome Sign
        If WelcomeSignAddr$
          ! <ID NAME="Johnny Smith" SUPPLIERCODE="PEDL" RFID="Y" SCALE="1">
          If SupplierNo$[1,3] = "CP0"
            temp$ = "<ID NAME=''" + Trim$(TicketHeader.Name$) + "'' SUPPLIERCODE=''PEDL'' "
          Else 
            temp$ = "<ID NAME=''" + Trim$(TicketHeader.Name$) + "'' SUPPLIERCODE=''" + SupplierNo$ + "'' "
          End If 
          If TicketHeader.RFID$
            temp$ = temp$ + "RFID=''Y'' "
          Else 
            temp$ = temp$ + "RFID=''N'' "
          End If 
          temp$ = temp$ + "SCALE=''" + Str$(ReadScale) + "''>"
          If WelcomeSignAddr$ = "demo"
            Call SAITouchMessage(temp$,"Welcome Sign Interface")
          Else 
            Try 
              chan = FindChannel()
              Open #chan,"(opentime=2)" + WelcomeSignAddr$ As "Socket Text"
              Print #chan;temp$
              Close #chan
            Else 
            End Try 
          End If 
        End If 
        ! Supplier Comments
        Call DisplaySupplierComments(SupplierNo$,status)
        If status
          Clear SupplierNo$,Supplier.
          Goto Purchase_mode
        End If 
        ! Sun Valley
        If SunValley And SupplierNo$ = SV_SupplierNo$
          Call GetSVLAInfo(status)
          If status
            Clear SupplierNo$,Supplier.
            Goto Purchase_mode
          End If 
        End If 
        ! Look for a Purchase Contract
Purchase1: !
        If SupplierNo$[1,3] <> "CP0" And FullPONo$ = ""
          !        First determine if any contracts exist for Supplier (valid or invalid)
          If Supplier.PORequired
            e = 0
          Else 
            k1$ = SAISpaceFill$(SupplierNo$,6)
            ksav$ = k1$
            Search #ch_1210ro,3,1;k1$,r,e
            If e = 0 And k1$[1,Len(ksav$)] <> ksav$ Let e = 1
          End If 
          If e = 0
            If GreeterQueueID And ItemCount = 1
              Call SAITouchMessage("This supplier uses Purchase Contracts.\15\Greeter selected the following Material:\15\\15\" + Trim$(Items.[1].MaterialCode$) + ": " + Trim$(Items.[1].MaterialDesc$))
            End If 
            Call ListSupplierPOs(SupplierNo$,FullPONo$,status)
            If status
              Clear SupplierNo$,Supplier.
              Goto Purchase0
            End If 
            If Trim$(FullPONo$) = "UNKNOWN"
              TicketHeader.OrderNo$ = "UNKNOWN"
              Clear TicketHeader.OrderLine$
              Clear FullPONo$
            Else If FullPONo$
              TicketHeader.OrderNo$ = Trim$(FullPONo$[1,10])
              TicketHeader.OrderLine$ = Trim$(FullPONo$[11,12])
            Else 
              Clear TicketHeader.OrderNo$,TicketHeader.OrderLine$
            End If 
          End If 
        End If 
        If TicketHeader.OrderNo$
          Call LoadContractMaterial("Y",status)
          If status Goto Purchase1
        End If 
      End If 
      TicketHeader.Branch$ = Branch$
      TicketHeader.InYardID$ = ID$
      TicketHeader.EntityNo$ = Supplier.SupplierNo$
      TicketHeader.ShipmentDate# = RunDate#
      TicketHeader.EntryDate# = RunDate#
      TicketHeader.TktType$ = "P"
      If Dirt$ Let TicketHeader.TktMode$ = "D"
      TicketHeader.CurbSideCity$ = CurbSideCity$
      ! Vehicle Info
      If TicketHeader.OrderNo$ And TicketHeader.OrderNo$ <> "UNKNOWN"
        VehType1$ = Trim$(PODetail$[38,38])
        VehType2$ = Trim$(PODetail$[48,48])
      Else 
        VehType1$ = DefaultVehType$
        VehType2$ = ""
      End If 
      Do 
        Call VehicleSelection(VehType1$,VehType2$,status)
        If status
          Clear SupplierNo$,Supplier.,FullPONo$
          Exit Do 
        Else If Mill$ = "Y" ! Check for Vehicle number already In-Yard
          Search #ch_db;"SELECT TicketNo FROM InYard_Hdr WHERE Branch=" + SQLV$(Branch$) + " AND InYardID=" + SQLV$(TicketHeader.VehNo$)
          If Chf(ch_db)
            Map #ch_db;
            Read #ch_db;temp$
            Call SAITouchWarning("Vehicle No: " + TicketHeader.VehNo$ + " already In-Yard on Ticket No. " + temp$)
          Else 
            ID$ = Trim$(TicketHeader.VehNo$)
            TicketHeader.InYardID$ = ID$
            status = 0
            Exit Do 
          End If 
        Else 
          Exit Do 
        End If 
      Loop 
      If status Goto Purchase0
      ! OTM Reference Number
      CarrierNo$ = ""
      If OTMFreight$ = "Y"
        If TicketHeader.OrderNo$ And TicketHeader.OrderNo$ <> "UNKNOWN"
          Call CarrierOptions(TicketHeader.VehType$,FullPONo$,k$,count) ! count=-1 for Generic, 0 for no carrier, or >0 for number of contract carriers found
          If count
            temp$ = DateUsing$(Tim#(0),"YYYY")
            Call GetOTMRefNo(temp$,status)
            If status
              Clear SupplierNo$,Supplier.,FullPONo$
              Goto Purchase0
            Else 
              TicketHeader.CarrierRefNo$ = OTMFreightInterface.OTMRefNo$
              CarrierNo$ = OTMFreightInterface.CarrierNo$
              TicketHeader.CarrierNo$ = OTMFreightInterface.CarrierNo$
            End If 
          End If 
        End If 
      End If 
      ! Carrier Selection
      VehicleType$ = TicketHeader.VehType$
      If FullPONo$ And CarrierNo$ = ""
        Call CarrierSelection(VehicleType$,VehicleSize$,FullPONo$,CarrierNo$,status)
      Else If Dirt$ = "Y" And CarrierNo$ = ""
        Call GetCarrier(VehicleType$,CarrierNo$,status)
        If status = 0 Let TicketHeader.CarrierNo$ = Trim$(CarrierNo$)
      End If 
      If mode$ = "A"
        Call GenerateTicketNo("P",TicketNo$)
        If TicketNo$ = ""
          status = -1
          Exit Sub 
        End If 
      End If 
      If GreeterQueueID
        Try 
          GreeterQueueTicketNoXref.GreeterQueueID = GreeterQueueID
          GreeterQueueTicketNoXref.TicketNo$ = TicketNo$
          Search #ch_db;"INSERT INTO GreeterQueue_TicketNo_Xref (" + SQLN$(GreeterQueueTicketNoXref.) + ") VALUES (" + SQLV$(GreeterQueueTicketNoXref.) + ")"
        Else 
          Call SAITouchError("Error creating entry in GreeterQueue_TicketNo_Xref table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
        End Try 
      End If 
      TicketHeader.TicketNo$ = TicketNo$
      TicketHeader.ShipmentNo$ = TicketHeader.TicketNo$ ! Shipment # = Ticket # (for now)
      If gbl.MultiCurrency$ = "Y" Let TicketHeader.FundsType$ = gbl.BranchFundsType$ ! Initialize with Branch Funds Type
      ! Update OTM Record
      If OTMFreight$ = "Y" And TicketHeader.CarrierRefNo$
        SQL$ = "UPDATE OTM_Freight_Interface SET"
        SQL$ = SQL$ + " Status=" + SQLV$("I") + ", TicketNo=" + SQLV$(TicketHeader.TicketNo$)
        SQL$ = SQL$ + " WHERE OTMFrtInterfaceID=" + SQLV$(OTMFreightInterface.OTMFrtInterfaceID)
        Try 
          Search #ch_db;SQL$
        Else 
          Call SAITouchError("Error updating Status in OTM_Freight_Interface table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
        End Try 
      End If 
      Call DefaultVehicleNo(TicketNo$)
      ! Identity issues
      PromptID = 0
      If InBoundPeddlerInfoPrompt$ = "V" And TicketIdentity.IDNumber$ = ""
        Do 
          Call SAIAdvancedVehicleInfo(z$,ch_db,ConfigFile$,TicketHeader.TicketNo$,TicketHeader.ShipmentDate#,TicketIdentity.,TicketHeader.EntityNo$,WeighMaster$,status)
          If status = 0
            Exit Do 
          Else 
            ans = SAITouchYesNo("Advanced Vehicle Information required.  Do you wish to cancel ticket?")
            If ans Goto Purchase_mode
          End If 
        Loop 
      Else If InBoundPeddlerInfoPrompt$ = "Y" Or InBoundPeddlerInfoPrompt$ = "R" Or InBoundPeddlerInfoPrompt$ = "RV"
        If TicketIdentity.IDNumber$
          PromptID = 0
        Else If TicketHeader.EntityNo$[1,3] = "CP0"
          PromptID = 1
        Else If RequireIdentity$ = "Y"
          PromptID = 1
        Else If RequireIdentity$ = "V"
          PromptID = GetReqAdvIdentityValue(ch_db,Supplier.MiscSupplierType$)
          If PromptID
            If GetComplianceDocOnFile(ch_db,Supplier.SupplierNo$)
              If PromptID = 2 ! Not required if compliance document on file
                PromptID = 0
              Else If Supplier.DoNotPay$ = "S" Or Supplier.DoNotPay$ = "R" ! Do not pay at scale or cash
                PromptID = 0
              End If 
            End If 
            If PromptID = 0 And InBoundPeddlerInfoPrompt$ <> "RV"
              Call SAITouchMessage("Identity not required for this supplier.")
            End If 
          End If 
        End If 
        If PromptID
          Do 
            Call AdvancedIdentityInfo(status)
            If status = 0 Or InBoundPeddlerInfoPrompt$[1,1] <> "R" Exit Do 
            ans = SAITouchYesNo("Identity Information required.  Do you wish to cancel ticket?")
            If ans Goto Purchase_mode
          Loop 
        Else If InBoundPeddlerInfoPrompt$ = "RV"
          Do 
            Call SAIAdvancedVehicleInfo(z$,ch_db,ConfigFile$,TicketHeader.TicketNo$,TicketHeader.ShipmentDate#,TicketIdentity.,TicketHeader.EntityNo$,WeighMaster$,status)
            If status = 0
              Exit Do 
            Else 
              ans = SAITouchYesNo("Advanced Vehicle Information required.  Do you wish to cancel ticket?")
              If ans Goto Purchase_mode
            End If 
          Loop 
        End If 
      End If 
      ! Check Peddler Limit
      If TicketHeader.EntityNo$[1,3] = "CP0" And z$[644,646] = "351" And gbl.PeddlerLimit ! TMR
        If TicketIdentity.IDNumber$ And TicketIdentity.TaxID$ = ""
          d1# = SAICurrentDate#() - 31536000 ! 1 Year ago
          Call SAIPeddlerVolumeQuery(ch_db,Branch$,TicketIdentity.IDNumber$,d1#,FYTDPurchases)
          If FYTDPurchases >= gbl.PeddlerLimit
            ans = SAITouchYesNo("12 month purchase limit has been met or exceeded.\15\\15\12 month total purchases = " + Trim$(FYTDPurchases Using "$$$,$$$,$$&.##") + "\15\\15\Proceed?")
            If ans = 0 Goto Purchase_mode
          Else If FYTDPurchases > gbl.PeddlerLimit * .95
            temp$ = "12 month purchase total has exceeded 95% of the limit.\15\\15\"
            temp$ = temp$ + "12 month total purchases = " + Trim$(FYTDPurchases Using "$$$,$$$,$$&.##")
            Call SAITouchWarning(temp$)
          End If 
        End If 
      End If 
      If Trim$(Supplier.SuppShipNoHandling$)
        If Supplier.SuppShipNoHandling$ = "N" Let opt = 0 Else Let opt = 1
      Else If SupplierShipNoPrompt$ = "Y" Or SupplierShipNoPrompt$ = "R"
        opt = 1
      Else 
        opt = 0
      End If 
      If opt
        w$ = ""
prompt_SuppShipNo: !
        Call SAIKeyBoardGen("Enter Supplier Shipment No.",KBParams.alphacase,10,0,w$,stat)
        w$ = Trim$(w$)
        If stat = 0
          If (Supplier.SuppShipNoHandling$ = "S" Or Supplier.SuppShipNoHandling$ = "V") And w$
            Call ValidateSupplierShipmentNo(w$,stat)
            If stat
              Goto prompt_SuppShipNo
            Else 
              TicketHeader.SuppShipNo$ = w$
            End If 
          Else 
            TicketHeader.SuppShipNo$ = w$
          End If 
        End If 
      End If 
      ! Get Order Header and Line
      POHeader$ = ""
      If TicketHeader.OrderNo$ And TicketHeader.OrderNo$ <> "UNKNOWN"
        ktemp$ = SAISpaceFill$(TicketHeader.EntityNo$,6) + SAIFill$(TicketHeader.OrderNo$,"R"," ",10)
        Call SAIGetRecord(ch_1200,recdef_1200.,ktemp$,1,"Y","U",rtemp,POHeader$,POHeader[],stat,errmess$)
        If stat = 0
          If Trim$(POHeader$[214,216]) Let TicketHeader.Trader$ = Trim$(POHeader$[214,216])
          TicketHeader.FundsType$ = Trim$(POHeader$[211,212])
        Else 
          POHeader$ = ""
        End If 
        ktemp$ = SAISpaceFill$(TicketHeader.EntityNo$,6) + SAIFill$(TicketHeader.OrderNo$,"R"," ",10) + SAISpaceFill$(TicketHeader.OrderLine$,2)
        Call SAIGetRecord(ch_1210ro,recdef_1210.,ktemp$,1,"Y","U",rtemp,PODetail$,PODetail[],stat,errmess$)
        If stat = 0
          TicketHeader.ShipFromTo$ = Trim$(PODetail$[31,34])
          TicketHeader.ShippingInst$ = Trim$(PODetail$[66,95])
          TicketHeader.ShipOrdNo$ = Trim$(PODetail$[214,233])
        Else 
          PODetail$ = ""
        End If 
      End If 
      ! Create InYard
      TicketHeader.StartTime# = Tim#(0)
      If TicketHeader.RFID$ Let TicketHeader.RFID_InBound = 1
      TicketHeader.InUse = 1
      TicketHeader.InUseBy$ = user$
      TicketHeader.InUsePort$ = Spc(6) Using "&&&&"
      Try 
        Search #ch_db;"INSERT INTO InYard_Hdr (" + SQLN$(TicketHeader.) + ") VALUES (" + SQLV$(TicketHeader.) + ")"
      Else If Spc(8) = 236
        errmess$ = "Duplicate entry exists In-Yard.\15\"
        errmess$ = errmess$ + "InYardID=" + TicketHeader.InYardID$ + ", TicketNo=" + TicketHeader.TicketNo$ + "\15\"
        errmess$ = errmess$ + "\15\Ticket creation aborted."
        Call SAITouchError(errmess$)
        status = -1
        Exit Sub 
      Else 
        errmess$ = "Error creating entry in InYard_Hdr table.\15\"
        errmess$ = errmess$ + Msc$(2) + "\15\"
        errmess$ = errmess$ + "InYardID=" + TicketHeader.InYardID$ + ", TicketNo=" + TicketHeader.TicketNo$ + "\15\"
        errmess$ = errmess$ + "Program Line: " + Str$(Spc(10))
        Call SAITouchError(errmess$)
        status = -1
        Exit Sub 
      End Try 
      If ItemCount = 1
        Items.[1].TicketNo$ = TicketHeader.TicketNo$
        Try 
          Search #ch_db;"INSERT INTO InYard_Dtl (" + SQLN$(Items.[1]) + ") VALUES (" + SQLV$(Items.[1]) + ")"
        Else 
          Try Search #ch_db;"DELETE FROM InYard_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) Else Rem
          Call SAITouchError("Error creating entry in InYard_Dtl table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
          status = -1
          Exit Sub 
        End Try 
      End If 
      ! TicketIdentity
      If TicketIdentity.IDNumber$
        TicketIdentity.TicketNo$ = TicketHeader.TicketNo$
        TicketIdentity.ShipmentDate# = TicketHeader.ShipmentDate#
        TicketIdentity.Branch$ = TicketHeader.Branch$
        Try 
          Search #ch_db;"INSERT INTO Pur_Ticket_Identity (" + SQLN$(TicketIdentity.) + ") VALUES (" + SQLV$(TicketIdentity.) + ")"
        Else If Spc(8) = 236
          Search #ch_db;"UPDATE Pur_Ticket_Identity SET " + SQLNV$(TicketIdentity.) + " WHERE TicketNo=" + SQLV$(TicketIdentity.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketIdentity.ShipmentDate#)
        Else 
          Call SAITouchError("Error updating entry in Pur_Ticket_Identity table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
        End Try 
        If TicketHeader.EntityNo$[1,3] = "CP0"
          If TicketIdentity.CFCExpirationDate#
            Supplier.SignatureOnFile$ = "Y"
            Supplier.CFCFormDate# = TicketIdentity.CFCExpirationDate#
          End If 
        End If 
        If PromptID = 0
          If DisableSavedPhotoAutoCopy$ <> "Y"
            Call CopyPhotos(TicketIdentity.IDNumber$,TicketHeader.TicketNo$,stat)
            If stat = 0 Let TicketHeader.Photo = 1
          End If 
        End If 
      End If 
      ! Check for MixUnloadMode
      If MixUnloadMode$ = "Y" And TicketHeader.OrderNo$ And TicketHeader.OrderNo$ <> "UNKNOWN"
        If Trim$(Items.[1].MaterialCode$) = "*MIX"
          Clear PurMixHdr.
          PurMixHdr.TicketNo$ = TicketHeader.TicketNo$
          PurMixHdr.ShipmentDate# = TicketHeader.ShipmentDate#
          PurMixHdr.Branch$ = TicketHeader.Branch$
          PurMixHdr.SupplierNo$ = TicketHeader.EntityNo$
          PurMixHdr.PONo$ = TicketHeader.OrderNo$
          If POHeader$
            If POHeader$[181,181] = "Y" Let PurMixHdr.RecoveryMode = 1
          End If 
          Try 
            Search #ch_db;"INSERT INTO Pur_Mix_Hdr (" + SQLN$(PurMixHdr.) + ") VALUES (" + SQLV$(PurMixHdr.) + ")"
            TicketTemp.MixUnload = 1
          Else 
            Call SAITouchError("Error creating entry in Pur_Mix_Hdr table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
          End Try 
        End If 
      End If 
      ItemNo = 0
      If PhotoViewerTrigger$ Call SendPhotoViewerTrigger(PhotoViewerTrigger$,"SupplierSelected")
    Else ! Edit **********************************************************
      ! Check for existence of ticket in 8326 file
      ktemp$ = SAISpaceFill$(TicketHeader.TicketNo$,6)
      Call SAIGetRecord(ch_8326ro,recdef_8326.,ktemp$,2,"Y","U",rtemp,ScaleTicAudit$,ScaleTicAudit[],stat,errmess$)
      If stat = 0
        ans = SAITouchYesNo("Ticket Number " + TicketHeader.TicketNo$ + " has already been completed.\15\\15\Do you wish to remove this entry (ID: " + TicketHeader.InYardID$ + ") from the InYard table?")
        If ans
          Call DeleteInYard(stat)
          If stat = 0
            Call SAITouchMessage("ID: " + TicketHeader.InYardID$ + " Successfully removed from InYard table.")
            If TicketAudit
              TransferMode = 0
              Call LoadTicketAuditHeader()
              TicketAudit.Event$ = "In-Yard deleted - Ticket already completed"
              Call WriteTicketAudit()
            End If 
          End If 
        End If 
        status = -1
        Exit Sub 
      End If 
      ! Check for Inspection Issues
      If TicketHeader.InspectionInUseBy$
        temp$ = "Ticket # " + TicketHeader.TicketNo$ + " is marked as currently being inspected by:"
        temp$ = temp$ + "\15\\15\Inspector: " + SAICodesTableDesc$(ch_db,"Codes_WeighMaster","WeighMasterCode",TicketHeader.InspectionInUseBy$)
        temp$ = temp$ + "\15\\15\Do you wish to override this status?"
        ans = SAITouchYesNo(temp$,"Inspection in process")
        If ans = 0
          status = -1
          Exit Sub 
        Else 
          ! Clear status?
        End If 
      Else If TicketHeader.InspectionStatus$ = "R"
        Call RetrieveInYardItems(ItemCount)
        temp$ = "Inspector has indicated that this ticket should be REJECTED."
        If ItemCount And Items.[ItemNo].InspectedBy$
          temp$ = temp$ + "\15\\15\Inspector: " + SAICodesTableDesc$(ch_db,"Codes_WeighMaster","WeighMasterCode",Items.[ItemNo].InspectedBy$)
        End If 
        If TicketHeader.InspectionComment$
          temp$ = temp$ + "\15\\15\" + TicketHeader.InspectionComment$
        End If 
        Call SAITouchMessage(temp$,"Load Rejected by Inspector")
      Else If TicketHeader.InspectionComment$
        !Call DisplayInspectionComment(TicketHeader.InspectionStatus$)
        Call SAITouchMessage(TicketHeader.InspectionComment$,"Inspection Comment")
      End If 
      ! Mark OutBound RFID if it wasn't updated
      If RFID$ And TicketHeader.RFID$ = ""
        TicketHeader.RFID$ = RFID$
        TicketHeader.RFID_OutBound = 1
      End If 
      TicketNo$ = TicketHeader.TicketNo$
      TicketHeader.EntryDate# = RunDate#
      ! Get Supplier
      SupplierNo$ = TicketHeader.EntityNo$
      Call RetrieveSupplier(TicketHeader.EntityNo$,Supplier.,stat)
      If stat
        ans = SAITouchYesNo("Supplier record for supplier " + TicketHeader.EntityNo$ + " cannot be found.\15\\15\Do you wish to remove this entry (ID: " + TicketHeader.InYardID$ + ") from the InYard table?")
        If ans
          Call DeleteInYard(stat)
          If stat = 0
            Call SAITouchMessage("ID: " + TicketHeader.InYardID$ + " Successfully removed from InYard table.")
            If TicketAudit
              TransferMode = 0
              Call LoadTicketAuditHeader()
              TicketAudit.Event$ = "In-Yard deleted - Ticket already completed"
              Call WriteTicketAudit()
            End If 
          End If 
        End If 
        status = -1
        Exit Sub 
      End If 
      ! Get PO
      If Trim$(TicketHeader.OrderNo$) = "UNKNOWN"
        FullPONo$ = ""
      Else If Trim$(TicketHeader.OrderNo$)
        FullPONo$ = SAIFill$(TicketHeader.OrderNo$,"R"," ",10) + SAISpaceFill$(TicketHeader.OrderLine$,2)
        ktemp$ = SAISpaceFill$(TicketHeader.EntityNo$,6) + FullPONo$[1,10]
        Call SAIGetRecord(ch_1200,recdef_1200.,ktemp$,1,"Y","U",rtemp,POHeader$,POHeader[],stat,errmess$)
        If stat = 0
          If Trim$(POHeader$[214,216]) Let TicketHeader.Trader$ = Trim$(POHeader$[214,216])
        End If 
      Else 
        FullPONo$ = ""
      End If 
      ! Look for Identity Info
      Clear TicketIdentity.
      Search #ch_db;"SELECT * FROM Pur_Ticket_Identity WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
      If Chf(ch_db)
        Map Record #ch_db As Pur_Ticket_Identity
        Read Record #ch_db;TicketIdentity.
        If TicketHeader.EntityNo$[1,3] = "CP0"
          If TicketIdentity.CFCExpirationDate#
            Supplier.SignatureOnFile$ = "Y"
            Supplier.CFCFormDate# = TicketIdentity.CFCExpirationDate#
          End If 
        End If 
      End If 
      ! Get Items
      Call RetrieveInYardItems(ItemCount)
      If ItemCount
        If Items.[1].StkPileReq ! Check for StockPile
          If Items.[1].StockPile$
            ! Don't think we need to do this-> Items.[1].InventoryCode$=Items.[1].InventoryCode$[1,4]+"-"+Items.[1].StockPile$
          Else 
            Do 
              Call SelectStockPile(Items.[1].InventoryCode$,Items.[1].YardCode$,Branch$,Items.[1].StockPile$,"","R",ExitStatus)
              If ExitStatus = 0
                Exit Do 
              Else 
                status = -1
                Exit Sub 
              End If 
            Loop 
          End If 
        End If 
      End If 
      ! Determine if Transfer, Notice, or Dirt
      Clear Dirt$
      If TicketHeader.TktMode$ = "T"
        If TicketHeader.SrcTicketNo$
          ktemp$ = SAISpaceFill$(TicketHeader.SrcTicketNo$,6)
          Call SAIGetRecord(ch_8430ro,recdef_8430.,ktemp$,1,"Y","U",r,SalesTicket$,SalesTicket3[],SalesTicket4[],stat,errmess$)
          If stat = 0
            Source.AdjWt = SalesTicket3[6]
            Source.AdjCode$ = Trim$(SalesTicket$[121,121])
          Else 
            TicketHeader.SrcTicketNo$ = ""
            SalesTicket$ = ""
          End If 
        Else 
          SalesTicket$ = ""
        End If 
      Else If TicketHeader.Noticed
NoticedPurchase1: ! Check if Notice should have a contract (if no weight has been taken yet)
        If TicketHeader.EntityNo$[1,3] <> "CP0" And FullPONo$ = "" And (ItemCount = 0 Or Items.[1].GrossWt = 0)
          !        First determine if any contracts exist for Supplier (valid or invalid)
          If Supplier.PORequired
            e = 0
          Else 
            ktemp$ = SAISpaceFill$(TicketHeader.EntityNo$,6)
            Search #ch_1210ro,2,1;ktemp$,rtemp,e
          End If 
          If e = 0
            Call ListSupplierPOs(SupplierNo$,FullPONo$,status)
            If status = 0
              If Trim$(FullPONo$) = "UNKNOWN"
                TicketHeader.OrderNo$ = Trim$(FullPONo$)
                Clear FullPONo$,TicketHeader.OrderLine$,TicketHeader.ShippingInst$,TicketHeader.ShipOrdNo$
              Else If FullPONo$
                TicketHeader.OrderNo$ = Trim$(FullPONo$[1,10])
                TicketHeader.OrderLine$ = Trim$(FullPONo$[11,12])
                TicketHeader.ShipFromTo$ = Trim$(PODetail$[31,34])
                TicketHeader.ShippingInst$ = Trim$(PODetail$[66,95])
                TicketHeader.ShipOrdNo$ = Trim$(PODetail$[214,233])
                Call LoadContractMaterial("Y",status)
                If status Goto NoticedPurchase1
                If ItemCount = 1 And Items.[1].GrossWt = 0
                  Items.[1].TicketNo$ = TicketHeader.TicketNo$
                  Items.[1].ShipmentNo$ = TicketHeader.ShipmentNo$
                  Try 
                    Search #ch_db;"INSERT INTO InYard_Dtl (" + SQLN$(Items.[1]) + ") VALUES (" + SQLV$(Items.[1]) + ")"
                  Else 
                    Call SAITouchError("Error creating entry in InYard_Dtl table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
                    ItemCount = 0 \ Clear Items.[1]
                  End Try 
                End If 
                frt_hrs = 0
                ktemp$ = "P" + FullPONo$ + Rep$(" ",6)
                ksav$ = ktemp$
                Do 
                  Search #ch_1215ro,3,1;ktemp$,rtemp,e
                  If e Exit Do 
                  If ktemp$[1,Len(ksav$)] <> ksav$ Exit Do 
                  Call SAIReadRecord(ch_1215ro,recdef_1215.,"Y","U",rtemp,POFreight$,POFreight[],stat,errmess$)
                  If POFreight$[134,134] <> "Y" And POFreight$[268,268] <> "Y" And POFreight$[45,45] = TicketHeader.VehType$ ! Not flagged for delete AND not a processor AND Veh type match
                    If POFreight$[273,273] = "Y" ! Generic Carrier
                      If POFreight$[41,42] = "HR" Let frt_hrs = 1
                      Exit Do 
                    Else If POFreight$[33,38] = TicketHeader.CarrierNo$
                      If POFreight$[41,42] = "HR" Let frt_hrs = 1
                      Exit Do 
                    End If 
                  End If 
                Loop 
                If frt_hrs
                  If TicketHeader.CarrierNo$
                    ktemp$ = "C" + SAISpaceFill$(TicketHeader.CarrierNo$,6)
                  Else 
                    ktemp$ = "C" + POFreight$[33,38]
                  End If 
                  Call SAIGetRecord(ch_110Aro,recdef_110A.,ktemp$,1,"Y","U",rec_110A,ScrapCode$,ScrapCode[],stat,errmess$)
                  If ScrapSRecord$[111,111] = "Y" And Trim$(TicketHeader.TripTicketNo$) And ScrapCode$[116,116] <> "Y"
                    ! Don't prompt
                  Else 
                    Call GetFreightHours(TicketHeader.FreightHrs)
                  End If 
                End If 
              Else 
                Clear TicketHeader.OrderNo$,TicketHeader.OrderLine$
              End If 
            End If 
          End If 
        End If 
        If FullPONo$
          If TicketHeader.CarrierNo$ = ""
            VehicleType$ = TicketHeader.VehType$
            Call CarrierSelection(VehicleType$,VehicleSize$,FullPONo$,CarrierNo$,status)
          Else If TicketHeader.VehSize$ = ""
            VehicleType$ = TicketHeader.VehType$
            VehicleSize$ = ""
            Call VehicleSizeRequired(FullPONo$,VehicleSize$)
            If VehicleSize$ Let TicketHeader.VehSize$ = VehicleSize$
          End If 
        Else If ItemCount And Items.[ItemCount].MaterialCode$ = "999"
          If Items.[ItemCount].GrossWt = 0 Let Items.[ItemCount].MaterialCode$ = "" ! Blank out Material Code
        End If 
      Else ! Determine if Dirt Ticket
        If TicketHeader.TktMode$ = "D"
          Dirt$ = "Y"
        Else If ItemCount And Items.[1].DirtFlag
          Dirt$ = "Y"
          TicketHeader.TktMode$ = "D"
        End If 
      End If 
      If PhotoViewerTrigger$ Call SendPhotoViewerTrigger(PhotoViewerTrigger$,"TicketRecalled")
      ! Get Contract Line detail if present
      If FullPONo$
        ktemp$ = SAISpaceFill$(TicketHeader.EntityNo$,6) + FullPONo$
        Call SAIGetRecord(ch_1210ro,recdef_1210.,ktemp$,1,"Y","U",rtemp,PODetail$,PODetail[],stat,errmess$)
        If stat = 0
          TicketHeader.ShipOrdNo$ = Trim$(PODetail$[214,233])
          TicketHeader.ShippingInst$ = Trim$(PODetail$[66,95])
        Else 
          Call SAITouchError("Unable to access Purchase Order Detail for order " + TicketHeader.OrderNo$ + "-" + TicketHeader.OrderLine$)
        End If 
      End If 
      If MixUnloadMode$ = "Y" And Items.[1].MaterialCode$ = "*MIX" And TicketHeader.OrderNo$ And TicketHeader.OrderNo$ <> "UNKNOWN"
        Search #ch_db;"SELECT " + SQLN$(PurMixHdr.) + " FROM Pur_Mix_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
        nr = Chf(ch_db)
        If nr
          Map Record #ch_db As Pur_Mix_Hdr
          Read Record #ch_db;PurMixHdr.
          TicketTemp.MixUnload = 1
          If PurMixHdr.InUse
            PortNumber = PurMixHdr.InUsePort$
            InUse = SAICheckInUse(PortNumber,PurMixHdr.InUseBy$,"mixunload")
            If InUse Let TicketTemp.MixUnload = 2
          End If 
          If TicketTemp.MixUnload <> 2
            SQL$ = "UPDATE Pur_Mix_Hdr SET InUse=" + SQLV$(1) + ", InUseBy=" + SQLV$(user$) + ", InUsePort=" + SQLV$(Spc(6) Using "&&&&")
            SQL$ = SQL$ + " WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
            Try 
              Search #ch_db;SQL$
            Else 
              Call SAITouchError("Error updating entry in Pur_Mix_Hdr table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
            End Try 
          End If 
        Else 
          Clear PurMixHdr.
          PurMixHdr.TicketNo$ = TicketHeader.TicketNo$
          PurMixHdr.ShipmentDate# = TicketHeader.ShipmentDate#
          PurMixHdr.Branch$ = TicketHeader.Branch$
          PurMixHdr.SupplierNo$ = TicketHeader.EntityNo$
          PurMixHdr.PONo$ = TicketHeader.OrderNo$
          If POHeader$
            If POHeader$[181,181] = "Y" Let PurMixHdr.RecoveryMode = 1
          End If 
          Try 
            Search #ch_db;"INSERT INTO Pur_Mix_Hdr (" + SQLN$(PurMixHdr.) + ") VALUES (" + SQLV$(PurMixHdr.) + ")"
            TicketTemp.MixUnload = 1
          Else 
            Call SAITouchError("Error creating entry in Pur_Mix_Hdr table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
          End Try 
        End If 
      End If 
      ! Mark In-Use
      TicketHeader.InUse = 1
      TicketHeader.InUseBy$ = user$
      TicketHeader.InUsePort$ = Spc(6) Using "&&&&"
      Call UpdateInYardInUse(status)
      If status
        status = -1
        Exit Sub 
      End If 
    End If 
    ItemNo = ItemCount
    If TicketHeader.TktMode$ = "D"
      If ItemCount = 0
        Call PurchaseItem(ItemNo,"O",status)
      Else If ItemCount = 1
        If Items.[ItemCount].TareWt = 0
          Call PurchaseItem(ItemNo,"O",status)
        Else If Items.[ItemCount].GrossWt = 0
          Call PurchaseItem(ItemNo,"I",status)
        End If 
      Else If ItemCount > 1
        If Items.[ItemCount].GrossWt = 0 Call PurchaseItem(ItemNo,"I",status)
      End If 
    Else 
      If ItemCount = 0
        Call PurchaseItem(ItemNo,"I",status)
      Else If ItemCount = 1
        If Items.[ItemCount].GrossWt = 0
          Call PurchaseItem(ItemNo,"I",status)
        Else If Items.[ItemCount].TareWt = 0
          Call PurchaseItem(ItemNo,"O",status)
        End If 
      Else If ItemCount > 1
        If Items.[ItemCount].TareWt = 0 Call PurchaseItem(ItemNo,"O",status)
      End If 
    End If 
    Print PChr$(1,"Closing the session is not valid.");'ONCLOSE';
    Print 'CS';
    Print '12FONTSIZE EBOLD WCSETFONT';
    If TicketHeader.Noticed
      temp$ = "Noticed Purchase"
    Else If TicketHeader.TktMode$ = "T"
      temp$ = "In-Bound Transfer"
    Else If TicketHeader.TktMode$ = "D"
      temp$ = "Dirt Ticket"
    Else 
      temp$ = "Purchase"
    End If 
    Print @10,1;'BBOLD';temp$;'EBOLD';
    If RunDate$ <> SAIConvertDate$(Tim#(0)) Print PChr$(SAIColorRGB(255,0,0));'BACKCOLOR';
    Print @650,1;rundatetext$;
    Print PChr$(bgcolor);'BACKCOLOR';
    y0 = 20 \ y = y0
    Print PChr$("Courier New");'FONTFACE 8FONTSIZE WCSETFONT';
    Print PChr$(80,10,y,610,275,"",0);'WCTEXT';
    Print '80WCSELECT';PChr$(0,16777215);'WCSETCOLOR 0WCSELECT'; ! Set color to Black on White
    Print PChr$("Arial");'FONTFACE BBOLD WCSETFONT';
    Print PChr$(81,10,277,307,287,"",0);'WCTEXT';
    Print PChr$(82,313,277,610,287,"",0);'WCTEXT';
    Print '81WCSELECT';PChr$(16711680,16777215);'WCSETCOLOR'; ! Set color to Red on White
    Print '82WCSELECT';PChr$(16711680,16777215);'WCSETCOLOR'; ! Set color to Red on White
    Print '0WCSELECT';
    Print PChr$("Arial");'FONTFACE 12FONTSIZE EBOLD WCSETFONT';
    Bset = 1
    Call PurchaseButtons(Bset)
    Call DisplayTicket()
    Do 
      If Bset = 1
        If ItemCount = 0
          Print '3WCDISABLE 7WCDISABLE'; ! Edit Item & Ticket Complete
        Else If Dirt$ = "Y"
          Print '2WCDISABLE 3WCENABLE'; ! Add Item Disable, Edit Item Enable
          If Items.[ItemCount].GrossWt = 0
            Print '7WCDISABLE'; ! Ticket Complete
          Else 
            Print '7WCENABLE'; ! Ticket Complete
          End If 
        Else 
          Print '3WCENABLE';
          If Items.[ItemCount].TareWt = 0
            If TicketHeader.VehType$ = "B"
              Print '2WCDISABLE 7WCENABLE'; ! Add Item
            Else 
              Print '2WCDISABLE 7WCDISABLE'; ! Add Item & Ticket Complete
            End If 
          Else 
            If TicketHeader.TktMode$ = "T"
              If Items.[ItemCount].GrossWt = 0
                Print '2WCDISABLE 7WCDISABLE'; ! Add Item & Ticket Complete
              Else 
                Print '2WCDISABLE 7WCENABLE'; ! Add Item & Ticket Complete
              End If 
            Else 
              Print '2WCENABLE 7WCENABLE'; ! Add Item & Ticket Complete
            End If 
          End If 
          If Items.[1].MaterialCode$[1,4] = "*MIX" Print '2WCDISABLE';
        End If 
        If AllowMultipleItems$ <> "Y" And ItemCount <> 0
          Print '2WCDISABLE';
        Else If TicketHeader.OrderNo$ And TicketHeader.OrderLine$ <> "00" And ItemCount <> 0
          Print '2WCDISABLE';
        End If 
        If PhotoURL$ = "" Print '5WCDISABLE';
      End If 
Purchase_Input: !
      Input #-3; Len (1);w$
      Select Case w$
        Case 'F1' ! Ticket Info
          Call TicketInfo(status)
          Call DisplayTicket()
        Case 'F2' ! Add Item
          If ItemCount
            If AllowMultipleItems$ <> "Y"
              Call SAITouchWarning("Multiple item Tickets are not allowed.")
              Goto Purchase_Input
            Else If Dirt$ = "Y"
              Call SAITouchWarning("Cannot have multiple items on a Dirt Ticket.")
              Goto Purchase_Input
            Else If Items.[ItemCount].TareWt = 0
              Call SAITouchWarning("Cannot add an item until previous item has a Tare Weight.")
              Goto Purchase_Input
            Else If TicketHeader.TktMode$ = "T"
              Call SAITouchWarning("Cannot have multiple items on a Transfer Ticket.")
              Goto Purchase_Input
            Else If TicketHeader.OrderNo$ And TicketHeader.OrderLine$ <> "00"
              Call SAITouchWarning("Cannot have multiple items on a Contract Purchase Ticket.")
              Goto Purchase_Input
            Else If Items.[1].MaterialCode$[1,4] = "*MIX"
              Call SAITouchWarning("Cannot have multiple items on a *MIX Ticket.")
              Goto Purchase_Input
            End If 
          End If 
          ItemNo = 0
          MaterialCode$ = ""
          If ItemCount
            Call PurchaseItem(ItemNo,"O",status)
            If status = 0 Let TicketHeader.InspectionStatus$ = ""
          Else 
            Call PurchaseItem(ItemNo,"I",status)
          End If 
          If ItemCount > 0 Call DisplayTicket()
        Case 'F3' ! Edit Item
          If ItemCount = 0
            Call SAITouchMessage("No Items to edit.")
          Else If ItemCount = 1
            ItemNo = 1
            Call PurchaseItem(ItemNo,"E",status)
            If status = 0 Call DisplayTicket()
          Else 
            Call SAIKeyPad("Enter Item Number",ItemNo,3,status)
            If status = 0
              If ItemNo > 0 And ItemNo <= ItemCount
                Call PurchaseItem(ItemNo,"E",status)
                If status = 0 Call DisplayTicket()
              Else 
                Call SAITouchError("Invalid Item Number entered.")
              End If 
            End If 
          End If 
        Case 'F4' ! Ticket Comment
          temp$ = TicketHeader.TktComment$
          Call SAIKeyBoardGen("Enter Comment",KBParams.alphacase,50,0,temp$,status)
          If status = 0
            TicketHeader.TktComment$ = temp$
            Try Search #ch_db;"UPDATE InYard_Hdr SET TktComment=" + SQLV$(TicketHeader.TktComment$) + " WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) Else Rem
            Call DisplayTicket()
          End If 
        Case 'F5' ! View Photos
          Call SAIViewPhotos(TicketHeader.TicketNo$,Branch$,PhotoURL$,TicketHeader.ShipmentDate#)
        Case 'F6' ! Place In-Yard
          If ItemCount = 0
            ans = SAITouchYesNo("     Ticket has no material items.\15\Are you sure you wish to place In-Yard?")
            If ans = 0 Goto Purchase_Input
          End If 
          If TicketHeader.TktType$ = "R" And Items.[ItemCount].GrossWt And Items.[ItemCount].TareWt
            Call PreviewRetailTicket(status)
            If status = 1 Goto Purchase_Input
          End If 
          If UseYardZones$ = "Y"
            If YardZone$
              TicketHeader.YardZone$ = YardZone$
            Else 
              Clear ilist$[]
              For n = 1 To NumYardZones
                ilist$[n] = SAISpaceFill$(CodesYardZone.[n].YardZone$,2) + " - " + SAISpaceFill$(CodesYardZone.[n].Description$,26)
              Next n
              ilist$[n] = "UNKNOWN"
              Call SAITouchListSelect(9,500,"Select Yard Zone"," ZONE  DESCRIPTION",ilist$[],n,isel,stat)
              If stat Goto Purchase_Input
              If isel = n
                Clear TicketHeader.YardZone$
              Else 
                TicketHeader.YardZone$ = CodesYardZone.[isel].YardZone$
              End If 
            End If 
          End If 
          If PhotoViewerTrigger$ Call SAIPhotoViewerTrigger(PhotoViewerTrigger$,"TicketPlacedInYard","Ticket=" + TicketHeader.TicketNo$)
          Clear TicketHeader.InUse,TicketHeader.InUseBy$,TicketHeader.InUsePort$
          Call UpdateInYard(stat)
          If stat Goto Purchase_Input
          If TicketTemp.MixUnload = 1
            SQL$ = "UPDATE Pur_Mix_Hdr SET InUse=" + SQLV$(0) + ", InUseBy=" + SQLV$("") + ", InUsePort=" + SQLV$("")
            If ItemCount
              SQL$ = SQL$ + ", VehGrossWt=" + SQLV$(Items.[1].GrossWt) + ", VehTareWt=" + SQLV$(Items.[1].TareWt) + ", VehNetWt=" + SQLV$(Items.[1].NetWt)
            End If 
            SQL$ = SQL$ + " WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
            Try 
              Search #ch_db;SQL$
            Else 
              Call SAITouchError("Error updating entry in Pur_Mix_Hdr table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
            End Try 
          End If 
          NumCopies = InspectionTicketCopies
          If PrintInspectionTicket$ = "P"
            If InspectionTicketCopies > 1
              Call PromptInspectionTicket(ans,NumCopies)
            Else 
              ans = SAITouchYesNo("Print Inspection Ticket?")
            End If 
          Else If PrintInspectionTicket$ = "Y"
            ans = 1
          Else 
            ans = 0
          End If 
          If ans Call PrintTicket(InspectionTicketPrinter$,InspectionTicketPrinterType$,InspectionTicketForm$,NumCopies,"I",status)
          If (PrintMaterialCodeForm$ = "Y" Or PrintMaterialCodeForm$ = "P") And TicketHeader.TktMode$ <> "T" And Dirt$ <> "Y"
            If MaterialCodeFormFound()
              If PrintMaterialCodeForm$ = "P"
                ans = SAITouchYesNo("Print Material Specific Form?")
              Else 
                ans = 1
              End If 
              If ans Call PrintMaterialCodeForm(InspectionTicketPrinter$,InspectionTicketPrinterType$,status)
            End If 
          End If 
          Clear RFIDMaster.
          Exit Do 
        Case 'F7' ! Ticket Complete Action
          If ItemCount = 0
            Call SAITouchWarning("Ticket cannot be completed with no items.")
            Goto Purchase_Input
          Else If Dirt$ = "Y"
            If Items.[ItemCount].GrossWt = 0
              Call SAITouchWarning("Dirt Ticket cannot be completed with 0 Gross Weight.")
              Goto Purchase_Input
            End If 
          Else If Items.[ItemCount].TareWt = 0 And TicketHeader.VehType$ <> "B"
            Call SAITouchWarning("Ticket cannot be completed with 0 Tare Weight.")
            Goto Purchase_Input
          Else If TicketHeader.TktMode$ = "T" And Items.[ItemCount].GrossWt = 0
            Call SAITouchWarning("Ticket cannot be completed with 0 Gross Weight.")
            Goto Purchase_Input
          End If 
          If TicketHeader.EntityNo$ = "999999" Or Trim$(TicketHeader.EntityNo$) = ""
            Call SAITouchWarning("Ticket cannot be completed with Supplier No = 999999.")
            Goto Purchase_Input
          Else If Trim$(TicketHeader.VehType$) = "" Or Trim$(TicketHeader.VehNo$) = ""
            Call SAITouchWarning("Ticket cannot be completed without Vehicle Type or Number.")
            Goto Purchase_Input
          Else If Trim$(TicketHeader.OrderNo$) = "" And Trim$(TicketHeader.CarrierNo$) <> "" And NonContractCarrierHandling$ = "PREVENT" And TicketHeader.TktMode$ <> "T"
            Call SAITouchWarning("Ticket cannot be completed with a Carrier selected but no contract specified.")
            Goto Purchase_Input
          Else If (z$[644,646] = "255" Or z$[644,646] = "355") And (Supplier.SupplierInvoiceReqd$ = "D" Or Supplier.SupplierInvoiceReqd$ = "B") And Trim$(TicketHeader.SuppInvNo$) = ""
            Call SAITouchWarning("Supplier Invoice No. required.\15\Ticket cannot be completed.")
            Goto Purchase_Input
          End If 
          If DateUsing$(TicketHeader.ShipmentDate#,"YYYYMMDD") > FuturePeriodEnd$
            ans = SAITouchYesNo("Shipment Date is greater than the Future Period End Date.\15\\15\Is this correct?","Shipment Date Warning")
            If ans = 0 Goto Purchase_Input
          End If 
          If Trim$(TicketHeader.OrderNo$) <> "" And Trim$(TicketHeader.OrderNo$) <> "UNKNOWN"
            If TicketHeader.VehType$ <> PODetail$[38,38] And TicketHeader.VehType$ <> PODetail$[48,48]
              Call SAITouchWarning("Vehicle Type does not match contract.\15\Ticket cannot be completed.")
              Goto Purchase_Input
            End If 
          End If 
          If Trim$(TicketHeader.OrderNo$) = "UNKNOWN" And z$[644,646] = "352" ! General Iron
            Call SAITouchWarning("Ticket cannot be completed with an UNKNOWN contract.")
            Goto Purchase_Input
          End If 
          If MixUnloadMode$ = "Y" And Items.[1].MaterialCode$[1,2] = "*M"
            If Trim$(TicketHeader.OrderNo$) = "UNKNOWN"
              Call SAITouchWarning("Cannot complete a *MIX ticket with an UNKNOWN contract.")
              Goto Purchase_Input
            Else If TicketHeader.CarrierNo$ = ""
              FullPONo$ = SAIFill$(TicketHeader.OrderNo$,"R"," ",10) + SAISpaceFill$(TicketHeader.OrderLine$,2)
              Call CarrierOptions(TicketHeader.VehType$,FullPONo$,k$,count)
              If count
                Call SAITouchWarning("Cannot complete a *MIX ticket without a Carrier.")
                Goto Purchase_Input
              End If 
            End If 
          End If 
          For i = 1 To ItemCount
            If Trim$(Items.[i].MaterialCode$) = "999" Or Trim$(Items.[i].MaterialCode$) = ""
              Call SAITouchWarning("Ticket cannot be completed with Material Code = 999.")
              Goto Purchase_Input
            Else If Items.[i].StkPileReq And Trim$(Items.[i].StockPile$) = ""
              Call SAITouchWarning("A StockPile must be selected on item " + Str$(i))
              Goto Purchase_Input
            End If 
          Next i
          If (RequireVINonCarBodyMaterial$ = "Y" Or RequireVINonCarBodyMaterial$ = "W") And TicketHeader.TktMode$ <> "T" And Dirt$ <> "Y"
            Search #ch_db;"SELECT VIN FROM Pur_Ticket_VIN WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
            If Chf(ch_db) = 0
              SQL$ = "SELECT CarBody FROM Purchase_Material_Price WHERE SupplierNo=" + SQLV$("CP000*")
              If ItemCount = 1
                SQL$ = SQL$ + " AND MaterialCode=" + SQLV$(Items.[1].MaterialCode$)
              Else 
                SQL$ = SQL$ + " AND MaterialCode IN (" + SQLV$(Items.[1].MaterialCode$)
                For i = 2 To ItemCount
                  SQL$ = SQL$ + "," + SQLV$(Items.[i].MaterialCode$)
                Next i
                SQL$ = SQL$ + ")"
              End If 
              SQL$ = SQL$ + " AND Branch=" + SQLV$(Branch$)
              SQL$ = SQL$ + " AND CarBody=" + SQLV$("Y")
              Search #ch_db;SQL$
              If Chf(ch_db)
                If RequireVINonCarBodyMaterial$ = "Y"
                  Call SAITouchWarning("VIN detail is required on this ticket.")
                  Goto Purchase_Input
                Else 
                  ans = SAITouchYesNo("VIN detail is required on this ticket.\15\\15\Are you sure you want to complete without it?")
                  If ans = 0 Goto Purchase_Input
                End If 
              End If 
            End If 
          End If 
          If TicketHeader.TktType$ <> "R" And (TicketHeader.InspectionStatus$ = "" Or TicketHeader.InspectionStatus$ = "I")
            If Supplier.HandInspect$
              Select Case Supplier.HandInspect$
                Case "W" ! Warn
                  ans = SAITouchYesNo("In-Yard Inspection is recommended for this Supplier.\15\\15\Are you sure you want to complete without it?")
                  If ans = 0 Goto Purchase_Input
                Case "R" ! Require
                  Call SAITouchWarning("In-Yard Inspection is required for this Supplier.")
                  Goto Purchase_Input
                Case Else 
                  ! Do nothing
              End Select 
            Else If RequireInspection$ <> "N"
              If RequireInspection$ = "Y"
                Call SAITouchWarning("In-Yard Inspection is required on this ticket.")
                Goto Purchase_Input
              Else 
                ans = SAITouchYesNo("In-Yard Inspection is required on this ticket.\15\\15\Are you sure you want to complete without it?")
                If ans = 0 Goto Purchase_Input
              End If 
            End If 
          End If 
          If SunValley And TicketHeader.EntityNo$ = SV_SupplierNo$
            If TicketHeader.LAInfo_DriversName$ = ""
              Do 
                Call SAITouchWarning("Driver Info must be entered.")
                Call GetSVLAInfo(status)
                If status Goto Purchase_Input
              Loop Until TicketHeader.LAInfo_DriversName$
            End If 
          End If 
          If Trim$(TicketHeader.OrderNo$) <> "" And Trim$(TicketHeader.OrderNo$) <> "UNKNOWN"
            FullPONo$ = SAIFill$(TicketHeader.OrderNo$,"R"," ",10) + SAISpaceFill$(TicketHeader.OrderLine$,2)
            ktemp$ = SAISpaceFill$(TicketHeader.EntityNo$,6) + FullPONo$
            Call SAIGetRecord(ch_1210ro,recdef_1210.,ktemp$,1,"Y","U",r1,PODetail$,PODetail[],stat,errmess$)
            If stat = 0 ! Let contract override Supplier values if present
              If Trim$(PODetail$[198,198]) Let Supplier.TaxableFlag$ = PODetail$[198,198] ! tax flag from PO
              If Trim$(PODetail$[199,199]) Let Supplier.TaxJurisdiction$ = PODetail$[199,199] ! tax juris from PO
            End If 
            If TicketHeader.Noticed And TicketHeader.CarrierNo$ = ""
              VehicleType$ = TicketHeader.VehType$
              Call CarrierOptions(VehicleType$,FullPONo$,k$,count)
              If count
                Call SAITouchWarning("A Carrier is required on this contract purchase.")
                Goto Purchase_Input
              End If 
            End If 
          End If 
          If TicketHeader.FreightHrs < 0
            ans = SAITouchYesNo("          Freight Hours are required but set to zero.\15\Are you sure you wish to complete ticket with zero Freight Hours?")
            If ans = 0 Goto Purchase_Input
            TicketHeader.FreightHrs = 0
          End If 
          If RequireAxleCount$ = "Y" And TicketHeader.AxleCount = 0
            Do 
              Call SAIKeyPad("Enter Total Axle Count **REQUIRED**",TicketHeader.AxleCount,3,status)
              If status Goto Purchase_Input
              If TicketHeader.AxleCount > 127 Let TicketHeader.AxleCount = 0
            Loop Until TicketHeader.AxleCount
          End If 
          If (RequireTicketComment$ = "Y" Or RequireTicketComment$ = "P") And TicketHeader.TktComment$ = ""
            Call SAITouchWarning("You are required to enter a Ticket Comment before completing.")
            Goto Purchase_Input
          End If 
          If Trim$(TicketHeader.OrderNo$) <> "" And Trim$(TicketHeader.OrderNo$) <> "UNKNOWN"
            If PODetail$[292,292] = "Y" Or PODetail$[293,293] = "Y" ! ReqAlloyPct OR ReqShipWt
              Call GetPurchaseReqdFields(status)
              If status Goto Purchase_Input
            End If 
          End If 
          If ((SupplierShipNoPrompt$ = "R" And Supplier.SuppShipNoHandling$ <> "N") Or (Supplier.SuppShipNoHandling$ = "R" Or Supplier.SuppShipNoHandling$ = "S" Or Supplier.SuppShipNoHandling$ = "V")) And TicketHeader.OrderNo$ And TicketHeader.SuppShipNo$ = ""
            Do 
              w$ = ""
              Call SAIKeyBoardGen("Enter Supplier Shipment No. (Required)",KBParams.alphacase,10,0,w$,stat)
              w$ = Trim$(w$)
              If stat
                Exit Do 
              Else If w$ = ""
                Call SAITouchWarning("You are required to enter a Supplier Shipment No. before completing.")
              Else 
                If Supplier.SuppShipNoHandling$ = "S" Or Supplier.SuppShipNoHandling$ = "V"
                  Call ValidateSupplierShipmentNo(w$,stat)
                End If 
                If stat = 0
                  TicketHeader.SuppShipNo$ = w$
                  Exit Do 
                End If 
              End If 
            Loop 
            If stat Goto Purchase_Input
          End If 
          If SAITableExists(ch_db,"Pur_Ticket_Hdr") = 0
            Try Close #ch_db Else Rem
            Call SAIOpenDatabase(ch_db,status,errmess$)
            If status = 0
              DBConnectionTime# = Tim#(0)
              Call WriteLogFile("Database connection re-established in Purchase Ticket Complete routine.")
            Else 
              Call WriteLogFile("Database connection COULD NOT re-established in Purchase Ticket Complete routine.")
              Call SAITouchError("Unable to access database.  Ticket Cannot be completed.")
              DBConnectionTime# = Tim#(0) - 36000 ! Force a re-open in main loop
              Goto Purchase_Input
            End If 
          End If 
          SupplierVCode$ = "" \ RequireID = 0
          If TicketHeader.TktMode$ <> "T" And Dirt$ <> "Y" And (RequireIdentity$ <> "N" Or (SupplierNo$[1,3] = "CP0" And PeddlerInfoPrompt$ = "Y"))
            If RequireIdentity$ = "Y"
              RequireID = 1
            Else If RequireIdentity$ = "V"
              RequireID = GetReqAdvIdentityValue(ch_db,Supplier.MiscSupplierType$)
              If RequireID
                If GetComplianceDocOnFile(ch_db,Supplier.SupplierNo$)
                  If RequireID = 2 ! Not required if compliance document on file
                    RequireID = 0
                  Else If Supplier.DoNotPay$ = "S" Or Supplier.DoNotPay$ = "R" ! Do not pay at scale or cash
                    RequireID = 0
                  End If 
                End If 
                If RequireID = 0
                  Call SAITouchMessage("Identity not required for this supplier.")
                End If 
              End If 
              If RequireID Let SupplierVCode$ = "Y"
            Else If SupplierNo$[1,3] = "CP0" And PeddlerInfoPrompt$ = "Y"
              RequireID = 1
            End If 
            If RequireID
              Call AdvancedIdentityInfo(status)
              If status
                Call SAITouchWarning("Identity Information is required.")
                Goto Purchase_Input
              Else If PhotoViewerTrigger$
                Call SendPhotoViewerTrigger(PhotoViewerTrigger$,"IdentityChanged")
              End If 
            End If 
          End If 
          If (ReviewPhotos$ = "Y" Or ReviewPhotos$ = "A") And RequireID
            Call SAIViewPhotos(TicketHeader.TicketNo$,Branch$,PhotoURL$,TicketHeader.ShipmentDate#)
            ans = SAITouchYesNo("Are photos complete and acceptable?")
            If ans = 0 Goto Purchase_Input
          End If 
          If TicketHeader.TktType$ = "R"
            Call CompleteRetailTicket(status)
            If status Goto Purchase_Input
          End If 
          If ScrapSRecord$[78,78] = "Y" And TicketHeader.TktMode$ <> "T"
            Call TaxOptions(status)
            If status
              If TicketHeader.TktType$ = "R" ! Put ticket structure back to normal *MIX single item
                Call ResetMIXRetailTicket()
              End If 
              Goto Purchase_Input
            End If 
          End If 
          If TicketCopyAlternateUnit$[0] = "Y"
            Try 
              Search #ch_db;"SELECT ExchangeRate FROM Exchange_Rate WHERE FromCurrencyCode=" + SQLV$(AltCurrencyCode$) + " AND EffectiveDate=" + SQLD$(TicketHeader.ShipmentDate#)
              Read #ch_db;ExchangeRate;
            Else 
              ExchangeRate = 0
            End Try 
            If ExchangeRate = 0
              errmess$ = "Exchange Rate not found for Currency Code " + AltCurrencyCode$ + " and Shipment Date of " + DateUsing$(TicketHeader.ShipmentDate#,dateformat$) + "."
              errmess$ = errmess$ + "\15\\15\Ticket cannot be completed."
              Call SAITouchWarning(errmess$)
              Goto Purchase_Input
            End If 
          End If 
          FreightOption$ = ""
          If NonContractCarrierHandling$ And Trim$(TicketHeader.OrderNo$) = "" And Trim$(TicketHeader.CarrierNo$) <> "" And TicketHeader.TktMode$ <> "T" And Dirt$ <> "Y"
            k$ = "C" + SAISpaceFill$(TicketHeader.CarrierNo$,6)
            Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
            If stat
              Call SAITouchError("Cannot find Carrier record for Carrier No. " + TicketHeader.CarrierNo$)
              Goto Purchase_Input
            End If 
            !        if ScrapCode$[118,118]="Y" OR (ScrapCode$[116,116]="Y" AND ScaleCodes$[27,27]<>"Y") ! Trip Ticket required
            If ScrapCode$[118,118] <> "Y" Or ScrapCode$[116,116] = "Y" ! No non-third party trip ticket
              Select Case NonContractCarrierHandling$
                Case "ASK"
                  FreightOption$ = "" \ status = 0
                  ans = SAITouchYesNo("A Carrier has been selected on this ticket.\15\\15\Should a freight charge be calculated?")
                  If ans
                    If ScrapCode$[119,119] = "Y" ! Our Truck flag
                      FreightOption$ = "S"
                    Else 
                      chfrt = SAIOpenWindow("Select freight option",550,185,1)
                      Print #chfrt;PChr$("Arial");'FONTFACE 12FONTSIZE WCSETFONT';
                      x = 50 \ bw = 450 \ bh = 30 \ y = 10
                      Print #chfrt;PChr$(1,x,y,x + bw,y + bh,"Pay freight to Supplier",2);'WCBUTTON';
                      y = y + bh + 15
                      Print #chfrt;PChr$(2,x,y,x + bw,y + bh,"Pay freight to Carrier",2);'WCBUTTON';
                      y = y + bh + 15
                      Print #chfrt;PChr$(3,x,y,x + bw,y + bh,"Pay freight to Carrier and deduct from Supplier",2);'WCBUTTON';
                      y = y + bh + 15
                      Print #chfrt;PChr$(4,200,y,350,y + bh,"Cancel",2);'WCBUTTON';
                      Print #chfrt;'4WCFOCUS';
                      Do 
                        Input #chfrt; Len (1);w$
                        Select Case w$
                          Case 'F1' ! Pay Supplier
                            FreightOption$ = "S"
                            Exit Do 
                          Case 'F2' ! Pay Carrier
                            FreightOption$ = "C"
                            Exit Do 
                          Case 'F3' ! Pay Carrier and deduct
                            FreightOption$ = "D"
                            Exit Do 
                          Case 'F4' ! Cancel
                            status = 1
                            Exit Do 
                        End Select 
                      Loop 
                      Close #chfrt
                      If status Goto Purchase_Input
                      If FreightOption$ = "C" Or FreightOption$ = "D"
                        ktemp$ = "C" + TicketHeader.TicketNo$[2,6]
                        Search #ch_8330ro,2,1;ktemp$,r,e
                        If e = 0
                          Call SAITouchWarning("Carrier Ticket already exists.  No freight will be calculated.")
                          FreightOption$ = ""
                        End If 
                      End If 
                    End If 
                  End If 
                Case "SUPPLIER"
                  FreightOption$ = "S"
                Case "CARRIER"
                  FreightOption$ = "C"
                Case "DEDUCT"
                  FreightOption$ = "D"
              End Select 
              If FreightOption$ <> "" And ScrapCode$[72,72] = "A" And TicketHeader.ShipFromTo$ = "" ! Pick Ship From if Alternate rate Carrier
                Call SelectSupplierLocation(status)
                If status Goto Purchase_Input
              End If 
            End If 
          End If 
          If gbl.LevyMode$ = "Y" And TicketHeader.TktMode$ <> "T" !AND TicketHeader.TktType$<>"R"
            Call LevyCalculation()
          End If 
          If AutoStartMixTicketOption$ = "Y"
            If TicketHeader.TktMode$ = "T" Or Dirt$ = "Y" Or TicketHeader.Noticed
              mixopt = 0
            Else If Trim$(TicketHeader.OrderNo$)
              mixopt = 0
            Else If Items.[1].MaterialCode$ = "*MIX"
              mixopt = 0
            Else 
              mixopt = 1
            End If 
          Else 
            mixopt = 0
          End If 
          x = 50 \ bw = 150 \ bh = 30 \ y = 10 \ space = 15 \ ysize = 140
          If mixopt Let ysize = ysize + bh + space
          chcmp = SAIOpenWindow("Complete Ticket",250,ysize,1)
          Print #chcmp;PChr$("Arial");'FONTFACE 12FONTSIZE WCSETFONT';
          Print #chcmp;PChr$(1,x,y,x + bw,y + bh,"Print Ticket",2);'WCBUTTON';
          y = y + bh + space
          pmtopt = 2
          If NumPaymentMethods = 0 Or TicketHeader.TktMode$ = "T" Or Dirt$ = "Y" Or TicketHeader.Noticed
            pmtopt = 1 ! Disable
          Else If UnpricedItem = 1
            pmtopt = 1
          Else If Trim$(TicketHeader.OrderNo$) <> ""
            pmtopt = 1
          Else If Trim$(TicketHeader.CarrierNo$) <> "" And FreightOption$ <> "C"
            pmtopt = 1
          Else If Supplier.DoNotPay$ = "Y" Or Supplier.DoNotPay$ = "B" Or Supplier.DoNotPay$ = "S"
            pmtopt = 1
          Else If Supplier.SupplierInvoiceReqd$ = "Y" ! Vendor Invoice required, can't pay at scale
            pmtopt = 1
          Else If (z$[644,646] = "255" Or z$[644,646] = "355") And (Supplier.SupplierInvoiceReqd$ = "M" Or Supplier.SupplierInvoiceReqd$ = "B")
            pmtopt = 1
          Else If Supplier.IntercompanyType$ = "X" Or Supplier.IntercompanyType$ = "Y"
            ktemp$ = "e" + SAISpaceFill$(Supplier.IntercompanyCode$,1)
            Call SAIGetRecord(ch_110Aro,recdef_110A.,ktemp$,1,"Y","U",rec_110A,ScrapCode$,ScrapCode[],stat,errmess$)
            If ScrapCode$[45,45] = "Y" Let pmtopt = 1
            !      else if ScrapSRecord$[78,78]="Y" AND Supplier.TaxableFlag$<>" " ! GST/PST enabled and being calculated
            !        pmtopt=1
          End If 
          temp$ = "Pay Ticket"
          If NumPaymentMethods = 1 Let temp$ = PaymentMethods$[1] + " Payment"
          Print #chcmp;PChr$(2,x,y,x + bw,y + bh,temp$,pmtopt);'WCBUTTON';
          If mixopt
            y = y + bh + space
            Print #chcmp;PChr$(3,x,y,x + bw,y + bh,"Start *MIX Ticket",2);'WCBUTTON';
          End If 
          y = y + bh + space
          Print #chcmp;PChr$(4,x,y,x + bw,y + bh,"Cancel",2);'WCBUTTON';
          Print #chcmp;'1WCFOCUS';
          TicketTotals.TotalPaid = 0
          Do 
            Input #chcmp; Len (1);w$
            buildmixticket = 0
            Select Case w$
              Case 'F1','F3' ! Print Ticket or Start *MIX
                If mixopt And w$ = 'F3' Let buildmixticket = 1
                status = 0
                If RequireIdentity$ = "N"
                  If SupplierNo$[1,3] = "CP0" And Trim$(TicketIdentity.TicketNo$) = "" And PeddlerInfoPrompt$ = "Y"
                    Call AdvancedIdentityInfo(status)
                    If status = 0 And PhotoViewerTrigger$
                      Call SendPhotoViewerTrigger(PhotoViewerTrigger$,"IdentityChanged")
                    End If 
                  End If 
                End If 
                If status = 0 Exit Do 
              Case 'F2' ! Payment
                If pmtopt = 2
                  Print #chcmp;PChr$(1,3);'WCDISABLE';
                  Call PayTicket(status)
                  If status = 0
                    mixopt = 0
                    Exit Do 
                  Else 
                    Print #chcmp;PChr$(1,3);'WCENABLE';
                  End If 
                End If 
              Case 'F4' ! Cancel
                status = 1
                Exit Do 
            End Select 
          Loop 
          Try Close #chcmp Else Rem
          If status = 0
            If PhotoViewerTrigger$
              Call SAIPhotoViewerTrigger(PhotoViewerTrigger$,"TicketCompleted","Ticket=" + TicketHeader.TicketNo$)
              If TicketHeader.PaymentCode$
                Call SAIPhotoViewerTrigger(PhotoViewerTrigger$,"PaymentCaptured","Ticket=" + TicketHeader.TicketNo$)
              End If 
            End If 
            Call WritePurchaseTicket()
            Call PrintTicket(TicketPrinter$,TicketPrinterType$,TicketForm$,TicketCopies,"",status)
            If TicketHeader.PaymentCode$ And PaymentTypes$[PayType] = "CASH" And CashEnvelopePrinter$ Call PrintCashEnvelope()
            LastTicket$ = TicketHeader.TicketNo$
            If TicketAudit
              Call LoadTicketAuditHeader()
              If TicketHeader.PaymentCode$
                TicketAudit.PaymentType$ = PaymentMethods$[PayType]
                TicketAudit.BankCode$ = Trim$(TicketHeader.BankCode$)
                TicketAudit.PaymentNo$ = Trim$(TicketHeader.PaymentNo$)
                TicketAudit.Event$ = "Ticket Completed/Paid"
              Else 
                TicketAudit.Event$ = "Ticket Completed"
              End If 
              Call WriteTicketAudit()
            End If 
            If Supplier.SuppShipNoHandling$ = "S"
              Clear InterfaceSuppShipNo.
              InterfaceSuppShipNo.TicketNo$ = TicketHeader.TicketNo$
              InterfaceSuppShipNo.ShipmentDate# = TicketHeader.ShipmentDate#
              InterfaceSuppShipNo.SupplierNo$ = TicketHeader.EntityNo$
              InterfaceSuppShipNo.SuppShipNo$ = TicketHeader.SuppShipNo$
              Try 
                Search #ch_db;"INSERT INTO Interface_SuppShipNo(" + SQLN$(InterfaceSuppShipNo.) + ") VALUES (" + SQLV$(InterfaceSuppShipNo.) + ")"
              Else If Spc(8) = 236
                Try 
                  Search #ch_db;"UPDATE Interface_SuppShipNo SET " + SQLNV$(InterfaceSuppShipNo.) + " WHERE TicketNo=" + SQLV$(InterfaceSuppShipNo.TicketNo$) + " AND ShipmentDate=" + SQLD$(InterfaceSuppShipNo.ShipmentDate#)
                Else 
                End Try 
              End Try 
            End If 
            If PurchaseTicketSigID And TicketHeader.TktMode$ <> "T" And Dirt$ <> "Y" And (TicketTotals.TotalPaid = 0 Or PaymentSigID = 0)
              ans = SAITouchYesNo("Capture Ticket Signature?")
              If ans
                temp$ = "sigcap ticket_nbr=<" + TicketHeader.TicketNo$ + "> sig_id=<" + Str$(PurchaseTicketSigID) + "> location=<" + Branch$ + ">"
                temp$ = temp$ + " transaction_type=<P> event_code=<SIGNATURE> branch_code=<" + Branch$ + ">"
                temp$ = temp$ + " cust_nbr=<" + TicketHeader.EntityNo$ + "> cust_name=<" + Trim$(TicketHeader.Name$) + ">"
                temp$ = temp$ + "  app_date_time=<" + DateUsing$(Tim#(0),"YYYY-MM-DD HH:NN:SS") + "> initials=<" + WeighMaster$ + ">"
                If TicketHeader.EntityNo$[1,3] = "CP0"
                  If TicketIdentity.FirstName$ Let temp$ = temp$ + " first_name=<" + TicketIdentity.FirstName$ + ">"
                  If TicketIdentity.LastName$ Let temp$ = temp$ + " last_name=<" + TicketIdentity.LastName$ + ">"
                  If TicketIdentity.EmailAddress$ Let temp$ = temp$ + " email=<" + TicketIdentity.EmailAddress$ + ">"
                  If TicketIdentity.PhoneNo$
                    temp$ = temp$ + " phone=<" + TicketIdentity.PhoneNo$ + ">"
                  Else If TicketIdentity.PhoneNo2$
                    temp$ = temp$ + " phone=<" + TicketIdentity.PhoneNo2$ + ">"
                  End If 
                End If 
                temp$ = temp$ + "!"
                Do 
                  Call SAICaptureSignature(SignaturePad$,temp$,stat,errmess$)
                  If stat
                    If stat < 0 Let errmess$ = "No Signature received."
                    w$ = SAITouchGeneric$("Signature Capture",errmess$,2,"&&&Retry~&Cancel","RC")
                    If w$ = "C" Exit Do 
                  Else 
                    Exit Do 
                  End If 
                Loop 
              End If 
            End If 
            ! Auto Email Buyer
            If TicketHeader.TktType$ <> "R" And (EmailWtAdjOverToleranceAction$ <> "N" Or EmailWtAdjWithinToleranceAction$ <> "N")
              Clear TicketHasWtAdj,WtAdjOverTolerance
              For i = 1 To ItemCount
                If Items.[i].AdjWt
                  TicketHasWtAdj = 1
                  If EmailWtAdjTolerance
                    If Abs(Items.[i].AdjWt) >= EmailWtAdjTolerance
                      WtAdjOverTolerance = 1
                      Exit For 
                    End If 
                  End If 
                  If EmailWtAdjPercentTolerance And Items.[i].NetWt
                    If Abs(Items.[i].AdjWt / Items.[i].NetWt) * 100 >= EmailWtAdjPercentTolerance
                      WtAdjOverTolerance = 1
                      Exit For 
                    End If 
                  End If 
                End If 
              Next i
              If WtAdjOverTolerance
                If EmailWtAdjOverToleranceAction$ = "A"
                  Call EmailBuyer("","Weight Adjustment over tolerance.")
                Else If EmailWtAdjOverToleranceAction$ = "P"
                  ans = SAITouchYesNo("Weight Adjustment over tolerance, Email Buyer?")
                  If ans
                    Call EmailBuyer("I","Weight Adjustment over tolerance.")
                  End If 
                End If 
              Else If TicketHasWtAdj
                If EmailWtAdjWithinToleranceAction$ = "A"
                  Call EmailBuyer("","Weight Adjustment under tolerance.")
                Else If EmailWtAdjWithinToleranceAction$ = "P"
                  ans = SAITouchYesNo("Weight Adjustment under tolerance, Email Buyer?")
                  If ans
                    Call EmailBuyer("I","Weight Adjustment under tolerance.")
                  End If 
                End If 
              End If 
            End If 
            ! Email Ticket
            If SCL_PTkt_EmailAlert And EmailPurchaseTickets$ = "Y"
              Call SAIGetEmailAlertAddresses(ch_db,"SCL_PTkt",TicketHeader.EntityNo$,EmailToList$,EmailCCList$,FromAddress$,status,errmess$)
              If status = 0
                EmailString$ = "From=" + FromAddress$ + ",To=" + EmailToList$
                If EmailCCList$ Let EmailString$ = EmailString$ + ",CC=" + EmailCCList$
                EmailString$ = EmailString$ + ",Subject=''Ticket # " + TicketHeader.TicketNo$ + " for " + TicketHeader.EntityNo$ + " from " + Trim$(Company$[63,92]) + "''"
                EmailString$ = EmailString$ + ",Msg=See attached.\15\\15\"
                Call Env(2,"DPEMAIL",EmailString$)
                Call PrintTicket("email","LASER",TicketForm$,1,"",status)
              End If 
            End If 
            If (FreightOption$ = "C" Or FreightOption$ = "D") And CTicketCopies > 0
              Call PrintCTicket("C" + TicketNo$[2],TicketPrinter$,TicketPrinterType$,CTicketCopies,"",status)
            End If 
            If buildmixticket Call CreateNewMIXTicket() ! Create new *MIX ticket
            ! Material Specific Form
            If PrintMaterialCodeForm$ = "P" And TicketHeader.TktMode$ <> "T" And Dirt$ <> "Y"
              If MaterialCodeFormFound()
                ans = SAITouchYesNo("Print Material Specific Form?")
                If ans Call PrintMaterialCodeForm(InspectionTicketPrinter$,InspectionTicketPrinterType$,status)
              End If 
            End If 
            Exit Do 
          Else 
            If TicketHeader.TktType$ = "R" Call ResetMIXRetailTicket() ! Put ticket structure back to normal *MIX single item
            Clear LevyItems.[],LevyItemCount,TicketTotals. ! Restore Levy and TicketTotals
            For i = 1 To ItemCount
              Call TotalTicketItem(i)
            Next i
          End If 
        Case 'F8' ! More
          Bset = 2
          Call PurchaseButtons(Bset)
        Case 'F10' ! Back
          Bset = 1
          Call PurchaseButtons(Bset)
        Case 'F11' ! Capture Photo
          If z$[644,646] = "323" And TicketHeader.EntityNo$[1,3] = "CP0" ! SA Recycling - Peddler
            temp$ = ""
          Else 
            temp$ = TicketHeader.Name$
          End If 
          Call SAICapturePhoto(CameraDefs$[],TicketHeader.TicketNo$,"P",Branch$,TicketHeader.EntityNo$,temp$,WeighMaster$,PhotoCaptured)
          If PhotoCaptured Let TicketHeader.Photo = 1
        Case 'F12' ! Email Buyer
          Call EmailBuyer("I","") ! Interactive mode
        Case 'F13' ! VIN Detail
          Call SAIVinDetail(ch_db,TicketHeader.TicketNo$,TicketHeader.ShipmentDate#,ConfigFile$)
        Case 'F14' ! Void Ticket
          If WMVoid$ = "N"
            Call SAITouchWarning("You are not authorized to VOID In-Yard tickets.")
          Else 
            status = 0
            If MixUnloadMode$ = "Y" And TicketTemp.MixUnload
              If TicketTemp.MixUnload = 2
                Call SAITouchWarning("Ticket is currently in use by the Mix Unload program and cannot be VOIDED.")
                status = 1
              Else 
                Search #ch_db;"SELECT TicketNo FROM Pur_Mix_Lot WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
                nr = Chf(ch_db)
                If nr
                  Call SAITouchWarning("Ticket has already been partially unloaded.  Cannot VOID.")
                  status = 1
                End If 
              End If 
            End If 
            If status = 0
              ans = SAITouchYesNo("Are you sure you want to VOID this ticket?")
              If ans
                Call VoidInYard(status)
                If status = 0
                  If PhotoViewerTrigger$ Call SAIPhotoViewerTrigger(PhotoViewerTrigger$,"TicketVoided","Ticket=" + TicketHeader.TicketNo$)
                  Exit Do 
                End If 
              End If 
            End If 
          End If 
        Case 'F60' ! Certification Info
          Call CertificationInfo()
        Case 'F61' ! Config File Info
          Call ConfigFileInfo()
        Case 'F62' ! Display Files
          Call SAIChannelDisplay()
        Case 'F63' ! Version
          Call SAIVersion(ident$,Msc$(9))
      End Select 
    Loop 
    status = 0
  Else 
    If Err 0 Stop 
    errmess$ = "Error " + Str$(Spc(8)) + " at line " + Str$(Spc(10)) + " in program " + Msc$(4) + ".\15\" + Msc$(2)
    Try Let errmess$ = errmess$ + "\15\" + "Actual Line: " + Str$(Msc(46)) Else Rem
    Close 
    Call WriteLogFile(errmess$)
    Pause 5 ! Pause half a second
    Print '0WCSELECT XX IOBE K3';
    Print errmess$
    Print 
    Input "Hit (CR) to return to menu. "w$
    status = 999
  End Try 
End Sub 
Sub TMSUpdate(mode$)
  Clear TMS_ScaleOutbound.
  TMS_ScaleOutbound.SAIReferenceID = TicketHeader.ReleaseNo
  TMS_ScaleOutbound.SAIReferenceType$ = "PROCMG"
  TMS_ScaleOutbound.StopSequenceNumber = 0
  If Items.[1].MaterialCode$[1,2] = "*M" And TicketHeader.SplitLoad ! SplitLoad Multi-Material Sale
    ktemp$ = TicketHeader.TicketNo$ + TicketHeader.EntityNo$ + Items.[1].MaterialCode$ + Branch$ ! Check 8530 file
    Call SAIGetRecord(ch_8530ro,recdef_8530.,ktemp$,1,"Y","U",r,RetailSales$,RetailSales[],stat,errmess$)
    If stat = 0
      If RetailSales$[167,167] <> " " And RetailSales$[167,167] <> "N" ! SplitLoad
        TMS_ScaleOutbound.StopSequenceNumber = RetailSales$[167,167]
        If TMS_ScaleOutbound.StopSequenceNumber > 0 Let TMS_ScaleOutbound.StopSequenceNumber = TMS_ScaleOutbound.StopSequenceNumber - 1
      End If 
    End If 
  End If 
  If mode$ = "I"
    TMS_ScaleOutbound.IsInYard = 1
  Else 
    TMS_ScaleOutbound.IsInYard = 0
  End If 
  TMS_ScaleOutbound.VehicleNumber$ = TicketHeader.VehNo$
  TMS_ScaleOutbound.TareWgt = Items.[1].TareWt
  TMS_ScaleOutbound.GrossWgt = Items.[1].GrossWt
  TMS_ScaleOutbound.TicketComments$ = TicketHeader.TktComment$
  TMS_ScaleOutbound.WeighmasterInitials$ = WeighMaster$
  TMS_ScaleOutbound.IsTMSRead = 0
  Try 
    Search #ch_db;"INSERT INTO TMS_Scale_Outbound (" + SQLN$(TMS_ScaleOutbound.) + ") VALUES (" + SQLV$(TMS_ScaleOutbound.) + ")"
  Else If Spc(8) = 236
    Try 
      Search #ch_db;"UPDATE TMS_Scale_Outbound SET " + SQLNV$(TMS_ScaleOutbound.) + " WHERE SAIReferenceID=" + SQLV$(TMS_ScaleOutbound.SAIReferenceID) + " AND SAIReferenceType=" + SQLV$(TMS_ScaleOutbound.SAIReferenceType$) + " AND StopSequenceNumber=" + SQLV$(TMS_ScaleOutbound.StopSequenceNumber) + " AND IsInYard=" + SQLV$(TMS_ScaleOutbound.IsInYard)
    Else 
      Call SAITouchError("Error updating TMS_Scale_Outbound interface table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
    End Try 
  Else 
    Call SAITouchError("Error inserting into TMS_Scale_Outbound interface table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
  End Try 
End Sub 
Sub BargeDates(ExitStatus)
  chwin = SAIOpenWindow("Enter Barge Dates",550,130,1)
  Print #chwin;PChr$(bgcolor1);'BACKCOLOR CS WCSETCOLOR';
  Print #chwin;PChr$("Arial");'FONTFACE 12FONTSIZE EBOLD WCSETFONT';
  x0 = 20 \ x1 = 200 \ bw = 100
  y = 20 \ dy = 35 \ dx = 200
  Print #chwin;PChr$(110,x0,y - 5,x1,y + 24,"Constructive\15\Placement Date");'WCLABEL';
  Print #chwin;PChr$(10,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  If TicketHeader.BargeConstPlmntDate#
    Print #chwin;'10WCSELECT WCRESETCOLOR';DateUsing$(TicketHeader.BargeConstPlmntDate#,dateformat$);'0WCSELECT';
  Else 
    Print #chwin;'10WCSELECT WCRESETCOLOR 0WCSELECT';
  End If 
  Print #chwin;PChr$(30,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Change",2);'WCBUTTON';
  y = y + dy
  Print #chwin;PChr$(111,x0,y,x1,y + 14,"Release Date");'WCLABEL';
  Print #chwin;PChr$(11,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  If TicketHeader.BargeReleaseDate#
    Print #chwin;'11WCSELECT WCRESETCOLOR';DateUsing$(TicketHeader.BargeReleaseDate#,dateformat$);'0WCSELECT';
  Else 
    Print #chwin;'11WCSELECT WCRESETCOLOR';DateUsing$(TicketHeader.ShipmentDate#,dateformat$);'0WCSELECT';
    TicketHeader.BargeReleaseDate# = TicketHeader.ShipmentDate#
  End If 
  Print #chwin;PChr$(31,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Change",2);'WCBUTTON';
  y = y + 40
  Call SAIButtons(chwin,2,1,"Submit~Cancel",550,y,25,120,20)
  Print #chwin;'30WCFOCUS';
  Do 
    Input #chwin; Len (1);w$
    Select Case w$
      Case 'F1' ! Submit
        stat = 0
        If Not(TicketHeader.BargeConstPlmntDate#)
          Call SAITouchWarning("Constructive Placement Date is required.")
          stat = 1
        Else If Not(TicketHeader.BargeReleaseDate#)
          Call SAITouchWarning("Release Date is required.")
          stat = 1
        End If 
        If stat = 0
          ExitStatus = 0
          Exit Do 
        End If 
      Case 'F2' ! Cancel
        ExitStatus = 1
        Exit Do 
      Case 'F30' ! C.P. Date
        Call SAITouchCalendar("",w$)
        If w$
          Try 
            TicketHeader.BargeConstPlmntDate# = SAIConvertDate#(w$)
            Print #chwin;'10WCSELECT CU';SAIDateDisplay$(w$);'0WCSELECT';
          Else 
          End Try 
        End If 
      Case 'F31' ! Release Date
        Call SAITouchCalendar("",w$)
        If w$
          Try 
            TicketHeader.BargeReleaseDate# = SAIConvertDate#(w$)
            Print #chwin;'11WCSELECT CU';SAIDateDisplay$(w$);'0WCSELECT';
          Else 
          End Try 
        End If 
    End Select 
  Loop 
  Close #chwin
End Sub 
Sub SalesButtons(Bset)
  x = 620 \ y = 20
  bw = 170 \ bh = 30 \ dy = 4
  If Bset = 1
    istart = 1
    iend = 8
  Else 
    istart = 10
    iend = 13
  End If 
  Print PChr$(1,20);'WCDELETE';
  Print PChr$("Arial");'FONTFACE 12FONTSIZE WCSETFONT';
  For i = istart To iend
    Print PChr$(i,x,y,x + bw,y + bh,TicketFunctions$[i],2);'WCBUTTON';
    If TicketFunctions$[i] = "" Print PChr$(i);'WCDISABLE';
    y = y + bh + dy
  Next i
End Sub 
Sub Sale(mode$,status)
  TicketFunctions$[1] = "Ticket Info"
  TicketFunctions$[2] = "Add Item"
  TicketFunctions$[3] = "Edit Item"
  TicketFunctions$[4] = "Ticket Comment"
  TicketFunctions$[5] = "View Photos"
  TicketFunctions$[6] = "Place In-Yard"
  TicketFunctions$[7] = "Ticket Complete"
  TicketFunctions$[8] = "More >"
  TicketFunctions$[10] = "<  Back"
  TicketFunctions$[11] = "Capture Photo"
  TicketFunctions$[12] = "Check\15\Weight Tolerance"
  TicketFunctions$[13] = "VOID Ticket"
  TicketFunctions$[14] = ""
Sale_mode: !
  Clear TicketTotals.,TicketDetail.,Items.[]
  Clear Source.,Material.
  Clear MaterialCode$,TicketNo$,CarrierNo$,FullPONo$,ValidateContainer$,tot_sls_net
  If mode$ = "A" Or mode$ = "M"
    ItemCount = 0
    ItemNo = 0
    Clear TicketHeader.,ID$,CustomerNo$,Customer.,FullSONo$,GblCmt$
    If mode$ = "M"
      Do 
        Call GetManualTicketNo("S",TicketNo$,stat)
        If stat = 0
          If Len(TicketNo$) = 6
            If TicketNo$[1,1] = "M" Or (TicketNo$[1,1] = "T" And AllowManualTTicket$ = "Y")
              Call TicketNumberCheck("S",TicketNo$,stat)
              If stat = 0 Exit Do 
              Call SAITouchError("Ticket Number " + TicketNo$ + " has already been used.")
            Else 
              Call SAITouchError("Ticket Number must begin with an 'M'.")
            End If 
          Else 
            Call SAITouchWarning("Ticket Number must be 6 characters long.")
          End If 
        Else 
          status = -1
          Exit Sub 
        End If 
      Loop 
    End If 
    If SalesRelease.ReleaseNo = 0
      Call GetInYardID("S",ID$,status)
      If status = -1 Exit Sub ! Cancel
      If status ! Matching InYard found
        If TicketHeader.TktType$ = "S" Or TicketHeader.TktType$ = "W"
          ans = SAITouchConfirm("ID: " + RTrim$(ID$) + " already exists In-Yard.\15\Please confirm this is the correct vehicle.","Warning")
          If ans
            mode$ = "E"
            Goto Sale_mode
          Else 
            Clear TicketHeader.
            status = -1
            Exit Sub 
          End If 
        Else 
          Call SAITouchWarning("ID: " + RTrim$(ID$) + " already exists In-Yard and is not a Sales transaction.")
          Clear TicketHeader.
          status = -1
          Exit Sub 
        End If 
      End If 
      If CustomerNo$
        Call RetrieveCustomer(CustomerNo$,Customer.,stat)
        If stat
          Call SAITouchError("Customer not found!\15\Please select a Customer.")
        Else 
          If ValidCustomer(z$,Customer.) = 0 Let stat = 1
          If stat Call SAITouchWarning("Invalid Customer specified!\15\Please select a Customer.")
        End If 
        If stat
          CustomerNo$ = ""
        Else 
          CustomerNo$ = Customer.CustomerNo$
        End If 
      End If 
    Else ! Build from Sales Release data
      Call GetInYardID("NL",ID$,status)
      If status
        status = -1
        Exit Sub 
      End If 
      ! Populate necessary fields from Sales Release
      Call RetrieveCustomer(SalesRelease.CustomerNo$,Customer.,stat)
      If stat
        Call SAITouchError("Customer not found!\15\Please select a Customer.")
      Else 
        If ValidCustomer(z$,Customer.) = 0 Let stat = 1
        If stat Call SAITouchWarning("Invalid Customer specified!\15\Please select a Customer.")
      End If 
      If stat
        status = -1
        Exit Sub 
      Else 
        CustomerNo$ = Customer.CustomerNo$
      End If 
      ktemp$ = SAISpaceFill$(CustomerNo$,6) + SAIFill$(SalesRelease.SONo$,"R"," ",10) + SAISpaceFill$(SalesRelease.SOLine$,2)
      Call SAIGetRecord(ch_1310ro,recdef_1310.,ktemp$,1,"Y","U",r,SODetail$,SODetail[],stat,errmess$)
      If stat
        Call SAITouchError("Invalid Sales Order specified!\15\Sales Release not valid.")
        status = -1
        Exit Sub 
      Else 
        FullSONo$ = SODetail$[7,18]
      End If 
      ktemp$ = SAISpaceFill$(SalesRelease.YardSupplierNo$,6) + SAIFill$(SalesRelease.MatReqNo$,"R"," ",10) + SAISpaceFill$(SalesRelease.MatReqLine$,2)
      Call SAIGetRecord(ch_1210ro,recdef_1210.,ktemp$,1,"Y","U",r1,PODetail$,PODetail[],stat,errmess$)
      If stat
        Call SAITouchError("Invalid Material Req specified!\15\Sales Release not valid.")
        status = -1
        Exit Sub 
      Else 
        FullPONo$ = PODetail$[7,18]
        TicketHeader.ShippingInst$ = Trim$(PODetail$[66,95])
      End If 
      ! Credit limit check
      Call CreditLimitCheck(CustomerNo$,TicketTotals.TotalPrice,CreditStatus$,ExitStatus)
      If CreditStatus$
        status = -1
        Exit Sub 
      End If 
    End If 
Sale0: !
    If CustomerNo$ = "" Call GetCustomer()
    If CustomerNo$ = ""
      status = -1
      Exit Sub 
    End If 
    Call DisplayCustomerComments(CustomerNo$,status)
    If status
      Clear CustomerNo$,Customer.
      If SalesRelease.ReleaseNo
        Clear SalesRelease.
        status = -1
        Exit Sub 
      Else 
        Goto Sale_mode
      End If 
    End If 
Sale1: !
    ! Check for Sales Release
    If SalesRelease.ReleaseNo = 0 And WeightOnly = 0
      SQL$ = "SELECT COUNT(*) FROM Sales_Release WHERE Branch=" + SQLV$(Branch$) + " AND CustomerNo=" + SQLV$(CustomerNo$)
      If FullSONo$
        SQL$ = SQL$ + " AND SONo=" + SQLV$(Trim$(FullSONo$[1,10])) + " AND SOLine=" + SQLV$(Trim$(FullSONo$[11,12]))
      End If 
      SQL$ = SQL$ + " AND Status IN (" + SQLV$("") + "," + SQLV$("H") + ") AND (LoadsRemaining - LoadsInProcess) > " + SQLV$(0)
      Try 
        Search #ch_db;SQL$
        Read #ch_db;nr;
      Else 
        nr = 0
      End Try 
      If nr
        Call ListSalesReleases(CustomerNo$,FullSONo$,status)
        If status = 0
          ktemp$ = SAISpaceFill$(CustomerNo$,6) + SAIFill$(SalesRelease.SONo$,"R"," ",10) + SAISpaceFill$(SalesRelease.SOLine$,2)
          Call SAIGetRecord(ch_1310ro,recdef_1310.,ktemp$,1,"Y","U",r,SODetail$,SODetail[],stat,errmess$)
          If stat
            Call SAITouchError("Invalid Sales Order specified!\15\Sales Release not valid.")
            status = -1
            Exit Sub 
          Else 
            FullSONo$ = SODetail$[7,18]
          End If 
          ktemp$ = SAISpaceFill$(SalesRelease.YardSupplierNo$,6) + SAIFill$(SalesRelease.MatReqNo$,"R"," ",10) + SAISpaceFill$(SalesRelease.MatReqLine$,2)
          Call SAIGetRecord(ch_1210ro,recdef_1210.,ktemp$,1,"Y","U",r1,PODetail$,PODetail[],stat,errmess$)
          If stat
            Call SAITouchError("Invalid Material Req specified!\15\Sales Release not valid.")
            status = -1
            Exit Sub 
          Else 
            FullPONo$ = PODetail$[7,18]
            TicketHeader.ShippingInst$ = Trim$(PODetail$[66,95])
          End If 
        End If 
      End If 
    End If 
    If SalesRelease.ReleaseNo > 0
      TicketHeader.ReleaseNo = SalesRelease.ReleaseNo
      TicketHeader.CustReleaseNo$ = SalesRelease.CustomerReleaseNo$
      TicketHeader.BookingNo$ = SalesRelease.BookingNo$
      TicketHeader.Noticed = 1
    Else If Customer.ApptmntReqd$ = "Y" And WeightOnly = 0
      Call SAITouchWarning("Customer requires the use of a Sales Release.")
      Clear CustomerNo$,Customer.
      Goto Sale0
    End If 
    ! Select Sales Contract
    If FullSONo$ = "" And WeightOnly = 0
      MaterialCode$ = "" \ Clear Material.,SalesRelease.
      If Customer.IntercompanyType$ = "I" ! Look to see if there are any contracts for Inter-Company Customer
        Call OutBoundTransferOrderCheck(CustomerNo$,icount)
      Else 
        icount = 1
      End If 
      If icount
        Call ListCustomerSOs(CustomerNo$,FullSONo$,status)
        If status
          Clear CustomerNo$,Customer.
          Goto Sale0
        End If 
      End If 
    End If 
    If FullSONo$
      ! Order Qty check
      If WarnSalesOrderOvership$ = "Y" And SODetail[0] And FullSONo$[11,12] <> "00" And SODetail[1] >= SODetail[0]
        Call SAITouchWarning("Sales Order quantity has been met or exceeded.")
      End If 
      ktemp$ = SODetail$[1,16]
      Call SAIGetRecord(ch_1300,recdef_1300.,ktemp$,1,"Y","U",rtemp,SOHeader$,SOHeader[],stat,errmess$)
      If stat = 0
        ValidateContainer$ = SOHeader$[210,210]
        TicketHeader.FundsType$ = Trim$(SOHeader$[211,212])
      End If 
      MaterialCode$ = Trim$(SODetail$[50,57])
      Call GetSalesMaterialPrice(MaterialCode$,SODetail$[158,159],status)
      If status And Material.MaterialCode$ <> MaterialCode$
        Call SAITouchWarning("No valid Sales Material record found for contracted material: " + Trim$(MaterialCode$))
        Clear FullSONo$,SODetail$,SODetail[],SalesRelease.
        Goto Sale1
      End If 
      ! Select/Determine Material Req (if only one exists, automatically select it)
      If SalesRelease.ReleaseNo = 0
        Call GetMaterialReq(FullPONo$,status)
        If status Goto Sale1 ! Cancel
      End If 
      If FullPONo$
        MaterialCode$ = Trim$(PODetail$[50,57])
        TicketHeader.ShippingInst$ = Trim$(PODetail$[66,95])
        Call GetSalesMaterialPrice(MaterialCode$,Branch$,status)
        If status And Material.MaterialCode$ <> MaterialCode$
          Call SAITouchWarning("No valid Sales Material record found for requisitioned material: " + Trim$(MaterialCode$))
          Clear FullPONo$,FullSONo$,SODetail$,SODetail[],SalesRelease.
          Goto Sale1
        End If 
      Else If SODetail$[158,159] <> Branch$
        Call GetSalesMaterialPrice(MaterialCode$,Branch$,status)
        If status And Material.MaterialCode$ <> MaterialCode$
          Call GetSalesMaterialPrice(MaterialCode$,SODetail$[158,159],status) ! Restore Material. using SO Branch
        End If 
      End If 
      If Material.StockPileFlag ! Check for StockPile
        Call SelectStockPile(Material.InventoryCode$,Material.YardCode$,Branch$,Material.StockPile$,"","D",ExitStatus)
        If ExitStatus
          Clear FullPONo$,FullSONo$,SODetail$,SODetail[],SalesRelease.
          Goto Sale1
        End If 
      End If 
      If SODetail$[47,47] = "e" ! Estimated price on contract, unprice the ticket
        Material.Price = 0
        Material.PriceUM$ = Trim$(SODetail$[42,43])
      Else If SODetail$[204,204] <> "Y" ! Use contract pricing instead of price file
        Material.Price = SODetail[2]
        Material.PriceUM$ = Trim$(SODetail$[42,43])
      End If 
      If Trim$(SODetail$[111,140]) Let Material.MaterialDesc$ = Trim$(SODetail$[111,140])
      TicketHeader.OrderNo$ = Trim$(FullSONo$[1,10])
      TicketHeader.OrderLine$ = Trim$(FullSONo$[11,12])
      TicketHeader.ShipFromTo$ = Trim$(SODetail$[31,34])
      TicketHeader.ShipOrdNo$ = Trim$(SODetail$[214,233])
      TicketHeader.MatReqNo$ = Trim$(FullPONo$[1,10])
      TicketHeader.MatReqLine$ = Trim$(FullPONo$[11,12])
    Else 
      If gbl.MultiCurrency$ = "Y" Let TicketHeader.FundsType$ = gbl.BranchFundsType$ ! Initialize with Branch Funds Type
    End If 
    TicketHeader.Branch$ = Branch$
    TicketHeader.InYardID$ = ID$
    TicketHeader.EntityNo$ = Customer.CustomerNo$
    TicketHeader.ShipmentDate# = RunDate#
    TicketHeader.EntryDate# = RunDate#
    TicketHeader.TktType$ = "S"
    If Customer.IntercompanyType$ = "I" Let TicketHeader.TktMode$ = "T"
    If RFID$ Let TicketHeader.RFID$ = RFID$
    !    TicketHeader.CurbSideCity$=CurbSideCity$
    ! Vehicle Info
    If FullSONo$
      VehType1$ = Trim$(SODetail$[38,38])
      VehType2$ = Trim$(SODetail$[48,48])
    Else 
      VehType1$ = DefaultVehType$
      VehType2$ = ""
    End If 
    Call VehicleSelection(VehType1$,VehType2$,status)
    If status Goto Sale_mode
    VehicleType$ = TicketHeader.VehType$
    ! OTM Reference Number
    CarrierNo$ = ""
    If OTMFreight$ = "Y" And WeightOnly = 0
      If TicketHeader.OrderNo$
        Call CarrierOptions(TicketHeader.VehType$,FullPONo$,k$,count) ! count=-1 for Generic, 0 for no carrier, or >0 for number of contract carriers found
        If count
          temp$ = DateUsing$(Tim#(0),"YYYY")
          Call GetOTMRefNo(temp$,status)
          If status
            Clear CustomerNo$,Customer.
            Clear FullPONo$,FullSONo$,SODetail$,SODetail[],SalesRelease.
            Goto Sale0
          Else 
            TicketHeader.CarrierRefNo$ = OTMFreightInterface.OTMRefNo$
            CarrierNo$ = OTMFreightInterface.CarrierNo$
            TicketHeader.CarrierNo$ = OTMFreightInterface.CarrierNo$
          End If 
        End If 
      End If 
    End If 
    ! Carrier Selection
    If FullPONo$ And CarrierNo$ = ""
      VehicleType$ = TicketHeader.VehType$
      If SalesRelease.ReleaseNo And SalesRelease.CarrierNo$
        Call CarrierOptions(VehicleType$,FullPONo$,k$,count) ! Make sure Carrier should be specified
        If count > 0
          Do 
            CarrierNo$ = SalesRelease.CarrierNo$
            TicketHeader.CarrierNo$ = SalesRelease.CarrierNo$
            VehicleSize$ = ""
            FreightHrs = 0
            k$ = "P" + FullPONo$ + Rep$(" ",6)
            Call ListContractCarriers(k$,VehicleType$,VehicleSize$,FreightHrs,CarrierNo$)
            If CarrierNo$
              TicketHeader.CarrierNo$ = SalesRelease.CarrierNo$
              TicketHeader.VehSize$ = Trim$(VehicleSize$)
              TicketHeader.FreightHrs = FreightHrs
              Exit Do 
            Else 
              Call SAITouchWarning("You must select a Freight Sequence.")
            End If 
          Loop 
        Else If count < 0 ! Generic (or possibly not valid if -2)
          CarrierNo$ = SalesRelease.CarrierNo$
          TicketHeader.CarrierNo$ = SalesRelease.CarrierNo$
          Call GetTripTicketNumber()
        End If 
      Else 
        Call CarrierSelection(VehicleType$,VehicleSize$,FullPONo$,CarrierNo$,status)
      End If 
    Else If TicketHeader.TktMode$ = "T" And OutBoundTransferCarrierRequired$ = "Y"
      VehicleType$ = TicketHeader.VehType$
      ! status=-1 for No Carrier, 0 for Carrier selected, or 1 for Cancel
      Do 
        Call CarrierSelection(VehicleType$,VehicleSize$,FullPONo$,CarrierNo$,status)
        If status = 0 And Trim$(CarrierNo$)
          Exit Do 
        Else 
          Call SAITouchWarning("Carrier selection required on Out-Bound Transfer.")
        End If 
      Loop 
    End If 
    If SalesRelease.ReleaseNo > 0 ! Update Sales Release load count and mark as a release
      Try 
        Search #ch_db;"UPDATE Sales_Release SET LoadsInProcess=LoadsInProcess+1 WHERE ReleaseNo=" + SQLV$(SalesRelease.ReleaseNo)
      Else 
        Call SAITouchError("Error updating Load Count in Sales_Release table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
      End Try 
    End If 
    If WeightOnly
      TicketHeader.TktType$ = "W"
      If mode$ = "A" Call GenerateWOTicketNo(TicketNo$)
    Else 
      TicketHeader.TktType$ = "S"
      If mode$ = "A" Call GenerateTicketNo("S",TicketNo$)
    End If 
    If TicketNo$ = ""
      status = -1
      Exit Sub 
    End If 
    TicketHeader.TicketNo$ = TicketNo$
    TicketHeader.ShipmentNo$ = TicketHeader.TicketNo$
    If TicketHeader.EntityNo$[1,3] = "CP0"
      TicketHeader.Name$ = Customer.Name$ ! Name only
    Else 
      Call PopulateCustomerAddress()
    End If 
    ! Update OTM Record
    If OTMFreight$ = "Y" And TicketHeader.CarrierRefNo$
      SQL$ = "UPDATE OTM_Freight_Interface SET"
      SQL$ = SQL$ + " Status=" + SQLV$("I") + ", TicketNo=" + SQLV$(TicketHeader.TicketNo$)
      SQL$ = SQL$ + " WHERE OTMFrtInterfaceID=" + SQLV$(OTMFreightInterface.OTMFrtInterfaceID)
      Try 
        Search #ch_db;SQL$
      Else 
        Call SAITouchError("Error updating Status in OTM_Freight_Interface table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
      End Try 
    End If 
    Call DefaultVehicleNo(TicketNo$)
    If MaterialCode$ ! Initialize first item
      Call PopulateMaterialDetail()
      ItemCount = 1
      TicketDetail.TicketNo$ = TicketNo$
      TicketDetail.ItemNo = 1
      TicketDetail.ShipmentNo$ = TicketNo$
      Items.[1] = TicketDetail.
      MaterialCode$ = ""
      Clear Material.
    End If 
    ! Create InYard
    TicketHeader.StartTime# = Tim#(0)
    If TicketHeader.RFID$ Let TicketHeader.RFID_InBound = 1
    TicketHeader.InUse = 1
    TicketHeader.InUseBy$ = user$
    TicketHeader.InUsePort$ = Spc(6) Using "&&&&"
    Try 
      Search #ch_db;"INSERT INTO InYard_Hdr (" + SQLN$(TicketHeader.) + ") VALUES (" + SQLV$(TicketHeader.) + ")"
    Else 
      errmess$ = "Error creating entry in InYard_Hdr table.\15\"
      errmess$ = errmess$ + Msc$(2) + "\15\"
      errmess$ = errmess$ + "InYardID=" + TicketHeader.InYardID$ + ", TicketNo=" + TicketHeader.TicketNo$ + "\15\"
      errmess$ = errmess$ + "Program Line: " + Str$(Spc(10))
      Call SAITouchError(errmess$)
      status = -1
      Exit Sub 
    End Try 
    If ItemCount = 1
      Items.[1].TicketNo$ = TicketHeader.TicketNo$
      Try 
        Search #ch_db;"INSERT INTO InYard_Dtl (" + SQLN$(Items.[1]) + ") VALUES (" + SQLV$(Items.[1]) + ")"
      Else 
        Try Search #ch_db;"DELETE FROM InYard_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) Else Rem
        Call SAITouchError("Error creating entry in InYard_Dtl table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
        status = -1
        Exit Sub 
      End Try 
    End If 
    ! Log new Sales Ticket
    If SalesTicketLog And TicketHeader.TktType$ = "S" And TicketHeader.TktMode$ <> "T"
      Call WriteSalesTicketLog("INYARD")
    End If 
    ! Look for container photo requirement to send trigger to Scapyard Dog
    If SalesRelease.ReleaseNo And TicketHeader.BookingNo$
      Try 
        Search #ch_db;"SELECT " + SQLN$(SalesBooking.) + " FROM Sales_Booking WHERE BookingNo=" + SQLV$(TicketHeader.BookingNo$)
        nr = Chf(ch_db)
        If nr
          Map Record #ch_db As Sales_Booking
          Read Record #ch_db;SalesBooking.
        End If 
      Else 
        nr = 0
      End Try 
      If nr
        If SalesBooking.InspectionRequired And SalesBooking.InspectionPhotosReqd
          Clear FieldName$[],FieldValue$[] \ NumFields = 0
          NumFields = NumFields + 1 \ FieldName$[NumFields] = "fetchid" \ FieldValue$[NumFields] = "CONTAINER"
          NumFields = NumFields + 1 \ FieldName$[NumFields] = "location" \ FieldValue$[NumFields] = Branch$
          NumFields = NumFields + 1 \ FieldName$[NumFields] = "ticket_nbr" \ FieldValue$[NumFields] = TicketHeader.TicketNo$
          NumFields = NumFields + 1 \ FieldName$[NumFields] = "container_nbr" \ FieldValue$[NumFields] = TicketHeader.VehNo$
          Call SAIJPeggerCommand("gofetch",Branch$,JPServer$,NumFields,FieldName$[],FieldValue$[],stat)
        End If 
      End If 
    End If 
  Else ! Edit **********************************************************
    ! Check for existence of ticket in 8326 file (if not SplitLoad)
    If TicketHeader.SplitLoad = 0
      ktemp$ = SAISpaceFill$(TicketHeader.TicketNo$,6)
      Call SAIGetRecord(ch_8326ro,recdef_8326.,ktemp$,2,"Y","U",rtemp,ScaleTicAudit$,ScaleTicAudit[],stat,errmess$)
      If stat = 0
        ans = SAITouchYesNo("Ticket Number " + TicketHeader.TicketNo$ + " has already been completed.\15\\15\Do you wish to remove this entry (ID: " + TicketHeader.InYardID$ + ") from the InYard table?")
        If ans
          Call DeleteInYard(stat)
          If stat = 0
            Call SAITouchMessage("ID: " + TicketHeader.InYardID$ + " Successfully removed from InYard table.")
            If TicketAudit
              TransferMode = 0
              Call LoadTicketAuditHeader()
              TicketAudit.Event$ = "In-Yard deleted - Ticket already completed"
              Call WriteTicketAudit()
            End If 
          End If 
        End If 
        status = -1
        Exit Sub 
      End If 
    End If 
    ! Mark OutBound RFID if it wasn't updated
    If RFID$ And TicketHeader.RFID$ = ""
      TicketHeader.RFID$ = RFID$
      TicketHeader.RFID_OutBound = 1
    End If 
    TicketNo$ = TicketHeader.TicketNo$
    TicketHeader.EntryDate# = RunDate#
    ! Get Customer
    Call RetrieveCustomer(TicketHeader.EntityNo$,Customer.,stat)
    If stat
      ans = SAITouchYesNo("Customer record for customer " + TicketHeader.EntityNo$ + " cannot be found.\15\\15\Do you wish to remove this entry (ID: " + TicketHeader.InYardID$ + ") from the InYard table?")
      If ans
        Call DeleteInYard(stat)
        If stat = 0
          Call SAITouchMessage("ID: " + TicketHeader.InYardID$ + " Successfully removed from InYard table.")
          If TicketAudit
            TransferMode = 0
            Call LoadTicketAuditHeader()
            TicketAudit.Event$ = "In-Yard deleted - Customer not found"
            Call WriteTicketAudit()
          End If 
          status = -1
          Exit Sub 
        End If 
      End If 
    End If 
    CustomerNo$ = Customer.CustomerNo$
    ! Determine if WeightOnly
    If TicketHeader.TktType$ = "W" Let WeightOnly = 1
    ! Double check Shipment No.
    If TicketHeader.ShipmentNo$ = "" Let TicketHeader.ShipmentNo$ = TicketHeader.TicketNo$
    ! Get Contract Line detail if present
    If TicketHeader.OrderNo$
      FullSONo$ = SAIFill$(TicketHeader.OrderNo$,"R"," ",10) + SAISpaceFill$(TicketHeader.OrderLine$,2)
      ktemp$ = SAISpaceFill$(TicketHeader.EntityNo$,6) + FullSONo$
      Call SAIGetRecord(ch_1310ro,recdef_1310.,ktemp$,1,"Y","U",r,SODetail$,SODetail[],stat,errmess$)
      If stat = 0
        TicketHeader.ShipFromTo$ = Trim$(SODetail$[31,34])
        ktemp$ = SODetail$[1,16]
        Call SAIGetRecord(ch_1300,recdef_1300.,ktemp$,1,"Y","U",rtemp,SOHeader$,SOHeader[],stat,errmess$)
        If stat = 0 Let ValidateContainer$ = Trim$(SOHeader$[210,210])
      Else 
        Call SAITouchError("Unable to access Sales Order Detail for order " + TicketHeader.OrderNo$ + "-" + TicketHeader.OrderLine$)
        ! Clear the values ???
        FullSONo$ = ""
      End If 
    End If 
    ! Get Material Req
    Clear PODetail$,PODetail[]
    If TicketHeader.MatReqNo$
      FullPONo$ = SAIFill$(TicketHeader.MatReqNo$,"R"," ",10) + SAISpaceFill$(TicketHeader.MatReqLine$,2)
      ktemp$ = FullPONo$
      Call SAIGetRecord(ch_1210ro,recdef_1210.,ktemp$,2,"Y","U",r,PODetail$,PODetail[],stat,errmess$)
      If stat
        Call SAITouchError("Unable to access Material Requisition " + TicketHeader.MatReqNo$ + "-" + TicketHeader.MatReqLine$)
        ! Clear the values ???
      End If 
    End If 
    If TicketHeader.ReleaseNo
      Try 
        Search #ch_db;"SELECT * FROM Sales_Release WHERE ReleaseNo=" + SQLV$(TicketHeader.ReleaseNo)
        If Chf(ch_db)
          Map Record #ch_db As Sales_Release
          Read Record #ch_db;SalesRelease.
          TicketHeader.CustReleaseNo$ = SalesRelease.CustomerReleaseNo$
          TicketHeader.BookingNo$ = SalesRelease.BookingNo$
        End If 
      Else 
        Call SAITouchError("Cannot retrieve Sales Release entry.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
      End Try 
    End If 
    ! Get Items
    Call RetrieveInYardItems(ItemCount)
    If ItemCount
      If Items.[1].StkPileReq ! Check for StockPile
        If Items.[1].StockPile$
          ! Don't think we need to do this-> Items.[1].InventoryCode$=Items.[1].InventoryCode$[1,4]+"-"+Items.[1].StockPile$
        Else 
          Do 
            Call SelectStockPile(Items.[1].InventoryCode$,Items.[1].YardCode$,Branch$,Items.[1].StockPile$,"","D",ExitStatus)
            If ExitStatus = 0
              Exit Do 
            Else 
              status = -1
              Exit Sub 
            End If 
          Loop 
        End If 
      End If 
    End If 
    ! Mark In-Use
    TicketHeader.InUse = 1
    TicketHeader.InUseBy$ = user$
    TicketHeader.InUsePort$ = Spc(6) Using "&&&&"
    Call UpdateInYardInUse(status)
    If status
      status = -1
      Exit Sub 
    End If 
  End If 
  ! Look for Export Address
  Call RetrieveAltAddress("X",TicketHeader.EntityNo$,"",ExportAddress.,stat)
  If stat Clear ExportAddress.
  ItemNo = ItemCount
  If WeightOnly
    Call SalesItem(ItemNo,"E",status)
  Else If ItemCount = 0
    Call SalesItem(ItemNo,"I",status)
  Else 
    If Items.[ItemCount].TareWt = 0
      Call SalesItem(ItemNo,"I",status)
    Else If Items.[ItemCount].GrossWt = 0
      Call SalesItem(ItemNo,"O",status)
    End If 
  End If 
  Print PChr$(1,"Closing the session is not valid.");'ONCLOSE';
  Print 'CS';
  Print '12FONTSIZE EBOLD WCSETFONT';
  If TicketHeader.TktMode$ = "T"
    temp$ = "Out-Bound Transfer"
  Else If WeightOnly
    temp$ = "Weight Only Ticket"
  Else If TicketHeader.Noticed
    temp$ = "Released Sale"
  Else 
    temp$ = "Sale"
  End If 
  Print @10,1;'BBOLD';temp$;'EBOLD';
  If RunDate$ <> SAIConvertDate$(Tim#(0)) Print PChr$(SAIColorRGB(255,0,0));'BACKCOLOR';
  Print @650,1;rundatetext$;
  Print PChr$(bgcolor);'BACKCOLOR';
  y0 = 20 \ y = y0
  Print PChr$("Courier New");'FONTFACE 8FONTSIZE WCSETFONT';
  Print PChr$(80,10,y,610,275,"",0);'WCTEXT';
  Print '80WCSELECT';PChr$(0,16777215);'WCSETCOLOR 0WCSELECT'; ! Set color to Black on White
  Print PChr$("Arial");'FONTFACE BBOLD WCSETFONT';
  Print PChr$(81,10,277,307,287,"",0);'WCTEXT';
  Print PChr$(82,313,277,610,287,"",0);'WCTEXT';
  Print '81WCSELECT';PChr$(16711680,16777215);'WCSETCOLOR'; ! Set color to Red on White
  Print '82WCSELECT';PChr$(16711680,16777215);'WCSETCOLOR'; ! Set color to Red on White
  Print '0WCSELECT';
  Print PChr$("Arial");'FONTFACE 12FONTSIZE EBOLD WCSETFONT';
  Bset = 1
  Call SalesButtons(Bset)
  Call DisplaySalesTicket()
  Do 
    If Bset = 1
      If ItemCount = 0
        Print '2WCENABLE 3WCDISABLE 7WCDISABLE'; ! Edit Item & Ticket Complete
      Else 
        Print '2WCDISABLE 3WCENABLE';
        If WeightOnly
          If Items.[ItemCount].GrossWt = 0 And Items.[ItemCount].TareWt = 0
            Print '7WCDISABLE'; ! Ticket Complete
          Else 
            Print '7WCENABLE'; ! Ticket Complete
          End If 
        Else 
          If Items.[ItemCount].GrossWt = 0
            Print '7WCDISABLE'; ! Ticket Complete
          Else 
            Print '7WCENABLE'; ! Ticket Complete
          End If 
        End If 
      End If 
      If PhotoURL$ = "" Print '5WCDISABLE';
    Else If Bset = 2
      If MultiSalesCheckWtTolerance = 0 Print '11WCDISABLE';
    End If 
Sales_Input: !
    Input #-3; Len (1);w$
    Select Case w$
      Case 'F1' ! Ticket Info
        Call SalesTicketInfo(status)
        Call DisplaySalesTicket()
      Case 'F2' ! Add Item
        If ItemCount
          Call SAITouchWarning("Cannot have multiple items on a Sales Ticket.")
        Else 
          ItemNo = 0
          MaterialCode$ = ""
          If ItemCount
            Call SalesItem(ItemNo,"O",status)
          Else 
            Call SalesItem(ItemNo,"I",status)
          End If 
          If ItemCount > 0 Call DisplaySalesTicket()
        End If 
      Case 'F3' ! Edit Item
        If ItemCount = 0
          Call SAITouchMessage("No Items to edit.")
        Else If ItemCount = 1
          ItemNo = 1
          Call SalesItem(ItemNo,"E",status)
          If status = 0 Call DisplaySalesTicket()
        Else 
          Call SAIKeyPad("Enter Item Number",ItemNo,3,status)
          If status = 0
            If ItemNo > 0 And ItemNo <= ItemCount
              Call SalesItem(ItemNo,"E",status)
              If status = 0 Call DisplaySalesTicket()
            Else 
              Call SAITouchError("Invalid Item Number entered.")
            End If 
          End If 
        End If 
      Case 'F4' ! Ticket Comment
        If TicketHeader.TktComment$ Let temp$ = TicketHeader.TktComment$ Else Let temp$ = ""
        Call SAIKeyBoardGen("Enter Comment",KBParams.alphacase,50,0,temp$,status)
        If status = 0
          TicketHeader.TktComment$ = temp$
          Call DisplaySalesTicket()
        End If 
      Case 'F5' ! View Photos
        Call SAIViewPhotos(TicketHeader.TicketNo$,Branch$,PhotoURL$,TicketHeader.ShipmentDate#)
      Case 'F6' ! Place In-Yard
        If ItemCount = 0
          ans = SAITouchYesNo("     Ticket has no material items.\15\Are you sure you wish to place In-Yard?")
          If ans = 0 Goto Sales_Input
        End If 
        If UseYardZones$ = "Y"
          If YardZone$
            TicketHeader.YardZone$ = YardZone$
          Else 
            Clear ilist$[]
            For n = 1 To NumYardZones
              ilist$[n] = SAISpaceFill$(CodesYardZone.[n].YardZone$,2) + " - " + SAISpaceFill$(CodesYardZone.[n].Description$,26)
            Next n
            ilist$[n] = "UNKNOWN"
            Call SAITouchListSelect(9,500,"Select Yard Zone"," ZONE  DESCRIPTION",ilist$[],n,isel,stat)
            If stat Goto Sales_Input
            If isel = n
              Clear TicketHeader.YardZone$
            Else 
              TicketHeader.YardZone$ = CodesYardZone.[isel].YardZone$
            End If 
          End If 
        End If 
        Clear TicketHeader.InUse,TicketHeader.InUseBy$,TicketHeader.InUsePort$
        Call UpdateInYard(stat)
        If stat Goto Sales_Input
        If TicketHeader.ReleaseNo And SalesRelease.TMS_Flag Call TMSUpdate("I")
        NumCopies = InspectionTicketCopies
        If PrintSalesInspectionTicket$ = "P"
          If InspectionTicketCopies > 1
            Call PromptInspectionTicket(ans,NumCopies)
          Else 
            ans = SAITouchYesNo("Print Inspection Ticket?")
          End If 
        Else If PrintSalesInspectionTicket$ = "Y"
          ans = 1
        Else 
          ans = 0
        End If 
        If ans Call PrintSalesTicket(InspectionTicketPrinter$,InspectionTicketPrinterType$,InspectionTicketForm$,NumCopies,"I",status)
        Clear RFIDMaster.
        Exit Do 
      Case 'F7' ! Ticket Complete Action
        If ItemCount = 0
          Call SAITouchWarning("Ticket cannot be completed with no items.")
          Goto Sales_Input
        Else If WeightOnly
          If Items.[ItemCount].GrossWt = 0 And Items.[ItemCount].TareWt = 0
            Call SAITouchWarning("Weight-Only Ticket cannot be completed with no Weights.")
            Goto Sales_Input
          End If 
        Else If Items.[ItemCount].GrossWt = 0
          Call SAITouchWarning("Ticket cannot be completed with 0 Gross Weight.")
          Goto Sales_Input
        End If 
        If TicketHeader.EntityNo$ = "999999" Or Trim$(TicketHeader.EntityNo$) = ""
          Call SAITouchWarning("Ticket cannot be completed with Customer No = 999999.")
          Goto Sales_Input
        Else If WeightOnly = 0 And (Trim$(Items.[1].MaterialCode$) = "999" Or Trim$(Items.[1].MaterialCode$) = "")
          Call SAITouchWarning("Ticket cannot be completed with Material Code = 999.")
          Goto Sales_Input
        Else If Trim$(TicketHeader.VehType$) = "" Or Trim$(TicketHeader.VehNo$) = ""
          Call SAITouchWarning("Ticket cannot be completed without Vehicle Type or Number.")
          Goto Sales_Input
        Else If Trim$(TicketHeader.OrderNo$)
          If TicketHeader.VehType$ <> SODetail$[38,38] And TicketHeader.VehType$ <> SODetail$[48,48]
            Call SAITouchWarning("Vehicle Type does not match contract.\15\Ticket cannot be completed.")
            Goto Sales_Input
          End If 
        End If 
        If DateUsing$(TicketHeader.ShipmentDate#,"YYYYMMDD") > FuturePeriodEnd$
          ans = SAITouchYesNo("Shipment Date is greater than the Future Period End Date.\15\\15\Is this correct?","Shipment Date Warning")
          If ans = 0 Goto Sales_Input
        End If 
        If WeightOnly = 0 And Trim$(TicketHeader.MatReqNo$) = ""
          !        Call SAIGetRecord(ch_110Aro,recdef_110A.,ktemp$,1,"Y","U",rec_110A,ScrapCode$,ScrapCode[],stat,errmess$)
          !        if stat AND Trim$(z$[642,643]) ! Look for yard code for corporate (virtual yard with bryd)
          !          ktemp$="Y"+Items.[1].YardCode$+z$[642,643]
          !          Call SAIGetRecord(ch_110Aro,recdef_110A.,ktemp$,1,"Y","U",rec_110A,ScrapCode$,ScrapCode[],stat,errmess$)
          !        endif
          ktemp$ = "Y" + Items.[1].YardCode$ + Branch$ ! Check Yard Code found for current Branch
          Call SAIGetRecord(ch_110Aro,recdef_110A.,ktemp$,1,"Y","U",rec_110A,ScrapCode$,ScrapCode[],stat,errmess$)
          If stat = 0
            If ScrapCode$[83,83] = "Y" And ScrapCode$[84,84] = "Y" ! Prevent completion of virtual yard materials
              Call SAITouchWarning("Ticket cannot be completed with a Virtual Yard Material.")
              Goto Sales_Input
            End If 
          Else 
            Call SAITouchWarning("Ticket cannot be completed with a non-existent Yard Code: " + Items.[1].YardCode$ + ".")
            Goto Sales_Input
          End If 
        End If 
        For i = 1 To ItemCount
          If Items.[i].StkPileReq And Trim$(Items.[i].StockPile$) = ""
            Call SAITouchWarning("A StockPile must be selected on item " + Str$(i))
            Goto Sales_Input
          End If 
        Next i
        If (RequireTicketComment$ = "Y" Or RequireTicketComment$ = "S") And TicketHeader.TktComment$ = ""
          Call SAITouchWarning("You are required to enter a Ticket Comment before completing.")
          Goto Sales_Input
        End If 
        If TicketHeader.FreightHrs < 0
          ans = SAITouchYesNo("          Freight Hours are required but set to zero.\15\Are you sure you wish to complete ticket with zero Freight Hours?")
          If ans = 0 Goto Sales_Input
          TicketHeader.FreightHrs = 0
        End If 
        If RequireAxleCount$ = "Y" And TicketHeader.AxleCount = 0
          Do 
            Call SAIKeyPad("Enter Total Axle Count **REQUIRED**",TicketHeader.AxleCount,3,status)
            If status Goto Sales_Input
            If TicketHeader.AxleCount > 127 Let TicketHeader.AxleCount = 0
          Loop Until TicketHeader.AxleCount
        End If 
        If TicketHeader.VehType$ = "B" And PromptForBargeDates$ = "Y"
          Call BargeDates(ExitStatus)
          If ExitStatus Goto Sales_Input
        End If 
        If TicketHeader.OrderNo$ And WarnSalesOrderOvership$ = "Y"
          FullSONo$ = SAIFill$(TicketHeader.OrderNo$,"R"," ",10) + SAISpaceFill$(TicketHeader.OrderLine$,2)
          ktemp$ = SAISpaceFill$(TicketHeader.EntityNo$,6) + FullSONo$
          Call SAIGetRecord(ch_1310ro,recdef_1310.,ktemp$,1,"Y","U",r,SODetail$,SODetail[],stat,errmess$)
          If stat = 0
            If SODetail[0] And FullSONo$[11,12] <> "00" And SODetail[1] < SODetail[0]
              If Trim$(SODetail$[40,41]) <> gbl_um$
                x = SAIUMConvFactor(ch_110Aro,SODetail$[40,41],gbl_um$) * SODetail[0]
              Else 
                x = SODetail[0]
              End If 
              If x And SODetail[7] + Items.[1].NetWt > x
                Call SAITouchWarning("This shipment will exceed Sales Order quantity.")
              End If 
            End If 
          End If 
        End If 
        If VGM_Interface And TicketHeader.BookingNo$ And SalesRelease.VehType$ And TicketHeader.ContainerTareWt = 0
          Call SAITouchWarning("Container Tare Weight required on export shipment for VGM reporting.")
          Goto Sales_Input
        End If 
        If ReviewPhotos$ = "S" Or ReviewPhotos$ = "A"
          Call SAIViewPhotos(TicketHeader.TicketNo$,Branch$,PhotoURL$,TicketHeader.ShipmentDate#)
          ans = SAITouchYesNo("Are photos complete and acceptable?")
          If ans = 0 Goto Sales_Input
        End If 
        ! MySQL dependent stuff:
        If SAITableExists(ch_db,"Sales_Ticket_Hdr") = 0
          Try Close #ch_db Else Rem
          Call SAIOpenDatabase(ch_db,status,errmess$)
          If status = 0
            DBConnectionTime# = Tim#(0)
            Call WriteLogFile("Database connection re-established in Sales Ticket Complete routine.")
          Else 
            Call WriteLogFile("Database connection COULD NOT re-established in Sales Ticket Complete routine.")
            Call SAITouchError("Unable to access database.  Ticket Cannot be completed.")
            DBConnectionTime# = Tim#(0) - 36000 ! Force a re-open in main loop
            Goto Sales_Input
          End If 
        End If 
        If Items.[1].MaterialCode$[1,4] = "*MIX" And WeightOnly = 0 !AND TicketHeader.TktMode$<>"T"
          Search #ch_db;"SELECT * FROM Sales_Ticket_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#) + " AND Branch=" + SQLV$(Branch$)
          nr = Chf(ch_db)
          If nr
            Map Record #ch_db As Sales_Ticket_Hdr
            Read Record #ch_db;SalesTicketHdr.
            If TicketHeader.BOLNo$ = "" ! Only update ticket header if BOL was entered in multimatsales
              If Trim$(SalesTicketHdr.BOLNo$) Let TicketHeader.BOLNo$ = SalesTicketHdr.BOLNo$
              If Trim$(SalesTicketHdr.SealNo$) Let TicketHeader.SealNo$ = SalesTicketHdr.SealNo$
              If Trim$(SalesTicketHdr.Seal2No$) Let TicketHeader.Seal2No$ = SalesTicketHdr.Seal2No$
              If Trim$(SalesTicketHdr.Seal3No$) Let TicketHeader.Seal2No$ = SalesTicketHdr.Seal3No$
              If Trim$(SalesTicketHdr.CustReleaseNo$) Let TicketHeader.CustReleaseNo$ = SalesTicketHdr.CustReleaseNo$
              If Trim$(SalesTicketHdr.ContainerNo$) Let TicketHeader.ContainerNo$ = SalesTicketHdr.ContainerNo$
              If Trim$(SalesTicketHdr.BookingNo$) Let TicketHeader.BookingNo$ = SalesTicketHdr.BookingNo$
              If Trim$(SalesTicketHdr.RouteNo$) Let TicketHeader.RouteNo$ = SalesTicketHdr.RouteNo$
              If Trim$(SalesTicketHdr.DeliveryAddr$) Let TicketHeader.DeliveryAddr$ = SalesTicketHdr.DeliveryAddr$
              If Trim$(SalesTicketHdr.DeliveringCarrier$) Let TicketHeader.DeliveringCarrier$ = SalesTicketHdr.DeliveringCarrier$
              If Trim$(SalesTicketHdr.CarInitials$) Let TicketHeader.CarInitials$ = SalesTicketHdr.CarInitials$
              If Trim$(SalesTicketHdr.CarNo$) Let TicketHeader.CarNo$ = SalesTicketHdr.CarNo$
              If SalesTicketHdr.ReleaseNo And TicketHeader.ReleaseNo = 0 Let TicketHeader.ReleaseNo = SalesTicketHdr.ReleaseNo
            End If 
            ! Look for detail items
            Search #ch_db;"SELECT TicketNo FROM Sales_Ticket_Dtl WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#) + " AND Leg=" + SQLV$(SalesTicketHdr.Leg)
            nr = Chf(ch_db)
          End If 
          If nr = 0
            If TicketHeader.TktMode$ <> "T"
              Call SAITouchWarning("*MIX Ticket cannot be completed without item details built.")
              Goto Sales_Input
            End If 
          Else 
            TicketDetail. = Items.[1]
            Call MultiSalesCheckWt(status)
            If status = 1
              ans = SAITouchYesNo("Ticket not within tolerance.  Do you still wish to complete?")
              If ans = 0 Goto Sales_Input
            End If 
          End If 
        End If 
        If WeightOnly = 0 And TicketHeader.TktMode$ <> "T"
          Call CreditLimitCheck(CustomerNo$,TicketTotals.TotalPrice,CreditStatus$,ExitStatus)
          If CreditStatus$ Goto Sales_Input
        End If 
        If SAIConvertDate$(TicketHeader.ShipmentDate#) <> RunDate$
          If WeightOnly Or TicketHeader.TktMode$ = "T" Or Items.[1].MaterialCode$[1,4] <> "*MIX"
            temp$ = "Ship Date (" + DateUsing$(TicketHeader.ShipmentDate#,dateformat$) + ") not equal to Processing Date."
            temp$ = temp$ + "\15\      Do you wish to change the Ship Date ?"
            ans = SAITouchYesNo(temp$)
            If ans
              Call SAITouchCalendar(RunDate$,w$)
              If w$ = "" Goto Sales_Input ! Cancelled
              SaveDate# = TicketHeader.ShipmentDate#
              TicketHeader.ShipmentDate# = SAIConvertDate#(w$)
              Call UpdateInYard(stat)
			  Try Search #ch_db;"UPDATE Sales_Ticket_Hdr SET ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#) + " WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(SaveDate#) Else Rem		  
              !  try Search #ch_db;"UPDATE Sales_Ticket_Dtl SET ShipmentDate="+SQLD$(TicketHeader.ShipmentDate#)+" WHERE TicketNo="+SQLV$(TicketHeader.TicketNo$)+" AND ShipmentDate="+SQLD$(SaveDate#) else rem
              Call DisplaySalesTicket()
            End If 
          End If 
        End If 
        If CheckOutboundVehMaxGross$ = "Y"
          Try 
            Search #ch_db;"SELECT MaxGrossWtPerShipment FROM Codes_Vehicle_Type WHERE VehicleType=" + SQLV$(TicketHeader.VehType$)
            If Chf(ch_db)
              Map #ch_db;
              Read #ch_db;x
              If x > 0 And Items.[1].GrossWt > x
                ans = SAITouchYesNo("Gross Weight exceeds Maximum for Vehicle Type (" + Str$(x) + ").\15\\15\Continue?","Warning")
                If ans = 0 Goto Sales_Input
              End If 
            End If 
          Else 
          End Try 
        End If 
        If TicketHeader.ReleaseNo
          If SalesRelease.Status$ = "H"
            Call SAITouchWarning("Ticket cannot be completed with Sales Relase on HOLD.")
            Goto Sales_Input
          End If 
        End If 
        If BOLPrinter$ = ""
          BOLopt = 1 ! Disallow
        Else If WeightOnly
          BOLopt = 1 ! Disallow
        Else If Customer.IntercompanyType$ = "I"
          BOLopt = 2 ! allow BOL on intercompany transfers
        Else 
          Search #ch_db;"SELECT " + SQLN$(CodesVehicleType.) + "FROM Codes_Vehicle_Type WHERE VehicleType=" + SQLV$(Trim$(TicketHeader.VehType$))
          If Chf(ch_db)
            Map Record #ch_db As Codes_Vehicle_Type
            Read Record #ch_db;CodesVehicleType.
            If CodesVehicleType.PrintBOL Let BOLopt = 2 Else Let BOLopt = 1
          Else 
            BOLopt = 1 ! Disallow
          End If 
          If BOLopt = 2
            ktemp$ = SAISpaceFill$(TicketHeader.EntityNo$,6) + SAIFill$(TicketHeader.OrderNo$,"R"," ",10)
            Call SAIGetRecord(ch_1300,recdef_1300.,ktemp$,1,"Y","U",r,SOHeader$,SOHeader[],stat,errmess$)
            If stat = 0
              TicketHeader.Trader$ = SOHeader$[214,216]
            Else 
              BOLopt = 1
            End If 
          End If 
        End If 
        chwin = SAIOpenWindow("Complete Ticket",250,140,1)
        Print #chwin;PChr$("Arial");'FONTFACE 12FONTSIZE WCSETFONT';
        x = 50 \ bw = 150 \ bh = 30 \ y = 10 \ space = 15
        If BOLopt = 2 And (ValidateContainer$ = "Y" Or ValidateContainer$ = "V") ! Force BOL option if container validation is set
          opt = 1
        Else 
          opt = 2
        End If 
        Print #chwin;PChr$(1,x,y,x + bw,y + bh,"Print Ticket",opt);'WCBUTTON';
        y = y + bh + space
        Print #chwin;PChr$(2,x,y,x + bw,y + bh,"Print Ticket\15\and BOL",BOLopt);'WCBUTTON';
        y = y + bh + space
        Print #chwin;PChr$(3,x,y,x + bw,y + bh,"Cancel",2);'WCBUTTON';
        If opt = 1
          Print #chwin;'2WCFOCUS';
        Else 
          Print #chwin;'1WCFOCUS';
        End If 
        Do 
SalesTicketCompleteInput: !
          Input #chwin; Len (1);w$
          Select Case w$
            Case 'F1' To 'F2' ! Print Ticket
              If w$ = 'F1' And opt = 1 Goto SalesTicketCompleteInput
              If w$ = 'F2' And BOLopt = 2 Let PrintBOLFlag = 1 Else Let PrintBOLFlag = 0
              If CustomerNo$[1,3] = "CP0"
                Call GetPeddlerInfo(status)
              Else 
                status = 0
              End If 
              If status = 0
                Print #chwin;PChr$(1,3);'WCDISABLE';
                If PrintBOLFlag
                  Call GetBOLInfo(status)
                  If status
                    Print #chwin;PChr$(1,3);'WCENABLE';
                    Goto SalesTicketCompleteInput
                  End If 
                  If TicketHeader.BOLNo$ = "" Call GenerateBOLNo(TicketHeader.BOLNo$)
                  If BOLSigID
                    ans = SAITouchYesNo("Capture BOL Signature?")
                    If ans
                      temp$ = "sigcap ticket_nbr=<" + TicketHeader.TicketNo$ + "> sig_id=<" + Str$(BOLSigID) + "> location=<" + Branch$ + ">"
                      temp$ = temp$ + " transaction_type=<S> event_code=<SIGNATURE> branch_code=<" + Branch$ + ">"
                      temp$ = temp$ + " cust_nbr=<" + TicketHeader.EntityNo$ + "> cust_name=<" + Trim$(TicketHeader.Name$) + ">"
                      temp$ = temp$ + "  app_date_time=<" + DateUsing$(Tim#(0),"YYYY-MM-DD HH:NN:SS") + "> initials=<" + WeighMaster$ + ">"
                      temp$ = temp$ + "!"
                      Do 
                        Call SAICaptureSignature(SignaturePad$,temp$,stat,errmess$)
                        If stat
                          If stat < 0 Let errmess$ = "No Signature received."
                          w$ = SAITouchGeneric$("Signature Capture",errmess$,2,"&&&Retry~&Cancel","RC")
                          If w$ = "C" Exit Do 
                        Else 
                          Exit Do 
                        End If 
                      Loop 
                    End If 
                  End If 
                End If 
                Call WriteSalesTicket()
                If PrintBOLFlag And TicketHeader.BOLNo$ Call PrintBOL()
                Call PrintSalesTicket(TicketPrinter$,TicketPrinterType$,TicketForm$,TicketCopies,"",status)
                LastTicket$ = TicketHeader.TicketNo$
                If TicketAudit
                  Call LoadTicketAuditHeader()
                  TicketAudit.Event$ = "Ticket Completed"
                  Call WriteTicketAudit()
                End If 
                status = 0
                Exit Do 
              End If 
            Case 'F3' ! Cancel
              status = 1
              Exit Do 
          End Select 
        Loop 
        Close #chwin
        If status = 0
          If SCL_STkt_EmailAlert And EmailSalesTickets$ = "Y"
            Call SAIGetEmailAlertAddresses(ch_db,"SCL_STkt",TicketHeader.EntityNo$,EmailToList$,EmailCCList$,FromAddress$,status,errmess$)
            If status = 0
              EmailString$ = "From=" + FromAddress$ + ",To=" + EmailToList$
              If EmailCCList$ Let EmailString$ = EmailString$ + ",CC=" + EmailCCList$
              EmailString$ = EmailString$ + ",Subject=''Ticket # " + TicketHeader.TicketNo$ + " for " + TicketHeader.EntityNo$ + " from " + Trim$(Company$[63,92]) + "''"
              EmailString$ = EmailString$ + ",Msg=See attached.\15\\15\"
              Call Env(2,"DPEMAIL",EmailString$)
              Call PrintSalesTicket("email","LASER",TicketForm$,1,"",status)
            End If 
          End If 
          If TicketHeader.ReleaseNo And SalesRelease.TMS_Flag Call TMSUpdate("C")
          Exit Do 
        End If 
      Case 'F8' ! More
        Bset = 2
        Call SalesButtons(Bset)
      Case 'F10' ! Back
        Bset = 1
        Call SalesButtons(Bset)
      Case 'F11' ! Capture Photo
        If z$[644,646] = "323" And TicketHeader.EntityNo$[1,3] = "CP0" ! SA Recycling - Peddler
          temp$ = ""
        Else 
          temp$ = TicketHeader.Name$
        End If 
        Call SAICapturePhoto(CameraDefs$[],TicketHeader.TicketNo$,"S",Branch$,TicketHeader.EntityNo$,temp$,WeighMaster$,PhotoCaptured)
        If PhotoCapture Let TicketHeader.Photo = 1
      Case 'F12' ! CheckWeight
        TicketDetail. = Items.[1]
        Call MultiSalesCheckWt(status)
        If status = 0
          Call SAITouchMessage("Ticket is within tolerance.")
        Else If status < 0
          Call SAITouchWarning("Tolerance checking not appropriate.")
        End If 
      Case 'F13' ! Void Ticket
        If WMVoid$ = "N"
          Call SAITouchWarning("You are not authorized to VOID In-Yard tickets.")
        Else 
          ans = SAITouchYesNo("Are you sure you want to VOID this ticket?")
          If ans
            Call VoidInYard(status)
            If status = 0 Exit Do 
          End If 
        End If 
      Case 'F60' ! Certification Info
        Call CertificationInfo()
      Case 'F61' ! Config File Info
        Call ConfigFileInfo()
      Case 'F62' ! Display Files
        Call SAIChannelDisplay()
      Case 'F63' ! Version
        Call SAIVersion(ident$,Msc$(9))
    End Select 
  Loop 
  status = 0
End Sub 
Sub DisplayEnlargedPhoto(i,status)
  Search #ch_db;"SELECT * FROM InYard_Hdr WHERE TicketNo=" + SQLV$(InYardList.[i].TicketNo$)
  If Chf(ch_db)
    Map Record #ch_db As Ticket_Header
    Read Record #ch_db;TicketHeader.
  Else 
    Call SAITouchWarning("Ticket No: " + InYardList.[i].TicketNo$ + " no longer In-Yard.")
    status = 1
    Exit Sub 
  End If 
  Call RetrieveInYardItems(ItemCount)
  TransType$ = TicketHeader.TktType$
  If InYardList.[i].TktMode$ = "T"
    If TransType$ = "P"
      TransType$ = "<T"
    Else If TransType$ = "S"
      TransType$ = ">T"
    End If 
  End If 
  temp$ = "ID: " + TicketHeader.InYardID$ + ", Ticket # " + TicketHeader.TicketNo$
  chwin = SAIOpenWindow(temp$,900,290,1)
  If InYardDemo$ = "Y"
    w$ = i Using "SDT&&&&#.JPG"
  Else 
    w$ = "SD" + TicketHeader.TicketNo$ + ".JPG"
  End If 
  Print #chwin;PChr$(JPThumbsLocation$ + w$,10,5,510,200);'FITIMAGE';
  Print #chwin;PChr$("Arial Mono for dl4");'FONTFACE 8FONTSIZE EBOLD WCSETFONT';
  Select Case TransType$
    Case "P"
      temp$ = "PURCHASE"
    Case "S"
      temp$ = "SALE"
    Case "<T"
      temp$ = "TRANSFER IN"
    Case ">T"
      temp$ = "TRANSFER OUT"
    Case "W"
      temp$ = "WEIGHT ONLY"
  End Select 
  Print #chwin;PChr$(30,520,5,890,255,temp$,0);'WCTEXT';
  temp$ = Rep$(" ",11) + "GROSS" + Rep$(" ",20) + "TARE"
  Print #chwin;PChr$(31,10,195,510,241,temp$,0);'WCTEXT';
  Print #chwin;PChr$("Arial");'FONTFACE BBOLD WCSETFONT';
  Print #chwin;PChr$(32,10,243,510,255,"",0);'WCTEXT';
  Print #chwin;'EBOLD 12FONTSIZE WCSETFONT';
  Call SAIButtons(chwin,2,1,"Select~&&Cancel",900,260,25,120,20)
  If TicketHeader.Photo Print #chwin;PChr$(3,740,260,890,285,"Display\15\All Photos",2);'WCBUTTON';
  Print #chwin;PChr$("Arial Mono for dl4");'FONTFACE 8FONTSIZE WCSETFONT';
  Print #chwin;'30WCSELECT CU 12ST 29ST';
  Print #chwin;"ID:";'HT';TicketHeader.InYardID$;'CR'
  Print #chwin;"Ticket #:";'HT';TicketHeader.TicketNo$;'CR'
  Print #chwin;"Ship Date:";'HT';SAISafeDateUsing$(TicketHeader.ShipmentDate#,dateformat$);'CR'
  Print #chwin;"Vehicle #:";'HT';TicketHeader.VehNo$;'CR'
  If TicketHeader.OrderNo$ Print #chwin;"Contract: ";'HT';TicketHeader.OrderNo$;"-";TicketHeader.OrderLine$;'CR'
  Print #chwin;"Name:";'HT';TicketHeader.EntityNo$;'CR HT';TicketHeader.Name$;'CR'
  If TicketHeader.CarrierNo$ Print #chwin;"Carrier:";'HT';TicketHeader.CarrierNo$;'CR HT';SAICodesFileDesc$(ch_110Aro,"C",SAISpaceFill$(TicketHeader.CarrierNo$,6));'CR'
  If TicketHeader.TripTicketNo$ Print #chwin;"Trip Ticket #:";'HT';TicketHeader.TripTicketNo$;'CR'
  If ItemCount
    Print #chwin;"Material:";'HT';Items.[1].MaterialCode$;
    If Trim$(Items.[1].StockPile$) Print #chwin;"     StockPile: ";Items.[1].StockPile$;
    Print #chwin;'CR HT';Items.[1].MaterialDesc$;'CR'
    Print #chwin;'31WCSELECT CU 11ST 36ST';
    Print #chwin;"Weights:";'HT';Trim$(Items.[1].GrossWt Using "---,---,---");'HT';Trim$(Items.[1].TareWt Using "---,---,---")
    Print #chwin;"Date/Time:";'HT';
    If Items.[1].GrossWtTime# Print #chwin;SAISafeDateUsing$(Items.[1].GrossWtTime#,dateformat$ + " HH:NN:SS");
    If Items.[1].TareWtTime# Print #chwin;'HT';SAISafeDateUsing$(Items.[1].TareWtTime#,dateformat$ + " HH:NN:SS");
    Print #chwin;
    Print #chwin;"Duration:";'HT';Duration$(Items.[1].GrossWtTime#);'HT';Duration$(Items.[1].TareWtTime#)
    Print #chwin;"WghMaster:";'HT';
    If Items.[1].GrossWtWM$ Print #chwin;SAICodesTableDesc$(ch_db,"Codes_WeighMaster","WeighMasterCode",Items.[1].GrossWtWM$);
    If Items.[1].TareWtWM$ Print #chwin;'HT';SAICodesTableDesc$(ch_db,"Codes_WeighMaster","WeighMasterCode",Items.[1].TareWtWM$);
    Print #chwin;
  End If 
  If TicketHeader.InUse
    PortNumber = TicketHeader.InUsePort$
    TicketHeader.InUse = SAICheckInUse(PortNumber,TicketHeader.InUseBy$,"truckscale,retailscale,multimatsales,mixunload")
  End If 
  If TicketHeader.InUse
    Print #chwin;'32WCSELECT CU';
    Print #chwin;PChr$(-1,SAIColorWord("RED"));'WCSETCOLOR';
    Print #chwin;"In use by Port: " + TicketHeader.InUsePort$ + ", User: " + TicketHeader.InUseBy$;
  End If 
  Print #chwin;'0WCSELECT 2WCFOCUS';
  If TicketHeader.InUse Print #chwin;'1WCDISABLE';
  Do 
    Input #chwin; Len (1);w$
    Select Case w$
      Case 'F1' ! Select
        status = 0
        Exit Do 
      Case 'F2' ! Cancel
        status = 1
        Exit Do 
      Case 'F3' ! Display All Photos
        Call SAIViewPhotos(TicketHeader.TicketNo$,Branch$,PhotoURL$,TicketHeader.ShipmentDate#)
    End Select 
  Loop 
  Close #chwin
End Sub 
Sub InYardDisplayItem(i)
  TransType$ = InYardList.[i].TktType$
  If InYardList.[i].TktMode$ = "T"
    If TransType$ = "S"
      TransType$ = ">T"
    Else 
      TransType$ = "<T"
    End If 
  End If 
  If InYardList.[i].InUse
    PortNumber = InYardList.[i].InUsePort$
    InYardList.[i].InUse = SAICheckInUse(PortNumber,InYardList.[i].InUseBy$,"truckscale,retailscale,multimatsales,mixunload")
  End If 
  If InYardPhotos$ = "Y"
    Print #chinyd;PChr$("Arial");'FONTFACE 8FONTSIZE WCSETFONT';
    If InYardDemo$ = "Y"
      w$ = icount Using "SDT&&&&#.JPG"
    Else 
      w$ = "SD" + InYardList.[i].TicketNo$ + ".JPG"
    End If 
    Print #chinyd;PChr$(JPThumbsLocation$ + w$,x,y,x + w,y + h);'FITIMAGE';
    Print #chinyd;PChr$(49 + icount,x,y,x + w,y + h);'WCPAD';
    temp$ = "ID: " + InYardList.[i].InYardID$ + "\15\" + Trim$(SAISpaceFill$(InYardList.[i].Name$,15)) + "\15\Ticket # " + InYardList.[i].TicketNo$ + "\15\"
    If InYardList.[i].InUse
      temp$ = temp$ + "IN-USE BY: " + InYardList.[i].InUseBy$ + "\15\"
      opt = 1
    Else 
      temp$ = temp$ + "\15\"
      opt = 2
    End If 
    Select Case TransType$
      Case "P"
        temp$ = temp$ + "PURCHASE"
      Case "R"
        temp$ = temp$ + "PURCHASE - MIX"
      Case "S"
        temp$ = temp$ + "SALE"
      Case "<T"
        temp$ = temp$ + "TRANSFER IN"
      Case ">T"
        temp$ = temp$ + "TRANSFER OUT"
    End Select 
    temp$ = Replace$(temp$,"&","&&")
    Print #chinyd;PChr$(29 + icount,x,y + h + 2,x + w,y + h + bh,temp$,opt);'WCBUTTON';
    If icount = 5
      x = x0
      y = y + h + dy
    Else 
      x = x + w + 25
    End If 
  Else 
    temp$ = SAISpaceFill$(InYardList.[i].InYardID$,12) + SAISpaceFill$(InYardList.[i].TicketNo$,8)
    temp$ = temp$ + SAISpaceFill$(InYardList.[i].Name$,15) + "  " + SAISpaceFill$(InYardList.[i].MaterialDesc$,15) + "  "
    temp$ = temp$ + InYardList.[i].GrossWt Using "#######" + "  " + InYardList.[i].TareWt Using "#######" + "   " + SAISpaceFill$(TransType$,3) + SAISpaceFill$(InYardList.[i].InspectionStatus$,1)
    If InYardList.[i].InUse
      temp$ = temp$ + "\15\In use by Port: " + InYardList.[i].InUsePort$ + ", User: " + InYardList.[i].InUseBy$
      opt = 1
    Else 
      opt = 2
    End If 
    temp$ = Replace$(temp$,"&","&&")
    Print #chinyd;PChr$(29 + icount,5,y,795,y + 25,temp$,opt);'WCBUTTON';
    If InYardList.[i].Photo
      Print #chinyd;PChr$(39 + icount,800,y,895,y + 25,"Photo",2);'WCBUTTON';
    End If 
    y = y + 30
  End If 
  ilistsel$[icount] = Str$(i)
End Sub 
Sub InYardDisplay(ipage)
  icount = 0
  Clear ilistsel$[]
  Print #chinyd;PChr$(30,59);'WCDELETE CU';
  Print #chinyd;PChr$(1,3);'WCDISABLE';
  Print #chinyd;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE WCSETFONT';
  y = ylist
  x = x0
  istart = (ipage - 1) * imax + 1
  For i = istart To istart + imax - 1
    If i > iycount Exit For 
    icount = icount + 1
    Call InYardDisplayItem(i)
  Next i
  Print #chinyd;PChr$(1,3);'WCENABLE';
  If i > iycount Print #chinyd;'2WCDISABLE';
  If ipage = 1 Print #chinyd;'1WCDISABLE';
End Sub 
Sub InYardQuery()
  iycount = 0
  Clear InYardList.[]
  SQL$ = "SELECT H.TicketNo,Branch,InYardID,ItemNo,TktType,TktMode,ShipmentDate,Name,Photo,InUse,InUseBy,InUsePort,MaterialDesc,GrossWt,TareWt,InspectionStatus FROM InYard_Hdr H"
  SQL$ = SQL$ + " LEFT JOIN InYard_Dtl D ON H.TicketNo=D.TicketNo"
  SQL$ = SQL$ + " WHERE Branch=" + SQLV$(Branch$)
  If UseYardZones$ = "Y" And YardZone$
    SQL$ = SQL$ + " AND YardZone IN (" + SQLV$(YardZone$) + "," + SQLV$("") + ")"
  End If 
  Select Case Filter$
    Case "P"
      SQL$ = SQL$ + " AND TktType IN (" + SQLV$("P") + "," + SQLV$("R") + ") AND TktMode<>" + SQLV$("T")
    Case "S"
      SQL$ = SQL$ + " AND TktType=" + SQLV$("S") + " AND TktMode<>" + SQLV$("T")
    Case "T"
      SQL$ = SQL$ + " AND TktMode=" + SQLV$("T")
    Case "W"
      SQL$ = SQL$ + " AND TktType=" + SQLV$("W")
  End Select 
  If AllowVehTypeChange$ = "N"
    SQL$ = SQL$ + " AND VehType=" + SQLV$(DefaultVehType$)
  End If 
  If SearchString$
    SQL$ = SQL$ + " AND InYardID LIKE " + SQLV$("%" + SearchString$ + "%")
  End If 
  SQL$ = SQL$ + " ORDER BY InYardID,Itemno"
  temp$ = ""
  Search #ch_db;SQL$
  nr = Chf(ch_db)
  If nr
    Map Record #ch_db As InYard_List
    For n = 1 To nr
      Read Record #ch_db;InYardList.[0]
      If InYardList.[0].TicketNo$ = temp$
        If InYardList.[0].GrossWt > InYardList.[iycount].GrossWt Let InYardList.[iycount].GrossWt = InYardList.[0].GrossWt
        If InYardList.[0].TareWt < InYardList.[iycount].TareWt Let InYardList.[iycount].TareWt = InYardList.[0].TareWt
      Else 
        iycount = iycount + 1
        If iycount > maxinyard
          maxinyard = maxinyard + 50
          Dim InYardList.[maxinyard] As InYard_List
        End If 
        If InYardList.[0].ItemNo = SQLNull()
          Clear InYardList.[0].ItemNo,InYardList.[0].MaterialDesc$,InYardList.[0].GrossWt,InYardList.[0].TareWt
        End If 
        InYardList.[iycount] = InYardList.[0]
        temp$ = InYardList.[0].TicketNo$
      End If 
    Next n
  End If 
  If nr > imax
    npages = Int(nr / imax)
    If Fra(nr / imax) Let npages = npages + 1
  Else If nr
    npages = 1
  Else 
    npages = 0
  End If 
  ipage = 1
End Sub 
Sub InYardList(FilterType$,status)
  Filter$ = FilterType$
  Clear SearchString$
  Clear RFIDMaster.,SupplierID.
  If RFReader$[ReadScale] And RFAutoRead$ = "Y"
    Call GetRFID(RFID$,RFIDMaster.,status)
    If status = 0
      Call RFIDInYardLookup(RFID$,status)
      If status = 0
        Exit Sub 
      Else 
        Call SAITouchWarning("RFID read, but not found In-Yard.")
        Clear RFIDMaster.
      End If 
    End If 
  End If 
  chinyd = SAIOpenWindow("In-Yard Ticket Display for Branch " + Branch$,900,290,1)
  Print #chinyd;PChr$("Arial");'FONTFACE 10FONTSIZE WCSETFONT';
  Print #chinyd;PChr$(16777215);'BACKCOLOR CS'
  Print #chinyd;PChr$(16777215,255);'WCSETCOLOR'
  If InYardPhotos$ = "Y"
    x = 110 \ y = 5 \ y0 = 35 \ dx = 120
    If RFReader$[ReadScale] Let x = 60
    imax = 10
    y0 = 37 \ x0 = 25
    w = 150
    h = Int(w * .75 / 2)
    bh = 47
    dy = 57
  Else 
    x = 60 \ y = 2 \ y0 = 35 \ dx = 120
    imax = 7
  End If 
  Print #chinyd;PChr$(10,x,y,x + dx,y + 25,"   ALL TYPES",2 + 4);'WCRADIO';
  x = x + dx + 20
  Print #chinyd;PChr$(11,x,y,x + dx,y + 25,"PURCHASE",2 + 4);'WCRADIO';
  x = x + dx + 20
  Print #chinyd;PChr$(12,x,y,x + dx,y + 25,"    SALE",2 + 4);'WCRADIO';
  x = x + dx + 20
  Print #chinyd;PChr$(13,x,y,x + dx,y + 25,"TRANSFER",2 + 4);'WCRADIO';
  x = x + dx + 20
  Print #chinyd;PChr$(14,x,y,x + dx,y + 25,"WEIGHT\15\  ONLY",2 + 4);'WCRADIO';
  Call SAISetRadio(chinyd,10,"APSTW",Filter$)
  Print #chinyd;'WCRESETCOLOR';
  If RFReader$[ReadScale] Print #chinyd;PChr$(20,755,y,895,y + 25,"Read RFID (" + Str$(ReadScale) + ")",2);'WCBUTTON';
  y = y0
  Print #chinyd;'WCRESETCOLOR';
  Print #chinyd;'12FONTSIZE WCSETFONT';
  Call SAIButtons(chinyd,3,1,"< Previous~Next >~Cancel",900,260,25,120,20)
  Print #chinyd;PChr$(5,10,260,130,285,"Search ID",2);'WCBUTTON';
  Print #chinyd;PChr$(6,770,260,890,285,"Scan Ticket",2);'WCBUTTON';
  Print #chinyd;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE WCSETFONT';
  Print #chinyd;PChr$(-1,SAIColorRGB(255,255,0));'WCSETCOLOR';
  If InYardPhotos$ <> "Y"
    y = 35
    temp$ = " I.D. #      TKT #   NAME             MATERIAL        GROSS WT  TARE WT  TYP INS  PHOTO  "
    !            XXXXXXXXXXX XXXXXX  XXXXXXXXXXXXXXX  XXXXXXXXXXXXXXX  #######  #######   X  X
    Print #chinyd;PChr$(100,5,y,895,y + 10,temp$);'WCLABEL';
    ylist = 47
  Else 
    Print #chinyd;PChr$("Arial");'FONTFACE 8FONTSIZE WCSETFONT';
    ylist = 37
  End If 
  Print #chinyd;'WCRESETCOLOR';
  Call InYardQuery()
  Call InYardDisplay(ipage)
  If InYardScanDefault$ = "Y"
    ScanDefault = 1
  Else 
    ScanDefault = 0
  End If 
  Print #chinyd;'3WCFOCUS';
  Do 
    If ScanDefault
      ScanDefault = 0
      w$ = 'F6'
    Else 
      Input #chinyd; Len (1);w$
    End If 
    Select Case w$
      Case 'F1' ! Previous
        If ipage > 1
          ipage = ipage - 1
          Call InYardDisplay(ipage)
        End If 
      Case 'F2' ! Next
        If ipage < npages
          ipage = ipage + 1
          Call InYardDisplay(ipage)
        End If 
      Case 'F3' ! Cancel
        status = 1
        Exit Do 
      Case 'F5' ! Search
        w$ = SearchString$
        Call SAIKeyBoardGen("Enter Search String",KBParams.alphacase,11,0,w$,status)
        Print #chinyd;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE WCSETFONT';
        If status = 0
          SearchString$ = Trim$(w$)
          If SearchString$
            Call RetrieveInYard(SearchString$,"",status)
          Else 
            status = 1
          End If 
          If status = 0
            ID$ = TicketHeader.InYardID$
            Exit Do 
          Else 
            Call InYardQuery()
            Call InYardDisplay(ipage)
          End If 
        End If 
      Case 'F6' ! Scan Ticket
        w$ = ""
        Call SAIKeyBoardGen("Enter/Scan Ticket No.",KBParams.alphacase,6,0,w$,status)
        Print #chinyd;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE WCSETFONT';
        If status = 0
          If Len(w$) <> 6
            Call SAITouchWarning("Invalid Ticket No. length.")
          Else 
            Call RetrieveInYard("",w$,status)
            If status = 0
              ID$ = TicketHeader.InYardID$
              Exit Do 
            Else If status = 2
              Call SAITouchWarning("Ticket No. " + w$ + " is in Branch " + TicketHeader.Branch$ + " In-Yard.")
            Else If status = 3
              ! in use - do nothing
            Else 
              Call SAITouchMessage("Ticket No. " + w$ + " not found In-Yard.")
            End If 
          End If 
        End If 
      Case 'F20' ! Read RFID
        Call GetRFID(RFID$,RFIDMaster.,status)
        If status = 0
          Call RFIDInYardLookup(RFID$,status)
          If status = 0
            Exit Do 
          Else 
            Call SAITouchWarning("RFID read, but not found In-Yard.")
            Clear RFIDMaster.
          End If 
        Else If status = -1
          Call SAITouchMessage("No RFID tag present.")
        End If 
      Case 'F10' To 'F14' ! Change in list type
        temp$ = "APSTW"
        i = Asc(w$) - Asc('F9')
        Filter$ = temp$[i,i]
        Call InYardQuery()
        Call InYardDisplay(ipage)
      Case 'F30' To 'F39'
        i = ilistsel$[Asc(w$) - Asc('F29')]
        Call RetrieveInYard("",InYardList.[i].TicketNo$,status)
        If status = 0
          ID$ = TicketHeader.InYardID$
          Exit Do 
        Else If status = 3
          ! in use - do nothing
        Else 
          Call SAITouchWarning("Ticket No: " + InYardList.[i].TicketNo$ + " no longer In-Yard.")
        End If 
      Case 'F40' To 'F49' ! Display Scale Photos
        i = ilistsel$[Asc(w$) - Asc('F39')]
        Call SAIViewPhotos(InYardList.[i].TicketNo$,Branch$,PhotoURL$,InYardList.[i].ShipmentDate#)
      Case 'F50' To 'F59' ! Display enlarged photo
        i = ilistsel$[Asc(w$) - Asc('F49')]
        Call DisplayEnlargedPhoto(i,status)
        If status = 0
          Call RetrieveInYard("",InYardList.[i].TicketNo$,status)
          If status = 0
            ID$ = TicketHeader.InYardID$
            Exit Do 
          Else If status = 3
            ! in use - do nothing
          Else 
            Call SAITouchWarning("Ticket No: " + InYardList.[i].TicketNo$ + " no longer In-Yard.")
          End If 
        End If 
    End Select 
  Loop 
  Close #chinyd
End Sub 
Sub NoticeDisplayItem(i)
  !  temp$=" VEH NO     SHIP #  NAME               MATERIAL             ORDER-LN   SHIP DT    E.T.A."
  !             "XXXXXXXXXXX XXXXXX  XXXXXXXXXXXXXXXXX  XXXXXXXXXXXXXXX  XXXXXXXXXX-XX  XX/XX/XX  XX/XX/XX
  temp$ = SAISpaceFill$(PurNotices.[i].VehNo$,12)
  If Trim$(PurNotices.[i].TripTicketNo$)
    temp$ = temp$ + SAISpaceFill$(PurNotices.[i].TripTicketNo$,8)
  Else 
    temp$ = temp$ + SAISpaceFill$(PurNotices.[i].ShipmentNo$,8)
  End If 
  temp$ = temp$ + SAISpaceFill$(SAIGetEntityName$(ch_db,"Supplier_Master","SupplierNo",PurNotices.[i].SupplierNo$),17)
  If PurNotices.[i].PONo$ ! Get Material Desc. from contract line
    ktemp$ = SAISpaceFill$(PurNotices.[i].SupplierNo$,6) + SAIFill$(PurNotices.[i].PONo$,"R"," ",10) + SAISpaceFill$(PurNotices.[i].POLine$,2)
    Call SAIGetRecord(ch_1210ro,recdef_1210.,ktemp$,1,"Y","U",r,PODetail$,PODetail[],stat,errmess$)
    temp$ = temp$ + "  " + PODetail$[111,125]
    Clear PODetail$
  Else 
    temp$ = temp$ + Rep$(" ",17)
  End If 
  temp$ = temp$ + " " + SAIFill$(PurNotices.[i].PONo$ + "-" + SAISpaceFill$(PurNotices.[i].POLine$,2),"R"," ",13)
  temp$ = temp$ + "  " + SAISafeDateUsing$(PurNotices.[i].ShipmentDate#,dateformat$)
  temp$ = temp$ + "  " + SAISafeDateUsing$(PurNotices.[i].EstReceiveDate#,dateformat$)
  temp$ = Replace$(temp$,"&","&&")
  Print #chno;PChr$(29 + icount,5,y,895,y + 25,temp$,2);'WCBUTTON';
  y = y + 30
  ilistsel$[icount] = Str$(i)
End Sub 
Sub NoticeDisplay(ipage)
  icount = 0
  Clear ilistsel$[]
  Print #chno;PChr$(30,59);'WCDELETE CU';
  Print #chno;PChr$(1,3);'WCDISABLE';
  Print #chno;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE WCSETFONT';
  y = ylist
  x = x0
  istart = (ipage - 1) * imax + 1
  For i = istart To istart + imax - 1
    If i > nr Exit For 
    icount = icount + 1
    Call NoticeDisplayItem(i)
  Next i
  Print #chno;PChr$(1,3);'WCENABLE';
  If i > nr Print #chno;'2WCDISABLE';
  If ipage = 1 Print #chno;'1WCDISABLE';
End Sub 
Sub NoticeQuery()
  Clear PurNotices.[]
  SQL$ = "SELECT * FROM Pur_Notice"
  SQL$ = SQL$ + " WHERE Branch=" + SQLV$(Branch$)
  SQL$ = SQL$ + " AND Status=" + SQLV$("")
  If AllowVehTypeChange$ = "N" Let SQL$ = SQL$ + " AND VehType=" + SQLV$(DefaultVehType$)
  If TodayOnly Let SQL$ = SQL$ + " AND ShipmentDate=" + SQLD$(RunDate#)
  If SearchString$
    If SearchBy$ = "V"
      SQL$ = SQL$ + " AND VehNo LIKE " + SQLV$("%" + SearchString$ + "%")
    Else If SearchBy$ = "S"
      SQL$ = SQL$ + " AND (ShipmentNo LIKE " + SQLV$("%" + SearchString$ + "%") + " OR TripTicketNo LIKE " + SQLV$("%" + SearchString$ + "%") + ")"
    End If 
  End If 
  If Mill$ = "Y"
    SQL$ = SQL$ + " ORDER BY VehNo"
  Else 
    SQL$ = SQL$ + " ORDER BY ShipmentDate,NoticeNo"
  End If 
  temp$ = ""
  Search #ch_db;SQL$
  nr = Chf(ch_db)
  If nr
    Map Record #ch_db As Pur_Notice
    If nr > maxnotice
      maxnotice = nr
      Dim PurNotices.[maxnotice] As Pur_Notice
    End If 
    For n = 1 To nr
      Read Record #ch_db;PurNotices.[n]
    Next n
  End If 
  ipage = 1
End Sub 
Sub ListNotices(status)
  Clear SearchString$,SearchBy$,TodayOnly
  Clear RFIDMaster.,SupplierID.
  !  if RFReader$[ReadScale] AND RFAutoRead$="Y"
  !    InYard$=""
  !    Call GetRFID(RFID$,RFIDMaster.,status)
  !    if status=0 Let SearchString$=Trim$(RFIDMaster.InYardID$)
  !  endif
  chno = SAIOpenWindow("Noticed Purchase Display",900,290,1)
  Print #chno;PChr$("Arial");'FONTFACE 10FONTSIZE WCSETFONT';
  Print #chno;PChr$(16777215);'BACKCOLOR CS'
  Print #chno;PChr$(16777215,255);'WCSETCOLOR'
  Print #chno;'WCRESETCOLOR';
  Print #chno;'12FONTSIZE WCSETFONT';
  Call SAIButtons(chno,3,1,"< Previous~Next >~Cancel",940,260,25,120,15)
  Print #chno;PChr$(4,5,260,105,285,"Search\15\Veh No",2);'WCBUTTON';
  Print #chno;PChr$(5,115,260,215,285,"Search\15\Ship #",2);'WCBUTTON';
  Print #chno;PChr$(6,775,260,895,285,"Today Only",2);'WCBUTTON';
  Print #chno;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE WCSETFONT';
  Print #chno;PChr$(-1,SAIColorRGB(255,255,0));'WCSETCOLOR';
  y = 2 \ imax = 8
  temp$ = " VEH NO     SHIP #  NAME               MATERIAL             ORDER-LN   SHIP DT    E.T.A."
  !             "XXXXXXXXXXX XXXXXX  XXXXXXXXXXXXXXXXX  XXXXXXXXXXXXXXX  XXXXXXXXXX-XX  XX/XX/XX  XX/XX/XX
  Print #chno;PChr$(100,5,y,895,y + 10,temp$);'WCLABEL';
  ylist = 14
  Print #chno;'WCRESETCOLOR';
  Call NoticeQuery()
  Call NoticeDisplay(ipage)
  Print #chno;'3WCFOCUS';
  Do 
Notice_Input: !
    Input #chno; Len (1);w$
    Select Case w$
      Case 'F1' ! Previous
        If ipage > 1
          ipage = ipage - 1
          Call NoticeDisplay(ipage)
        End If 
      Case 'F2' ! Next
        ipage = ipage + 1
        Call NoticeDisplay(ipage)
      Case 'F3' ! Cancel
        status = 1
        Exit Do 
      Case 'F4' ! Search by Vehicle No
        w$ = SearchString$
        Call SAIKeyBoardGen("Enter Veh No. Search String",KBParams.alphacase,11,0,w$,status)
        Print #chno;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE WCSETFONT';
        If status = 0
          SearchBy$ = "V"
          SearchString$ = w$
          Call NoticeQuery()
          Call NoticeDisplay(ipage)
        End If 
      Case 'F5' ! Search by Shipment # (Trip Ticket #)
        w$ = SearchString$
        Call SAIKeyBoardGen("Enter Ship # Search String",KBParams.alphacase,11,0,w$,status)
        Print #chno;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE WCSETFONT';
        If status = 0
          SearchBy$ = "S"
          SearchString$ = w$
          Call NoticeQuery()
          Call NoticeDisplay(ipage)
        End If 
      Case 'F6' ! Date Filter
        If TodayOnly
          TodayOnly = 0
          temp$ = "Today Only"
        Else 
          TodayOnly = 1
          temp$ = "All Dates"
        End If 
        Print #chno;PChr$("Arial");'FONTFACE 12FONTSIZE WCSETFONT';
        Print #chno;PChr$(6,770,260,890,285,temp$,2);'WCBUTTON';
        Print #chno;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE WCSETFONT';
        Call NoticeQuery()
        Call NoticeDisplay(ipage)
      Case 'F30' To 'F39'
        If ViewNoticesOnly$ = "Y"
          Call SAITouchMessage("You can only view notices, they are not selectable.")
          Goto Notice_Input
        End If 
        i = Asc(w$) - Asc('F29')
        n = Val(ilistsel$[i])
        Search #ch_db;"SELECT * FROM Pur_Notice WHERE NoticeNo=" + SQLV$(PurNotices.[n].NoticeNo)
        If Chf(ch_db)
          Map Record #ch_db As Pur_Notice
          Read Record #ch_db;PurNotice.
          If PurNotice.Status$ <> "" ! OR PurNotice.TicketNo$<>""
            Call SAITouchWarning("Selected Notice is currently in use by someone else.")
            Call NoticeQuery()
            Call NoticeDisplay(ipage)
          Else 
            ! Create In-Yard
            If Mill$ = "Y"
              ID$ = Trim$(PurNotice.VehNo$)
              Search #ch_db;"SELECT TicketNo FROM InYard_Hdr WHERE Branch=" + SQLV$(Branch$) + " AND InYardID=" + SQLV$(ID$)
              If Chf(ch_db)
                Call SAITouchWarning("Vehicle Number already In-Yard.  Cannot process.")
                status = 1
                Exit Do 
              End If 
            Else 
              Call GetInYardID("NL",ID$,status)
              If status Goto Notice_Input
            End If 
            Clear TicketHeader.,TicketTotals.,Items.[],TicketDetail.,ItemCount
            TicketHeader.Branch$ = Branch$
            TicketHeader.StartTime# = Tim#(0)
            TicketHeader.InYardID$ = ID$
            TicketHeader.EntityNo$ = PurNotice.SupplierNo$
            Call RetrieveSupplier(TicketHeader.EntityNo$,Supplier.,stat)
            If stat
              Call SAITouchWarning("Cannot access SupplierNo " + TicketHeader.EntityNo$ + ".")
              status = 1
              Exit Do 
            End If 
            Call PopulateSupplierAddress()
            TicketHeader.Trader$ = Supplier.TraderCode$
            TicketHeader.ShipmentDate# = PurNotice.ShipmentDate#
            TicketHeader.EntryDate# = RunDate#
            TicketHeader.TktType$ = "P"
            TicketHeader.Noticed = 1
            TicketHeader.OrderNo$ = PurNotice.PONo$
            TicketHeader.OrderLine$ = PurNotice.POLine$
            TicketHeader.ShipFromTo$ = PurNotice.ShipFrom$
            TicketHeader.CarrierNo$ = PurNotice.CarrierNo$
            TicketHeader.CarrierRefNo$ = PurNotice.CarrierRefNo$
            TicketHeader.TripTicketNo$ = PurNotice.TripTicketNo$
            TicketHeader.SuppShipNo$ = PurNotice.SuppShipNo$
            TicketHeader.VehType$ = PurNotice.VehType$
            TicketHeader.VehSize$ = PurNotice.VehSize$
            TicketHeader.VehNo$ = PurNotice.VehNo$
            TicketHeader.TktComment$ = PurNotice.Comments$ ! This will truncate it to 50 chars
            If OTMFreight$ = "Y" And TicketHeader.CarrierRefNo$
              Clear OTMFreightInterface.
              ktemp$ = SAISpaceFill$(TicketHeader.EntityNo$,6) + SAIFill$(TicketHeader.OrderNo$,"R"," ",10) + SAISpaceFill$(TicketHeader.OrderLine$,2)
              Call SAIGetRecord(ch_1210ro,recdef_1210.,ktemp$,1,"Y","U",r,PODetail$,PODetail[],stat,errmess$)
              SQL$ = "SELECT * FROM OTM_Freight_Interface"
              SQL$ = SQL$ + " WHERE OTMRefNo=" + SQLV$(TicketHeader.CarrierRefNo$)
              SQL$ = SQL$ + " AND OriginEntityNo=" + SQLV$(TicketHeader.EntityNo$)
              SQL$ = SQL$ + " AND OriginLocationCode=" + SQLV$(Trim$(PODetail$[31,34]))
              SQL$ = SQL$ + " AND DestEntityNo=" + SQLV$(YardSupplierNo$)
              !  SQL$=SQL$+" AND DestLocationCode="+SQLV$("0000")
              If TicketHeader.VehType$ <> "T" And TicketHeader.VehNo$
                SQL$ = SQL$ + " AND VehicleNo=" + SQLV$(TicketHeader.VehNo$)
              End If 
              Search #ch_db;SQL$
              If Chf(ch_db)
                Map Record #ch_db As OTM_Freight_Interface
                Read Record #ch_db;OTMFreightInterface.
                If OTMFreightInterface.Status$ <> "" And OTMFreightInterface.Status$ <> "N"
                  Clear OTMFreightInterface.
                  Call SAITouchWarning("OTM Reference Number is aleady in use.")
                  status = 1
                  Exit Do 
                End If 
                If OTMFreightInterface.CarrierNo$ <> TicketHeader.CarrierNo$
                  Clear OTMFreightInterface.
                  Call SAITouchWarning("OTM and Notice have different Carriers.")
                  status = 1
                  Exit Do 
                End If 
              Else 
                Call SAITouchError("Cannot access OTM entry for OTMRefNo=" + TicketHeader.CarrierRefNo$ + ".")
                status = 1
                Exit Do 
              End If 
            End If 
            ! Generate TicketNo
            If Trim$(PurNotice.TicketNo$)
              TicketNo$ = PurNotice.TicketNo$
              status = 0
            Else 
              Call GenerateTicketNo("P",TicketNo$)
              If TicketNo$ = ""
                status = 1
                Exit Do 
              End If 
            End If 
            TicketHeader.TicketNo$ = TicketNo$
            If PurNotice.ShipmentNo$
              TicketHeader.ShipmentNo$ = PurNotice.ShipmentNo$
            Else 
              TicketHeader.ShipmentNo$ = TicketHeader.TicketNo$
            End If 
            If PurNotice.NoticeType$ = "CONTRACT"
              TicketHeader.OriginWtSrc$ = "NOTICE"
              TicketHeader.OriginGrossWt = PurNotice.GrossWt
              TicketHeader.OriginTareWt = PurNotice.TareWt
              TicketHeader.OriginNetWt = PurNotice.NetWt
            Else If PurNotice.NoticeType$ = "SCALE"
              TicketHeader.OriginWtSrc$ = "SCALE"
              TicketHeader.OriginGrossWt = PurNotice.GrossWt
              TicketHeader.OriginTareWt = PurNotice.TareWt
              TicketHeader.OriginNetWt = PurNotice.NetWt
              TicketHeader.ShipmentDate# = RunDate# ! Override notice shipment date
              Call DefaultVehicleNo(TicketNo$)
            Else 
              TicketHeader.OriginWtSrc$ = "INYARD"
            End If 
            ! Get Order Line
            If Trim$(TicketHeader.OrderNo$) = "UNKNOWN"
              FullPONo$ = ""
            Else If Trim$(TicketHeader.OrderNo$)
              FullPONo$ = SAIFill$(TicketHeader.OrderNo$,"R"," ",10) + SAISpaceFill$(TicketHeader.OrderLine$,2)
            Else 
              FullPONo$ = ""
            End If 
            If FullPONo$
              ktemp$ = SAISpaceFill$(TicketHeader.EntityNo$,6) + FullPONo$[1,10]
              Call SAIGetRecord(ch_1200,recdef_1200.,ktemp$,1,"Y","U",rtemp,POHeader$,POHeader[],stat,errmess$)
              If stat = 0
                If Trim$(POHeader$[214,216]) Let TicketHeader.Trader$ = Trim$(POHeader$[214,216])
              End If 
              ktemp$ = SAISpaceFill$(TicketHeader.EntityNo$,6) + FullPONo$
              Call SAIGetRecord(ch_1210ro,recdef_1210.,ktemp$,1,"Y","U",r,PODetail$,PODetail[],stat,errmess$)
              If stat = 0
                TicketHeader.ShipFromTo$ = Trim$(PODetail$[31,34])
                TicketHeader.ShippingInst$ = Trim$(PODetail$[66,95])
                TicketHeader.ShipOrdNo$ = Trim$(PODetail$[214,233])
              Else 
                Call SAITouchWarning("Cannot access P.O.# " + TicketHeader.OrderNo$ + "-" + TicketHeader.OrderLine$ + ".")
                status = 1
                Exit Do 
              End If 
              Call LoadContractMaterial("N",status)
              If status Exit Do 
            Else 
              ! Decide what to do for a non-contract notice
            End If 
            If SupplierShipNoPrompt$ = "Y" Or SupplierShipNoPrompt$ = "R"
              w$ = TicketHeader.SuppShipNo$
              Call SAIKeyBoardGen("Enter Supplier Shipment No.",KBParams.alphacase,10,0,w$,stat)
              If stat = 0 Let TicketHeader.SuppShipNo$ = Trim$(w$)
            End If 
            Try 
              Search #ch_db;"INSERT INTO InYard_Hdr (" + SQLN$(TicketHeader.) + ") VALUES (" + SQLV$(TicketHeader.) + ")"
              status = 0
            Else 
              Call SAITouchError("Error creating entry in InYard_Hdr table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
              status = 1
              Exit Do 
            End Try 
            If ItemCount = 1
              Items.[1].TicketNo$ = TicketHeader.TicketNo$
              Items.[1].ShipmentNo$ = TicketHeader.ShipmentNo$
              Try 
                Search #ch_db;"INSERT INTO InYard_Dtl (" + SQLN$(Items.[1]) + ") VALUES (" + SQLV$(Items.[1]) + ")"
              Else 
                Try Search #ch_db;"DELETE FROM InYard_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) Else Rem
                Call SAITouchError("Error creating entry in InYard_Dtl table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
                status = 1
                Exit Do 
              End Try 
            End If 
            SQL$ = "UPDATE Pur_Notice SET Status=" + SQLV$("I") + ", TicketNo=" + SQLV$(TicketHeader.TicketNo$)
            SQL$ = SQL$ + " WHERE NoticeNo=" + SQLV$(PurNotice.NoticeNo)
            Try 
              Search #ch_db;SQL$
            Else 
              status = 1
              Try Search #ch_db;"DELETE FROM InYard_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) Else Rem
            End Try 
            If OTMFreight$ = "Y" And TicketHeader.CarrierRefNo$
              OTMFreightKey.OTMRefNo$ = TicketHeader.CarrierRefNo$
              SQL$ = "UPDATE OTM_Freight_Interface SET"
              SQL$ = SQL$ + " Status=" + SQLV$("I") + ", TicketNo=" + SQLV$(TicketHeader.TicketNo$)
              SQL$ = SQL$ + " WHERE OTMFrtInterfaceID=" + SQLV$(OTMFreightInterface.OTMFrtInterfaceID)
              Try 
                Search #ch_db;SQL$
              Else 
                Call SAITouchError("Error updating Status in OTM_Freight_Interface table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
              End Try 
            End If 
            Exit Do 
          End If 
        Else 
          Call SAITouchWarning("Selected Notice is no longer available.")
          Call NoticeQuery()
          Call NoticeDisplay(ipage)
        End If 
    End Select 
  Loop 
  Close #chno
End Sub 
Sub SalesReleaseSearch(page,DateFilter)
  Print #chsrel;PChr$(1,2);'WCDISABLE';
  Print #chsrel;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE EBOLD WCSETFONT';
  Print #chsrel;PChr$(30,39);'WCDELETE';
  If page = 0
    Clear SalesRel.[]
    icount = 0 \ npages = 0
    SQL$ = "SELECT " + SQLN$(SalesRel.) + " FROM Sales_Release WHERE Branch=" + SQLV$(Branch$)
    If CustomerNo$
      SQL$ = SQL$ + " AND CustomerNo=" + SQLV$(CustomerNo$)
      If FullSONo$
        SQL$ = SQL$ + " AND SONo=" + SQLV$(Trim$(FullSONo$[1,10])) + " AND SOLine=" + SQLV$(Trim$(FullSONo$[11,12]))
      End If 
    End If 
    SQL$ = SQL$ + " AND Status IN (" + SQLV$("") + "," + SQLV$("H") + ") AND (LoadsRemaining - LoadsInProcess) > " + SQLV$(0)
    If DateFilter
      SQL$ = SQL$ + " AND YardLoadDate=" + SQLD$(RunDate#) + " ORDER BY ReleaseNo"
    Else 
      SQL$ = SQL$ + " ORDER BY YardLoadDate,ReleaseNo"
    End If 
    Try 
      Search #ch_db;SQL$
      icount = Chf(ch_db)
      If icount > SalesRel_Max
        SalesRel_Max = icount \ Dim SalesRel.[SalesRel_Max] As Sales_Release_Items
      End If 
      If icount
        Map Record #ch_db As Sales_Release_Items
        For i = 1 To icount
          Try Read Record #ch_db;SalesRel.[i] Else Rem
        Next i
      End If 
    Else 
    End Try 
    If icount
      npages = Int(icount / imax)
      If icount Mod (imax) Let npages = npages + 1
    Else 
      Exit Sub 
    End If 
  End If 
  s = page * imax + 1
  n = 0 \ y = 24
  !! temp$=      "  LOAD DATE  SAI REL #   CUSTOMER                        ORDER-LN             LOADS\15\"
  !! temp$=temp$+"             CUST REL #  CARRIER                         BOOKING #          REMAINING  "
  !  temp$=      "  11/14/08   ##########  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  XXXXXXXXXX-XX        ###      \15\"
  !  temp$=temp$+"             ##########  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  XXXXXXXXXXXXXXXX              "
  For i = s To s + imax - 1
    If i > icount Exit For 
    Try 
      temp$ = "  " + DateUsing$(SalesRel.[i].YardLoadDate#,dateformat$)
    Else 
      temp$ = Rep$(" ",10)
    End Try 
    temp$ = temp$ + "   " + SalesRel.[i].ReleaseNo Using "##########" + "  "
    ktemp$ = SAIGetEntityName$(ch_db,"Customer_Master","CustomerNo",SalesRel.[i].CustomerNo$)
    If ktemp$ Let temp$ = temp$ + SAISpaceFill$(ktemp$,30) Else Let temp$ = temp$ + SAISpaceFill$(SalesRel.[i].CustomerNo$,30)
    temp$ = temp$ + "  " + SAISpaceFill$(SalesRel.[i].SONo$ + "-" + SalesRel.[i].SOLine$,13) + Rep$(" ",8) + (SalesRel.[i].LoadsRemaining - SalesRel.[i].LoadsInProcess Using "###") + Rep$(" ",6) + "\15\"
    temp$ = temp$ + Rep$(" ",13) + SAIFill$(SalesRel.[i].CustomerReleaseNo$,"R"," ",10) + "  "
    If Trim$(SalesRel.[i].CarrierNo$)
      temp2$ = SAIGetEntityName$(ch_db,"Supplier_Master","SupplierNo",SalesRel.[i].CarrierNo$)
      If temp2$ Let temp$ = temp$ + SAISpaceFill$(temp2$,30) Else Let temp$ = temp$ + SAISpaceFill$(SalesRel.[i].CarrierNo$,30)
    Else 
      temp$ = temp$ + Rep$(" ",30)
    End If 
    temp$ = temp$ + "  " + SAISpaceFill$(SalesRel.[i].BookingNo$,16) + Rep$(" ",14)
    temp$ = Replace$(temp$,"&","&&")
    Print #chsrel;PChr$(30 + n,10,y,890,y + 25,temp$,2);'WCBUTTON';
    n = n + 1 \ y = y + 30
  Next i
  If npages = 1
    ! Leave both buttons disabled
  Else If page = 0
    Print #chsrel;'2WCENABLE';
  Else If page = npages - 1
    Print #chsrel;'1WCENABLE';
  Else 
    Print #chsrel;PChr$(1,2);'WCENABLE';
  End If 
End Sub 
Sub ListSalesReleases(CustomerNo$,FullSONo$,status)
  Clear SalesRelease.
  temp$ = "Sales Release Display"
  If CustomerNo$ Let temp$ = temp$ + " for Customer No. " + CustomerNo$
  chsrel = SAIOpenWindow(temp$,900,290,1)
  Print #chsrel;PChr$("Arial");'FONTFACE 10FONTSIZE WCSETFONT';
  Print #chsrel;PChr$(16777215);'BACKCOLOR CS'
  Print #chsrel;PChr$(16777215,255);'WCSETCOLOR'
  Print #chsrel;'WCRESETCOLOR';
  Print #chsrel;'12FONTSIZE WCSETFONT';
  Call SAIButtons(chsrel,4,1,"< Previous~Next >~Cancel~Today Only",900,262,25,120,20)
  Print #chsrel;PChr$(5,790,262,890,287,"Scan\15\Rel #",2);'WCBUTTON';
  !  print #chsrel;PChr$(5,10,262,130,285,"Search ID",2);'WCBUTTON';
  If RFReader$[ReadScale] Print #chsrel;PChr$(6,740,260,890,285,"Read RFID (" + Str$(ReadScale) + ")",2);'WCBUTTON';
  Print #chsrel;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE WCSETFONT';
  Print #chsrel;PChr$(-1,SAIColorRGB(255,255,0));'WCSETCOLOR';
  y = 2
  temp$ = "  LOAD DATE  SAI  REL #  CUSTOMER                        ORDER-LN             LOADS\15\"
  temp$ = temp$ + "             CUST REL #  CARRIER                         BOOKING #          REMAINING"
  Print #chsrel;PChr$(100,10,y,890,y + 20,temp$);'WCLABEL';
  Print #chsrel;'WCRESETCOLOR';
  DateFilter = 0
  imax = 8
  page = 0
  Call SalesReleaseSearch(page,DateFilter)
  Print #chsrel;'3WCFOCUS';
  Do 
SalesRelease_input: !
    Input #chsrel; Len (1);w$
    Select Case w$
      Case 'F1' ! Previous
        If page > 0
          page = page - 1
          Call SalesReleaseSearch(page,DateFilter)
        End If 
      Case 'F2' ! Next
        If page < npages
          page = page + 1
          Call SalesReleaseSearch(page,DateFilter)
        End If 
      Case 'F3' ! Cancel
        status = 1
        Exit Do 
      Case 'F4' ! Date Filter
        If DateFilter
          DateFilter = 0
          temp$ = "Today Only"
        Else 
          DateFilter = 1
          temp$ = "All Dates"
        End If 
        Print #chsrel;PChr$("Arial");'FONTFACE 12FONTSIZE WCSETFONT';
        Print #chsrel;PChr$(4,600,262,720,285,temp$,2);'WCBUTTON';
        Print #chsrel;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE WCSETFONT';
        page = 0
        Call SalesReleaseSearch(page,DateFilter)
      Case 'F5' ! Scan / Enter
        w$ = ""
        Call SAIKeyBoardGen("Enter/Scan Release No.",KBParams.alphacase,10,0,w$,status)
        Print #chsrel;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE WCSETFONT';
        If status = 0
          x = w$
          If x
            n = Pos(SalesRel.[], = x)
            If n > 0
              Clear SalesRelease.
              status = 1
              Try 
                Search #ch_db;"SELECT * FROM Sales_Release WHERE ReleaseNo=" + SQLV$(SalesRel.[n].ReleaseNo)
                If Chf(ch_db)
                  Map Record #ch_db As Sales_Release
                  Read Record #ch_db;SalesRelease.
                  status = 0
                  Exit Do 
                Else 
                  Call SAITouchWarning("Sales Release not found.")
                End If 
              Else 
                Call SAITouchError("Cannot retrieve Sales Release entry.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
              End Try 
            Else 
              Call SAITouchWarning("Sales Release not found in list.")
            End If 
          End If 
        End If 
      Case 'F30' To 'F37'
        i = Asc(w$) - Asc('F30')
        n = page * imax + i + 1
        Clear SalesRelease.
        If SalesRel.[n].ReleaseNo <> 0
          status = 1
          Try 
            Search #ch_db;"SELECT * FROM Sales_Release WHERE ReleaseNo=" + SQLV$(SalesRel.[n].ReleaseNo)
            If Chf(ch_db)
              Map Record #ch_db As Sales_Release
              Read Record #ch_db;SalesRelease.
              status = 0
              Exit Do 
            End If 
          Else 
            Call SAITouchError("Cannot retrieve Sales Release entry.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
          End Try 
        End If 
    End Select 
  Loop 
  Close #chsrel
End Sub 
Sub CreateInBoundTransfer(status)
  Call GetInYardID("NL",ID$,status)
  If status
    status = 1
    Exit Sub 
  End If 
  Clear Supplier.,TicketHeader.,TicketTotals.
  StockPile$ = ""
  VehType1$ = DefaultVehType$
  VehType2$ = ""
  Call VehicleSelection(VehType1$,VehType2$,status)
  If status Exit Sub 
  VehicleType$ = TicketHeader.VehType$
  Do 
    Call GetCarrier(VehicleType$,CarrierNo$,status)
    If status Exit Sub 
    If Trim$(CarrierNo$) = "" And InBoundTransferCarrierRequired$ = "Y"
      Call SAITouchWarning("Carrier selection required on In-Bound Transfer.")
    Else 
      Exit Do 
    End If 
  Loop 
  TicketHeader.CarrierNo$ = Trim$(CarrierNo$)
  If gbl.MultiCurrency$ = "Y" Let TicketHeader.FundsType$ = gbl.BranchFundsType$ ! Initialize with Branch Funds Type
  chcre = SAIOpenWindow("Create In-Bound Transfer",850,200,1)
  Print #chcre;PChr$(bgcolor1);'BACKCOLOR CS WCSETCOLOR';
  Print #chcre;PChr$("Arial");'FONTFACE 12FONTSIZE EBOLD WCSETFONT';
  y = 20 \ dy = 30 \ bw = 100
  x0 = 20 \ x1 = 200
  dx = 500
  Print #chcre;PChr$(110,x0,y,x1,y + 14,"Source Branch:");'WCLABEL';
  Print #chcre;PChr$(10,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  If CreateInBoundTransfers$ = "C" ! Current Branch only
    Print #chcre;'10WCSELECT WCRESETCOLOR';Branch$;": ";SAICodesTableDesc$(ch_db,"Codes_Branch","Branch",Branch$);'0WCSELECT';
    TicketHeader.SrcBranch$ = Branch$
  Else 
    Print #chcre;'10WCSELECT WCRESETCOLOR 0WCSELECT';
    Print #chcre;PChr$(30,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Select",2);'WCBUTTON';
  End If 
  y = y + dy
  Print #chcre;PChr$(111,x0,y,x1,y + 14,"Source Yard:");'WCLABEL';
  Print #chcre;PChr$(11,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chcre;'11WCSELECT WCRESETCOLOR 0WCSELECT';
  Print #chcre;PChr$(31,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Select",2);'WCBUTTON';
  y = y + dy
  Print #chcre;PChr$(112,x0,y,x1,y + 14,"Source Inventory:");'WCLABEL';
  Print #chcre;PChr$(12,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chcre;'12WCSELECT WCRESETCOLOR 0WCSELECT';
  Print #chcre;PChr$(32,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Select",2);'WCBUTTON';
  If ScrapSRecord$[130,130] = "Y"
    y = y + dy
    Print #chcre;PChr$(113,x0,y,x1,y + 14,"Source StockPile:");'WCLABEL';
    Print #chcre;PChr$(13,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
    Print #chcre;'13WCSELECT WCRESETCOLOR 0WCSELECT';
    Print #chcre;PChr$(33,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Select",2);'WCBUTTON';
  End If 
  Call SAIButtons(chcre,2,1,"Submit~Cancel",850,165,25,100,20)
  If CreateInBoundTransfers$ = "C"
    Print #chcre;'1WCDISABLE';PChr$(32,33);'WCDISABLE';
    Print #chcre;'31WCFOCUS';
  Else 
    Print #chcre;'1WCDISABLE';PChr$(31,33);'WCDISABLE';
    Print #chcre;'30WCFOCUS';
  End If 
  Do 
    Input #chcre; Len (1);w$
    Select Case w$
      Case 'F1' ! Submit
        TicketHeader.InYardID$ = ID$
        status = 0
        Exit Do 
      Case 'F2' ! Cancel
        status = 1
        Exit Do 
      Case 'F30' ! Select Branch
        If CreateInBoundTransfers$ <> "C"
          Call ListBranches(w$)
          If w$
            Print #chcre;'10WCSELECT CU';w$;'0WCSELECT';
            If w$[1,2] <> TicketHeader.SrcBranch$
              TicketHeader.SrcBranch$ = w$[1,2]
              Print #chcre;'11WCSELECT CU 12WCSELECT CU 0WCSELECT';
              If ScrapSRecord$[130,130] Print #chcre;'13WCSELECT CU 0WCSELECT';
              TicketHeader.SrcYard$ = ""
              TicketHeader.SrcInvCode$ = ""
              StockPile$ = ""
            End If 
            Print #chcre;'31WCENABLE 31WCFOCUS';
            k1$ = "Y"
            count = 0
            Do 
              Search #ch_110Aro,3,1;k1$,r,e
              If e Exit Do 
              If k1$[1,1] <> "Y" Exit Do 
              Call SAIReadRecord(ch_110Aro,recdef_110A.,"Y","U",r,ScrapCode$,ScrapCode[],e,errmess$)
              If e = 0
                If ScrapCode$[3,4] = TicketHeader.SrcBranch$ And ScrapCode$[36,36] <> "Y"
                  count = count + 1
                End If 
              End If 
            Loop 
            If count = 1
              Print #chcre;'11WCSELECT CU';ScrapCode$[2,2];": ";Trim$(ScrapCode$[15,34]);'0WCSELECT';
              Print #chcre;'32WCENABLE 32WCFOCUS';
              TicketHeader.SrcYard$ = ScrapCode$[2,2]
              TicketHeader.EntityNo$ = Trim$(ScrapCode$[57,62])
              Print #chcre;'31WCDISABLE';
            End If 
          End If 
        End If 
      Case 'F31' ! Select Yard
        Call ListYards(w$)
        If w$
          Print #chcre;'11WCSELECT CU';w$;'0WCSELECT';
          If w$[1,1] <> TicketHeader.SrcYard$
            TicketHeader.SrcYard$ = w$[1,1]
            TicketHeader.EntityNo$ = Trim$(ScrapCode$[57,62])
            Print #chcre;'12WCSELECT CU 0WCSELECT';
            If ScrapSRecord$[130,130] Print #chcre;'13WCSELECT CU 0WCSELECT';
            TicketHeader.SrcInvCode$ = ""
            StockPile$ = ""
          End If 
          Print #chcre;'32WCENABLE';
        End If 
      Case 'F32' ! Select Inventory
        Call ListInventory(w$)
        If w$
          Print #chcre;'12WCSELECT CU';w$;'0WCSELECT';
          If Trim$(Inventory$[1,8]) <> TicketHeader.SrcInvCode$
            TicketHeader.SrcInvCode$ = Trim$(Inventory$[1,8])
            If ScrapSRecord$[130,130] = "Y"
              StockPile$ = ""
              Print #chcre;'13WCSELECT CU 0WCSELECT';
              If Inventory$[108,108] = "X"
                Call SelectStockPile(TicketHeader.SrcInvCode$,TicketHeader.SrcYard$,TicketHeader.SrcBranch$,StockPile$,"","D",ExitStatus)
                If Trim$(StockPile$)
                  Print #chcre;'13WCSELECT CU';Trim$(StockPile$);": ";Trim$(SAIInventoryDesc$(BrYd,Inventory$));'0WCSELECT';
                  Print #chcre;'1WCENABLE 33WCENABLE';
                Else 
                  Print #chcre;'1WCDISABLE 33WCENABLE';
                End If 
              Else 
                Print #chcre;'1WCENABLE 33WCDISABLE';
              End If 
            Else 
              Print #chcre;'1WCENABLE';
            End If 
          End If 
        End If 
      Case 'F33' ! Select StockPile
        Call SelectStockPile(TicketHeader.SrcInvCode$,TicketHeader.SrcYard$,TicketHeader.SrcBranch$,StockPile$,"","D",ExitStatus)
        If Trim$(StockPile$)
          Print #chcre;'13WCSELECT CU';Trim$(StockPile$);": ";Trim$(SAIInventoryDesc$(BrYd,Inventory$));'0WCSELECT';
          Print #chcre;'1WCENABLE';
        End If 
    End Select 
  Loop 
  Close #chcre
End Sub 
Sub InBoundTransferSearch(k$)
  icount = 0
  Clear ilistsel$[]
  If ilistcur > ilistmax
    ilistmax = ilistmax + 10
    Dim ilist$[ilistmax,ilistlen]
  End If 
  ilist$[ilistcur] = k$
  Print #chxfer;PChr$(30,49);'WCDELETE';
  Print #chxfer;PChr$(1,3);'WCDISABLE';
  y = ylist
  Do 
ListInBoundXferLoop: !
    Search #ch_8430ro,3,2;k$,rec_8430,e
    If e Exit Do 
    If IntSupplierNo$ = "" Exit Do 
    If k$[1,Len(IntSupplierNo$)] <> IntSupplierNo$
      e = 1
      Exit Do 
    End If 
    Call SAIReadRecord(ch_8430ro,recdef_8430.,"Y","U",rec_8430,SalesTicket$,SalesTicket3[],SalesTicket4[],stat,errmess$)
    If stat Goto ListInBoundXferLoop
    If SalesTicket$[89,89] <> "I" Goto ListInBoundXferLoop
    If AllowVehTypeChange$ = "N"
      If SalesTicket$[55,55] <> DefaultVehType$ Goto ListInBoundXferLoop ! Veh Type not valid
    End If 
    ktemp$ = SalesTicket$[1,20] ! Ticket #, Supplier, Material
    Call SAIGetRecord(ch_8326ro,recdef_8326.,ktemp$,2,"Y","U",r,ScaleTicAudit$,ScaleTicAudit[],stat,errmess$)
    If stat Goto ListInBoundXferLoop
    temp$ = SAISpaceFill$(SAICodesTableDesc$(ch_db,"Codes_Branch","Branch",SalesTicket$[168,169]),15)
    If Trim$(SalesTicket$[13,20]) = "*MIX"
      temp$ = temp$ + " " + SalesTicket$[1,6] + "  " + SalesTicket3[3] Using "-------#"
    Else 
      temp$ = temp$ + " " + SalesTicket$[1,6] + "  " + SalesTicket3[0] Using "-------#"
    End If 
    temp$ = temp$ + "  " + ScaleTicAudit$[92,110] + "  " + SAIDateDisplay$(SalesTicket$[21,26]) + "  " + SalesTicket$[27,37]
    temp$ = Replace$(temp$,"&","&&")
    Print #chxfer;PChr$(30 + icount,10,y,790,y + 25,temp$,2);'WCBUTTON';
    !    if ScaleTicAudit$[247,247]="Y"
    !      print #chxfer;PChr$(40+icount,795,y,890,y+25,"Photo",2);'WCBUTTON';
    !    endif
    y = y + 30
    ilistsel$[icount] = k$
    icount = icount + 1
  Loop Until icount = imax
  Print #chxfer;PChr$(1,3);'WCENABLE';
  If e Print #chxfer;'2WCDISABLE';
  If ilistcur = 0 Print #chxfer;'1WCDISABLE';
End Sub 
Sub InBoundTransfer(status)
  Clear TicketNo$,ValidateContainer$,Supplier.
  If ValidTransferBranches$ = "NONE"
    Call SAITouchWarning("You are not permitted to receive Transfers.")
    status = 1
    Exit Sub 
  Else If IntSupplierNo$ = ""
    Call SAITouchWarning("Cannot list In-Bound Transfers.\15\No Internal Supplier No. has been defined for your yard.")
    status = 1
    Exit Sub 
  End If 
  temp$ = "In-Bound Transfer Display for " + SAICodesTableDesc$(ch_db,"Codes_Branch","Branch",Branch$) + " (Supplier # " + IntSupplierNo$ + ")"
  chxfer = SAIOpenWindow(temp$,800,290,1)
  Print #chxfer;PChr$(16777215);'BACKCOLOR CS'
  Print #chxfer;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE WCSETFONT';
  Print #chxfer;PChr$(-1,SAIColorRGB(255,255,0));'WCSETCOLOR';
  y = 2
  Print #chxfer;PChr$(100,10,y,790,y + 10," SOURCE BRANCH   TKT #   GROSS WT  MATERIAL DESC       SHIP DATE  VEHICLE #");'WCLABEL';
  Print #chxfer;'WCRESETCOLOR';
  x = 50 \ y = 2 \ dx = 120
  Print #chxfer;PChr$("Arial");'FONTFACE 12FONTSIZE WCSETFONT';
  Call SAIButtons(chxfer,3,1,"< Previous~Next >~Cancel",800,260,25,120,20)
  If CreateInBoundTransfers$ <> "N" Print #chxfer;PChr$(5,10,260,130,285,"Create",2);'WCBUTTON';
  Print #chxfer;PChr$(29,670,260,790,285,"Ticket No.",2);'WCBUTTON';
  Print #chxfer;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE WCSETFONT';
  y = y + 12
  ylist = y
  Clear ilist$[]
  ilistcur = 0
  imax = 8
  k$ = SAISpaceFill$(IntSupplierNo$,6)
  Call InBoundTransferSearch(k$)
  Print #chxfer;'3WCFOCUS';
  Do 
chxfer_input: !
    Input #chxfer; Len (1);w$
    Select Case w$
      Case 'F1' ! Previous
        If ilistcur > 0
          ilistcur = ilistcur - 1
          k$ = ilist$[ilistcur]
          Call InBoundTransferSearch(k$)
        End If 
      Case 'F2' ! Next
        ilistcur = ilistcur + 1
        Call InBoundTransferSearch(k$)
      Case 'F3' ! Cancel
        status = 1
        Exit Do 
      Case 'F5' ! Create
        If CreateInBoundTransfers$ <> "N"
          Call CreateInBoundTransfer(status)
          SalesTicket$ = ""
          If status = 0 Exit Do 
        End If 
      Case 'F29' To 'F39'
        i = Asc(w$) - Asc('F30')
        If i = -1 ! Enter Ticket No.
          k$ = ""
          Call SAIKeyBoardGen("Enter Outbound Ticket Number",KBParams.alphacase,6,0,k$,status)
          Print #chinyd;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE WCSETFONT';
          If status = 0
            If Len(k$) = 6
              k$ = k$ + IntSupplierNo$
              Search #ch_8430ro,2,1;k$,rec_8430,stat
              If stat = 0
                Call SAIReadRecord(ch_8430,recdef_8430.,"Y","L",rec_8430,SalesTicket$,SalesTicket3[],SalesTicket4[],stat,errmess$)
                If stat = 0 And SalesTicket$[89,89] <> "I"
                  stat = 1
                  errmess$ = "Outbound Ticket has already been received."
                End If 
              Else 
                errmess$ = "Ticket not found."
              End If 
            Else 
              stat = 1
              errmess$ = "Ticket Number must be 6 characters long."
            End If 
          Else 
            stat = -1
          End If 
        Else 
          k$ = ilistsel$[i]
          Call SAIGetRecord(ch_8430,recdef_8430.,k$,2,"Y","L",rec_8430,SalesTicket$,SalesTicket3[],SalesTicket4[],stat,errmess$)
        End If 
        If stat = 123
          ! Do nothing
        Else If stat
          Call SAITouchError("Error retrieving OutBound Sales Ticket.\15\" + errmess$)
        Else 
          If InBoundTransferDefaultID$ = "Y"
            ID$ = Trim$(SalesTicket$[1,6])
          Else 
            Call GetInYardID("NL",ID$,status)
            If status Goto chxfer_input
          End If 
          Clear TicketHeader.,TicketTotals.,Items.[]
          VehType1$ = DefaultVehType$
          VehType2$ = ""
          Call VehicleSelection(VehType1$,VehType2$,status)
          If status Goto chxfer_input
          ! Get source yard
          k$ = "Y" + SalesTicket$[70,70] + SalesTicket$[168,169]
          Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],status,errmess$)
          If status
            Call SAITouchError("Invalid Source Yard information!")
            Goto chxfer_input
          End If 
          If ValidTransferBranches$ = "NONE"
            Call SAITouchWarning("You are not permitted to receive Transfers.")
          Else If ValidTransferBranches$
            If Pos(ValidTransferBranches$, = ScrapCode$[3,4]) = 0
              Call SAITouchWarning("You are not permitted to receive a transfer from that Branch.")
              Goto chxfer_input
            End If 
          End If 
          TicketHeader.InYardID$ = ID$
          TicketHeader.EntityNo$ = Trim$(ScrapCode$[57,62])
          TicketHeader.SrcBranch$ = Trim$(SalesTicket$[168,169])
          TicketHeader.SrcYard$ = Trim$(SalesTicket$[70,70])
          TicketHeader.SrcInvCode$ = Trim$(SalesTicket$[62,69])
          TicketHeader.SrcTicketNo$ = Trim$(SalesTicket$[1,6])
          TicketHeader.OriginWtSrc$ = "TRANSFER"
          If Trim$(SalesTicket$[13,20]) = "*MIX"
            TicketHeader.OriginGrossWt = SalesTicket3[3]
            TicketHeader.OriginTareWt = SalesTicket3[4]
            TicketHeader.OriginNetWt = SalesTicket3[5]
          Else 
            TicketHeader.OriginGrossWt = SalesTicket3[0]
            TicketHeader.OriginTareWt = SalesTicket3[1]
            TicketHeader.OriginNetWt = SalesTicket3[2]
          End If 
          TicketHeader.TktType$ = "P"
          TicketHeader.TktMode$ = "T"
          If gbl.MultiCurrency$ = "Y" Let TicketHeader.FundsType$ = gbl.BranchFundsType$ ! Initialize with Branch Funds Type
          ! OTM Reference Number
          CarrierNo$ = ""
          If OTMFreight$ = "Y" Or OTMBranch(ch_db,TicketHeader.SrcBranch$)
            temp$ = DateUsing$(Tim#(0),"YYYY")
            Call GetOTMRefNo(temp$,status)
            If status
              Goto chxfer_input
            Else 
              TicketHeader.CarrierRefNo$ = OTMFreightInterface.OTMRefNo$
              CarrierNo$ = OTMFreightInterface.CarrierNo$
              TicketHeader.CarrierNo$ = OTMFreightInterface.CarrierNo$
            End If 
          End If 
          If CarrierNo$ = ""
            VehicleType$ = TicketHeader.VehType$
            Do 
              Call GetCarrier(VehicleType$,CarrierNo$,status)
              If status = 0
                If Trim$(CarrierNo$) = "" And InBoundTransferCarrierRequired$ = "Y"
                  Call SAITouchWarning("Carrier selection required on In-Bound Transfer.")
                Else 
                  Exit Do 
                End If 
              Else 
                Exit Do 
              End If 
            Loop 
            If status Goto chxfer_input
          End If 
          TicketHeader.CarrierNo$ = Trim$(CarrierNo$)
          status = 0
          Exit Do 
        End If 
    End Select 
  Loop 
  Close #chxfer
  If status
    Unlock #ch_8430
    Exit Sub 
  End If 
  Call GenerateTicketNo("T",TicketNo$)
  If TicketNo$ = ""
    Unlock #ch_8430
    status = 1
    Exit Sub 
  End If 
  TicketHeader.TicketNo$ = TicketNo$
  TicketHeader.Branch$ = Branch$
  TicketHeader.StartTime# = Tim#(0)
  Call DefaultVehicleNo(TicketNo$)
  TicketHeader.ShipmentDate# = RunDate#
  TicketHeader.EntryDate# = RunDate#
  TicketHeader.TktType$ = "P"
  TicketHeader.TktMode$ = "T"
  TicketHeader.ShipmentNo$ = TicketHeader.TicketNo$
  Call RetrieveSupplier(TicketHeader.EntityNo$,Supplier.,stat)
  Call PopulateSupplierAddress()
  TicketHeader.Trader$ = Supplier.TraderCode$
  If Trim$(Supplier.SuppShipNoHandling$)
    If Supplier.SuppShipNoHandling$ = "N" Let opt = 0 Else Let opt = 1
  Else 
    opt = 0
  End If 
  If opt
    w$ = ""
prompt_SuppShipNo_XFER: !
    Call SAIKeyBoardGen("Enter Supplier Shipment No.",KBParams.alphacase,10,0,w$,stat)
    w$ = Trim$(w$)
    If stat = 0
      If (Supplier.SuppShipNoHandling$ = "S" Or Supplier.SuppShipNoHandling$ = "V") And w$
        Call ValidateSupplierShipmentNo(w$,stat)
        If stat
          Goto prompt_SuppShipNo_XFER
        Else 
          TicketHeader.SuppShipNo$ = w$
        End If 
      Else 
        TicketHeader.SuppShipNo$ = w$
      End If 
    End If 
  End If 
  Try 
    Search #ch_db;"INSERT INTO InYard_Hdr (" + SQLN$(TicketHeader.) + ") VALUES (" + SQLV$(TicketHeader.) + ")"
    status = 0
  Else 
    Call SAITouchError("Error creating entry in InYard_Hdr table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
    status = 1
  End Try 
  If status = 0 And SalesTicket$
    SalesTicket$[89,89] = "T" ! Update Sales Ticket status
    SalesTicket$[217,222] = SAISpaceFill$(TicketHeader.TicketNo$,6)
    Call SAIWriteRecord(ch_8430,recdef_8430.,"U",rec_8430,SalesTicket$,SalesTicket3[],SalesTicket4[],stat,errmess$)
  End If 
  ! Update OTM Record
  If (OTMFreight$ = "Y" Or OTMBranch(ch_db,TicketHeader.SrcBranch$)) And TicketHeader.CarrierRefNo$
    SQL$ = "UPDATE OTM_Freight_Interface SET"
    SQL$ = SQL$ + " Status=" + SQLV$("I") + ", TicketNo=" + SQLV$(TicketHeader.TicketNo$)
    SQL$ = SQL$ + " WHERE OTMFrtInterfaceID=" + SQLV$(OTMFreightInterface.OTMFrtInterfaceID)
    Try 
      Search #ch_db;SQL$
    Else 
      Call SAITouchError("Error updating Status in OTM_Freight_Interface table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
    End Try 
  End If 
End Sub 
Sub TicketSearch(k$,type$)
  icount = 0
  Clear ilistsel$[]
  If ilistcur > ilistmax
    ilistmax = ilistmax + 10
    Dim ilist$[ilistmax,ilistlen]
  End If 
  ilist$[ilistcur] = k$
  Print #chlist;PChr$(1,3);'WCDISABLE';
  Print #chlist;PChr$(30,29 + imax);'WCDELETE';
  temp2$ = ""
  Do 
    Search #ch_8326ro,6,2;k$,r,e
    If e Exit Do 
    Call SAIReadRecord(ch_8326ro,recdef_8326.,"Y","U",r,ScaleTicAudit$,ScaleTicAudit[],stat,errmess$)
    If stat = 0
      If ScaleTicAudit$[20,25] = temp2$
        stat = 1 ! Skip other lines of multi-line ticket
      Else 
        temp2$ = ScaleTicAudit$[20,25]
      End If 
      If stat = 0
        If type$ <> "" And ScaleTicAudit$[153,153] <> type$
          stat = 1 ! Wrong ticket type
        Else If ScaleTicAudit$[120,121] <> Branch$
          stat = 1 ! Different Branch
        Else If ScaleTicAudit$[127,127] = "D"
          stat = 1 ! Ticket deleted
        Else If ScaleTicAudit$[127,127] = "V"
          stat = 1 ! Ticket voided
        Else If ScaleTicAudit$[127,127] = "C"
          stat = 1 ! Ticket cancelled
        Else If ScaleTicAudit$[127,127] = "R"
          stat = 1 ! Ticket reversed
        Else If ScaleTicAudit$[153,153] = "R" And ScaleTicAudit$[20,20] <> "T"
          stat = 1 ! Retail ticket
        End If 
      End If 
    End If 
    If stat = 0
      temp$ = ScaleTicAudit$[20,25] + "  " + SAIDateDisplay$(ScaleTicAudit$[12,17]) + "  " + ScaleTicAudit$[26,31] + " - "
      If ScaleTicAudit$[153,153] = "P" Or ScaleTicAudit$[153,153] = "R"
        SQL$ = "SELECT SupplierName FROM Pur_Ticket_Hdr"
      Else 
        SQL$ = "SELECT CustomerName FROM Sales_Ticket_Hdr"
      End If 
      SQL$ = SQL$ + " WHERE TicketNo=" + SQLV$(Trim$(ScaleTicAudit$[20,25])) + " AND ShipmentDate=" + SQLD$(SAIConvertDate#(ScaleTicAudit$[12,17]))
      Try 
        Search #ch_db;SQL$
        nr = Chf(ch_db)
        If nr
          Read #ch_db;w$
          temp$ = temp$ + SAISpaceFill$(w$,30)
        End If 
      Else 
        nr = 0
      End Try 
      If nr = 0
        If ScaleTicAudit$[153,153] = "P" Or ScaleTicAudit$[153,153] = "R"
          temp$ = temp$ + SAISpaceFill$(SAIGetEntityName$(ch_db,"Supplier_Master","SupplierNo",ScaleTicAudit$[26,31]),30)
        Else 
          temp$ = temp$ + SAISpaceFill$(SAIGetEntityName$(ch_db,"Customer_Master","CustomerNo",ScaleTicAudit$[26,31]),30)
        End If 
      End If 
      temp$ = temp$ + "   " + ScaleTicAudit$[153,153]
      temp$ = Replace$(temp$,"&","&&")
      Print #chlist;PChr$(icount + 30,10,20 + (icount * 30),ilistw - 10,15 + (icount + 1) * 30,temp$,2);'WCBUTTON';
      ilistsel$[icount] = ScaleTicAudit$[20,25]
      icount = icount + 1
    End If 
  Loop Until icount = imax
  Print #chlist;PChr$(1,3);'WCENABLE';
  If e Print #chlist;'2WCDISABLE';
  If ilistcur = 0 Print #chlist;'1WCDISABLE';
  If icount = 0
    Print #chlist;'3WCFOCUS';
  Else 
    Print #chlist;'30WCFOCUS';
  End If 
End Sub 
Sub ListTickets(TicketNo$,type$)
  imax = 9
  Clear ilist$[]
  ilistcur = 0
  ilistw = 920
  temp$ = "Ticket# Ship Date Supplier/Customer # and Name            Typ"
  Call SAITouchButtonList(chlist,imax,ilistw,"List Tickets",temp$)
  If TicketNo$
    k$ = SAIFill$(TicketNo$,"L","~",7)
  Else 
    k$ = "NWT" + Branch$
    Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
    If stat
      k$ = "NWT"
      Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
    End If 
    If stat
      k$ = "Z" ! Skip retail tickets
    Else 
      If ScaleCodes$[94,94] = "Y"
        k$ = "T" + ScrapCode$[70,74]
      Else 
        k$ = ScrapCode[1] Using "T&&&&&"
      End If 
    End If 
  End If 
  Call TicketSearch(k$,type$)
  Do 
    Input #chlist; Len (1);w$
    Select Case w$
      Case 'F1' ! Previous
        If ilistcur > 0
          ilistcur = ilistcur - 1
          k$ = ilist$[ilistcur]
          Call TicketSearch(k$,type$)
        End If 
      Case 'F2' ! Next
        ilistcur = ilistcur + 1
        Call TicketSearch(k$,type$)
      Case 'F3' ! Cancel
        TicketNo$ = ""
        Exit Do 
      Case 'F30' To 'F39'
        i = Asc(w$) - Asc('F30')
        TicketNo$ = ilistsel$[i]
        Exit Do 
    End Select 
  Loop 
  Close #chlist
End Sub 
Sub LoadLevyItem(LevyItemCount,ItemCount)
  LevyItems.[LevyItemCount].LevyMaterialCode$ = Items.[ItemCount].MaterialCode$
  LevyItems.[LevyItemCount].LevyMaterialDesc$ = Items.[ItemCount].MaterialDesc$
  LevyItems.[LevyItemCount].InventoryCode$ = Items.[ItemCount].InventoryCode$
  LevyItems.[LevyItemCount].YardCode$ = Items.[ItemCount].YardCode$
  LevyItems.[LevyItemCount].PriceUM$ = Items.[ItemCount].PriceUM$
  LevyItems.[LevyItemCount].Price = Items.[ItemCount].Price
  LevyItems.[LevyItemCount].NetWt = Items.[ItemCount].RedNetWt
  LevyItems.[LevyItemCount].MatExt = Items.[ItemCount].MatExt
  LevyItems.[LevyItemCount].MatGST = Items.[ItemCount].MatGST
  Clear Items.[ItemCount] \ ItemCount = ItemCount - 1
End Sub 
Sub LoadItemFrom8326(ItemNo)
  Items.[ItemNo].TicketNo$ = TicketNo$
  Items.[ItemNo].ItemNo = ItemNo
  Items.[ItemNo].MaterialCode$ = ScaleTicAudit$[32,39]
  Items.[ItemNo].YardCode$ = ScaleTicAudit$[45,45]
  Items.[ItemNo].DetailOrderLine$ = Trim$(ScaleTicAudit$[164,165])
  Items.[ItemNo].ShipmentNo$ = ScaleTicAudit$[60,65]
  Items.[ItemNo].GrossWtWM$ = ScaleTicAudit$[54,56]
  Items.[ItemNo].TareWtWM$ = ScaleTicAudit$[57,59]
  If Trim$(ScaleTicAudit$[70,75])
    Try 
      temp$ = ScaleTicAudit[15] Using "&&&&&&"
      Items.[ItemNo].GrossWtTime# = SAIConvertDate#(ScaleTicAudit$[70,75],Val(temp$[1,2]),Val(temp$[3,4]),Val(temp$[5,6]))
    Else 
      Clear Items.[ItemNo].GrossWtTime#
    End Try 
  End If 
  If Trim$(ScaleTicAudit$[76,81])
    Try 
      temp$ = ScaleTicAudit[16] Using "&&&&&&"
      Items.[ItemNo].TareWtTime# = SAIConvertDate#(ScaleTicAudit$[76,81],Val(temp$[1,2]),Val(temp$[3,4]),Val(temp$[5,6]))
    Else 
      Clear Items.[ItemNo].TareWtTime#
    End Try 
  End If 
  Items.[ItemNo].MatCodeChg = YesNoFlag(ScaleTicAudit$[90,90])
  Items.[ItemNo].MatDescChg = YesNoFlag(ScaleTicAudit$[91,91])
  Items.[ItemNo].MaterialDesc$ = ScaleTicAudit$[92,119]
  Items.[ItemNo].ManReason$ = ScaleTicAudit$[196,196]
  Items.[ItemNo].GrossWtScale$ = ScaleTicAudit$[122,122]
  Items.[ItemNo].TareWtScale$ = ScaleTicAudit$[123,123]
  Items.[ItemNo].PriceChg = YesNoFlag(ScaleTicAudit$[124,124])
  Items.[ItemNo].PriceUM$ = ScaleTicAudit$[125,126]
  Items.[ItemNo].AdjCode$ = ScaleTicAudit$[140,140]
  Items.[ItemNo].StockPile$ = ScaleTicAudit$[184,186]
  Items.[ItemNo].GrossWt = ScaleTicAudit[0]
  Items.[ItemNo].TareWt = ScaleTicAudit[1]
  Items.[ItemNo].NetWt = ScaleTicAudit[2]
  Items.[ItemNo].AdjWt = ScaleTicAudit[3]
  Items.[ItemNo].GrossWt_BGRead = ScaleTicAudit[4]
  Items.[ItemNo].TareWt_BGRead = ScaleTicAudit[5]
  Items.[ItemNo].Price = ScaleTicAudit[6]
  Items.[ItemNo].RedCount = ScaleTicAudit[7]
  Items.[ItemNo].RedNetWt = ScaleTicAudit[8]
  Items.[ItemNo].RedExt = ScaleTicAudit[9]
  Items.[ItemNo].CarBodies = ScaleTicAudit[10]
End Sub 
Sub RePrintPurchaseTicket(copies)
  Call RetrieveSupplier(ScaleTicAudit$[26,31],Supplier.,stat)
  If stat
    Call SAITouchError("Supplier record for supplier " + ScaleTicAudit$[26,31] + " cannot be found.")
    Exit Sub 
  End If 
  SupplierNo$ = Supplier.SupplierNo$
  Clear TicketHeader.,TicketTotals.,Items.[],LevyItems.[],PrintStatementofSupply$
  Clear PurTicketHdr.,PurTicketDtl.,TicketIdentity.,ExportAddress.
  ItemCount = 0 \ LevyItemCount = 0
  TicketHeader.Branch$ = ScaleTicAudit$[120,121]
  TicketHeader.TicketNo$ = ScaleTicAudit$[20,25]
  TicketHeader.TktType$ = ScaleTicAudit$[153,153]
  TicketHeader.EntityNo$ = ScaleTicAudit$[26,31]
  TicketHeader.InYardID$ = ScaleTicAudit$[1,11]
  Try Let TicketHeader.ShipmentDate# = SAIConvertDate#(ScaleTicAudit$[12,17]) Else Rem
  TicketHeader.EntryDate# = TicketHeader.ShipmentDate#
  ! Purchase Ticket Database
  Try 
    Search #ch_db;"SELECT * FROM Pur_Ticket_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
    If Chf(ch_db)
      Map Record #ch_db As Pur_Ticket_Hdr
      Read Record #ch_db;PurTicketHdr.
      TicketHeader.ControlNo = PurTicketHdr.ControlNo
      TicketHeader.IDNumber$ = Trim$(PurTicketHdr.IDNumber$)
      TicketHeader.RFID$ = Trim$(PurTicketHdr.RFID$)
      TicketHeader.Name$ = PurTicketHdr.SupplierName$
      TicketHeader.Address1$ = PurTicketHdr.Address1$
      TicketHeader.Address2$ = PurTicketHdr.Address2$
      TicketHeader.City$ = PurTicketHdr.City$
      TicketHeader.State$ = PurTicketHdr.State$
      TicketHeader.PostCode$ = PurTicketHdr.PostCode$
      TicketHeader.PhoneNo$ = PurTicketHdr.PhoneNo$
      TicketHeader.TaxID$ = PurTicketHdr.TaxID$
      TicketHeader.TaxID2$ = PurTicketHdr.TaxID2$
      TicketHeader.CarrierRefNo$ = PurTicketHdr.CarrierRefNo$
      TicketHeader.ShipFromTo$ = PurTicketHdr.ShipFrom$
      TicketHeader.SuppShipNo$ = PurTicketHdr.SuppShipNo$
      TicketHeader.SuppInvNo$ = PurTicketHdr.SuppInvNo$
      TicketHeader.FundsType$ = PurTicketHdr.FundsType$
      TicketHeader.InspectionComment$ = PurTicketHdr.InspectionComment$
    End If 
  Else 
  End Try 
  Try 
    Search #ch_db;"SELECT * FROM Pur_Ticket_Identity WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
    If Chf(ch_db)
      Map Record #ch_db As Pur_Ticket_Identity
      Read Record #ch_db;TicketIdentity.
      TicketHeader.IDNumber$ = TicketIdentity.IDNumber$
    End If 
  Else 
  End Try 
  If TicketHeader.Name$ = ""
    If TicketHeader.EntityNo$[1,3] = "CP0" And TicketIdentity.TicketNo$
      TicketHeader.Name$ = TicketIdentity.FullName$
      TicketHeader.Address1$ = TicketIdentity.Address1$
      TicketHeader.Address2$ = TicketIdentity.Address2$
      TicketHeader.City$ = TicketIdentity.City$
      TicketHeader.State$ = TicketIdentity.State$
      TicketHeader.PostCode$ = TicketIdentity.PostCode$
      TicketHeader.PhoneNo$ = TicketIdentity.PhoneNo$
    Else ! Populate from Supplier record
      Call PopulateSupplierAddress()
    End If 
  End If 
  TicketHeader.VehType$ = ScaleTicAudit$[40,40]
  TicketHeader.VehSize$ = ScaleTicAudit$[197,198]
  TicketHeader.VehNo$ = ScaleTicAudit$[142,152]
  TicketHeader.AxleCount = ScaleTicAudit[14]
  TicketHeader.OrderNo$ = Trim$(ScaleTicAudit$[154,163])
  TicketHeader.OrderLine$ = Trim$(ScaleTicAudit$[164,165])
  TicketHeader.CarrierNo$ = ScaleTicAudit$[166,171]
  TicketHeader.TripTicketNo$ = ScaleTicAudit$[199,204]
  If SunValley And Supplier.SupplierNo$ = SV_SupplierNo$
    TicketHeader.LAInfo_DriversName$ = Trim$(ScaleTicAudit$[205,219])
    TicketHeader.LAInfo_District$ = Trim$(ScaleTicAudit$[220,221])
    TicketHeader.LAInfo_Route$ = Trim$(ScaleTicAudit$[222,226])
    TicketHeader.LAInfo_Section$ = Trim$(ScaleTicAudit$[227,227])
  End If 
  TicketHeader.Trader$ = Supplier.TraderCode$
  If Trim$(TicketHeader.OrderNo$) And Trim$(TicketHeader.OrderNo$) <> "UNKNOWN"
    ktemp$ = SAISpaceFill$(Supplier.SupplierNo$,6) + SAIFill$(TicketHeader.OrderNo$,"R"," ",10)
    Call SAIGetRecord(ch_1200,recdef_1200.,ktemp$,1,"Y","U",rtemp,POHeader$,POHeader[],stat,errmess$)
    If stat = 0
      If Trim$(POHeader$[214,216]) Let TicketHeader.Trader$ = Trim$(POHeader$[214,216])
    End If 
  End If 
  TicketHeader.Photo = YesNoFlag(ScaleTicAudit$[247,247])
  TicketHeader.SrcYard$ = ScaleTicAudit$[129,129]
  TicketHeader.SrcInvCode$ = ScaleTicAudit$[130,137]
  TicketHeader.SrcBranch$ = ScaleTicAudit$[138,139]
  ! Get Contract Line detail if present
  If Trim$(TicketHeader.OrderNo$) = "UNKNOWN"
    FullPONo$ = ""
  Else If Trim$(TicketHeader.OrderNo$)
    FullPONo$ = SAIFill$(TicketHeader.OrderNo$,"R"," ",10) + SAISpaceFill$(TicketHeader.OrderLine$,2)
  Else 
    FullPONo$ = ""
  End If 
  If FullPONo$
    ktemp$ = SAISpaceFill$(TicketHeader.EntityNo$,6) + FullPONo$
    Call SAIGetRecord(ch_1210ro,recdef_1210.,ktemp$,1,"Y","U",r,PODetail$,PODetail[],stat,errmess$)
    If stat = 0
      TicketHeader.ShipFromTo$ = Trim$(PODetail$[31,34])
      TicketHeader.ShippingInst$ = Trim$(PODetail$[66,95])
      TicketHeader.ShipOrdNo$ = Trim$(PODetail$[214,233])
    End If 
  End If 
  ! Determine if Transfer or Notice
  TicketHeader.TktMode$ = ""
  If Trim$(TicketHeader.SrcYard$)
    TicketHeader.TktMode$ = "T"
    TicketHeader.SrcTicketNo$ = ScaleTicAudit$[190,195]
  End If 
  Try Let TicketHeader.ShipmentDate# = SAIConvertDate#(ScaleTicAudit$[12,17]) Else Rem
  TicketHeader.EntryDate# = TicketHeader.ShipmentDate#
  If ScaleTicAudit$[67,67] = "Y" ! *MULT Ticket
    TicketHeader.ShipmentNo$ = ScaleTicAudit$[60,65]
    Do 
      Search #ch_8326ro,3,2;k$,r,e
      If e Exit Do 
      If k$[1,12] <> TicketHeader.TicketNo$ + TicketHeader.EntityNo$ Exit Do 
      Call SAIReadRecord(ch_8326ro,recdef_8326.,"Y","U",r,ScaleTicAudit$,ScaleTicAudit[],stat,errmess$)
      If stat = 0 And ScaleTicAudit$[127,127] = " "
        ItemCount = ItemCount + 1
        i = ItemCount
        Call LoadItemFrom8326(i)
        If PrintInspector$ ! Get Inspected by from Pur_Ticket_Dtl
          SQL$ = "SELECT InspectedBy FROM Pur_Ticket_Dtl WHERE"
          SQL$ = SQL$ + " TicketNo=" + SQLV$(TicketHeader.TicketNo$)
          SQL$ = SQL$ + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
          SQL$ = SQL$ + " AND MaterialCode=" + SQLV$(Items.[i].MaterialCode$)
          Search #ch_db;SQL$
          If Chf(ch_db)
            Map #ch_db;
            Read #ch_db;Items.[i].InspectedBy$
          End If 
        End If 
        ! Look for 8330 to get payment info
        ktemp$ = TicketHeader.TicketNo$ + TicketHeader.EntityNo$ + Items.[i].MaterialCode$
        Call SAIGetRecord(ch_8330ro,recdef_8330.,ktemp$,1,"Y","U",r,ScaleTicket$,ScaleTicket3[],ScaleTicket4[],stat,errmess$)
        If stat
          Call SAIGetRecord(ch_8332,recdef_8332.,ktemp$,1,"Y","U",r,ScaleTicket$,ScaleTicket3[],ScaleTicket4[],stat,errmess$)
          If stat = 0
            If ScaleTicket$[194,199] <> ScaleTicAudit$[12,17] Let stat = 1 ! Different ship dates - not the same ticket
          End If 
        End If 
        If stat = 0
          Try Let TicketHeader.EntryDate# = SAIConvertDate#(ScaleTicket$[49,54]) Else Rem
          If ScrapSRecord$[78,78] = "Y" And ScaleTicket$[233,233] = "I"
            Items.[i].MatExt = ScaleTicket4[1] + ScaleTicket4[11] ! Add GST back in for Imputed
          Else 
            Items.[i].MatExt = ScaleTicket4[1]
          End If 
          Items.[i].MatExt = Items.[i].MatExt - Items.[i].RedExt ! Remove CRV from extended price
          Items.[i].RedRate = ScaleTicket3[7]
          ! Price and PriceUM
          Items.[i].Price = ScaleTicket4[0]
          Items.[i].PriceUM$ = ScaleTicket$[44,45]
          If Trim$(ScaleTicket$[72,72])
            TicketTotals.TotalPaid = TicketTotals.TotalPaid + ScaleTicket4[5]
            TicketHeader.PaymentCode$ = ScaleTicket$[72,72] ! C=Check, R=Receipt, etc
            TicketHeader.PaymentNo$ = ScaleTicket$[79,84]
          End If 
          Items.[i].FrtExt = ScaleTicket4[3]
          Items.[i].FrtCbk = ScaleTicket4[4]
          Items.[i].MatGST = ScaleTicket4[11]
          Items.[i].MatPST = ScaleTicket4[12]
          Items.[i].FrtGST = ScaleTicket4[14]
          Items.[i].FrtPST = ScaleTicket4[15]
          Items.[i].CbkGST = ScaleTicket4[16]
          Items.[i].CbkPST = ScaleTicket4[17]
        Else 
          PaidWeight = Items.[i].NetWt + Items.[i].AdjWt
          Call SAICalcPriceExt(ch_110Aro,PaidWeight,gbl_um$,Items.[i].Price,SAISpaceFill$(Items.[i].PriceUM$,2),2,Items.[i].MatExt,stat)
          If Items.[i].RedNetWt And Items.[i].RedExt
            Items.[i].RedRate = Round(Items.[i].RedExt / Items.[i].RedNetWt,4)
          End If 
        End If 
        Call DetermineLevyMaterial(ScaleTicAudit$[32,39],LevyItem)
        If LevyItem
          LevyItemCount = LevyItemCount + 1
          Call LoadLevyItem(LevyItemCount,ItemCount)
          TicketTotals.TotalMatGST = TicketTotals.TotalMatGST + LevyItems.[LevyItemCount].MatGST
          TicketTotals.TotalPrice = TicketTotals.TotalPrice + LevyItems.[LevyItemCount].MatExt
        End If 
        If LevyItem = 0 Call TotalTicketItem(ItemCount)
      End If 
    Loop 
  Else If Trim$(ScaleTicAudit$[32,39]) = "*MIX"
    TicketHeader.ShipmentNo$ = ScaleTicAudit$[60,65]
    ItemCount = 1
    Call LoadItemFrom8326(ItemCount)
    If PrintInspector$ ! Get Inspected by from Pur_Ticket_Dtl
      SQL$ = "SELECT InspectedBy FROM Pur_Ticket_Dtl WHERE"
      SQL$ = SQL$ + " TicketNo=" + SQLV$(TicketHeader.TicketNo$)
      SQL$ = SQL$ + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
      Search #ch_db;SQL$
      If Chf(ch_db)
        Map #ch_db;
        Read #ch_db;Items.[ItemCount].InspectedBy$
      End If 
    End If 
    Do 
      Search #ch_8326ro,3,2;k$,r,e
      If e Exit Do 
      If k$[1,12] <> TicketHeader.TicketNo$ + TicketHeader.EntityNo$ Exit Do 
      Call SAIReadRecord(ch_8326ro,recdef_8326.,"Y","U",r,ScaleTicAudit$,ScaleTicAudit[],stat,errmess$)
      If stat = 0 And ScaleTicAudit$[127,127] = " "
        ItemCount = ItemCount + 1
        i = ItemCount
        Call LoadItemFrom8326(i)
        ! Look for 8330 to get payment info
        ktemp$ = TicketHeader.TicketNo$ + TicketHeader.EntityNo$ + Items.[i].MaterialCode$
        Call SAIGetRecord(ch_8330ro,recdef_8330.,ktemp$,1,"Y","U",r,ScaleTicket$,ScaleTicket3[],ScaleTicket4[],stat,errmess$)
        If stat
          Call SAIGetRecord(ch_8332,recdef_8332.,ktemp$,1,"Y","U",r,ScaleTicket$,ScaleTicket3[],ScaleTicket4[],stat,errmess$)
          If stat = 0
            If ScaleTicket$[194,199] <> ScaleTicAudit$[12,17] Let stat = 1 ! Different ship dates - not the same ticket
          End If 
        End If 
        If stat = 0
          Try Let TicketHeader.EntryDate# = SAIConvertDate#(ScaleTicket$[49,54]) Else Rem
          If ScrapSRecord$[78,78] = "Y" And ScaleTicket$[233,233] = "I"
            Items.[i].MatExt = ScaleTicket4[1] + ScaleTicket4[11] ! Add GST back in for Imputed
          Else 
            Items.[i].MatExt = ScaleTicket4[1]
          End If 
          Items.[i].RedExt = ScaleTicket4[9]
          Items.[i].RedRate = ScaleTicket3[7]
          Items.[i].MatExt = Items.[i].MatExt - Items.[i].RedExt ! Remove CRV from extended price
          ! Price and PriceUM
          Items.[i].Price = ScaleTicket4[0]
          Items.[i].PriceUM$ = ScaleTicket$[44,45]
          If Trim$(ScaleTicket$[72,72])
            TicketTotals.TotalPaid = TicketTotals.TotalPaid + ScaleTicket4[5]
            TicketHeader.PaymentCode$ = ScaleTicket$[72,72] ! C=Check, R=Receipt, etc
            TicketHeader.PaymentNo$ = ScaleTicket$[79,84]
          End If 
          Items.[i].FrtExt = ScaleTicket4[3]
          Items.[i].FrtCbk = ScaleTicket4[4]
          Items.[i].MatGST = ScaleTicket4[11]
          Items.[i].MatPST = ScaleTicket4[12]
          Items.[i].FrtGST = ScaleTicket4[14]
          Items.[i].FrtPST = ScaleTicket4[15]
          Items.[i].CbkGST = ScaleTicket4[16]
          Items.[i].CbkPST = ScaleTicket4[17]
        Else 
          PaidWeight = Items.[i].NetWt + Items.[i].AdjWt
          Call SAICalcPriceExt(ch_110Aro,PaidWeight,gbl_um$,Items.[i].Price,SAISpaceFill$(Items.[i].PriceUM$,2),2,Items.[i].MatExt,stat)
          If Items.[i].RedNetWt And Items.[i].RedExt
            Items.[i].RedRate = Round(Items.[i].RedExt / Items.[i].RedNetWt,4)
          End If 
        End If 
        Call DetermineLevyMaterial(ScaleTicAudit$[32,39],LevyItem)
        If LevyItem
          LevyItemCount = LevyItemCount + 1
          Call LoadLevyItem(LevyItemCount,ItemCount)
          TicketTotals.TotalMatGST = TicketTotals.TotalMatGST + LevyItems.[LevyItemCount].MatGST
          TicketTotals.TotalPrice = TicketTotals.TotalPrice + LevyItems.[LevyItemCount].MatExt
        End If 
        If LevyItem = 0 Call TotalTicketItem(ItemCount)
      End If 
    Loop 
    If ItemCount = 1
      Call TotalTicketItem(ItemCount) ! Unsorted *MIX
    Else If LevyItemCount
      If ItemCount = 2 And Items.[1].GrossWt = 0 And Items.[1].TareWt = 0 ! Remove the *MIX line and revert it back to a single item ticket
        Items.[1] = Items.[2]
        ItemCount = 1 \ Clear Items.[2]
      End If 
    End If 
  Else ! Single Item
    ItemCount = 1
    Call LoadItemFrom8326(ItemCount)
    TicketHeader.ShipmentNo$ = Items.[1].ShipmentNo$
    If PrintInspector$ ! Get Inspected by from Pur_Ticket_Dtl
      SQL$ = "SELECT InspectedBy FROM Pur_Ticket_Dtl WHERE"
      SQL$ = SQL$ + " TicketNo=" + SQLV$(TicketHeader.TicketNo$)
      SQL$ = SQL$ + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
      Search #ch_db;SQL$
      If Chf(ch_db)
        Map #ch_db;
        Read #ch_db;Items.[ItemCount].InspectedBy$
      End If 
    End If 
    ! Look for 8330
    If TicketHeader.TktMode$ <> "T"
      ktemp$ = TicketHeader.TicketNo$ + TicketHeader.EntityNo$ + Items.[1].MaterialCode$
      Call SAIGetRecord(ch_8330ro,recdef_8330.,ktemp$,1,"Y","U",r,ScaleTicket$,ScaleTicket3[],ScaleTicket4[],stat,errmess$)
      If stat
        Call SAIGetRecord(ch_8332,recdef_8332.,ktemp$,1,"Y","U",r,ScaleTicket$,ScaleTicket3[],ScaleTicket4[],stat,errmess$)
        If stat = 0
          If ScaleTicket$[194,199] <> ScaleTicAudit$[12,17] Let stat = 1 ! Different ship dates - not the same ticket
        End If 
      End If 
      If stat = 0
        Try Let TicketHeader.EntryDate# = SAIConvertDate#(ScaleTicket$[49,54]) Else Rem
        If ScrapSRecord$[78,78] = "Y" And ScaleTicket$[233,233] = "I"
          Items.[1].MatExt = ScaleTicket4[1] + ScaleTicket4[11] ! Add GST back in for Imputed
        Else 
          Items.[1].MatExt = ScaleTicket4[1]
        End If 
        Items.[1].MatExt = Items.[1].MatExt - Items.[1].RedExt ! Remove CRV from extended price
        Items.[1].RedRate = ScaleTicket3[7]
        ! Price and PriceUM
        Items.[1].Price = ScaleTicket4[0]
        Items.[1].PriceUM$ = ScaleTicket$[44,45]
        If Trim$(ScaleTicket$[72,72])
          TicketTotals.TotalPaid = ScaleTicket4[5]
          TicketHeader.PaymentNo$ = ScaleTicket$[79,84]
        End If 
        Items.[1].FrtExt = ScaleTicket4[3]
        Items.[1].FrtCbk = ScaleTicket4[4]
        Items.[1].MatGST = ScaleTicket4[11]
        Items.[1].MatPST = ScaleTicket4[12]
        Items.[1].FrtGST = ScaleTicket4[14]
        Items.[1].FrtPST = ScaleTicket4[15]
        Items.[1].CbkGST = ScaleTicket4[16]
        Items.[1].CbkPST = ScaleTicket4[17]
      Else 
        PaidWeight = Items.[1].NetWt + Items.[1].AdjWt
        Call SAICalcPriceExt(ch_110Aro,PaidWeight,gbl_um$,Items.[1].Price,SAISpaceFill$(Items.[1].PriceUM$,2),2,Items.[1].MatExt,stat)
        If Items.[1].RedNetWt And Items.[1].RedExt
          Items.[1].RedRate = Round(Items.[1].RedExt / Items.[1].RedNetWt,4)
        End If 
      End If 
    End If 
    Call TotalTicketItem(ItemCount)
  End If 
  ! Look for comment
  If FullPONo$
    ktemp$ = "V" + SAISpaceFill$(TicketHeader.EntityNo$,6) + FullPONo$ + TicketHeader.ShipmentNo$ + "SHP01"
    Call SAIGetRecord(ch_1115ro,recdef_1115.,ktemp$,1,"Y","U",r,GblCmt$,stat,errmess$)
  Else 
    stat = 1
  End If 
  If stat
    ktemp$ = "V" + SAISpaceFill$(TicketHeader.EntityNo$,6) + Rep$(" ",12) + TicketNo$ + "SHP01"
    Call SAIGetRecord(ch_1115ro,recdef_1115.,ktemp$,1,"Y","U",r,GblCmt$,stat,errmess$)
  End If 
  If stat = 0
    TicketHeader.TktComment$ = Trim$(GblCmt$[31,80])
  Else 
    Clear GblCmt$
  End If 
  If TicketHeader.TktComment$ = "" Let TicketHeader.TktComment$ = PurTicketHdr.TktComment$
  ! SIMS AUS only - get Supplier Inv. No. from comment file
  If z$[644,646] = "255" Or z$[644,646] = "355"
    ktemp$ = "V" + SAISpaceFill$(TicketHeader.EntityNo$,6) + SAISpaceFill$(FullPONo$,12) + SAISpaceFill$(TicketHeader.ShipmentNo$,6) + "SHP99"
    Call SAIGetRecord(ch_1115ro,recdef_1115.,ktemp$,1,"Y","U",r,GblCmtTmp$,stat,errmess$)
    If stat = 0 Let TicketHeader.SuppInvNo$ = GblCmtTmp$[31,40]
  End If 
  ! Get Retail Detail if "R" Ticket
  If TicketHeader.TktType$ = "R"
    Call RetrieveRetailTicket(TicketHeader.TicketNo$,status)
  End If 
  SavedValue$ = PrintPrice$
  If SuppressPrice Let PrintPrice$ = "N"
  If InspectionTicketPrinter$ <> "" And InspectionTicketPrinter$ <> TicketPrinter$ And TicketHeader.TktType$ <> "R"
    chwin2 = SAIOpenWindow("Printer Selection",250,140,1)
    Print #chwin2;PChr$("Arial");'FONTFACE 12FONTSIZE WCSETFONT';
    x = 50 \ bw = 150 \ bh = 30 \ y = 10 \ space = 15
    Print #chwin2;PChr$(1,x,y,x + bw,y + bh,"Ticket Printer",2);'WCBUTTON';
    y = y + bh + space
    Print #chwin2;PChr$(2,x,y,x + bw,y + bh,"Inspection Ticket Printer",2);'WCBUTTON';
    y = y + bh + space
    Print #chwin2;PChr$(3,x,y,x + bw,y + bh,"Cancel",2);'WCBUTTON';
    Print #chwin2;'1WCFOCUS';
    Do 
      Input #chwin2; Len (1);w$
      Select Case w$
        Case 'F1' ! Ticket Printer
          Close #chwin2
          Call PrintTicket(TicketPrinter$,TicketPrinterType$,TicketForm$,copies,"R",status)
          Exit Do 
        Case 'F2' ! Inspection Ticket Printer
          Close #chwin2
          Call PrintTicket(InspectionTicketPrinter$,InspectionTicketPrinterType$,InspectionTicketForm$,copies,"R",status)
          Exit Do 
        Case 'F3' ! Cancel
          Close #chwin2
          Exit Do 
      End Select 
    Loop 
  Else 
    Call PrintTicket(TicketPrinter$,TicketPrinterType$,TicketForm$,copies,"R",status)
  End If 
  ! Material Specific Form
  If PrintMaterialCodeForm$ = "P" And TicketHeader.TktMode$ <> "T" And Dirt$ <> "Y"
    If MaterialCodeFormFound()
      ans = SAITouchYesNo("Print Material Specific Form?")
      If ans Call PrintMaterialCodeForm(InspectionTicketPrinter$,InspectionTicketPrinterType$,status)
    End If 
  End If 
  PrintPrice$ = SavedValue$
End Sub 
Sub RePrintSalesTicket(copies)
  Call RetrieveCustomer(ScaleTicAudit$[26,31],Customer.,stat)
  If stat
    Call SAITouchError("Customer record for customer " + ScaleTicAudit$[26,31] + " cannot be found.\15\" + errmess$)
    Exit Sub 
  End If 
  CustomerNo$ = Customer.CustomerNo$
  Clear TicketHeader.,TicketTotals.,TicketDetail.,Items.[]
  TicketHeader.Branch$ = ScaleTicAudit$[120,121]
  TicketHeader.TicketNo$ = ScaleTicAudit$[20,25]
  TicketHeader.TktType$ = ScaleTicAudit$[153,153]
  TicketHeader.EntityNo$ = ScaleTicAudit$[26,31]
  TicketHeader.InYardID$ = ScaleTicAudit$[1,11]
  Try Let TicketHeader.ShipmentDate# = SAIConvertDate#(ScaleTicAudit$[12,17]) Else Rem
  TicketHeader.EntryDate# = TicketHeader.ShipmentDate#
  ! Sales Ticket Database
  Clear SalesTicketHdr.
  Try 
    Search #ch_db;"SELECT * FROM Sales_Ticket_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#) + " AND Branch=" + SQLV$(Branch$)
    nr = Chf(ch_db)
    If nr
      Map Record #ch_db As Sales_Ticket_Hdr
      Read Record #ch_db;SalesTicketHdr.
      TicketHeader.ControlNo = SalesTicketHdr.ControlNo
      TicketHeader.RFID$ = Trim$(SalesTicketHdr.RFID$)
      TicketHeader.Name$ = SalesTicketHdr.CustomerName$
      TicketHeader.Address1$ = SalesTicketHdr.Address1$
      TicketHeader.Address2$ = SalesTicketHdr.Address2$
      TicketHeader.City$ = SalesTicketHdr.City$
      TicketHeader.State$ = SalesTicketHdr.State$
      TicketHeader.PostCode$ = SalesTicketHdr.PostCode$
      TicketHeader.TaxID$ = SalesTicketHdr.TaxID$
      TicketHeader.TaxID2$ = SalesTicketHdr.TaxID2$
      TicketHeader.CarrierRefNo$ = SalesTicketHdr.CarrierRefNo$
      TicketHeader.FundsType$ = SalesTicketHdr.FundsType$
      TicketHeader.ContainerTareWt = SalesTicketHdr.ContainerTareWt
    End If 
  Else 
    nr = 0
  End Try 
  If nr = 0
    Call PopulateCustomerAddress()
  End If 
  TicketHeader.VehType$ = ScaleTicAudit$[40,40]
  TicketHeader.VehSize$ = ScaleTicAudit$[197,198]
  TicketHeader.VehNo$ = ScaleTicAudit$[142,152]
  TicketHeader.AxleCount = ScaleTicAudit[14]
  TicketHeader.OrderNo$ = Trim$(ScaleTicAudit$[154,163])
  TicketHeader.OrderLine$ = Trim$(ScaleTicAudit$[164,165])
  TicketHeader.MatReqNo$ = Trim$(ScaleTicAudit$[172,181])
  TicketHeader.MatReqLine$ = Trim$(ScaleTicAudit$[182,183])
  TicketHeader.CarrierNo$ = ScaleTicAudit$[166,171]
  TicketHeader.TripTicketNo$ = ScaleTicAudit$[199,204]
  TicketHeader.Photo = YesNoFlag(ScaleTicAudit$[247,247])
  ! Get Contract Line detail if present
  If Trim$(TicketHeader.OrderNo$)
    ktemp$ = SAISpaceFill$(TicketHeader.EntityNo$,6) + SAIFill$(TicketHeader.OrderNo$,"R"," ",10) + SAISpaceFill$(TicketHeader.OrderLine$,2)
    Call SAIGetRecord(ch_1310ro,recdef_1310.,ktemp$,1,"Y","U",r,SODetail$,SODetail[],stat,errmess$)
    If stat = 0
      TicketHeader.ShipFromTo$ = Trim$(SODetail$[31,34])
      TicketHeader.ShipOrdNo$ = Trim$(SODetail$[214,233])
    End If 
  End If 
  ! Get Material Req
  Clear PODetail$,PODetail[]
  If Trim$(TicketHeader.MatReqNo$)
    ktemp$ = SAIFill$(TicketHeader.MatReqNo$,"R"," ",10) + SAISpaceFill$(TicketHeader.MatReqLine$,2)
    Call SAIGetRecord(ch_1210ro,recdef_1210.,ktemp$,2,"Y","U",r,PODetail$,PODetail[],stat,errmess$)
    If stat = 0 Let TicketHeader.ShippingInst$ = Trim$(PODetail$[66,95])
  End If 
  ! Determine if WeightOnly or Transfer
  WeightOnly = 0
  TicketHeader.TktMode$ = ""
  If TicketHeader.TktType$ = "S"
    If Customer.IntercompanyType$ = "I" Let TicketHeader.TktMode$ = "T"
  Else 
    WeightOnly = 1
  End If 
  ItemCount = 1
  Call LoadItemFrom8326(ItemCount)
  TicketHeader.ShipmentNo$ = Items.[1].ShipmentNo$
  ! Look for 8430
  ktemp$ = TicketHeader.TicketNo$ + TicketHeader.EntityNo$ + Items.[1].MaterialCode$
  Call SAIGetRecord(ch_8430ro,recdef_8430.,ktemp$,1,"Y","U",r,SalesTicket$,SalesTicket3[],SalesTicket4[],stat,errmess$)
  If stat = 0
    Try Let TicketHeader.EntryDate# = SAIConvertDate#(SalesTicket$[49,54]) Else Rem
    Items.[1].MatExt = SalesTicket4[1]
    ! Price and PriceUM
    Items.[1].Price = SalesTicket4[0]
    Items.[1].PriceUM$ = SalesTicket$[44,45]
  Else 
    PaidWeight = Items.[1].NetWt + Items.[1].AdjWt
    Call SAICalcPriceExt(ch_110Aro,PaidWeight,gbl_um$,Items.[1].Price,SAISpaceFill$(Items.[1].PriceUM$,2),2,Items.[1].MatExt,stat)
  End If 
  Call TotalTicketItem(ItemCount)
  ! Look for comment
  ktemp$ = "C" + TicketHeader.EntityNo$ + TicketHeader.OrderNo$ + TicketHeader.ShipmentNo$ + "SHP01"
  Call SAIGetRecord(ch_1115ro,recdef_1115.,ktemp$,1,"Y","U",r,GblCmt$,stat,errmess$)
  If stat
    ktemp$ = "C" + TicketHeader.EntityNo$ + Rep$(" ",12) + TicketNo$ + "SHP01"
    Call SAIGetRecord(ch_1115ro,recdef_1115.,ktemp$,1,"Y","U",r,GblCmt$,stat,errmess$)
  End If 
  If stat = 0
    TicketHeader.TktComment$ = Trim$(GblCmt$[31,80])
  Else 
    Clear GblCmt$
  End If 
  If TicketHeader.TktComment$ = "" Let TicketHeader.TktComment$ = SalesTicketHdr.TktComment$
  ! Look for Export Address
  Call RetrieveAltAddress("X",TicketHeader.EntityNo$,"",ExportAddress.,stat)
  If stat Clear ExportAddress.
  SavedValue$ = PrintSalesPrice$
  If SuppressPrice Let PrintSalesPrice$ = "N"
  If InspectionTicketPrinter$ <> "" And InspectionTicketPrinter$ <> TicketPrinter$
    chwin2 = SAIOpenWindow("Printer Selection",250,140,1)
    Print #chwin2;PChr$("Arial");'FONTFACE 12FONTSIZE WCSETFONT';
    x = 50 \ bw = 150 \ bh = 30 \ y = 10 \ space = 15
    Print #chwin2;PChr$(1,x,y,x + bw,y + bh,"Ticket Printer",2);'WCBUTTON';
    y = y + bh + space
    Print #chwin2;PChr$(2,x,y,x + bw,y + bh,"Inspection Ticket Printer",2);'WCBUTTON';
    y = y + bh + space
    Print #chwin2;PChr$(3,x,y,x + bw,y + bh,"Cancel",2);'WCBUTTON';
    Print #chwin2;'1WCFOCUS';
    Do 
      Input #chwin2; Len (1);w$
      Select Case w$
        Case 'F1' ! Ticket Printer
          Close #chwin2
          Call PrintSalesTicket(TicketPrinter$,TicketPrinterType$,TicketForm$,copies,"R",status)
          Exit Do 
        Case 'F2' ! Inspection Ticket Printer
          Close #chwin2
          Call PrintSalesTicket(InspectionTicketPrinter$,InspectionTicketPrinterType$,InspectionTicketForm$,copies,"R",status)
          Exit Do 
        Case 'F3' ! Cancel
          Close #chwin2
          Exit Do 
      End Select 
    Loop 
  Else 
    Call PrintSalesTicket(TicketPrinter$,TicketPrinterType$,TicketForm$,copies,"R",status)
  End If 
  PrintSalesPrice$ = SavedValue$
End Sub 
Sub RePrintTicket()
  KBParams.StartX = 5
  KBParams.StartY = 85
  KBParams.ButtonHeight = 25
  KBParams.ButtonWidth = 50
  KBParams.FontSize1 = 14
  KBParams.FontSize2 = 12
  KBParams.InputElement = 10
  KBParams.IELength = 0 !150
  KBParams.IEMaxChar = 6
  KBParams.IELabel$ = ""
  KBParams.FuncBtnLen = 0 !100
  KBParams.FunctionBtn$ = "" !"&List"
RePrintTicket_InputLoop: !
  chwin2 = SAIOpenWindow("Enter Ticket No. to Re-Print",800,250,1)
  Print #chwin2;PChr$("Arial");'FONTFACE';
  Print #chwin2;PChr$(SAIColorRGB(230,230,230));'BACKCOLOR CS WCSETCOLOR';
  Print #chwin2;'12FONTSIZE WCSETFONT';
  x = 300 \ x0 = x - 130 \ y = 17
  Print #chwin2;PChr$(900,x0,y + 2,x,y + 16,"Ticket No:");'WCLABEL WCRESETCOLOR';
  Print #chwin2;PChr$(KBParams.InputElement,x,y,x + 150,y + 18,"",2,6);'WCSTRING';
  x1 = x + 85
  x = x + 150 + 5 \ y = y - 3
  Print #chwin2;PChr$(15,x,y,x + 100,y + 25,"List",2);'WCBUTTON';
  If LastTicket$
    x = x + 110
    Print #chwin2;'10FONTSIZE WCSETFONT';
    Print #chwin2;PChr$(16,x,y,x + 150,y + 25,"Last Ticket\15\(" + LastTicket$ + ")",2);'WCBUTTON';
    Print #chwin2;'12FONTSIZE WCSETFONT';
  End If 
  y = y + 38
  x = 120
  Print #chwin2;PChr$(SAIColorRGB(230,230,230));'BACKCOLOR WCSETCOLOR';
  Print #chwin2;PChr$(901,x,y + 2,x + 100,y + 16,"Copies:");'WCLABEL WCRESETCOLOR';
  Print #chwin2;PChr$(11,x + 100,y,x + 180,y + 18,"",2,6);'WCNUMBER';
  Print #chwin2;'11WCSELECT';"1";'0WCSELECT';
  x = x + 180 + 5
  Print #chwin2;PChr$(17,x,y - 3,x + 50,y + 22,"^",2);'WCBUTTON';
  x = x + 60
  Print #chwin2;PChr$(18,x,y - 3,x + 50,y + 22,"v",2);'WCBUTTON';
  x = x + 100
  Print #chwin2;PChr$(16777215);'BACKCOLOR WCSETCOLOR';
  Print #chwin2;PChr$(19,x,y - 3,x + 170,y + 22,"Suppress Price",2 + 4);'WCCHECK';
  Call SAIDrawKeyboard(chwin2,KBParams.,0)
  Print #chwin2;PChr$(KBParams.InputElement);'WCFOCUS';
  copies = 1
  istring$ = ""
  Do 
    Input #chwin2; Len (1);w$
    Select Case w$
      Case 'F15' ! List
        TicketNo$ = Trim$(SAIQuery$(chwin2,KBParams.InputElement))
        Call ListTickets(TicketNo$,"")
        If TicketNo$ Exit Do 
      Case 'F16' ! Last Ticket
        TicketNo$ = LastTicket$
        Exit Do 
      Case 'F17' ! Increase copies
        copies = SAIQuery$(chwin2,11)
        copies = copies + 1
        Print #chwin2;'11WCSELECT CU';Str$(copies);'0WCSELECT';PChr$(KBParams.InputElement);'WCFOCUS';
      Case 'F18' ! Decrease copies
        copies = SAIQuery$(chwin2,11)
        If copies > 1
          copies = copies - 1
          Print #chwin2;'11WCSELECT CU';Str$(copies);'0WCSELECT';
        End If 
        Print #chwin2;PChr$(KBParams.InputElement);'WCFOCUS';
      Case Else 
        Call SAIKeyBoardInput(chwin2,chwin2,KBParams.,ishift,w$,istring$,istatus)
        If istatus = -1
          TicketNo$ = ""
          Exit Do 
        Else If istatus
          TicketNo$ = SAISpaceFill$(SAIQuery$(chwin2,KBParams.InputElement),6)
          If Trim$(TicketNo$) = "" Let TicketNo$ = ""
          Exit Do 
        End If 
    End Select 
  Loop 
  copies = SAIQuery$(chwin2,11)
  SuppressPrice = SAIQuery$(chwin2,19)
  Close #chwin2
  If TicketNo$ = "" Exit Sub 
  If LastTicket$ = "" Let LastTicket$ = TicketNo$
  k$ = TicketNo$
  Search #ch_8326ro,2,2;k$,r,e
  If e
    If TicketNo$[1,1] = "C" ! Check to see if it is a carrier ticket
      k$ = SAISpaceFill$(TicketNo$,6)
      Call SAIGetRecord(ch_8330ro,recdef_8330.,k$,1,"Y","U",r,ScaleCTicket$,ScaleCTicket3[],ScaleCTicket4[],stat,errmess$)
      If stat = 0 And ScaleCTicket$[47,47] = "C"
        Call PrintCTicket(TicketNo$,TicketPrinter$,TicketPrinterType$,copies,"R",status)
        Exit Sub 
      End If 
    End If 
    Call SAITouchError("Ticket Number not found.")
    Goto RePrintTicket_InputLoop
  End If 
  Call SAIReadRecord(ch_8326ro,recdef_8326.,"Y","U",r,ScaleTicAudit$,ScaleTicAudit[],stat,errmess$)
  !  if ScaleTicAudit$[120,121]<>Branch$
  !    Call SAITouchWarning("Cannot Re-print a Ticket for a different Branch.")
  !    goto RePrintTicket_InputLoop
  If ScaleTicAudit$[127,127] = "D"
    Call SAITouchWarning("Ticket has been DELETED!  Cannot Re-print.")
    Exit Sub 
  Else If ScaleTicAudit$[127,127] = "V"
    Call SAITouchWarning("Ticket has been VOIDED!  Cannot Re-print.")
    Exit Sub 
  Else If ScaleTicAudit$[127,127] = "C"
    Call SAITouchWarning("Ticket has been CANCELLED!  Cannot Re-print.")
    Exit Sub 
  Else If ScaleTicAudit$[127,127] = "R"
    Call SAITouchWarning("Ticket has been REVERSED!  Cannot Re-print.")
    Exit Sub 
  Else If ScaleTicAudit$[153,153] = "R" And TicketNo$[1,1] <> "T"
    Call SAITouchWarning("Cannot Re-print Retail Tickets through the Truck " + gbl_scale$ + "!")
    Exit Sub 
  End If 
  If ScaleTicAudit$[153,153] = "P" Or ScaleTicAudit$[153,153] = "R"
    Call RePrintPurchaseTicket(copies)
  Else If Pos("SGTW", = ScaleTicAudit$[153,153]) > 0
    Call RePrintSalesTicket(copies)
  Else 
    Call SAITouchWarning("Unknown Ticket Type: " + ScaleTicAudit$[153,153] + ".  Cannot Re-print.")
  End If 
End Sub 
Sub TicketComment()
  KBParams.StartX = 5
  KBParams.StartY = 55
  KBParams.ButtonHeight = 25
  KBParams.ButtonWidth = 50
  KBParams.FontSize1 = 14
  KBParams.FontSize2 = 12
  KBParams.InputElement = 10
  KBParams.IELength = 0 !150
  KBParams.IEMaxChar = 6
  KBParams.IELabel$ = ""
  KBParams.FuncBtnLen = 0 !100
  KBParams.FunctionBtn$ = "" !"&List"
TicketComment_InputLoop: !
  Clear TransferMode,WeightOnly
  Clear Supplier.,Customer.,TicketIdentity.
  chwin2 = SAIOpenWindow("Enter Ticket No. to Edit Comment",800,220,1)
  Print #chwin2;PChr$("Arial");'FONTFACE';
  Print #chwin2;PChr$(SAIColorRGB(230,230,230));'BACKCOLOR CS WCSETCOLOR';
  Print #chwin2;'12FONTSIZE WCSETFONT';
  x = 300 \ x0 = x - 130 \ y = 17
  Print #chwin2;PChr$(900,x0,y + 2,x,y + 16,"Ticket No:");'WCLABEL WCRESETCOLOR';
  Print #chwin2;PChr$(KBParams.InputElement,x,y,x + 150,y + 18,"",2,6);'WCSTRING';
  x1 = x + 85
  x = x + 150 + 5 \ y = y - 3
  Print #chwin2;PChr$(15,x,y,x + 100,y + 25,"List",2);'WCBUTTON';
  If LastTicket$
    x = x + 110
    Print #chwin2;'10FONTSIZE WCSETFONT';
    Print #chwin2;PChr$(16,x,y,x + 150,y + 25,"Last Ticket\15\(" + LastTicket$ + ")",2);'WCBUTTON';
    Print #chwin2;'12FONTSIZE WCSETFONT';
  End If 
  y = y + 38
  x = 120
  Call SAIDrawKeyboard(chwin2,KBParams.,0)
  Print #chwin2;PChr$(KBParams.InputElement);'WCFOCUS';
  istring$ = ""
  Do 
    Input #chwin2; Len (1);w$
    Select Case w$
      Case 'F15' ! List
        TicketNo$ = Trim$(SAIQuery$(chwin2,KBParams.InputElement))
        Call ListTickets(TicketNo$,"")
        If TicketNo$ Exit Do 
      Case 'F16' ! Last Ticket
        TicketNo$ = LastTicket$
        Exit Do 
      Case Else 
        Call SAIKeyBoardInput(chwin2,chwin2,KBParams.,ishift,w$,istring$,istatus)
        If istatus = -1
          TicketNo$ = ""
          Exit Do 
        Else If istatus
          TicketNo$ = SAISpaceFill$(SAIQuery$(chwin2,KBParams.InputElement),6)
          If Trim$(TicketNo$) = "" Let TicketNo$ = ""
          Exit Do 
        End If 
    End Select 
  Loop 
  Close #chwin2
  If TicketNo$ = "" Exit Sub 
  If LastTicket$ = "" Let LastTicket$ = TicketNo$
  k$ = TicketNo$
  Search #ch_8326ro,2,2;k$,r,e
  If e
    Call SAITouchError("Ticket Number not found.")
    Goto TicketComment_InputLoop
  End If 
  Call SAIReadRecord(ch_8326ro,recdef_8326.,"Y","U",r,ScaleTicAudit$,ScaleTicAudit[],stat,errmess$)
  If ScaleTicAudit$[120,121] <> Branch$
    Call SAITouchWarning("Cannot edit a Ticket from a different Branch.")
    Goto TicketComment_InputLoop
  Else If ScaleTicAudit$[127,127] = "D"
    Call SAITouchWarning("Ticket has been DELETED!")
    Exit Sub 
  Else If ScaleTicAudit$[127,127] = "V"
    Call SAITouchWarning("Ticket has been VOIDED!")
    Exit Sub 
  Else If ScaleTicAudit$[127,127] = "C"
    Call SAITouchWarning("Ticket has been CANCELLED!")
    Exit Sub 
  Else If ScaleTicAudit$[127,127] = "R"
    Call SAITouchWarning("Ticket has been REVERSED!")
    Exit Sub 
  End If 
  Clear TicketHeader.
  If ScaleTicAudit$[153,153] = "P" Or ScaleTicAudit$[153,153] = "R"
    Search #ch_db;"SELECT * FROM Pur_Ticket_Hdr WHERE TicketNo=" + SQLV$(TicketNo$) + " AND ShipmentDate=" + SQLD$(SAIConvertDate#(ScaleTicAudit$[12,17]))
    If Chf(ch_db)
      Map Record #ch_db As Pur_Ticket_Hdr
      Read Record #ch_db;PurTicketHdr.
      TicketHeader.TicketNo$ = PurTicketHdr.TicketNo$
      TicketHeader.ShipmentDate# = PurTicketHdr.ShipmentDate#
      TicketHeader.ControlNo = PurTicketHdr.ControlNo
      TicketHeader.TktType$ = PurTicketHdr.TktType$
      TicketHeader.EntityNo$ = PurTicketHdr.SupplierNo$
      TicketHeader.Name$ = PurTicketHdr.SupplierName$
      TicketHeader.Address1$ = PurTicketHdr.Address1$
      TicketHeader.Address2$ = PurTicketHdr.Address2$
      TicketHeader.City$ = PurTicketHdr.City$
      TicketHeader.State$ = PurTicketHdr.State$
      TicketHeader.PostCode$ = PurTicketHdr.PostCode$
      TicketHeader.InYardID$ = PurTicketHdr.InYardID$
      TicketHeader.VehNo$ = PurTicketHdr.VehNo$
      TicketHeader.TktComment$ = PurTicketHdr.TktComment$
      CommentKey$ = "V"
      TicketHeader.OrderNo$ = PurTicketHdr.PONo$
      TicketHeader.OrderLine$ = PurTicketHdr.POLine$
      TicketHeader.SrcYard$ = ScaleTicAudit$[129,129]
      If Trim$(TicketHeader.SrcYard$)
        TicketHeader.TktMode$ = "T"
        TicketHeader.SrcTicketNo$ = ScaleTicAudit$[190,195]
      End If 
      Search #ch_db;"SELECT * FROM Pur_Ticket_Identity WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
      If Chf(ch_db)
        Map Record #ch_db As Pur_Ticket_Identity
        Read Record #ch_db;TicketIdentity.
      End If 
      Call RetrieveSupplier(TicketHeader.EntityNo$,Supplier.,stat)
    Else 
      Call SAITouchWarning("Ticket No. " + TicketNo$ + " cannot be found in ticket database.")
      Exit Sub 
    End If 
  Else If Pos("SGTW", = ScaleTicAudit$[153,153]) > 0
    Search #ch_db;"SELECT * FROM Sales_Ticket_Hdr WHERE TicketNo=" + SQLV$(TicketNo$) + " AND ShipmentDate=" + SQLD$(SAIConvertDate#(ScaleTicAudit$[12,17]))
    If Chf(ch_db)
      Map Record #ch_db As Sales_Ticket_Hdr
      Read Record #ch_db;SalesTicketHdr.
      TicketHeader.TicketNo$ = SalesTicketHdr.TicketNo$
      TicketHeader.ShipmentDate# = SalesTicketHdr.ShipmentDate#
      TicketHeader.ControlNo = SalesTicketHdr.ControlNo
      TicketHeader.TktType$ = SalesTicketHdr.TktType$
      TicketHeader.EntityNo$ = SalesTicketHdr.CustomerNo$
      TicketHeader.Name$ = SalesTicketHdr.CustomerName$
      TicketHeader.Address1$ = SalesTicketHdr.Address1$
      TicketHeader.Address2$ = SalesTicketHdr.Address2$
      TicketHeader.City$ = SalesTicketHdr.City$
      TicketHeader.State$ = SalesTicketHdr.State$
      TicketHeader.PostCode$ = SalesTicketHdr.PostCode$
      TicketHeader.InYardID$ = SalesTicketHdr.InYardID$
      TicketHeader.VehNo$ = SalesTicketHdr.VehNo$
      TicketHeader.TktComment$ = SalesTicketHdr.TktComment$
      TicketHeader.OrderNo$ = SalesTicketHdr.SONo$
      TicketHeader.OrderLine$ = SalesTicketHdr.SOLine$
      CommentKey$ = "C"
      ! Determine if WeightOnly or Transfer
      Call RetrieveCustomer(TicketHeader.EntityNo$,Customer.,stat)
      If TicketHeader.TktType$ = "S"
        If stat = 0 And Customer.IntercompanyType$ = "I" Let TicketHeader.TktMode$ = "T"
      End If 
    Else 
      Call SAITouchWarning("Ticket No. " + TicketNo$ + " cannot be found in ticket database.")
      Exit Sub 
    End If 
  Else 
    Call SAITouchWarning("Unknown Ticket Type: " + ScaleTicAudit$[153,153] + ".  Cannot edit.")
    Exit Sub 
  End If 
  ! Look for comment
  CommentKey$ = CommentKey$ + SAISpaceFill$(TicketHeader.EntityNo$,6) + ScaleTicAudit$[154,165] + ScaleTicAudit$[60,65] + "SHP01"
  ktemp$ = CommentKey$
  Call SAIGetRecord(ch_1115ro,recdef_1115.,ktemp$,1,"Y","U",r,GblCmt$,stat,errmess$)
  If stat And ScaleTicAudit$[154,165] <> TicketHeader.TicketNo$
    ktemp$[20,25] = SAISpaceFill$(TicketHeader.TicketNo$,6)
    Call SAIGetRecord(ch_1115,recdef_1115.,ktemp$,1,"Y","L",r,GblCmt$,stat,errmess$)
    If stat = 0 ! Fix comment record up with correct order and shipment #
      Call SAIDeleteRecord(ch_1115,recdef_1115.,GblCmt$,r,stat,errmess$)
      If stat = 0
        GblCmt$[1,30] = SAISpaceFill$(CommentKey$,30)
        Call SAIAddRecord(ch_1115,recdef_1115.,GblCmt$,stat,errmess$)
      Else 
        Unlock #ch_1115
      End If 
    End If 
  End If 
  If stat Clear GblCmt$
  Select Case TicketHeader.TktType$
    Case "P","R"
      temp$ = "Purchase"
      temp2$ = "P"
    Case "S"
      temp$ = "Sales"
      temp2$ = "S"
    Case "W"
      temp$ = "Weight Only"
      temp2$ = "W"
      WeightOnly = 1
    Case Else 
      temp$ = ""
  End Select 
  If TicketHeader.TktMode$ = "T" Let temp$ = "Transfer"
  chwin2 = SAIOpenWindow(temp$ + " Ticket No. " + TicketHeader.TicketNo$,620,290,1)
  Print #chwin2;PChr$("Courier New");'FONTFACE 8FONTSIZE WCSETFONT';
  Print #chwin2;PChr$(80,10,10,610,250,"",0);'WCTEXT';
  Print #chwin2;'80WCSELECT';PChr$(0,16777215);'WCSETCOLOR 0WCSELECT'; ! Set color to Black on White
  Print #chwin2;PChr$("Arial");'FONTFACE 12FONTSIZE EBOLD WCSETFONT';
  Print #chwin2;'80WCSELECT CU';
  Call PrintTicketHeader(chwin2,"")
  Print #chwin2;
  Print #chwin2;"Ticket Comment: ";TicketHeader.TktComment$
  Print #chwin2;'0WCSELECT';
  Call SAIButtons(chwin2,3,1,"Edit Comment~Exit~Capture Photo",620,260,25,150,50)
  LastTicket$ = TicketHeader.TicketNo$
  If PhotoCameras = 0 Print #chwin2;'3WCDISABLE';
  Do 
    Input #chwin2; Len (1);w$
    Select Case w$
      Case 'F1' ! Edit Comment
        temp$ = TicketHeader.TktComment$
        Call SAIKeyBoardGen("Enter Comment",KBParams.alphacase,50,0,temp$,status)
        If status = 0
          Call UpdateComment(temp$)
          Print #chwin2;'80WCSELECT CU';
          Call PrintTicketHeader(chwin2,"")
          Print #chwin2;
          Print #chwin2;"Ticket Comment: ";TicketHeader.TktComment$
          Print #chwin2;'0WCSELECT';
        End If 
      Case 'F2' ! Exit
        Exit Do 
      Case 'F3' ! Capture Photo
        If z$[644,646] = "323" And TicketHeader.EntityNo$[1,3] = "CP0" ! SA Recycling - Peddler
          temp$ = ""
        Else 
          temp$ = TicketHeader.Name$
        End If 
        Call SAICapturePhoto(CameraDefs$[],TicketHeader.TicketNo$,temp2$,Branch$,TicketHeader.EntityNo$,temp$,WeighMaster$,PhotoCaptured)
        !      if PhotoCaptured>0 Let TicketHeader.Photo=1
        !      Don't update photo flag for now
      Case Else 
        Exit Do 
    End Select 
  Loop 
  Close #chwin2
End Sub 
Sub SalesTicketSearch(k$)
  icount = 0
  Clear ilistsel$[]
  If ilistcur > ilistmax
    ilistmax = ilistmax + 10
    Dim ilist$[ilistmax,ilistlen]
  End If 
  ilist$[ilistcur] = k$
  Print #chlist;PChr$(1,3);'WCDISABLE';
  Print #chlist;PChr$(30,29 + imax);'WCDELETE';
  Print #chlist;PChr$("Arial Mono for dl4");'FONTFACE 14FONTSIZE BBOLD WCSETFONT';
  Try 
    SQL$ = "SELECT " + SQLN$(SalesTicketList.) + " FROM Sales_Ticket_Hdr"
    SQL$ = SQL$ + " WHERE Branch=" + SQLV$(Branch$)
    SQL$ = SQL$ + " AND TktType=" + SQLV$("S")
    SQL$ = SQL$ + " AND TktStatus<>" + SQLV$("V")
    If ilistcur = 0
      If k$ Let SQL$ = SQL$ + " AND TicketNo <= " + SQLV$(k$)
    Else 
      SQL$ = SQL$ + " AND TicketNo < " + SQLV$(k$)
    End If 
    SQL$ = SQL$ + " ORDER BY TicketNo DESC LIMIT " + Str$(imax)
    Search #ch_db;SQL$
    nr = Chf(ch_db)
    If nr
      Map Record #ch_db As Sales_Ticket_List
      For i = 1 To nr
        Read Record #ch_db;SalesTicketList.
        temp$ = SAISpaceFill$(SalesTicketList.TicketNo$,8) + SAISafeDateUsing$(SalesTicketList.ShipmentDate#,dateformat$) + "  "
        temp$ = temp$ + SAISpaceFill$(SalesTicketList.CustomerNo$,6) + " - " + SAISpaceFill$(SalesTicketList.CustomerName$,30)
        temp$ = Replace$(temp$,"&","&&")
        Print #chlist;PChr$(icount + 30,10,20 + (icount * 30),ilistw - 10,15 + (icount + 1) * 30,temp$,2);'WCBUTTON';
        ilistsel$[icount] = SalesTicketList.TicketNo$
        icount = icount + 1
        e = 0
      Next i
      k$ = SalesTicketList.TicketNo$
    End If 
  Else 
    nr = 0
  End Try 
  Print #chlist;PChr$(1,3);'WCENABLE';
  If nr < imax Print #chlist;'2WCDISABLE';
  If ilistcur = 0 Print #chlist;'1WCDISABLE';
  If icount = 0
    Print #chlist;'3WCFOCUS';
  Else 
    Print #chlist;'30WCFOCUS';
  End If 
End Sub 
Sub ListSalesTickets(TicketNo$)
  imax = 9
  Clear ilist$[]
  ilistcur = 0
  ilistw = 860
  temp$ = "  Ticket# Ship Date Customer # and Name"
  Call SAITouchButtonList(chlist,imax,ilistw,"List Sales Tickets",temp$)
  If TicketNo$
    k$ = SAIFill$(TicketNo$,"L","~",6)
  Else 
    k$ = "NWT" + Branch$
    Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
    If stat
      k$ = "NWT"
      Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
    End If 
    If stat
      k$ = "ZAAAAA" ! Skip retail tickets
    Else 
      If ScaleCodes$[94,94] = "Y"
        k$ = "T" + ScrapCode$[70,74]
      Else 
        k$ = ScrapCode[1] Using "T&&&&&"
      End If 
    End If 
  End If 
  Call SalesTicketSearch(k$)
  Do 
    Input #chlist; Len (1);w$
    Select Case w$
      Case 'F1' ! Previous
        If ilistcur > 0
          ilistcur = ilistcur - 1
          k$ = ilist$[ilistcur]
          Call SalesTicketSearch(k$)
        End If 
      Case 'F2' ! Next
        ilistcur = ilistcur + 1
        Call SalesTicketSearch(k$)
      Case 'F3' ! Cancel
        TicketNo$ = ""
        Exit Do 
      Case 'F30' To 'F39'
        i = Asc(w$) - Asc('F30')
        TicketNo$ = ilistsel$[i]
        Exit Do 
    End Select 
  Loop 
  Close #chlist
End Sub 
Sub ReprintBOL()
  KBParams.StartX = 5
  KBParams.StartY = 55
  KBParams.ButtonHeight = 25
  KBParams.ButtonWidth = 50
  KBParams.FontSize1 = 14
  KBParams.FontSize2 = 12
  KBParams.InputElement = 10
  KBParams.IELength = 0 !150
  KBParams.IEMaxChar = 6
  KBParams.IELabel$ = ""
  KBParams.FuncBtnLen = 0 !100
  KBParams.FunctionBtn$ = "" !"&List"
RePrintBOL_InputLoop: !
  chwin2 = SAIOpenWindow("Enter Ticket No. to Re-Print BOL",800,220,1)
  Print #chwin2;PChr$("Arial");'FONTFACE';
  Print #chwin2;PChr$(SAIColorRGB(230,230,230));'BACKCOLOR CS WCSETCOLOR';
  Print #chwin2;'12FONTSIZE WCSETFONT';
  x = 300 \ y = 17
  Print #chwin2;PChr$(900,x - 150,y + 2,x,y + 16,"Ticket No.");'WCLABEL WCRESETCOLOR';
  Print #chwin2;PChr$(KBParams.InputElement,x,y,x + 150,y + 18,"",2,6);'WCSTRING';
  x = x + 150 + 5 \ y = y - 3
  Print #chwin2;PChr$(23,x,y,x + 100,y + 25,"List",2);'WCBUTTON';
  If LastTicket$
    x = x + 110
    Print #chwin2;'10FONTSIZE WCSETFONT';
    Print #chwin2;PChr$(24,x,y,x + 150,y + 25,"Last Ticket\15\(" + LastTicket$ + ")",2);'WCBUTTON';
    Print #chwin2;'12FONTSIZE WCSETFONT';
  End If 
  Call SAIDrawKeyboard(chwin2,KBParams.,0)
  Print #chwin2;PChr$(KBParams.InputElement);'WCFOCUS';
  istring$ = ""
  Do 
    Input #chwin2; Len (1);w$
    Select Case w$
      Case 'F23' ! List
        TicketNo$ = Trim$(SAIQuery$(chwin2,KBParams.InputElement))
        Call ListSalesTickets(TicketNo$)
        If TicketNo$ Exit Do 
      Case 'F24' ! Last Ticket
        TicketNo$ = LastTicket$
        Exit Do 
      Case Else 
        Call SAIKeyBoardInput(chwin2,chwin2,KBParams.,ishift,w$,istring$,istatus)
        If istatus = -1
          TicketNo$ = ""
          Exit Do 
        Else If istatus
          TicketNo$ = SAISpaceFill$(SAIQuery$(chwin2,KBParams.InputElement),6)
          If Trim$(TicketNo$) = "" Let TicketNo$ = ""
          Exit Do 
        End If 
    End Select 
  Loop 
  Close #chwin2
  If TicketNo$ = "" Exit Sub 
  Clear TicketHeader.,TicketTotals.,Items.[],ValidateContainer$,ExportAddress.
  k$ = TicketNo$
  Search #ch_8326ro,2,2;k$,r,e
  If e
    Call SAITouchError("Ticket Number not found.")
    Goto RePrintBOL_InputLoop
  End If 
  Call SAIReadRecord(ch_8326ro,recdef_8326.,"Y","U",r,ScaleTicAudit$,ScaleTicAudit[],stat,errmess$)
  If ScaleTicAudit$[120,121] <> Branch$
    Call SAITouchWarning("Cannot print a BOL for a different Branch.")
    Goto RePrintBOL_InputLoop
  Else If ScaleTicAudit$[127,127] = "D"
    Call SAITouchWarning("Ticket has been DELETED!  Cannot print BOL.")
    Exit Sub 
  Else If ScaleTicAudit$[127,127] = "V"
    Call SAITouchWarning("Ticket has been VOIDED!  Cannot print BOL.")
    Exit Sub 
  Else If ScaleTicAudit$[127,127] = "C"
    Call SAITouchWarning("Ticket has been CANCELLED!  Cannot print BOL.")
    Exit Sub 
  Else If ScaleTicAudit$[127,127] = "R"
    Call SAITouchWarning("Ticket has been REVERSED!  Cannot print BOL.")
    Exit Sub 
  Else If ScaleTicAudit$[153,153] = "P"
    Call RetrieveSupplier(ScaleTicAudit$[26,31],Supplier.,stat)
    If stat
      Call SAITouchWarning("Invalid Supplier!  Cannot print BOL.")
      Exit Sub 
    End If 
    MaterialCode$ = Trim$(ScaleTicAudit$[32,39])
    Call GetMaterialPrice(MaterialCode$,status)
    If Material.DirtFlag = 0
      Call SAITouchWarning("Only DIRT Purchase Tickets can have a BOL.")
      Exit Sub 
    Else 
      Dirt$ = "Y"
    End If 
    Call PopulateSupplierAddress()
  Else If ScaleTicAudit$[153,153] <> "S"
    Call SAITouchWarning("Only Sales Tickets can have a BOL.")
    Exit Sub 
  Else 
    Call RetrieveCustomer(ScaleTicAudit$[26,31],Customer.,stat)
    If stat
      Call SAITouchError("Customer record for customer " + ScaleTicAudit$[26,31] + " cannot be found.\15\" + errmess$)
      Exit Sub 
    End If 
    Call PopulateCustomerAddress()
  End If 
  TicketHeader.Branch$ = ScaleTicAudit$[120,121]
  TicketHeader.TicketNo$ = ScaleTicAudit$[20,25]
  TicketHeader.TktType$ = ScaleTicAudit$[153,153]
  TicketHeader.EntityNo$ = ScaleTicAudit$[26,31]
  TicketHeader.InYardID$ = ScaleTicAudit$[1,11]
  TicketHeader.VehType$ = ScaleTicAudit$[40,40]
  TicketHeader.VehSize$ = ScaleTicAudit$[197,198]
  TicketHeader.VehNo$ = ScaleTicAudit$[142,152]
  TicketHeader.OrderNo$ = Trim$(ScaleTicAudit$[154,163])
  TicketHeader.OrderLine$ = Trim$(ScaleTicAudit$[164,165])
  TicketHeader.MatReqNo$ = Trim$(ScaleTicAudit$[172,181])
  TicketHeader.MatReqLine$ = Trim$(ScaleTicAudit$[182,183])
  TicketHeader.CarrierNo$ = ScaleTicAudit$[166,171]
  TicketHeader.TripTicketNo$ = ScaleTicAudit$[199,204]
  TicketHeader.Photo = YesNoFlag(ScaleTicAudit$[247,247])
  Try Let TicketHeader.ShipmentDate# = SAIConvertDate#(ScaleTicAudit$[12,17]) Else Rem
  TicketHeader.EntryDate# = TicketHeader.ShipmentDate#
  If TicketHeader.EntityNo$[1,3] = "CP0"
    If ScaleTicAudit$[153,153] = "P"
      Clear PurTicketHdr.
      Try 
        Search #ch_db;"SELECT * FROM Pur_Ticket_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
        If Chf(ch_db)
          Map Record #ch_db As Pur_Ticket_Hdr
          Read Record #ch_db;PurTicketHdr.
          TicketHeader.Name$ = PurTicketHdr.SupplierName$
          TicketHeader.Address1$ = PurTicketHdr.Address1$
          TicketHeader.Address2$ = PurTicketHdr.Address2$
          TicketHeader.City$ = PurTicketHdr.City$
          TicketHeader.State$ = PurTicketHdr.State$
          TicketHeader.PostCode$ = PurTicketHdr.PostCode$
          TicketHeader.PhoneNo$ = PurTicketHdr.PhoneNo$
          TicketHeader.Trader$ = PurTicketHdr.Trader$
          TicketHeader.FundsType$ = PurTicketHdr.FundsType$
        End If 
      Else 
      End Try 
    Else 
      Clear SalesTicketHdr.
      Try 
        Search #ch_db;"SELECT * FROM Sales_Ticket_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#) + " AND Branch=" + SQLV$(Branch$)
        If Chf(ch_db)
          Map Record #ch_db As Sales_Ticket_Hdr
          Read Record #ch_db;SalesTicketHdr.
          TicketHeader.Name$ = SalesTicketHdr.CustomerName$
          TicketHeader.Address1$ = SalesTicketHdr.Address1$
          TicketHeader.Address2$ = SalesTicketHdr.Address2$
          TicketHeader.City$ = SalesTicketHdr.City$
          TicketHeader.State$ = SalesTicketHdr.State$
          TicketHeader.PostCode$ = SalesTicketHdr.PostCode$
          TicketHeader.Trader$ = SalesTicketHdr.Trader$
          TicketHeader.FundsType$ = SalesTicketHdr.FundsType$
        End If 
      Else 
      End Try 
    End If 
  End If 
  If Dirt$ = "Y"
    ! Get Contract Line detail if present
    If Trim$(TicketHeader.OrderNo$) = "UNKNOWN"
      FullPONo$ = ""
      TicketHeader.OrderNo$ = ""
    Else If Trim$(TicketHeader.OrderNo$)
      FullPONo$ = SAIFill$(TicketHeader.OrderNo$,"R"," ",10) + SAISpaceFill$(TicketHeader.OrderLine$,2)
    Else 
      FullPONo$ = ""
    End If 
    If FullPONo$
      ktemp$ = SAISpaceFill$(TicketHeader.EntityNo$,6) + FullPONo$ ! *** Use SODetail variable for Dirt
      Call SAIGetRecord(ch_1210ro,recdef_1310.,ktemp$,1,"Y","U",r,SODetail$,SODetail[],stat,errmess$)
      If stat = 0
        TicketHeader.ShipOrdNo$ = Trim$(SODetail$[214,233])
        TicketHeader.ShippingInst$ = Trim$(SODetail$[66,95])
      End If 
    Else 
      SODetail$ = " ",SODetail$
    End If 
    ItemCount = 1
    Call LoadItemFrom8326(ItemCount)
    TicketHeader.ShipmentNo$ = Items.[1].ShipmentNo$
    Call TotalTicketItem(ItemCount)
  Else 
    ! Get Contract Line detail if present
    If Trim$(TicketHeader.OrderNo$)
      FullSONo$ = SAIFill$(TicketHeader.OrderNo$,"R"," ",10) + SAISpaceFill$(TicketHeader.OrderLine$,2)
    Else 
      FullSONo$ = ""
    End If 
    If FullSONo$
      ktemp$ = SAISpaceFill$(TicketHeader.EntityNo$,6) + FullSONo$
      Call SAIGetRecord(ch_1310ro,recdef_1310.,ktemp$,1,"Y","U",r,SODetail$,SODetail[],stat,errmess$)
      If stat = 0
        TicketHeader.ShipOrdNo$ = Trim$(SODetail$[214,233])
        ktemp$ = SODetail$[1,16]
        Call SAIGetRecord(ch_1300,recdef_1300.,ktemp$,1,"Y","U",rtemp,SOHeader$,SOHeader[],stat,errmess$)
        If stat = 0 Let ValidateContainer$ = SOHeader$[210,210]
      End If 
    Else 
      SODetail$ = " ",SODetail$
    End If 
    ! Get Material Req
    If Trim$(TicketHeader.MatReqNo$)
      ktemp$ = SAIFill$(TicketHeader.MatReqNo$,"R"," ",10) + SAISpaceFill$(TicketHeader.MatReqLine$,2)
      Call SAIGetRecord(ch_1210ro,recdef_1210.,ktemp$,2,"Y","U",r,PODetail$,PODetail[],stat,errmess$)
      If stat = 0 Let TicketHeader.ShippingInst$ = Trim$(PODetail$[66,95])
    End If 
    ! Determine if WeightOnly or Transfer
    WeightOnly = 0
    TicketHeader.TktMode$ = ""
    If TicketHeader.TktType$ = "S"
      If Customer.IntercompanyType$ = "I" Let TicketHeader.TktMode$ = "T"
    Else 
      WeightOnly = 1
    End If 
    ! Look for Export Address
    Call RetrieveAltAddress("X",TicketHeader.EntityNo$,"",ExportAddress.,stat)
    If stat Clear ExportAddress.
    ! Should we be able to print a BOL for this ticket?
    If WeightOnly
      Call SAITouchWarning("Cannot print a BOL for a Weight Only Ticket.")
      Exit Sub 
      ! Allow printing BOL without S.O. (uses customer master file address)
      !    else if Trim$(TicketHeader.OrderNo$)="" AND TicketHeader.TktMode$<>"T"
      !      Call SAITouchWarning("Cannot print a BOL for a Ticket that has no Sales Order Number.")
      !      Exit Sub
    Else 
      Search #ch_db;"SELECT " + SQLN$(CodesVehicleType.) + "FROM Codes_Vehicle_Type WHERE VehicleType=" + SQLV$(Trim$(TicketHeader.VehType$))
      If Chf(ch_db)
        Map Record #ch_db As Codes_Vehicle_Type
        Read Record #ch_db;CodesVehicleType.
      Else 
        CodesVehicleType.PrintBOL = 0
      End If 
      If CodesVehicleType.PrintBOL = 0
        Call SAITouchWarning("Cannot print a BOL for Vehicle Type=" + TicketHeader.VehType$ + ".")
        Exit Sub 
      End If 
    End If 
    ItemCount = 1
    Call LoadItemFrom8326(ItemCount)
    TicketHeader.ShipmentNo$ = Items.[1].ShipmentNo$
    ! Look for 8430
    k$ = TicketHeader.TicketNo$ + TicketHeader.EntityNo$ + Items.[1].MaterialCode$
    Call SAIGetRecord(ch_8430ro,recdef_8430.,k$,1,"Y","U",r,SalesTicket$,SalesTicket3[],SalesTicket4[],stat,errmess$)
    If stat = 0
      TicketHeader.BOLNo$ = SalesTicket$[137,142]
      Items.[1].MatExt = SalesTicket4[1]
      TicketHeader.SealNo$ = Trim$(SalesTicket$[107,116])
      TicketHeader.CustReleaseNo$ = Trim$(SalesTicket$[148,157])
      TicketHeader.ContainerNo$ = Trim$(SalesTicket$[205,216])
    Else 
      SalesTicket$ = ""
    End If 
    ! Sales Ticket Database
    Clear SalesTicketHdr.
    Try 
      Search #ch_db;"SELECT * FROM Sales_Ticket_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#) + " AND Branch=" + SQLV$(Branch$)
      If Chf(ch_db)
        Map Record #ch_db As Sales_Ticket_Hdr
        Read Record #ch_db;SalesTicketHdr.
        TicketHeader.ControlNo = SalesTicketHdr.ControlNo
        TicketHeader.ReleaseNo = SalesTicketHdr.ReleaseNo
        TicketHeader.CarrierRefNo$ = SalesTicketHdr.CarrierRefNo$
        TicketHeader.Trader$ = SalesTicketHdr.Trader$
        TicketHeader.FundsType$ = SalesTicketHdr.FundsType$
        TicketHeader.BOLNo$ = SalesTicketHdr.BOLNo$
        TicketHeader.RouteNo$ = SalesTicketHdr.RouteNo$
        TicketHeader.DeliveryAddr$ = SalesTicketHdr.DeliveryAddr$
        TicketHeader.DeliveringCarrier$ = SalesTicketHdr.DeliveringCarrier$
        TicketHeader.CarInitials$ = SalesTicketHdr.CarInitials$
        TicketHeader.CarNo$ = SalesTicketHdr.CarNo$
        TicketHeader.CustReleaseNo$ = SalesTicketHdr.CustReleaseNo$
        TicketHeader.SealNo$ = SalesTicketHdr.SealNo$
        TicketHeader.Seal2No$ = SalesTicketHdr.Seal2No$
        TicketHeader.Seal3No$ = SalesTicketHdr.Seal3No$
        TicketHeader.ContainerNo$ = SalesTicketHdr.ContainerNo$
        TicketHeader.BookingNo$ = SalesTicketHdr.BookingNo$
        TicketHeader.ContainerTareWt = SalesTicketHdr.ContainerTareWt
      End If 
    Else 
    End Try 
    Call TotalTicketItem(ItemCount)
  End If 
  Call GetBOLInfo(status)
  If status Exit Sub 
  If Trim$(TicketHeader.BOLNo$) = ""
    Call GenerateBOLNo(TicketHeader.BOLNo$)
    If TicketHeader.BOLNo$ = "" Exit Sub 
    If Dirt$ <> "Y" And SalesTicket$ Let status = 1
  Else If SalesTicket$
    If SalesTicket$[107,116] <> SAISpaceFill$(TicketHeader.SealNo$,10)
      status = 1
    Else If SalesTicket$[148,157] <> SAISpaceFill$(TicketHeader.CustReleaseNo$,10)
      status = 1
    Else If SalesTicket$[205,216] <> SAISpaceFill$(TicketHeader.ContainerNo$,12)
      status = 1
    End If 
  End If 
  If status
    k$ = SAISpaceFill$(TicketHeader.TicketNo$,6) + SAISpaceFill$(TicketHeader.EntityNo$,6) + SAISpaceFill$(Items.[1].MaterialCode$,8)
    Call SAIGetRecord(ch_8430,recdef_8430.,k$,1,"F","L",r,SalesTicket$,SalesTicket3[],SalesTicket4[],stat,errmess$)
    If stat = 0
      SalesTicket$[137,142] = SAISpaceFill$(TicketHeader.BOLNo$,6)
      SalesTicket$[107,116] = SAISpaceFill$(TicketHeader.SealNo$,10)
      SalesTicket$[148,157] = SAISpaceFill$(TicketHeader.CustReleaseNo$,10)
      SalesTicket$[205,216] = SAISpaceFill$(TicketHeader.ContainerNo$,12)
      Call SAIWriteRecord(ch_8430,recdef_8430.,"U",r,SalesTicket$,SalesTicket3[],SalesTicket4[],stat,errmess$)
      If stat Call SAITouchError("Error updating Sales Ticket record with BOL #.\15\" + errmess$)
    End If 
  End If 
  ! Update SQL table; sync BOL info for all records with same ticket number
  Clear SQL$
  SQL$ = "UPDATE Sales_Ticket_Hdr "
  SQL$ = SQL$ + "SET BOLNo=" + SQLV$(TicketHeader.BOLNo$) + ", "
  SQL$ = SQL$ + "RouteNo=" + SQLV$(TicketHeader.RouteNo$) + ", "
  SQL$ = SQL$ + "DeliveryAddr=" + SQLV$(TicketHeader.DeliveryAddr$) + ", "
  SQL$ = SQL$ + "DeliveringCarrier=" + SQLV$(TicketHeader.DeliveringCarrier$) + ", "
  SQL$ = SQL$ + "CarInitials=" + SQLV$(TicketHeader.CarInitials$) + ", "
  SQL$ = SQL$ + "CarNo=" + SQLV$(TicketHeader.CarNo$) + ", "
  If TicketHeader.ReleaseNo = 0
    SQL$ = SQL$ + "BookingNo=" + SQLV$(TicketHeader.BookingNo$) + ", "
  End If 
  SQL$ = SQL$ + "CustReleaseNo=" + SQLV$(TicketHeader.CustReleaseNo$) + ", "
  SQL$ = SQL$ + "SealNo=" + SQLV$(TicketHeader.SealNo$) + ", "
  SQL$ = SQL$ + "Seal2No=" + SQLV$(TicketHeader.Seal2No$) + ", "
  SQL$ = SQL$ + "Seal3No=" + SQLV$(TicketHeader.Seal3No$) + ", "
  SQL$ = SQL$ + "ContainerNo=" + SQLV$(TicketHeader.ContainerNo$) + " "
  SQL$ = SQL$ + "WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " "
  SQL$ = SQL$ + "AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
  Try 
    Search #ch_db;SQL$
  Else 
    Call SAITouchMessage("Error updating Sales_Ticket_Hdr table with BOL info.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
  End Try 
  Call PrintBOL()
End Sub 
Sub EditVINDetail()
  KBParams.StartX = 5
  KBParams.StartY = 55
  KBParams.ButtonHeight = 25
  KBParams.ButtonWidth = 50
  KBParams.FontSize1 = 14
  KBParams.FontSize2 = 12
  KBParams.InputElement = 10
  KBParams.IELength = 0 !150
  KBParams.IEMaxChar = 6
  KBParams.IELabel$ = ""
  KBParams.FuncBtnLen = 0 !100
  KBParams.FunctionBtn$ = "" !"&List"
  chwin2 = SAIOpenWindow("Enter Ticket No. to enter VIN Detail",800,220,1)
  Print #chwin2;PChr$("Arial");'FONTFACE';
  Print #chwin2;PChr$(SAIColorRGB(230,230,230));'BACKCOLOR CS WCSETCOLOR';
  Print #chwin2;'12FONTSIZE WCSETFONT';
  x = 300 \ y = 17
  Print #chwin2;PChr$(900,x - 150,y + 2,x,y + 16,"Ticket No.");'WCLABEL WCRESETCOLOR';
  Print #chwin2;PChr$(KBParams.InputElement,x,y,x + 150,y + 18,"",2,6);'WCSTRING';
  x = x + 150 + 5 \ y = y - 3
  !  print #chwin2;PChr$(23,x,y,x+100,y+25,"List",1);'WCBUTTON';
  If LastTicket$
    !    x=x+110
    Print #chwin2;'10FONTSIZE WCSETFONT';
    Print #chwin2;PChr$(24,x,y,x + 150,y + 25,"Last Ticket\15\(" + LastTicket$ + ")",2);'WCBUTTON';
    Print #chwin2;'12FONTSIZE WCSETFONT';
  End If 
  Call SAIDrawKeyboard(chwin2,KBParams.,0)
  istring$ = ""
EditVINDetail_InputLoop: !
  Print #chwin2;PChr$(KBParams.InputElement);'WCFOCUS';
  Do 
    Input #chwin2; Len (1);w$
    Select Case w$
      Case 'F24' ! Last Ticket
        TicketNo$ = LastTicket$
        Exit Do 
      Case Else 
        Call SAIKeyBoardInput(chwin2,chwin2,KBParams.,ishift,w$,istring$,istatus)
        If istatus = -1
          TicketNo$ = ""
          Exit Do 
        Else If istatus
          TicketNo$ = SAISpaceFill$(SAIQuery$(chwin2,KBParams.InputElement),6)
          Exit Do 
        End If 
    End Select 
  Loop 
  If TicketNo$
    Try 
      Search #ch_db;"SELECT * FROM Pur_Ticket_Hdr WHERE TicketNo=" + SQLV$(TicketNo$) + "ORDER BY ShipmentDate DESC LIMIT 1"
      If Chf(ch_db)
        Map Record #ch_db As Pur_Ticket_Hdr
        Read Record #ch_db;PurTicketHdr.
        If PurTicketHdr.Branch$ <> Branch$
          Call SAITouchWarning("This Ticket belongs to a different Branch.")
          Goto EditVINDetail_InputLoop
        Else 
          Call SAIVinDetail(ch_db,PurTicketHdr.TicketNo$,PurTicketHdr.ShipmentDate#,ConfigFile$)
        End If 
      Else 
        Call SAITouchWarning("Ticket No. " + TicketNo$ + " not found in Identity database.")
        Goto EditVINDetail_InputLoop
      End If 
    Else 
      Call SAITouchError("Error accessing Pur_Ticket_Hdr table in database.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
    End Try 
  End If 
  Close #chwin2
End Sub 
Sub VoidComment(ReasonCode$,status)
  ReasonCode$ = ""
  If VoidTicketReasonCodes
    Call ListReasons("VOIDTKT","P",ReasonCode$)
    If ReasonCode$ = ""
      status = 1 ! Cancelled
      Exit Sub 
    End If 
  End If 
  If RequireVoidComment$ = "Y"
    w$ = ""
    Do 
      Call SAIKeyBoardGen("Enter VOID Comment",KBParams.alphacase,30,0,w$,stat)
      If stat
        status = 1 ! Cancelled
        Exit Sub 
      Else If w$ = ""
        Call SAITouchWarning("You must enter a VOID Comment.")
      Else 
        Exit Do 
      End If 
    Loop 
  End If 
  If Trim$(TicketHeader.OrderNo$) = "UNKNOWN"
    temp$ = Rep$(" ",12)
  Else 
    temp$ = SAIFill$(TicketHeader.OrderNo$,"R"," ",10) + SAISpaceFill$(TicketHeader.OrderLine$,2)
  End If 
  temp$ = temp$ + SAISpaceFill$(TicketHeader.ShipmentNo$,6)
  If TicketHeader.TktType$ = "P"
    ktemp$ = "V" + SAISpaceFill$(TicketHeader.EntityNo$,6) + temp$ + "SHP01"
  Else 
    ktemp$ = "C" + SAISpaceFill$(TicketHeader.EntityNo$,6) + temp$ + "SHP01"
  End If 
  Call SAIGetRecord(ch_1115,recdef_1115.,ktemp$,1,"F","L",r,GblCmt$,stat,errmess$)
  If stat = 0 Call SAIDeleteRecord(ch_1115,recdef_1115.,GblCmt$,r,stat,errmess$)
  If RequireVoidComment$ = "Y"
    GblCmt$ = " ",GblCmt$
    GblCmt$[1,30] = SAISpaceFill$(ktemp$,30)
    GblCmt$[31,60] = SAISpaceFill$(w$,30)
    GblCmt$[61,68] = SAISpaceFill$(user$,8)
    Call SAIAddRecord(ch_1115,recdef_1115.,GblCmt$,stat,errmess$)
    If stat Call SAITouchError("Error adding VOID comment.\15\" + errmess$)
  End If 
  status = 0
End Sub 
Sub VoidTicket()
  If WMVoid$ <> "Y"
    Call SAITouchWarning("You are not authorized to VOID completed tickets.")
    Exit Sub 
  End If 
  KBParams.StartX = 5
  KBParams.StartY = 55
  KBParams.ButtonHeight = 25
  KBParams.ButtonWidth = 50
  KBParams.FontSize1 = 14
  KBParams.FontSize2 = 12
  KBParams.InputElement = 10
  KBParams.IELength = 0 !150
  KBParams.IEMaxChar = 6
  KBParams.IELabel$ = ""
  KBParams.FuncBtnLen = 0 !100
  KBParams.FunctionBtn$ = "" !"&List"
VoidTicket_InputLoop: !
  chwin2 = SAIOpenWindow("Enter Ticket No. to Void",800,220,1)
  Print #chwin2;PChr$("Arial");'FONTFACE';
  Print #chwin2;PChr$(SAIColorRGB(230,230,230));'BACKCOLOR CS WCSETCOLOR';
  Print #chwin2;'12FONTSIZE WCSETFONT';
  x = 300 \ y = 17
  Print #chwin2;PChr$(900,x - 150,y + 2,x,y + 16,"Ticket No.");'WCLABEL WCRESETCOLOR';
  Print #chwin2;PChr$(KBParams.InputElement,x,y,x + 150,y + 18,"",2,6);'WCSTRING';
  x = x + 150 + 5 \ y = y - 3
  !  print #chwin2;PChr$(23,x,y,x+100,y+25,"List",1);'WCBUTTON';
  If LastTicket$
    !    x=x+110
    Print #chwin2;'10FONTSIZE WCSETFONT';
    Print #chwin2;PChr$(24,x,y,x + 150,y + 25,"Last Ticket\15\(" + LastTicket$ + ")",2);'WCBUTTON';
    Print #chwin2;'12FONTSIZE WCSETFONT';
  End If 
  Call SAIDrawKeyboard(chwin2,KBParams.,0)
  Print #chwin2;PChr$(KBParams.InputElement);'WCFOCUS';
  istring$ = ""
  Do 
    Input #chwin2; Len (1);w$
    Select Case w$
      Case 'F23' ! List
      Case 'F24' ! Last Ticket
        TicketNo$ = LastTicket$
        Exit Do 
      Case Else 
        Call SAIKeyBoardInput(chwin2,chwin2,KBParams.,ishift,w$,istring$,istatus)
        If istatus = -1
          TicketNo$ = ""
          Exit Do 
        Else If istatus
          TicketNo$ = SAISpaceFill$(SAIQuery$(chwin2,KBParams.InputElement),6)
          If Trim$(TicketNo$) = "" Let TicketNo$ = ""
          Exit Do 
        End If 
    End Select 
  Loop 
  Close #chwin2
  If TicketNo$ = "" Exit Sub 
  k$ = TicketNo$
  Search #ch_8326ro,2,2;k$,r,e
  If e
    Call SAITouchError("Ticket Number not found.")
    Goto VoidTicket_InputLoop
  End If 
  Call SAIReadRecord(ch_8326ro,recdef_8326.,"Y","U",r,ScaleTicAudit$,ScaleTicAudit[],stat,errmess$)
  If ScaleTicAudit$[120,121] <> Branch$
    Call SAITouchWarning("Cannot VOID a Ticket for a different Branch.")
    Goto VoidTicket_InputLoop
  Else If ScaleTicAudit$[127,127] = "D"
    Call SAITouchWarning("Ticket has been DELETED!  Cannot VOID.")
    Goto VoidTicket_InputLoop
  Else If ScaleTicAudit$[127,127] = "V"
    Call SAITouchWarning("Ticket has already been VOIDED!")
    Goto VoidTicket_InputLoop
  Else If ScaleTicAudit$[127,127] = "C"
    Call SAITouchWarning("Ticket has been CANCELLED!  Cannot VOID.")
    Goto VoidTicket_InputLoop
  Else If ScaleTicAudit$[127,127] = "R"
    Call SAITouchWarning("Ticket has been REVERSED!  Cannot VOID.")
    Goto VoidTicket_InputLoop
  End If 
  Clear TicketHeader.,TicketTotals.,TicketTemp.
  Clear Items.[]
  TicketHeader.Branch$ = ScaleTicAudit$[120,121]
  TicketHeader.TicketNo$ = ScaleTicAudit$[20,25]
  TicketHeader.EntityNo$ = ScaleTicAudit$[26,31]
  TicketHeader.InYardID$ = ScaleTicAudit$[1,11]
  TicketHeader.VehType$ = ScaleTicAudit$[40,40]
  TicketHeader.VehSize$ = ScaleTicAudit$[197,198]
  TicketHeader.VehNo$ = ScaleTicAudit$[142,152]
  TicketHeader.TktType$ = ScaleTicAudit$[153,153]
  TicketHeader.OrderNo$ = Trim$(ScaleTicAudit$[154,163])
  TicketHeader.OrderLine$ = Trim$(ScaleTicAudit$[164,165])
  TicketHeader.CarrierNo$ = ScaleTicAudit$[166,171]
  TicketHeader.MatReqNo$ = Trim$(ScaleTicAudit$[172,181])
  TicketHeader.MatReqLine$ = Trim$(ScaleTicAudit$[182,183])
  TicketHeader.TripTicketNo$ = ScaleTicAudit$[199,204]
  If Mill$ = "Y" Or SupplierShipNoPrompt$ <> "N" Let TicketHeader.SuppShipNo$ = ScaleTicAudit$[205,214]
  TicketHeader.Photo = YesNoFlag(ScaleTicAudit$[247,247])
  TicketHeader.SrcYard$ = ScaleTicAudit$[129,129]
  TicketHeader.SrcInvCode$ = ScaleTicAudit$[130,137]
  TicketHeader.SrcBranch$ = ScaleTicAudit$[138,139]
  Try Let TicketHeader.ShipmentDate# = SAIConvertDate#(ScaleTicAudit$[12,17]) Else Rem
  Items.[1].TicketNo$ = TicketNo$
  Items.[1].ItemNo = 1
  Items.[1].MaterialCode$ = ScaleTicAudit$[32,39]
  Items.[1].YardCode$ = ScaleTicAudit$[45,45]
  Items.[1].DetailOrderLine$ = Trim$(ScaleTicAudit$[164,165])
  Items.[1].ShipmentNo$ = ScaleTicAudit$[60,65]
  If Trim$(ScaleTicAudit$[60,65])
    TicketHeader.ShipmentNo$ = ScaleTicAudit$[60,65] ! Save original Shipment No.
  Else 
    TicketHeader.ShipmentNo$ = TicketHeader.TicketNo$ ! Populate with Ticket No. if blank
  End If 
  Items.[1].GrossWtWM$ = ScaleTicAudit$[54,56]
  Items.[1].TareWtWM$ = ScaleTicAudit$[57,59]
  If Trim$(ScaleTicAudit$[70,75])
    Try 
      temp$ = ScaleTicAudit[15] Using "&&&&&&"
      Items.[1].GrossWtTime# = SAIConvertDate#(ScaleTicAudit$[70,75],Val(temp$[1,2]),Val(temp$[3,4]),Val(temp$[5,6]))
    Else 
      Clear Items.[1].GrossWtTime#
    End Try 
  End If 
  If Trim$(ScaleTicAudit$[76,81])
    Try 
      temp$ = ScaleTicAudit[16] Using "&&&&&&"
      Items.[1].TareWtTime# = SAIConvertDate#(ScaleTicAudit$[76,81],Val(temp$[1,2]),Val(temp$[3,4]),Val(temp$[5,6]))
    Else 
      Clear Items.[1].TareWtTime#
    End Try 
  End If 
  Items.[1].MatCodeChg = YesNoFlag(ScaleTicAudit$[90,90])
  Items.[1].MatDescChg = YesNoFlag(ScaleTicAudit$[91,91])
  Items.[1].MaterialDesc$ = ScaleTicAudit$[92,119]
  Items.[1].ManReason$ = ScaleTicAudit$[196,196]
  Items.[1].GrossWtScale$ = ScaleTicAudit$[122,122]
  Items.[1].TareWtScale$ = ScaleTicAudit$[123,123]
  Items.[1].PriceChg = YesNoFlag(ScaleTicAudit$[124,124])
  Items.[1].PriceUM$ = ScaleTicAudit$[125,126]
  Items.[1].AdjCode$ = ScaleTicAudit$[140,140]
  Items.[1].StockPile$ = ScaleTicAudit$[184,186]
  Items.[1].GrossWt = ScaleTicAudit[0]
  Items.[1].TareWt = ScaleTicAudit[1]
  Items.[1].NetWt = ScaleTicAudit[2]
  Items.[1].AdjWt = ScaleTicAudit[3]
  Items.[1].GrossWt_BGRead = ScaleTicAudit[4]
  Items.[1].TareWt_BGRead = ScaleTicAudit[5]
  Items.[1].Price = ScaleTicAudit[6]
  Items.[1].RedCount = ScaleTicAudit[7]
  Items.[1].RedNetWt = ScaleTicAudit[8]
  Items.[1].RedExt = ScaleTicAudit[9]
  Items.[1].CarBodies = ScaleTicAudit[10]
  TicketHeader.TktMode$ = ""
  If ScaleTicAudit$[153,153] = "P" Or (ScaleTicAudit$[153,153] = "R" And TicketHeader.TicketNo$[1,1] = "T")
    If Trim$(TicketHeader.SrcYard$) ! Determine if Transfer
      TicketHeader.TktMode$ = "T"
      TicketHeader.SrcTicketNo$ = ScaleTicAudit$[190,195]
    Else ! Look for 8330
      k1$ = TicketHeader.TicketNo$ + TicketHeader.EntityNo$ + ScaleTicAudit$[32,39]
      Call SAIGetRecord(ch_8330ro,recdef_8330.,k1$,1,"Y","U",r,ScaleTicket$,ScaleTicket3[],ScaleTicket4[],stat,errmess$)
      If stat
        Call SAITouchWarning("Purchase Ticket Number " + TicketNo$ + " not found in Scale Ticket File (8330).")
        Goto VoidTicket_InputLoop
      End If 
      If ScaleTicket$[72,72] <> " " And ScaleTicket$[72,72] <> "D"
        Call SAITouchWarning("Purchase Ticket No. " + TicketNo$ + " has already been PAID.\15\        Cashier must first void payment.")
        Goto VoidTicket_InputLoop
      Else If ScaleTicket$[85,89] <> "NNNNN" Or ScaleTicket$[71,71] <> " " Or ScaleTicket$[48,48] <> " "
        Call SAITouchWarning("Purchase Ticket No. " + TicketNo$ + " has been UPDATED and cannot be voided.")
        Goto VoidTicket_InputLoop
      Else If Trim$(ScaleTicket$[171,176])
        Call SAITouchWarning("Ticket is for a recycler and has been selected for redemption.\15\It cannot be voided.")
      Else If ScaleTicket$[170,170] = "Y"
        Call SAITouchWarning("Purchase Ticket No. " + TicketNo$ + " is a redemption ticket.\15\It cannot be voided from this program.")
        Goto VoidTicket_InputLoop
        !      else if ScaleTicket$[137,137]="R" ! This is no longer an error (JB 10/28/14)
        !        Call SAITouchWarning("A recovery ticket that has not yet been settled cannot be voided from this program.")
        !        goto VoidTicket_InputLoop
      End If 
      If ScaleTicket$[13,14] = "*M" ! Check all 8330s
        ksav$ = TicketHeader.TicketNo$ + TicketHeader.EntityNo$
        Do 
          Search #ch_8330ro,3,1;k1$,r,e
          If e Exit Do 
          If k1$[1,Len(ksav$)] <> ksav$ Exit Do 
          Call SAIReadRecord(ch_8330ro,recdef_8330.,"Y","U",r,ScaleTicket$,ScaleTicket3[],ScaleTicket4[],stat,errmess$)
          If stat = 0
            If ScaleTicket$[72,72] <> " " And ScaleTicket$[72,72] <> "D"
              Call SAITouchWarning("Ticket has been partially PAID.\15\Cashier must first void payment.")
              Goto VoidTicket_InputLoop
            Else If ScaleTicket$[85,89] <> "NNNNN" Or ScaleTicket$[71,71] <> " " Or ScaleTicket$[48,48] <> " "
              Call SAITouchWarning("Ticket has been partially UPDATED and cannot be voided.")
              Goto VoidTicket_InputLoop
            End If 
            ! Prevent void of previsouly updated recovery ticket (based on *M ticket with existing 1220 for any item)
            If TicketHeader.TicketNo$[1,1] <> "R"
              ktemp$ = ScaleTicket$[56,61]
              Search #ch_1220,2,2;ktemp$,r1,e1
              If e1 = 0
                Call SAITouchWarning("An updated recovery ticket that has not yet been settled cannot be voided from this program.")
                Goto VoidTicket_InputLoop
              End If 
            End If 
          End If 
        Loop 
      End If 
    End If 
  Else If ScaleTicAudit$[153,153] = "R"
    Call SAITouchWarning("Cannot void a Retail ticket from the Truck Scale.")
    Goto VoidTicket_InputLoop
  Else ! Sales or Weight only ticket, look for 8430
    ktemp$ = TicketHeader.TicketNo$ + TicketHeader.EntityNo$ + Items.[1].MaterialCode$
    Call SAIGetRecord(ch_8430ro,recdef_8430.,ktemp$,1,"Y","U",r,SalesTicket$,SalesTicket3[],SalesTicket4[],stat,errmess$)
    If stat
      Call SAITouchWarning("Sales Ticket No. " + TicketNo$ + " has already been transferred to the contract system.  Cannot VOID.")
      Goto VoidTicket_InputLoop
    Else If SalesTicket$[89,89] = "T"
      Call SAITouchWarning("Outbound transfer Ticket No. " + TicketNo$ + " has already been recieved.  Cannot VOID.")
      Goto VoidTicket_InputLoop
    Else If SalesTicket$[89,89] <> "I"
      If SalesTicket$[85,89] <> "NNNNN" Or SalesTicket$[71,71] <> " " Or SalesTicket$[48,48] <> " "
        Call SAITouchWarning("Sales Ticket No. " + TicketNo$ + " has already been UPDATED and cannot be voided.")
        Goto VoidTicket_InputLoop
      End If 
    End If 
  End If 
  ! Display Ticket Summary Info and confirm the VOID
  ch_void = SAIOpenWindow("Void Ticket Confirmation of Ticket No. " + TicketNo$,800,250,1)
  Print #ch_void;PChr$("Arial");'FONTFACE 10FONTSIZE WCSETFONT';
  PrintPrice = 0
  If ScaleTicAudit$[153,153] = "P" Or ScaleTicAudit$[153,153] = "R"
    temp$ = "Purchase"
    If (DisplayPrice$ = "Y" Or DisplayPrice$ = "P") And Supplier.PrintPriceAtScale$ = "" Let PrintPrice = 1
  Else If ScaleTicAudit$[153,153] = "S"
    temp$ = "Sales"
    If DisplayPrice$ = "Y" Or DisplayPrice$ = "S" Let PrintPrice = 1
  Else If Pos("GTW", = ScaleTicAudit$[153,153])
    temp$ = "Weight Only"
  Else 
    temp$ = ""
  End If 
  Print #ch_void;PChr$(30,10,10,790,200,temp$ + " Ticket Information",2);'WCTEXT';
  Print #ch_void;'30WCSELECT CU 25ST';PChr$(0,16777215);'WCSETCOLOR';
  Print #ch_void;"Ticket No.";'HT';TicketNo$
  Print #ch_void;"I.D.";'HT';TicketHeader.InYardID$
  Print #ch_void;"Vehicle No.";'HT';TicketHeader.VehNo$
  Print #ch_void;
  If ScaleTicAudit$[153,153] = "P" Let temp$ = "Supplier No." Else Let temp$ = "Customer No."
  Print #ch_void;temp$;'HT';TicketHeader.EntityNo$
  Print #ch_void;"Shipment Date";'HT';SAIDateDisplay$(ScaleTicAudit$[12,17])
  If Trim$(TicketHeader.OrderNo$) Print #ch_void;"Order No.";'HT';TicketHeader.OrderNo$;"-";TicketHeader.OrderLine$
  Print #ch_void;
  Print #ch_void;"Material Code & Desc.";'HT';Trim$(Items.[1].MaterialCode$);":   ";Items.[1].MaterialDesc$
  If PrintPrice
    Print #ch_void; Using "---#.###";"Price & U/M";'HT';Items.[1].Price;" ";Items.[1].PriceUM$
  End If 
  If TicketHeader.TktMode$ = "T"
    Print #ch_void;"Transfer Branch, Yard, & Inventory";'HT';TicketHeader.SrcBranch$;"  ";TicketHeader.SrcYard$;"  ";TicketHeader.SrcInvCode$
  End If 
  If Trim$(TicketHeader.CarrierNo$) Print #ch_void;"Carrier No.";'HT';TicketHeader.CarrierNo$
  Print #ch_void;
  Print #ch_void; Using "----,---,--#";"Gross Weight & WMaster";'HT';Items.[1].GrossWt;"  ";SAICodesTableDesc$(ch_db,"Codes_WeighMaster","WeighMasterCode",Items.[1].GrossWtWM$)
  Print #ch_void; Using "----,---,--#";"Tare  Weight & WMaster";'HT';Items.[1].TareWt;"  ";SAICodesTableDesc$(ch_db,"Codes_WeighMaster","WeighMasterCode",Items.[1].TareWtWM$)
  If Items.[1].AdjWt Print #ch_void; Using "----,---,--#";"Adjustment Weight & Reason";'HT';Items.[1].AdjWt;"  ";SAICodesTableDesc$(ch_db,"Codes_Weight_Adjustment","WeightAdjCode",Items.[1].AdjCode$)
  Print #ch_void;'0WCSELECT';
  Print #ch_void;PChr$("Arial");'FONTFACE 12FONTSIZE WCSETFONT';
  Call SAIButtons(ch_void,2,1,"Void~Cancel",800,215,25,150,50)
  Print #ch_void;'2WCFOCUS';
  Do 
    Input #ch_void; Len (1);w$
    Select Case w$
      Case 'F1' ! Void
        Exit Do 
      Case 'F2' ! Cancel
        Goto VoidTicket_Exit
    End Select 
  Loop 
  Print #ch_void;PChr$(1,2);'WCDISABLE';
  If ScaleTicAudit$[153,153] <> "P" And ScaleTicAudit$[153,153] <> "R" Goto VoidSalesTicket
  ! Re-Check all 8330 records for update or payment
  If TicketHeader.TktMode$ <> "T"
    k1$ = SAISpaceFill$(TicketHeader.TicketNo$,6)
    ksav$ = k1$
    Do 
      Search #ch_8330ro,3,1;k1$,r,e
      If e Exit Do 
      If k1$[1,Len(ksav$)] <> ksav$ Exit Do 
      Call SAIReadRecord(ch_8330ro,recdef_8330.,"Y","U",r,ScaleTicket$,ScaleTicket3[],ScaleTicket4[],stat,errmess$)
      If stat = 0
        If ScaleTicket$[72,72] <> " " And ScaleTicket$[72,72] <> "D"
          Call SAITouchWarning("Ticket has been partially PAID.\15\Cashier must first void payment.")
          Goto VoidTicket_Exit
        Else If ScaleTicket$[85,89] <> "NNNNN" Or ScaleTicket$[71,71] <> " " Or ScaleTicket$[48,48] <> " "
          Call SAITouchWarning("Ticket has been partially UPDATED and cannot be voided.")
          Goto VoidTicket_Exit
          !        else if ScaleTicket$[137,137]="R" ! This is no longer an error (JB 10/28/14)
          !          Call SAITouchWarning("A recovery ticket that has not yet been settled cannot be voided from this program.")
          !          goto VoidTicket_Exit
        End If 
      End If 
    Loop 
  End If 
  ! Check Carrier records
  ktemp$ = "C" + TicketNo$[2,6]
  If TicketNo$[1,1] = "R" Let ktemp$[1,1] = "D" ! Reversals Carrier starts w "D"
  ksav$ = ktemp$
  Do 
    Search #ch_8330ro,3,1;ktemp$,r,e
    If e Exit Do 
    If ktemp$[1,Len(ksav$)] <> ksav$ Exit Do 
    Call SAIReadRecord(ch_8330ro,recdef_8330.,"Y","U",r,ScaleTicket$,ScaleTicket3[],ScaleTicket4[],stat,errmess$)
    If stat = 0 And ScaleTicket$[56,61] = TicketHeader.ShipmentNo$
      If ScaleTicket$[72,72] <> " " And ScaleTicket$[72,72] <> "D"
        Call SAITouchWarning(" Carrier Ticket has been PAID.\15\You cannot void original Ticket.")
        Goto VoidTicket_Exit
      Else If ScaleTicket$[85,89] <> "NNNNN" Or ScaleTicket$[71,71] <> " " Or ScaleTicket$[48,48] <> " "
        Call SAITouchWarning("Carrier Ticket has been UPDATED.\15\You cannot void original Ticket.")
        Goto VoidTicket_Exit
      End If 
    End If 
  Loop 
  ! If Tranfer check if any of the transfer records have been updated
  If TicketHeader.TktMode$ = "T"
    ktemp$ = TicketNo$[2,6]
    count = 0
    Do 
      Search #ch_1460ro,3,1;ktemp$,r,e
      If e Exit Do 
      If ktemp$[1,5] <> TicketNo$[2,6] Exit Do 
      Call SAIReadRecord(ch_1460ro,recdef_1460.,"Y","U",r,Transfer$,Transfer[],stat,errmess$)
      If Transfer$[124,124] <> " "
        Call SAITouchWarning("Transfer has already been UPDATED.  Ticket cannot be voided.")
        Goto VoidTicket_Exit
      Else If Transfer$[73,73] <> " " And Trim$(Transfer$[77,82])
        If count = 0
          k$ = "C" + Transfer$[77,82]
          Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCode$,ScrapCode[],stat,errmess$)
          If stat = 0
            If ScrapCode$[118,118] = "Y" And ScrapCode$[116,116] <> "Y" ! Required but not 3rd party
              Call SAITouchMessage("Remember to reverse Trip Ticket in program 5060.")
            End If 
          End If 
          count = 1
        End If 
      End If 
    Loop 
  End If 
  ! Void Comment
  Call VoidComment(ReasonCode$,status)
  If status Goto VoidTicket_Exit
  ! Perform the Void
  If TicketHeader.TktMode$ <> "T"
    ktemp$ = SAISpaceFill$(TicketHeader.TicketNo$,6) + SAISpaceFill$(TicketHeader.EntityNo$,6)
    ksav$ = ktemp$
    temp$ = "N" ! ReadRecord mode$ - no retry of locked record
    Do 
      Search #ch_8330,3,1;ktemp$,r,e
      If e Exit Do 
      If ktemp$[1,Len(ksav$)] <> ksav$ Exit Do 
      Call SAIReadRecord(ch_8330,recdef_8330.,temp$,"L",r,ScaleTicket$,ScaleTicket3[],ScaleTicket4[],stat,errmess$)
      If stat
        Call SAITouchError("8330 record currently locked.  Cannot VOID.")
        Goto VoidTicket_Exit
      Else 
        If ScaleTicket$[72,72] <> " " And ScaleTicket$[72,72] <> "D"
          Call SAITouchWarning("Ticket has been partially PAID.\15\Item not voided.")
          stat = 1
        Else If ScaleTicket$[85,89] <> "NNNNN" Or ScaleTicket$[71,71] <> " " Or ScaleTicket$[48,48] <> " "
          Call SAITouchWarning("Ticket has been partially UPDATED.\15\Item not voided.")
          stat = 1
        End If 
        If stat = 0
          Call SAIDeleteRecord(ch_8330,recdef_8330.,ScaleTicket$,r,stat,errmess$)
          If stat Call SAITouchError("Error deleting 8330 record.\15\" + errmess$)
        End If 
        If stat = 0
          If Trim$(ScaleTicket$[90,101]) And Trim$(ScaleTicket$[56,61]) ! Delete 1215 record if there is a Shipment #
            k1$ = "P" + ScaleTicket$[90,101] + ScaleTicket$[56,61]
            Do 
              Search #ch_1215,3,1;k1$,r1,e1
              If e1 Exit Do 
              If k1$[2,19] <> ScaleTicket$[90,101] + ScaleTicket$[56,61] Exit Do 
              Call SAIReadRecord(ch_1215,recdef_1215.,"F","L",r1,POFreight$,POFreight[],stat,errmess$)
              If stat = 0
                If POFreight$[140,140] = " " Call SAIDeleteRecord(ch_1215,recdef_1215.,POFreight$,r1,stat,errmess$)
              End If 
              If stat Call SAITouchError("Error deleting Purchase Freight record.\15\" + errmess$)
            Loop 
            k1$ = ScaleTicket$[7,12] + ScaleTicket$[90,101] ! Update 1210
            Call SAIGetRecord(ch_1210,recdef_1210.,k1$,1,"F","L",r1,PODetail$,PODetail[],stat,errmess$)
            If stat = 0
              PODetail[7] = PODetail[7] - ScaleTicket3[2] - ScaleTicket3[6] ! Remove Qty Shipped
              cf = SAIUMConvFactor(ch_110Aro,PODetail$[40,41],gbl_um$)
              PODetail[1] = PODetail[1] - SAIDivide(ScaleTicket3[2] + ScaleTicket3[6],cf,2)
              Call SAIWriteRecord(ch_1210,recdef_1210.,"U",r1,PODetail$,PODetail[],stat,errmess$)
              If stat
                Call SAITouchError("Error updating Purchase Order Line.\15\" + errmess$)
              Else 
                Call UpdateOTMChangeTable()
              End If 
            End If 
          End If 
        End If 
      End If 
      temp$ = "F" ! Force on all remaining records
    Loop 
  Else 
    If Trim$(TicketHeader.SrcTicketNo$) ! Lock 8430 first to make sure it can be accessed, then set it back to "I"ntransit after 1460 is deleted
      k1$ = SAISpaceFill$(TicketHeader.SrcTicketNo$,6)
      Search #ch_8430,2,1;k1$,r1,stat
      If stat = 0
        Call SAIReadRecord(ch_8430,recdef_8430.,"Y","L",r1,SalesTicket$,SalesTicket3[],SalesTicket4[],stat,errmess$)
        If stat
          Call SAITouchError("Cannot retrieve outbound sales record, Ticket No. " + TicketHeader.SrcTicketNo$ + "\15\\15\Void Cancelled.")
          Goto VoidTicket_Exit
        End If 
      End If 
    End If 
    ktemp$ = TicketNo$[2,6]
    Do 
      Search #ch_1460,3,1;ktemp$,r,e
      If e Exit Do 
      If ktemp$[1,5] <> TicketNo$[2,6] Exit Do 
      Call SAIReadRecord(ch_1460,recdef_1460.,"F","L",r,Transfer$,Transfer[],stat,errmess$)
      If stat = 0 Call SAIDeleteRecord(ch_1460,recdef_1460.,Transfer$,r,stat,errmess$)
      If stat Call SAITouchError("Error deleting Transfer record.\15\" + errmess$)
    Loop 
    If Trim$(TicketHeader.SrcTicketNo$)
      If SalesTicket$[89,89] = "T" ! Insure it is a completed transfer
        SalesTicket$[89,89] = "I" ! Set Transfer back to In-route
        SalesTicket$[217,222] = Rep$(" ",6) ! Remove Inbound Transfer Ticket #
        Call SAIWriteRecord(ch_8430,recdef_8430.,"U",r1,SalesTicket$,SalesTicket3[],SalesTicket4[],stat,errmess$)
        If stat Call SAITouchError("Error updating outbound sales record, Ticket No. " + TicketHeader.SrcTicketNo$ + "\15\" + errmess$)
      Else 
        Unlock #ch_8430
      End If 
    End If 
  End If 
  ! Void retail ticket if "R" type
  If ScaleTicAudit$[153,153] = "R"
    Try 
      Search #ch_db;"UPDATE Retail_Ticket_Hdr SET TktStatus=" + SQLV$("V") + " WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$)
    Else 
      Call SAITouchError("Error updating Retail Ticket Header.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
    End Try 
  End If 
  ! Void 8326 records
  ktemp$ = ScaleTicAudit$[20,31] ! Use directory 2: TicketNo, Vendor, Material
  ksav$ = ktemp$
  Do 
    Search #ch_8326,3,2;ktemp$,r,e
    If e Exit Do 
    If ktemp$[1,Len(ksav$)] <> ksav$ Exit Do 
    Call SAIReadRecord(ch_8326,recdef_8326.,"F","L",r,ScaleTicAudit$,ScaleTicAudit[],stat,errmess$)
    If stat = 0
      ScaleTicAudit$[127,127] = "V"
      Call SAIWriteRecord(ch_8326,recdef_8326.,"U",r,ScaleTicAudit$,ScaleTicAudit[],stat,errmess$)
    End If 
    If stat Call SAITouchError("Error Voiding Scale Ticket Audit record.\15\" + errmess$)
    If ScaleTicAudit$[66,66] = "Y" ! Noticed purchase
      k1$ = ScaleTicAudit$[60,65]
      Search #ch_1220,2,2;k1$,r1,e1
      If e1 = 0
        Call SAIReadRecord(ch_1220,recdef_1220.,"F","L",r1,PurchaseShipments$,PurchaseShipments3[],PurchaseShipments4[],stat,errmess$)
        If stat = 0
          PurchaseShipments$[54,59] = Rep$(" ",6) ! Clear Ticket number
          PurchaseShipments$[202,202] = "Y" ! Set RejectRequired flag
          Call SAIWriteRecord(ch_1220,recdef_1220.,"U",r1,PurchaseShipments$,PurchaseShipments3[],PurchaseShipments4[],stat,errmess$)
        End If 
      End If 
    End If 
  Loop 
  ! Remove Carrier 8330 records
  ktemp$ = "C" + TicketNo$[2,6]
  If TicketNo$[1,1] = "R" Let ktemp$[1,1] = "D" ! Reversals Carrier starts w "D"
  ksav$ = ktemp$
  Do 
    Search #ch_8330ro,3,1;ktemp$,r,e
    If e Exit Do 
    If ktemp$[1,Len(ksav$)] <> ksav$ Exit Do 
    Call SAIReadRecord(ch_8330,recdef_8330.,"F","L",r,ScaleTicket$,ScaleTicket3[],ScaleTicket4[],stat,errmess$)
    If stat = 0 And ScaleTicket$[56,61] = TicketHeader.ShipmentNo$
      If stat = 0 Call SAIDeleteRecord(ch_8330,recdef_8330.,ScaleTicket$,r,stat,errmess$)
      If stat Call SAITouchError("Error deleting 8330 freight record.\15\" + errmess$)
    End If 
  Loop 
  ! Update Purchase Ticket database
  If GblCmt$ And ReasonCode$ = ""
    Try 
      Search #ch_db;"UPDATE Pur_Ticket_Hdr SET TktStatus=" + SQLV$("V") + ",TktComment=" + SQLV$(Trim$(GblCmt$[31,60])) + " WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
    Else 
    End Try 
  Else 
    Try 
      Search #ch_db;"UPDATE Pur_Ticket_Hdr SET TktStatus=" + SQLV$("V") + " WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
    Else 
    End Try 
  End If 
  ! Update Pur_Mix_Hdr
  Try 
    Clear SQL$,CompleteDate#,nr
    SQL$ = "SELECT CompleteDate FROM Pur_Mix_Hdr"
    SQL$ = SQL$ + " WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$)
    SQL$ = SQL$ + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
    Search #ch_db;SQL$
    nr = Chf(ch_db)
    If nr
      Map #ch_db;
      Read #ch_db;CompleteDate#
      Clear SQL$
      SQL$ = "UPDATE Pur_Mix_Hdr"
      SQL$ = SQL$ + " SET Void=" + SQLV$(1)
      SQL$ = SQL$ + " WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$)
      SQL$ = SQL$ + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
      Search #ch_db;SQL$
    End If 
  Else 
    nr = 0
  End Try 
  !Flag available tags as voided
  InvTagListNum = -1
  If nr
    Try 
      SQL$ = ""
      SQL$ = "SELECT " + SQLN$(InvTagList.[0]) + " FROM Inventory_Tag"
      SQL$ = SQL$ + " WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$)
      If CompleteDate#
        SQL$ = SQL$ + " AND Status=" + SQLV$("")
      Else 
        SQL$ = SQL$ + " AND Status IN (" + SQLV$("") + "," + SQLV$("P") + ")"
      End If 
      SQL$ = SQL$ + " AND Branch=" + SQLV$(TicketHeader.Branch$)
      SQL$ = SQL$ + " AND VoidStatus=" + SQLV$("")
      Search #ch_db;SQL$
      nr = Chf(ch_db)
      If nr
        Map Record #ch_db As Inventory_Tag
        Dim InvTagList.[nr] As Inventory_Tag
        For x = 0 To nr - 1
          Read Record #ch_db;InvTagList.[x]
        Next 
        InvTagListNum = nr - 1
      End If 
    Else 
      InvTagListNum = 0
    End Try 
    If InvTagListNum >= 0
      Try 
        Search #ch_db;"START TRANSACTION"
        For x = 0 To InvTagListNum
          SQL$ = ""
          SQL$ = "UPDATE Inventory_Tag"
          SQL$ = SQL$ + " SET VoidStatus=" + SQLV$("V")
          SQL$ = SQL$ + ", LastUpdatedBy=" + SQLV$(user$)
          SQL$ = SQL$ + ", LastUpdatedProgramNo=" + SQLV$(z$[58,61])
          SQL$ = SQL$ + " WHERE Branch=" + SQLV$(InvTagList.[x].Branch$)
          SQL$ = SQL$ + " AND TagID=" + SQLV$(InvTagList.[x].TagID$)
          Search #ch_db;SQL$
          Clear InvTagVoid.
          InvTagVoid.Branch$ = InvTagList.[x].Branch$
          InvTagVoid.TagID$ = InvTagList.[x].TagID$
          InvTagVoid.VoidDateTime# = Tim#(0)
          InvTagVoid.VoidedByUser$ = user$
          InvTagVoid.VoidedByWM$ = ""
          InvTagVoid.VoidedReason$ = "Ticket was voided"
          SQL$ = ""
          SQL$ = "INSERT INTO Inventory_Tag_Void_Info  (" + SQLN$(InvTagVoid.) + ")"
          SQL$ = SQL$ + "  VALUES (" + SQLV$(InvTagVoid.) + " )"
          Search #ch_db;SQL$
        Next 
        Search #ch_db;"COMMIT"
      Else 
        Search #ch_db;"ROLLBACK"
      End Try 
    End If 
  End If 
  If ReasonCode$
    Clear PurTicketVoidInfo.
    PurTicketVoidInfo.TicketNo$ = TicketHeader.TicketNo$
    PurTicketVoidInfo.ShipmentDate# = TicketHeader.ShipmentDate#
    PurTicketVoidInfo.VoidReasonCode$ = ReasonCode$
    If GblCmt$ Let PurTicketVoidInfo.VoidComment$ = Trim$(GblCmt$[31,60])
    PurTicketVoidInfo.ProgramNo$ = z$[58,61]
    PurTicketVoidInfo.UserName$ = user$
    PurTicketVoidInfo.WeighMaster$ = WeighMaster$
    PurTicketVoidInfo.VoidDateTime# = Tim#(0)
    Try 
      Search #ch_db;"INSERT INTO Pur_Ticket_VoidInfo (" + SQLN$(PurTicketVoidInfo.) + ") VALUES (" + SQLV$(PurTicketVoidInfo.) + ")"
    Else 
      !      Call SAITouchError("Error creating entry in Pur_Ticket_VoidInfo table.\15\"+Msc$(2)+"\15\Program Line: "+Str$(Spc(10)))
    End Try 
  End If 
  ! Check for OTM
  If OTMFreight$ = "Y" Or OTMBranch(ch_db,TicketHeader.SrcBranch$)
    Search #ch_db;"SELECT CarrierRefNo FROM Pur_Ticket_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
    If Chf(ch_db)
      Map #ch_db;
      Read #ch_db;TicketHeader.CarrierRefNo$
    End If 
    If TicketHeader.CarrierRefNo$
      SQL$ = "UPDATE OTM_Freight_Interface SET "
      SQL$ = SQL$ + "Status=" + SQLV$("")
      SQL$ = SQL$ + ", TicketNo=" + SQLV$("")
      SQL$ = SQL$ + ", NetWt=" + SQLV$(0)
      SQL$ = SQL$ + ", NetWtUM=" + SQLV$("")
      SQL$ = SQL$ + " WHERE OTMRefNo=" + SQLV$(TicketHeader.CarrierRefNo$)
      SQL$ = SQL$ + " AND TicketNo=" + SQLV$(TicketHeader.TicketNo$)
      Try 
        Search #ch_db;SQL$
      Else 
        Call SAITouchError("Error updating Status in OTM_Freight_Interface table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
      End Try 
    End If 
  End If 
  Goto VoidTicket_Success
VoidSalesTicket: !
  ktemp$ = TicketHeader.TicketNo$ + TicketHeader.EntityNo$ ! Check 8530 file
  ksav$ = ktemp$
  Do 
    Search #ch_8530ro,3,1;ktemp$,r,e
    If e Exit Do 
    If ktemp$[1,Len(ksav$)] <> ksav$ Exit Do 
    Call SAIReadRecord(ch_8530ro,recdef_8530.,"Y","U",r,RetailSales$,RetailSales[],stat,errmess$)
    If stat = 0
      If RetailSales$[13,16] = "*MIX" And Trim$(RetailSales$[56,61]) = "" ! No shipment number - not completed
        Call SAITouchWarning("Multi-Sales Split Load shipment in process.  Cannot VOID.")
        Goto VoidTicket_Exit
      Else If RetailSales$[85,88] <> "NNNN"
        Call SAITouchWarning("Multi-Sales record has been UPDATED.  Cannot VOID.")
        Goto VoidTicket_Exit
      End If 
    End If 
  Loop 
  Try 
    Search #ch_db;"SELECT ScannedTagNo FROM Sales_Ticket_Dtl WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#) + " AND ScannedTagNo<>" + SQLV$("")
    If Chf(ch_db)
      Call SAITouchWarning("Multi-Material load using Inventory Tags.  Cannot VOID from TruckScale.")
      Goto VoidTicket_Exit
    End If 
  Else 
  End Try 
  ! Void Comment
  Call VoidComment(ReasonCode$,status)
  If status Goto VoidTicket_Exit
  ! Perform the Void
  ktemp$ = ScaleTicAudit$[1,19]
  Call SAIGetRecord(ch_8326,recdef_8326.,ktemp$,1,"F","L",r,ScaleTicAudit$,ScaleTicAudit[],stat,errmess$)
  If stat = 0
    ScaleTicAudit$[127,127] = "V"
    Call SAIWriteRecord(ch_8326,recdef_8326.,"U",r,ScaleTicAudit$,ScaleTicAudit[],stat,errmess$)
  End If 
  If stat Call SAITouchError("Error Voiding Scale Ticket Audit record.\15\" + errmess$)
  ktemp$ = TicketHeader.TicketNo$ + TicketHeader.EntityNo$ ! Check 8530 file
  ksav$ = ktemp$
  Do 
    Search #ch_8530,3,1;ktemp$,r,e
    If e Exit Do 
    If ktemp$[1,Len(ksav$)] <> ksav$ Exit Do 
    Call SAIReadRecord(ch_8530,recdef_8530.,"F","L",r,RetailSales$,RetailSales[],stat,errmess$)
    If stat = 0 Call SAIDeleteRecord(ch_8530,recdef_8530.,RetailSales$,r,stat,errmess$)
    If stat Call SAITouchError("Error deleting Retail Sales record: " + ktemp$ + "\15\" + errmess$)
    k1$ = "P" + RetailSales$[124,135] + RetailSales$[56,61] ! Mat.Req., Shipment
    k2$ = k1$
    Do 
      Search #ch_1215,3,1;k1$,r1,e1
      If e1 Exit Do 
      If k1$[1,Len(k2$)] <> k2$ Exit Do 
      Call SAIReadRecord(ch_1215,recdef_1215.,"F","L",r1,POFreight$,POFreight[],stat,errmess$)
      If stat = 0 Call SAIDeleteRecord(ch_1215,recdef_1215.,POFreight$,r1,stat,errmess$)
      If stat Call SAITouchError("Error deleting Freight record: " + k1$ + "\15\" + errmess$)
    Loop 
  Loop 
  ktemp$ = TicketHeader.TicketNo$ + SAISpaceFill$(TicketHeader.EntityNo$,6) + SAISpaceFill$(Items.[1].MaterialCode$,8)
  Call SAIGetRecord(ch_8430,recdef_8430.,ktemp$,1,"F","L",r,SalesTicket$,SalesTicket3[],SalesTicket4[],stat,errmess$)
  If stat = 0 Call SAIDeleteRecord(ch_8430,recdef_8430.,SalesTicket$,r,stat,errmess$)
  If stat Call SAITouchError("Error deleting Sales Ticket record: " + ktemp$ + "\15\" + errmess$)
  k1$ = "P" + SalesTicket$[124,135] + SalesTicket$[56,61] ! Mat.Req., Shipment
  k2$ = k1$
  Do 
    Search #ch_1215,3,1;k1$,r1,e1
    If e1 Exit Do 
    If k1$[1,Len(k2$)] <> k2$ Exit Do 
    Call SAIReadRecord(ch_1215,recdef_1215.,"F","L",r1,POFreight$,POFreight[],stat,errmess$)
    If stat = 0 Call SAIDeleteRecord(ch_1215,recdef_1215.,POFreight$,r1,stat,errmess$)
    If stat Call SAITouchError("Error deleting Freight record: " + k1$ + "\15\" + errmess$)
  Loop 
  If Trim$(SalesTicket$[124,135]) ! Mat.Req.
    ktemp$ = SalesTicket$[124,135]
    Search #ch_1210,2,2;ktemp$,r,e
    If e = 0
      Call SAIReadRecord(ch_1210,recdef_1210.,"F","L",r,PODetail$,PODetail[],stat,errmess$)
      If stat = 0
        PODetail[7] = PODetail[7] - SalesTicket3[2]
        cf = SAIUMConvFactor(ch_110Aro,PODetail$[40,41],gbl_um$)
        PODetail[1] = PODetail[1] - SAIDivide(SalesTicket3[2],cf,2)
        Call SAIWriteRecord(ch_1210,recdef_1210.,"U",r,PODetail$,PODetail[],stat,errmess$)
        If stat
          Call SAITouchError("Error updating Material Req. Line.\15\" + errmess$)
        Else 
          Call UpdateOTMChangeTable()
        End If 
      End If 
    End If 
  End If 
  If Trim$(SalesTicket$[90,101]) ! S.O.
    ktemp$ = SalesTicket$[7,12] + SalesTicket$[90,101]
    Search #ch_1310,2,1;ktemp$,r,e
    If e = 0
      Call SAIReadRecord(ch_1310,recdef_1310.,"F","L",r,SODetail$,SODetail[],stat,errmess$)
      If stat = 0
        SODetail[7] = SODetail[7] - SalesTicket3[2]
        cf = SAIUMConvFactor(ch_110Aro,SODetail$[40,41],gbl_um$)
        SODetail[1] = SODetail[1] - SAIDivide(SalesTicket3[2],cf,2)
        Call SAIWriteRecord(ch_1310,recdef_1310.,"U",r,SODetail$,SODetail[],stat,errmess$)
        If stat
          Call SAITouchError("Error updating Sales Order Line.\15\" + errmess$)
          !        else
          !          Call UpdateOTMChangeTable(SODetail$[156,157], SODetail$[7,16])
        End If 
      End If 
    End If 
  End If 
  ! Update Sales Ticket database
  If GblCmt$ And ReasonCode$ = ""
    Try 
      Search #ch_db;"UPDATE Sales_Ticket_Hdr SET TktStatus=" + SQLV$("V") + ",TktComment=" + SQLV$(Trim$(GblCmt$[31,60])) + " WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
    Else 
    End Try 
  Else 
    Try 
      Search #ch_db;"UPDATE Sales_Ticket_Hdr SET TktStatus=" + SQLV$("V") + " WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
    Else 
    End Try 
  End If 
  If ReasonCode$
    Clear SalesTicketVoidInfo.
    SalesTicketVoidInfo.TicketNo$ = TicketHeader.TicketNo$
    SalesTicketVoidInfo.ShipmentDate# = TicketHeader.ShipmentDate#
    SalesTicketVoidInfo.VoidReasonCode$ = ReasonCode$
    If GblCmt$ Let SalesTicketVoidInfo.VoidComment$ = Trim$(GblCmt$[31,60])
    SalesTicketVoidInfo.ProgramNo$ = z$[58,61]
    SalesTicketVoidInfo.UserName$ = user$
    SalesTicketVoidInfo.WeighMaster$ = WeighMaster$
    SalesTicketVoidInfo.VoidDateTime# = Tim#(0)
    Try 
      Search #ch_db;"INSERT INTO Sales_Ticket_VoidInfo (" + SQLN$(SalesTicketVoidInfo.) + ") VALUES (" + SQLV$(SalesTicketVoidInfo.) + ")"
    Else 
      !      Call SAITouchError("Error creating entry in Sales_Ticket_VoidInfo table.\15\"+Msc$(2)+"\15\Program Line: "+Str$(Spc(10)))
    End Try 
  End If 
  ! Look for a Sales Release and update it if necessary
  Try 
    Search #ch_db;"SELECT ReleaseNo FROM Sales_Ticket_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#) + " LIMIT 1"
    If Chf(ch_db)
      Read #ch_db;TicketHeader.ReleaseNo;
      If TicketHeader.ReleaseNo > 0
        Search #ch_db;"UPDATE Sales_Release SET LoadsRemaining=LoadsRemaining+1, Status=" + SQLV$("") + ", CompleteDateTime=NULL WHERE ReleaseNo=" + SQLV$(TicketHeader.ReleaseNo)
      End If 
    End If 
  Else 
  End Try 
  ! Check for OTM
  If OTMFreight$ = "Y"
    Search #ch_db;"SELECT CarrierRefNo FROM Sales_Ticket_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
    If Chf(ch_db)
      Map #ch_db;
      Read #ch_db;TicketHeader.CarrierRefNo$
    End If 
    If TicketHeader.CarrierRefNo$
      SQL$ = "UPDATE OTM_Freight_Interface SET "
      SQL$ = SQL$ + "Status=" + SQLV$("")
      SQL$ = SQL$ + ", TicketNo=" + SQLV$("")
      SQL$ = SQL$ + ", NetWt=" + SQLV$(0)
      SQL$ = SQL$ + ", NetWtUM=" + SQLV$("")
      SQL$ = SQL$ + " WHERE OTMRefNo=" + SQLV$(TicketHeader.CarrierRefNo$)
      SQL$ = SQL$ + " AND TicketNo=" + SQLV$(TicketHeader.TicketNo$)
      SQL$ = SQL$ + " AND OriginEntityNo=" + SQLV$(YardSupplierNo$)
      Try 
        Search #ch_db;SQL$
      Else 
        Call SAITouchError("Error updating Status in OTM_Freight_Interface table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
      End Try 
    End If 
  End If 
  ! Log Sales Ticket Void
  If SalesTicketLog And TicketHeader.TktType$ = "S" And TicketHeader.TktMode$ <> "T"
    Call WriteSalesTicketLog("VOIDED")
  End If 
VoidTicket_Success: !
  If TicketAudit
    Call LoadTicketAuditHeader()
    TicketAudit.Event$ = "Ticket Voided"
    Call WriteTicketAudit()
  End If 
  Call SAITouchMessage("Ticket No. " + TicketHeader.TicketNo$ + " successfully VOIDED.")
  If TicketHeader.TicketNo$ = LastTicket$ Let LastTicket$ = ""
VoidTicket_Exit: !
  Close #ch_void
End Sub 
Sub Usage(status)
  If ScrapSRecord$[130,130] <> "Y"
    Call SAITouchWarning("Usage Transactions cannot be created with StockPiles turned off.")
    status = 1
    Exit Sub 
  End If 
  WeightOnly = 0
  Clear TicketNo$,SupplierNo$,Supplier.,TicketHeader.,TicketTotals.,Items.[]
  Clear Material.,StockPile$,ConsumptionYard$
  ! Check for Source Yards
  k$ = "Y"
  YardCount = 0
  Do 
    Search #ch_110Aro,3,1;k$,r,e
    If e Exit Do 
    If k$[1,1] <> "Y" Exit Do 
    If k$[3,4] = Branch$
      Call SAIReadRecord(ch_110Aro,recdef_110A.,"Y","U",r,ScrapCode$,ScrapCode[],e,errmess$)
      If e = 0 And ScrapCode$[36,36] <> "Y" And ScrapCode$[69,69] <> "Y" And Trim$(ScrapCode$[57,62]) <> ""
        Call RetrieveSupplier(ScrapCode$[57,62],Supplier.,stat)
        If stat = 0
          YardCount = YardCount + 1
          If YardCount > 1
            Exit Do 
          Else 
            TicketHeader.SrcYard$ = ScrapCode$[2,2]
            TicketHeader.EntityNo$ = Supplier.SupplierNo$
            Call PopulateSupplierAddress()
            ConsumptionYard$ = ScrapCode$[77,77]
            ConsumptionPile$ = ScrapCode$[78,80]
          End If 
        End If 
      End If 
    End If 
  Loop 
  If YardCount = 0
    Call SAITouchWarning(Rep$(" ",12) + "Cannot create a Usage Transaction.\15\\15\There are no Source Yards properly defined for your Branch.")
    status = 1
    Exit Sub 
  End If 
  k$ = "Y" + TicketHeader.SrcYard$ + Branch$
  Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCodeTmp$,ScrapCodeTmp[],stat,errmess$)
  If stat
    Call SAITouchError("Error retrieving Source Yard " + TicketHeader.SrcYard$ + " information for this Branch.")
    status = 1
    Exit Sub 
  End If 
  VehType1$ = DefaultVehType$
  VehType2$ = ""
  Do 
    Call VehicleSelection(VehType1$,VehType2$,status)
    If status Exit Sub 
    If TicketHeader.VehNo$ And Trim$(TicketHeader.VehNo$) <> Trim$(DefaultVehPrefix$)
      Search #ch_db;"SELECT TicketNo FROM InYard_Hdr WHERE Branch=" + SQLV$(Branch$) + " AND InYardID=" + SQLV$(TicketHeader.VehNo$)
      If Chf(ch_db) = 0
        If TicketHeader.VehType$ <> "T"
          Search #ch_db;"SELECT * FROM Pur_Notice WHERE Branch=" + SQLV$(Branch$) + " AND VehNo=" + SQLV$(TicketHeader.VehNo$)
          If Chf(ch_db)
            Map Record #ch_db As Pur_Notice
            Read Record #ch_db;PurNotice.
            temp$ = "That Vehicle Number has already been Noticed."
            temp$ = temp$ + "\15\Shipment Date: " + SAISafeDateUsing$(PurNotice.ShipmentDate#,DateFormat1$)
            temp$ = temp$ + "\15\Shipment No. : " + PurNotice.ShipmentNo$
            Call SAITouchWarning(temp$)
            Clear PurNotice.
          Else 
            Exit Do 
          End If 
        Else 
          Exit Do 
        End If 
      Else 
        Read #ch_db;temp$
        Call SAITouchWarning("That Vehicle Number is already In-Yard under Ticket No. " + temp$)
      End If 
    Else 
      If PromptVehInfo$ = "N"
        Call SAITouchError("Configuration error.  You must have prompt for Vehicle Info turned on.")
        status = 1
        Exit Sub 
      Else 
        Call SAITouchWarning("You must enter a Vehicle Number.")
      End If 
    End If 
  Loop 
  If gbl.MultiCurrency$ = "Y" Let TicketHeader.FundsType$ = gbl.BranchFundsType$ ! Initialize with Branch Funds Type
  chcre = SAIOpenWindow("Create Usage Transaction",850,200,1)
  Print #chcre;PChr$(bgcolor1);'BACKCOLOR CS WCSETCOLOR';
  Print #chcre;PChr$("Arial");'FONTFACE 12FONTSIZE EBOLD WCSETFONT';
  y = 20 \ dy = 30 \ bw = 100
  x0 = 20 \ x1 = 200
  dx = 500
  Print #chcre;PChr$(110,x0,y,x1,y + 14,"Source Branch:");'WCLABEL';
  Print #chcre;PChr$(10,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chcre;'10WCSELECT WCRESETCOLOR';Branch$;": ";SAICodesTableDesc$(ch_db,"Codes_Branch","Branch",Branch$);'0WCSELECT';
  TicketHeader.SrcBranch$ = Branch$
  y = y + dy
  Print #chcre;PChr$(111,x0,y,x1,y + 14,"Source Yard:");'WCLABEL';
  Print #chcre;PChr$(11,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chcre;'11WCSELECT WCRESETCOLOR';TicketHeader.SrcYard$;": ";Trim$(ScrapCodeTmp$[15,34]);'0WCSELECT';
  If YardCount > 1 Print #chcre;PChr$(31,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Change",2);'WCBUTTON';
  y = y + dy
  Print #chcre;PChr$(112,x0,y,x1,y + 14,"Source Inventory:");'WCLABEL';
  Print #chcre;PChr$(12,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chcre;'12WCSELECT WCRESETCOLOR 0WCSELECT';
  Print #chcre;PChr$(32,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Select",2);'WCBUTTON';
  !  if ScrapSRecord$[130,130]="Y"
  y = y + dy
  Print #chcre;PChr$(113,x0,y,x1,y + 14,"Source StockPile:");'WCLABEL';
  Print #chcre;PChr$(13,x1,y,x1 + dx,y + 14,"",0);'WCTEXT';
  Print #chcre;'13WCSELECT WCRESETCOLOR 0WCSELECT';
  Print #chcre;PChr$(33,x1 + dx + 5,y - 5,x1 + dx + 5 + bw,y + 20,"Select",2);'WCBUTTON';
  !  endif
  Call SAIButtons(chcre,2,1,"Submit~Cancel",850,165,25,100,20)
  Print #chcre;'1WCDISABLE 33WCDISABLE';
  Print #chcre;'32WCFOCUS';
  Do 
    Input #chcre; Len (1);w$
    Select Case w$
      Case 'F1' ! Submit
        Call GenerateTicketNo("T",TicketNo$)
        If TicketNo$ = ""
          status = 1
          Exit Sub 
        End If 
        TicketHeader.TicketNo$ = TicketNo$
        TicketHeader.Branch$ = Branch$
        TicketHeader.InYardID$ = TicketHeader.VehNo$
        TicketHeader.TktType$ = "P"
        TicketHeader.TktMode$ = "T"
        TicketHeader.StartTime# = Tim#(0)
        TicketHeader.ShipmentDate# = RunDate#
        TicketHeader.EntryDate# = RunDate#
        TicketHeader.ShipmentNo$ = TicketHeader.TicketNo$
        Clear Items.[]
        Items.[1].TicketNo$ = TicketHeader.TicketNo$
        Items.[1].ItemNo = 1
        Items.[1].MaterialCode$ = MaterialCode$
        Items.[1].InventoryCode$ = Material.InventoryCode$
        Items.[1].YardCode$ = ConsumptionYard$
        Items.[1].StkPileReq = 1
        Items.[1].StockPile$ = Trim$(ConsumptionPile$)
        Items.[1].MaterialDesc$ = Material.MaterialDesc$
        Items.[1].ShipmentNo$ = TicketHeader.ShipmentNo$
        k$ = "Y" + TicketHeader.SrcYard$ + Branch$
        Call SAIGetRecord(ch_110Aro,recdef_110A.,k$,1,"Y","U",r,ScrapCodeTmp$,ScrapCodeTmp[],stat,errmess$)
        If stat = 0
          If ScrapCodeTmp$[81,81] <> " " And ScrapCodeTmp[0] <> 0
            Items.[1].AdjCode$ = ScrapCodeTmp$[81,81]
            Items.[1].AdjPercent = ScrapCodeTmp[0]
          End If 
        End If 
        Try 
          Search #ch_db;"INSERT INTO InYard_Hdr (" + SQLN$(TicketHeader.) + ") VALUES (" + SQLV$(TicketHeader.) + ")"
          status = 0
        Else 
          Call SAITouchError("Error creating entry in InYard_Hdr table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
          status = 1
        End Try 
        If status = 0
          Try 
            Search #ch_db;"INSERT INTO InYard_Dtl (" + SQLN$(Items.[1]) + ") VALUES (" + SQLV$(Items.[1]) + ")"
          Else 
            Try Search #ch_db;"DELETE FROM InYard_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) Else Rem
            Call SAITouchError("Error creating entry in InYard_Dtl table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
            status = 1
          End Try 
        End If 
        Exit Do 
      Case 'F2' ! Cancel
        status = 1
        Exit Do 
      Case 'F31' ! Change Yard
        Call ListYards(w$)
        If w$
          Print #chcre;'11WCSELECT CU';w$;'0WCSELECT';
          If w$[1,1] <> TicketHeader.SrcYard$
            TicketHeader.SrcYard$ = w$[1,1]
            TicketHeader.EntityNo$ = Trim$(ScrapCode$[57,62])
            ConsumptionYard$ = ScrapCode$[77,77]
            ConsumptionPile$ = ScrapCode$[78,80]
            Print #chcre;'12WCSELECT CU 0WCSELECT';
            Print #chcre;'13WCSELECT CU 0WCSELECT';
            TicketHeader.SrcInvCode$ = ""
            StockPile$ = ""
            MaterialCode$ = ""
          End If 
          Print #chcre;'33WCDISABLE';
        End If 
      Case 'F32' ! Select Inventory
UsageListInventory: !
        Call ListInventory(w$)
        If w$
          temp2$ = w$
          If Trim$(Inventory$[1,8]) <> TicketHeader.SrcInvCode$
            If Inventory$[108,108] <> "X"
              Call SAITouchWarning("Selected Inventory Code is not a StockPile Master.")
              Goto UsageListInventory
            End If 
            ! Make sure a BAY pile exists
            k$ = SAICreateInventoryKey$(BrYd,1,Inventory$[1,4] + "-" + ConsumptionPile$,ConsumptionYard$,Branch$)
            Call SAIGetRecord(ch_1600,recdef_1600.,k$,1,"Y","U",r,InventoryTmp$,InventoryTmp[],stat,errmess$)
            If stat
              Call SAITouchWarning("Selected Inventory Code does not have a BAY StockPile.")
              Goto UsageListInventory
            Else If InventoryTmp$[209,209] = "Y"
              Call SAITouchWarning("Selected Inventory Code's BAY StockPile is Inactive.")
              Goto UsageListInventory
            End If 
            ! Make sure Material Code Exists
            SQL$ = "SELECT * FROM Purchase_Material_Price"
            SQL$ = SQL$ + " WHERE InventoryCode=" + SQLV$(Trim$(Inventory$[1,4]))
            SQL$ = SQL$ + " AND SupplierNo=" + SQLV$("CP000*")
            SQL$ = SQL$ + " AND Branch=" + SQLV$(Branch$)
            SQL$ = SQL$ + " AND YardCode=" + SQLV$(ConsumptionYard$)
            SQL$ = SQL$ + " AND Inactive<>" + SQLV$("Y")
            SQL$ = SQL$ + " AND Dirt_CFC_Levy<>" + SQLV$("Y")
            If gbl.MultiCurrency$ = "Y"
              SQL$ = SQL$ + " AND FundsType=" + SQLV$(TicketHeader.FundsType$)
            End If 
            Search #ch_db;SQL$
            nr = Chf(ch_db)
            If nr
              Map Record #ch_db As Purchase_Material_Price
              Read Record #ch_db;PMatPrice.
            Else 
              Call SAITouchWarning("Selected Inventory Code does not have a CP000* Material Code built.")
              Goto UsageListInventory
            End If 
            StockPile$ = ""
            ktemp$ = Trim$(Inventory$[1,8]) ! Save master inventory code
            Print #chcre;'13WCSELECT CU 0WCSELECT';
            Do 
              Call SelectStockPile(ktemp$,TicketHeader.SrcYard$,Branch$,StockPile$,ConsumptionPile$,"D",ExitStatus)
              If ExitStatus
                Exit Do 
              Else If StockPile$ = ConsumptionPile$
                Call SAITouchWarning("Cannot select the BAY pile.")
              Else If Trim$(StockPile$)
                TicketHeader.SrcInvCode$ = ktemp$
                MaterialCode$ = PMatPrice.MaterialCode$
                Material.MaterialDesc$ = PMatPrice.MaterialDesc$
                Material.InventoryCode$ = Inventory$[1,4] + "-" + ConsumptionPile$
                Print #chcre;'12WCSELECT CU';temp2$;'0WCSELECT';
                Print #chcre;'13WCSELECT CU';Trim$(StockPile$);": ";Trim$(SAIInventoryDesc$(BrYd,Inventory$));'0WCSELECT';
                Print #chcre;'1WCENABLE 33WCENABLE';
                Exit Do 
              Else If StockPile$
                Call SAITouchWarning("Cannot select UNKNOWN StockPile.")
              End If 
            Loop 
            If ExitStatus Goto UsageListInventory
          End If 
        End If 
      Case 'F33' ! Select StockPile
        ktemp$ = TicketHeader.SrcInvCode$
        Call SelectStockPile(ktemp$,TicketHeader.SrcYard$,Branch$,StockPile$,ConsumptionPile$,"D",ExitStatus)
        If ExitStatus = 0
          If Trim$(StockPile$)
            TicketHeader.SrcInvCode$ = ktemp$
            Print #chcre;'13WCSELECT CU';Trim$(StockPile$);": ";Trim$(SAIInventoryDesc$(BrYd,Inventory$));'0WCSELECT';
            Print #chcre;'1WCENABLE';
          Else If StockPile$
            Call SAITouchWarning("Cannot select UNKNOWN StockPile.\15\StockPile unchanged.")
          End If 
        End If 
    End Select 
  Loop 
  Close #chcre
End Sub 
Sub SalesSplitLoadSearch(k$)
  icount = 0
  Clear ilistsel$[]
  If ilistcur > ilistmax
    ilistmax = ilistmax + 10
    Dim ilist$[ilistmax,ilistlen]
  End If 
  Print #chspl;PChr$(30,49);'WCDELETE';
  Print #chspl;PChr$(1,3);'WCDISABLE';
  y = ylist
  Do 
ListSplitLoadLoop: !
    Search #ch_8430ro,3,1;k$,rec_8430,e
    If e Exit Do 
    Call SAIReadRecord(ch_8430ro,recdef_8430.,"Y","U",rec_8430,SalesTicket$,SalesTicket3[],SalesTicket4[],stat,errmess$)
    If stat Goto ListSplitLoadLoop
    If SalesTicket$[89,89] <> "I" Goto ListSplitLoadLoop
    ktemp$ = SalesTicket$[1,20] ! Ticket #, Supplier, Material
    SplitLoadFound = 0
    Do 
      Search #ch_8530ro,3,1;ktemp$,r1,e1
      If e1 Exit Do 
      If ktemp$[1,20] <> SalesTicket$[1,20] Exit Do !done with *M portion of ticket
      Call SAIReadRecord(ch_8530ro,recdef_8530.,"Y","U",r1,RetailSales$,RetailSales[],stat,errmess$)
      If stat = 0
        If RetailSales$[161,162] = Branch$
          SplitLoadFound = 1
          ! Look for ticket number in the InYard table
          Search #ch_db;"SELECT TicketNo FROM InYard_Hdr WHERE TicketNo=" + SQLV$(Trim$(RetailSales$[1,6]))
          If Chf(ch_db) Let SplitLoadFound = 0
          Exit Do 
        End If 
      End If 
    Loop 
    If SplitLoadFound = 0 Goto ListSplitLoadLoop
    ktemp$ = SalesTicket$[1,20] ! Ticket #, Supplier, Material
    Call SAIGetRecord(ch_8326ro,recdef_8326.,ktemp$,2,"Y","U",r,ScaleTicAudit$,ScaleTicAudit[],stat,errmess$)
    If stat Goto ListSplitLoadLoop
    Call RetrieveCustomer(SalesTicket$[7,12],CustomerTemp.,stat)
    If stat Goto ListSplitLoadLoop
    temp$ = SAISpaceFill$(CustomerTemp.Name$,15)
    temp$ = temp$ + "  " + SalesTicket$[1,6] !ticket
    temp$ = temp$ + "  " + SalesTicket$[27,37] !veh
    temp$ = temp$ + "  " + ScaleTicAudit$[92,110] !mat desc
    temp$ = temp$ + "  " + SAIDateDisplay$(SalesTicket$[21,26]) !shipdate
    temp$ = temp$ + "  " + SalesTicket3[3] Using "-------#" !Gross
    temp$ = temp$ + "  " + SalesTicket3[4] Using "-------#" !Tare
    temp$ = Replace$(temp$,"&","&&")
    Print #chspl;PChr$(30 + icount,10,y,890,y + 25,temp$,2);'WCBUTTON';
    y = y + 30
    ilistsel$[icount] = k$
    icount = icount + 1
  Loop Until icount = imax
  Print #chspl;PChr$(1,3);'WCENABLE';
  If e Print #chspl;'2WCDISABLE';
  If ilistcur = 0 Print #chspl;'1WCDISABLE';
End Sub 
Sub SalesSplitLoad(status)
  TicketNo$ = ""
  temp$ = "Sales Split-Load for " + SAICodesTableDesc$(ch_db,"Codes_Branch","Branch",Branch$)
  chspl = SAIOpenWindow(temp$,900,290,1)
  Print #chspl;PChr$(16777215);'BACKCOLOR CS'
  Print #chspl;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE WCSETFONT';
  Print #chspl;PChr$(-1,SAIColorRGB(255,255,0));'WCSETCOLOR';
  y = 2
  Print #chspl;PChr$(100,10,y,890,y + 10," CUSTOMER        TKT #   VEHICLE #    MATERIAL DESC        SHIP DATE  GROSS WT  TARE WT");'WCLABEL';
  Print #chspl;'WCRESETCOLOR';
  x = 50 \ y = 2 \ dx = 120
  Print #chspl;PChr$("Arial");'FONTFACE 12FONTSIZE WCSETFONT';
  Call SAIButtons(chspl,3,1,"< Previous~Next >~Cancel",900,260,25,120,20)
  Print #chspl;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE WCSETFONT';
  y = y + 12
  ylist = y
  Clear ilist$[]
  ilistcur = 0
  imax = 8
  k$ = ""
  Call SalesSplitLoadSearch(k$)
  Print #chspl;'3WCFOCUS';
  Do 
SalesSplitLoad_input: !
    Input #chspl; Len (1);w$
    Select Case w$
      Case 'F1' ! Previous
        If ilistcur > 0
          ilistcur = ilistcur - 1
          k$ = ilist$[ilistcur]
          Call SalesSplitLoadSearch(k$)
        End If 
      Case 'F2' ! Next
        ilistcur = ilistcur + 1
        Call SalesSplitLoadSearch(k$)
      Case 'F3' ! Cancel
        status = 1
        Exit Do 
      Case 'F30' To 'F39'
        i = Asc(w$) - Asc('F30')
        k$ = ilistsel$[i]
        Call SAIGetRecord(ch_8430ro,recdef_8430.,k$,1,"Y","U",rec_8430,SalesTicket$,SalesTicket3[],SalesTicket4[],stat,errmess$)
        If stat
          Call SAITouchError("Error retrieving OutBound Sales Ticket.\15\" + errmess$)
          Goto SalesSplitLoad_input
        End If 
        Call RetrieveCustomer(SalesTicket$[7,12],Customer.,stat)
        If stat
          Call SAITouchError("Error retrieving Customer (" + SalesTicket$[7,12] + ") from OutBound Sales Ticket.\15\" + errmess$)
          Goto SalesSplitLoad_input
        End If 
        Call GetInYardID("NL",ID$,status)
        If status Goto SalesSplitLoad_input
        ! Select/Determine Material Req (if only one exists, automatically select it)
        FullSONo$ = SalesTicket$[90,101]
        ktemp$ = SalesTicket$[7,12] + SalesTicket$[90,101]
        Call SAIGetRecord(ch_1310ro,recdef_1310.,ktemp$,1,"Y","U",r1,SODetail$,SODetail[],stat,errmess$)
        If stat
          Call SAITouchError("Error retrieving Sales Order Line No. " + FullSONo$ + "\15\" + errmess$)
          Goto SalesSplitLoad_input
        End If 
        ktemp$ = SODetail$[1,16]
        Call SAIGetRecord(ch_1300,recdef_1300.,ktemp$,1,"Y","U",rtemp,SOHeader$,SOHeader[],e1,errmess$)
        If stat
          Call SAITouchError("Error retrieving Sales Order Header No. " + SODetail$[1,16] + "\15\" + errmess$)
          Goto SalesSplitLoad_input
        End If 
        Clear Material.
        Material.YardCode$ = SalesTicket$[70,70]
        Call GetMaterialReq(FullPONo$,status)
        If status Goto SalesSplitLoad_input
        If FullPONo$
          MaterialCode$ = Trim$(PODetail$[50,57])
          Call GetSalesMaterialPrice(MaterialCode$,Branch$,status)
          If status And Material.MaterialCode$ <> MaterialCode$
            Call SAITouchWarning("No valid Pricing found for contracted material: " + MaterialCode$)
            Clear FullPONo$,FullSONo$,SODetail$,SODetail[]
            Goto SalesSplitLoad_input
          End If 
        End If 
        If Trim$(SODetail$[111,140]) Let Material.MaterialDesc$ = Trim$(SODetail$[111,140])
        ! Create InYard
        Clear TicketHeader.,TicketDetail.
        TicketHeader.TicketNo$ = Trim$(SalesTicket$[1,6])
        TicketHeader.Branch$ = Branch$
        TicketHeader.InYardID$ = ID$
        TicketHeader.TktType$ = "S"
        TicketHeader.StartTime# = Tim#(0)
        TicketHeader.EntryDate# = RunDate#
        TicketHeader.ShipmentDate# = SAIConvertDate#(SalesTicket$[21,26])
        TicketHeader.Noticed = 1
        TicketHeader.SplitLoad = 1
        TicketHeader.EntityNo$ = Trim$(SalesTicket$[7,12])
        Call PopulateCustomerAddress()
        TicketHeader.VehType$ = Trim$(SalesTicket$[55,55])
        TicketHeader.VehSize$ = Trim$(SalesTicket$[163,164])
        TicketHeader.VehNo$ = Trim$(SalesTicket$[27,37])
        TicketHeader.OrderNo$ = Trim$(SalesTicket$[90,99])
        TicketHeader.OrderLine$ = Trim$(SalesTicket$[100,101])
        TicketHeader.ShipmentNo$ = Trim$(SalesTicket$[56,61])
        TicketHeader.MatReqNo$ = Trim$(FullPONo$[1,10])
        TicketHeader.MatReqLine$ = Trim$(FullPONo$[11,12])
        TicketHeader.CarrierNo$ = Trim$(SalesTicket$[178,183])
        TicketHeader.TripTicketNo$ = Trim$(SalesTicket$[199,204])
        TicketHeader.Trader$ = Trim$(SOHeader$[214,216])
        TicketHeader.ShipOrdNo$ = Trim$(SODetail$[214,233])
        ! Get info from previous leg Sales_Ticket_Hdr
        Try 
          Search #ch_db;"SELECT * FROM Sales_Ticket_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) + " AND Branch=" + SQLV$(SalesTicket$[168,169]) + " AND ShipmentDate=" + SQLD$(TicketHeader.ShipmentDate#)
          If Chf(ch_db)
            Map Record #ch_db As Sales_Ticket_Hdr
            Read Record #ch_db;SalesTicketHdr.
            TicketHeader.ReleaseNo = SalesTicketHdr.ReleaseNo
            TicketHeader.CarrierRefNo$ = SalesTicketHdr.CarrierRefNo$
            TicketHeader.CustReleaseNo$ = SalesTicketHdr.CustReleaseNo$
            TicketHeader.BookingNo$ = SalesTicketHdr.BookingNo$
            TicketHeader.ContainerTareWt = SalesTicketHdr.ContainerTareWt
          End If 
        Else 
        End Try 
        ! Populate detail item
        TicketDetail.TicketNo$ = TicketHeader.TicketNo$
        TicketDetail.ItemNo = 1
        Call PopulateMaterialDetail()
        TicketDetail.Price = SalesTicket4[0] ! Override price
        TicketDetail.PriceUM$ = Trim$(SalesTicket$[44,45])
        If TicketDetail.Price = 0
          If UMConvertable(TicketDetail.PriceUM$) Let TicketDetail.UnPriced = 1
        End If 
        Items.[1] = TicketDetail.
        Try 
          Search #ch_db;"INSERT INTO InYard_Hdr (" + SQLN$(TicketHeader.) + ") VALUES (" + SQLV$(TicketHeader.) + ")"
        Else 
          Call SAITouchError("Error creating entry in InYard_Hdr table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
          Goto SalesSplitLoad_input
        End Try 
        Try 
          Search #ch_db;"INSERT INTO InYard_Dtl (" + SQLN$(Items.[1]) + ") VALUES (" + SQLV$(Items.[1]) + ")"
        Else 
          Try Search #ch_db;"DELETE FROM InYard_Hdr WHERE TicketNo=" + SQLV$(TicketHeader.TicketNo$) Else Rem
          Call SAITouchError("Error creating entry in InYard_Dtl table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
          Goto SalesSplitLoad_input
        End Try 
        If OTMFreight$ = "Y" And TicketHeader.CarrierRefNo$
          SQL$ = "SELECT * FROM OTM_Freight_Interface WHERE"
          SQL$ = SQL$ + " OTMRefNo=" + SQLV$(TicketHeader.CarrierRefNo$)
          SQL$ = SQL$ + " AND OriginEntityNo=" + SQLV$(YardSupplierNo$)
          SQL$ = SQL$ + " AND OriginLocationCode=" + SQLV$("0000")
          SQL$ = SQL$ + " AND DestEntityNo=" + SQLV$(TicketHeader.EntityNo$)
          SQL$ = SQL$ + " AND DestLocationCode=" + SQLV$(SODetail$[31,34])
          Search #ch_db;SQL$
          nr = Chf(ch_db)
          If nr
            Map Record #ch_db As OTM_Freight_Interface
            Read Record #ch_db;OTMFreightInterface.
            SQL$ = "UPDATE OTM_Freight_Interface SET"
            SQL$ = SQL$ + " Status=" + SQLV$("I") + ", TicketNo=" + SQLV$(TicketHeader.TicketNo$)
            SQL$ = SQL$ + " WHERE OTMFrtInterfaceID=" + SQLV$(OTMFreightInterface.OTMFrtInterfaceID)
            Try 
              Search #ch_db;SQL$
            Else 
              Call SAITouchError("Error updating Status in OTM_Freight_Interface table.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
            End Try 
          Else 
            Call SAITouchWarning("Cannot retrieve OTM information from OTM_Freight_Interface table.")
          End If 
        End If 
        WeightOnly = 0
        status = 0
        Exit Do 
    End Select 
  Loop 
  Close #chspl
End Sub 
Sub GreeterListDisplay(page)
  Print #chgr;PChr$(1,2);'WCDISABLE';
  Print #chgr;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE EBOLD WCSETFONT';
  Print #chgr;PChr$(30,59);'WCDELETE CU';
  If page = 0
    Clear GreeterQueue.[]
    icount = 0 \ npages = 0
    Try 
      SQL$ = "SELECT * FROM Greeter_Queue WHERE Branch=" + SQLV$(Branch$) + "AND QueueType=" + SQLV$(2)
      Select Case Filter$
        Case "G"
          SQL$ = SQL$ + " AND InYardID NOT LIKE " + SQLV$("VLT-%")
        Case "V"
          SQL$ = SQL$ + " AND InYardID LIKE " + SQLV$("VLT-%")
      End Select 
      SQL$ = SQL$ + " ORDER BY CreatedDate"
      Search #ch_db;SQL$
      icount = Chf(ch_db)
      Map Record #ch_db As Greeter_Queue
      For i = 1 To icount
        Try Read Record #ch_db;GreeterQueue.[i] Else Rem
      Next i
    Else 
      icount = 0
    End Try 
    If icount
      npages = Int(icount / imax)
      If icount Mod (imax) Let npages = npages + 1
    Else 
      Exit Sub 
    End If 
  End If 
  s = page * imax + 1
  n = 0 \ x = x0 \ y = y0
  For i = s To s + imax - 1
    If i > icount Exit For 
    If GreeterQueue.[i].SupplierNo$ = "******" Let GreeterQueue.[i].SupplierNo$ = BranchPeddlerNo$
    If GreeterQueue.[i].InYardID$ = SQLNull$() Let GreeterQueue.[i].InYardID$ = ""
    If GreeterPhotos$ = "Y"
      Print #chgr;PChr$("Arial");'FONTFACE 8FONTSIZE WCSETFONT';
      If InYardDemo$ = "Y"
        w$ = n + 1 Using "SDT&&&&#.JPG"
      Else 
        w$ = "SD" + Str$(GreeterQueue.[i].rowid) + ".JPG"
      End If 
      Print #chgr;PChr$(JPThumbsLocation$ + w$,x,y,x + w,y + h);'FITIMAGE';
      Print #chgr;PChr$(50 + n,x,y,x + w,y + h);'WCPAD';
      temp$ = "ID: " + GreeterQueue.[i].InYardID$ + "\15\Supplier No: " + GreeterQueue.[i].SupplierNo$ + "\15\" + GreeterQueue.[i].Name$
      temp$ = temp$ + "\15\\15\Date: "
      Try Let temp$ = temp$ + DateUsing$(GreeterQueue.[i].CreatedDate#,dateformat$ + " HH:NN") Else Rem
      temp$ = Replace$(temp$,"&","&&")
      Print #chgr;PChr$(30 + n,x,y + h + 2,x + w,y + h + bh,temp$,2);'WCBUTTON';
      If n = 4
        x = x0
        y = y + h + dy
      Else 
        x = x + w + 25
      End If 
    Else 
      temp$ = SAISpaceFill$(GreeterQueue.[i].InYardID$,11) + "   " + SAISpaceFill$(GreeterQueue.[i].SupplierNo$,6) + "     " + SAISpaceFill$(GreeterQueue.[i].Name$,38) + " "
      Try 
        temp$ = temp$ + DateUsing$(GreeterQueue.[i].CreatedDate#,dateformat$ + " HH:NN")
      Else 
        temp$ = temp$ + Rep$(" ",14)
      End Try 
      temp$ = Replace$(temp$,"&","&&")
      Print #chgr;PChr$(30 + n,5,y,795,y + 25,temp$,2);'WCBUTTON';
      Print #chgr;PChr$(40 + n,800,y,895,y + 25,"DELETE",2);'WCBUTTON';
      y = y + 30
    End If 
    n = n + 1
  Next i
  If npages = 1
    ! Leave both buttons disabled
  Else If page = 0
    Print #chgr;'2WCENABLE';
  Else If page = npages - 1
    Print #chgr;'1WCENABLE';
  Else 
    Print #chgr;PChr$(1,2);'WCENABLE';
  End If 
End Sub 
Sub GreeterList(status)
  Clear GreeterQueue.[],GreeterQueueID,supplier_id_rowid,ID$,MaterialCode$,TicketIdentity.
  chgr = SAIOpenWindow("Greeter List for Branch " + Branch$,900,290,1)
  Print #chgr;PChr$("Arial");'FONTFACE 10FONTSIZE WCSETFONT';
  Print #chgr;PChr$(16777215);'BACKCOLOR CS'
  Print #chgr;PChr$(16777215,255);'WCSETCOLOR'
  If GreeterPhotos$ = "Y"
    imax = 10
    y0 = 34 \ x0 = 25
    w = 150
    h = Int(w * .75 / 2)
    bh = 47
    dy = 57
  Else 
    imax = 7
    y0 = 45
  End If 
  y = 3 \ x = 250 \ dx = 120
  Print #chgr;PChr$(10,x,y,x + dx,y + 25,"GREETER",2 + 4);'WCRADIO';
  x = x + dx + 20
  Print #chgr;PChr$(11,x,y,x + dx,y + 25,"VEHICLE",2 + 4);'WCRADIO';
  x = x + dx + 20
  Print #chgr;PChr$(12,x,y,x + dx,y + 25,"    ALL",2 + 4);'WCRADIO';
  Print #chgr;'10WCSELECT';"1";'0WCSELECT';
  Filter$ = "G"
  Print #chgr;'WCRESETCOLOR';
  Print #chgr;'12FONTSIZE WCSETFONT';
  Call SAIButtons(chgr,3,1,"< Previous~Next >~Cancel",900,260,25,120,20)
  Print #chgr;PChr$(4,770,260,890,285,"Build\15\New Ticket",2);'WCBUTTON';
  Print #chgr;PChr$("Arial Mono for dl4");'FONTFACE 10FONTSIZE WCSETFONT';
  Print #chgr;PChr$(-1,SAIColorRGB(255,255,0));'WCSETCOLOR';
  If GreeterPhotos$ <> "Y"
    y = 32
    temp$ = " In-Yard ID Supplier No. Name" + Rep$(" ",36) + "Date Entered"
    Print #chgr;PChr$(100,5,y,795,y + 10,temp$);'WCLABEL';
  End If 
  Print #chgr;'WCRESETCOLOR';
  page = 0
  Call GreeterListDisplay(page)
  Print #chgr;'3WCFOCUS';
  Do 
greeterlist_input: !
    Input #chgr; Len (1);w$
greeterlist_select: !
    Select Case w$
      Case 'F1' ! Previous
        If page > 0
          page = page - 1
          Call GreeterListDisplay(page)
        End If 
      Case 'F2' ! Next
        If page < npages
          page = page + 1
          Call GreeterListDisplay(page)
        End If 
      Case 'F3' ! Cancel
        status = 1
        Exit Do 
      Case 'F4' ! Build New Ticket
        Clear TicketIdentity.
        status = 2
        Exit Do 
      Case 'F10' ! Greeter type
        Filter$ = "G"
        page = 0
        Call GreeterListDisplay(page)
      Case 'F11' ! Vehicle type
        Filter$ = "V"
        page = 0
        Call GreeterListDisplay(page)
      Case 'F12' ! ALL
        Filter$ = "A"
        page = 0
        Call GreeterListDisplay(page)
      Case 'F30' To 'F39'
        i = Asc(w$) - Asc('F30')
        n = page * imax + i + 1
        Clear SupplierID.
        If GreeterQueue.[n].supplier_id_rowid <> 0 And GreeterQueue.[n].supplier_id_rowid <> SQLNull()
          status = 1
          Try 
            Search #ch_db;"SELECT * from Supplier_ID WHERE rowid=" + SQLV$(GreeterQueue.[n].supplier_id_rowid)
            If Chf(ch_db)
              Map Record #ch_db As Supplier_ID
              Read Record #ch_db;SupplierID.
              status = 0
              supplier_id_rowid = GreeterQueue.[n].supplier_id_rowid
            End If 
          Else 
          End Try 
          If status = 0
            If SupplierID.SupplierNo$ = "******" Or Trim$(SupplierID.SupplierNo$) = ""
              If BranchPeddlerNo$ = ""
                Call SAITouchWarning("No Branch Peddler Number configured.")
                status = 1
              Else 
                SupplierID.SupplierNo$ = BranchPeddlerNo$
              End If 
            End If 
          Else 
            Call SAITouchWarning("Could not retrieve Identity Information.")
          End If 
          If status = 0
            Call SAISetTicketIdentity(TicketIdentity.,SupplierID.)
            TicketIdentity.VehicleTagState$ = Trim$(GreeterQueue.[n].VehicleTagState$)
            TicketIdentity.VehicleTagNo$ = Trim$(GreeterQueue.[n].VehicleTagNo$)
            TicketIdentity.VehicleDesc$ = Trim$(GreeterQueue.[n].VehicleDesc$)
            TicketIdentity.VehicleMake$ = Trim$(GreeterQueue.[n].VehicleMake$)
            TicketIdentity.VehicleModel$ = Trim$(GreeterQueue.[n].VehicleModel$)
            TicketIdentity.VehicleColor$ = Trim$(GreeterQueue.[n].VehicleColor$)
            TicketIdentity.TrailerTagState$ = Trim$(GreeterQueue.[n].TrailerTagState$)
            TicketIdentity.TrailerTagNo$ = Trim$(GreeterQueue.[n].TrailerTagNo$)
            If SupplierID.IDPhoto
              TicketIdentity.IDPhoto = SupplierID.IDPhoto
              Call SAILicView(SupplierID.IDNumber$,PhotoURL$)
            End If 
            If SupplierID.FingerPrint Let TicketIdentity.FingerPrint = 1
            Clear TicketList$[],ShipDateList$[],PhotoCaptured$
            Call SAIAdvancedIdentityInfo(z$,ch_db,ConfigFile$,TicketIdentity.,0,TicketList$[],ShipDateList$[],SupplierID.SupplierNo$,WeighMaster$,PhotoCaptured$,status)
            If status = 0 Call CheckDoNotBuy(TicketIdentity.IDNumber$,TicketIdentity.IDIssuer$,TicketIdentity.FirstName$,TicketIdentity.LastName$,TicketIdentity.DateOfBirth#,status)
            If status
              Clear TicketIdentity.
              status = 1
              Exit Do 
            Else 
              SupplierNo$ = SupplierID.SupplierNo$
              If SupplierNo$ = "******" Let SupplierNo$ = BranchPeddlerNo$
            End If 
          End If 
        Else 
          SupplierNo$ = Trim$(GreeterQueue.[n].SupplierNo$)
          If SupplierNo$ = "******" Or SupplierNo$ = ""
            If BranchPeddlerNo$ = ""
              Call SAITouchWarning("No Branch Peddler Number configured.")
              SupplierNo$ = ""
            Else 
              SupplierNo$ = BranchPeddlerNo$
            End If 
          End If 
          If SupplierNo$
            Call RetrieveSupplier(SupplierNo$,Supplier.,stat)
            If stat
              Call SAITouchWarning("Supplier not found.")
            Else 
              If ValidSupplier(z$,Supplier.) = 0
                Call SAITouchWarning("Invalid Supplier specified.")
                stat = 1
              End If 
            End If 
            If stat
              Clear SupplierNo$,Supplier.,TicketIdentity.
              status = 1
              Exit Do 
            End If 
            RequireID = 0
            If RequireIdentity$ = "Y"
              RequireID = 1
            Else If RequireIdentity$ = "V"
              RequireID = GetReqAdvIdentityValue(ch_db,Supplier.MiscSupplierType$)
              If RequireID
                If GetComplianceDocOnFile(ch_db,Supplier.SupplierNo$)
                  If RequireID = 2 ! Not required if compliance document on file
                    RequireID = 0
                  Else If Supplier.DoNotPay$ = "S" Or Supplier.DoNotPay$ = "R" ! Do not pay at scale or cash
                    RequireID = 0
                  End If 
                End If 
                If RequireID = 0
                  Call SAITouchMessage("Identity not required for this supplier.")
                End If 
              End If 
              If RequireID = 0
                If Trim$(GreeterQueue.[n].VehicleTagState$) Or Trim$(GreeterQueue.[n].VehicleTagNo$) Or Trim$(GreeterQueue.[n].VehicleDesc$) Or Trim$(GreeterQueue.[n].VehicleMake$) Or Trim$(GreeterQueue.[n].VehicleModel$) Or Trim$(GreeterQueue.[n].IDNumber$) Let RequireID = 2
              End If 
            Else If Trim$(GreeterQueue.[n].VehicleTagState$) Or Trim$(GreeterQueue.[n].VehicleTagNo$) Or Trim$(GreeterQueue.[n].VehicleDesc$) Or Trim$(GreeterQueue.[n].VehicleMake$) Or Trim$(GreeterQueue.[n].VehicleModel$) Or Trim$(GreeterQueue.[n].IDNumber$)
              RequireID = 2
            End If 
            If RequireID
              TicketIdentity.IDNumber$ = Trim$(GreeterQueue.[n].IDNumber$)
              TicketIdentity.IDType$ = GreeterQueue.[n].IDType$
              TicketIdentity.IDIssuer$ = GreeterQueue.[n].IDIssuer$
              TicketIdentity.DateOfBirth# = GreeterQueue.[n].DateOfBirth#
              TicketIdentity.IDExpirationDate# = GreeterQueue.[n].IDExpirationDate#
              TicketIdentity.IDIssueDate# = GreeterQueue.[n].IDIssueDate#
              TicketIdentity.LastName$ = GreeterQueue.[n].LastName$
              TicketIdentity.FirstName$ = GreeterQueue.[n].FirstName$
              TicketIdentity.MiddleName$ = GreeterQueue.[n].MiddleName$
              TicketIdentity.FullName$ = GreeterQueue.[n].FullName$
              If TicketIdentity.FullName$ = "" And TicketIdentity.LastName$ <> ""
                Clear DriversLicense.
                DriversLicense.LastName$ = TicketIdentity.LastName$
                DriversLicense.FirstName$ = TicketIdentity.FirstName$
                DriversLicense.MiddleName$ = TicketIdentity.MiddleName$
                Call SAIFormatName(DefaultNameOrder$,DriversLicense.)
              End If 
              TicketIdentity.Address1$ = GreeterQueue.[n].Address1$
              TicketIdentity.Address2$ = GreeterQueue.[n].Address2$
              TicketIdentity.City$ = GreeterQueue.[n].City$
              TicketIdentity.State$ = GreeterQueue.[n].State$
              TicketIdentity.PostCode$ = GreeterQueue.[n].PostCode$
              TicketIdentity.Gender$ = GreeterQueue.[n].Gender$
              TicketIdentity.Race$ = GreeterQueue.[n].Race$
              TicketIdentity.Height$ = GreeterQueue.[n].Height$
              TicketIdentity.Weight$ = GreeterQueue.[n].Weight$
              TicketIdentity.EyeColor$ = GreeterQueue.[n].EyeColor$
              TicketIdentity.HairColor$ = GreeterQueue.[n].HairColor$
              TicketIdentity.VehicleTagState$ = Trim$(GreeterQueue.[n].VehicleTagState$)
              TicketIdentity.VehicleTagNo$ = Trim$(GreeterQueue.[n].VehicleTagNo$)
              TicketIdentity.VehicleDesc$ = Trim$(GreeterQueue.[n].VehicleDesc$)
              TicketIdentity.VehicleMake$ = Trim$(GreeterQueue.[n].VehicleMake$)
              TicketIdentity.VehicleModel$ = Trim$(GreeterQueue.[n].VehicleModel$)
              TicketIdentity.VehicleColor$ = Trim$(GreeterQueue.[n].VehicleColor$)
              TicketIdentity.TrailerTagState$ = Trim$(GreeterQueue.[n].TrailerTagState$)
              TicketIdentity.TrailerTagNo$ = Trim$(GreeterQueue.[n].TrailerTagNo$)
              Clear TicketList$[],ShipDateList$[],PhotoCaptured$
              Call SAIAdvancedIdentityInfo(z$,ch_db,ConfigFile$,TicketIdentity.,0,TicketList$[],ShipDateList$[],SupplierNo$,WeighMaster$,PhotoCaptured$,status)
              If status = 0
                Call CheckDoNotBuy(TicketIdentity.IDNumber$,TicketIdentity.IDIssuer$,TicketIdentity.FirstName$,TicketIdentity.LastName$,TicketIdentity.DateOfBirth#,status)
                If status
                  Clear TicketIdentity.,SupplierNo$
                  status = 1
                  Exit Do 
                End If 
              End If 
              If SupplierNo$ = "******" Let SupplierNo$ = BranchPeddlerNo$
              If status
                Clear TicketIdentity.
                If RequireID = 2
                  ans = SAITouchYesNo("Identity is not required on this transaction.\15\\15\Do you wish to continue with this selection?")
                  If ans = 0
                    SupplierNo$ = ""
                    status = 1
                    Exit Do 
                  End If 
                Else 
                  SupplierNo$ = ""
                  status = 1
                  Exit Do 
                End If 
              End If 
            End If 
          End If 
        End If 
        If SupplierNo$
          Call RetrieveSupplier(SupplierNo$,Supplier.,stat)
          If stat
            Call SAITouchWarning("Supplier not found.")
          Else 
            If ValidSupplier(z$,Supplier.) = 0
              Call SAITouchWarning("Invalid Supplier specified.")
              stat = 1
            End If 
          End If 
          If stat
            Clear SupplierNo$,Supplier.,TicketIdentity.
          Else 
            If Trim$(GreeterQueue.[n].InYardID$)
              Search #ch_db;"SELECT TicketNo FROM InYard_Hdr WHERE Branch=" + SQLV$(Branch$) + " AND InYardID=" + SQLV$(Trim$(GreeterQueue.[n].InYardID$))
              If Chf(ch_db)
                Map #ch_db;
                Read #ch_db;temp$
                Call SAITouchWarning("In-Yard ID: '" + Trim$(GreeterQueue.[n].InYardID$) + "' already exists In-Yard on Ticket No. " + temp$ + ".\15\\15\You must enter a new one.")
                stat = 1
              Else 
                ID$ = Trim$(GreeterQueue.[n].InYardID$)
                stat = 0
              End If 
            Else 
              stat = 1
            End If 
            If stat
              Call GetInYardID("NL",ID$,status)
              If status Goto greeterlist_input
            End If 
            If GreeterQueue.[n].MaterialCode$ = SQLNull$()
              MaterialCode$ = ""
            Else If Trim$(GreeterQueue.[n].MaterialCode$)
              MaterialCode$ = GreeterQueue.[n].MaterialCode$
              GreeterQueue.[0] = GreeterQueue.[n] ! Store the structure in the 0 item to use outside this routine
            Else 
              MaterialCode$ = ""
            End If 
            GreeterQueueID = GreeterQueue.[n].rowid
            status = 0
            Try Search #ch_db;"DELETE FROM Greeter_Queue WHERE rowid=" + SQLV$(GreeterQueue.[n].rowid) Else Rem
            Exit Do 
          End If 
        End If 
      Case 'F40' To 'F47'
        i = Asc(w$) - Asc('F40')
        n = page * imax + i + 1
        ans = SAITouchConfirm("Please confirm deletion of " + Trim$(GreeterQueue.[n].Name$) + " entry.")
        If ans
          Try 
            Search #ch_db;"DELETE FROM Greeter_Queue WHERE rowid=" + SQLV$(GreeterQueue.[n].rowid)
          Else 
            Call SAITouchError("Error deleting entry from Greeter_Queue.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
          End Try 
          page = 0
          Call GreeterListDisplay(page)
        End If 
      Case 'F50' To 'F59' ! Display enlarged photo
        i = Asc(w$) - Asc('F50')
        n = page * imax + i + 1
        temp$ = "ID: " + GreeterQueue.[n].InYardID$ + ", " + GreeterQueue.[n].Name$
        chwin = SAIOpenWindow(temp$,900,290,1)
        If InYardDemo$ = "Y"
          w$ = i + 1 Using "SDT&&&&#.JPG"
        Else 
          w$ = "SD" + Str$(GreeterQueue.[n].rowid) + ".JPG"
        End If 
        Print #chwin;PChr$(JPThumbsLocation$ + w$,10,5,510,200);'FITIMAGE';
        Print #chwin;PChr$("Arial Mono for dl4");'FONTFACE 8FONTSIZE EBOLD WCSETFONT';
        Print #chwin;PChr$(30,520,5,890,255,"Greeter Info:",0);'WCTEXT';
        Print #chwin;PChr$(31,10,195,510,241,"",0);'WCTEXT';
        Print #chwin;PChr$("Arial");'FONTFACE BBOLD WCSETFONT';
        Print #chwin;PChr$(32,10,243,510,255,"",0);'WCTEXT';
        Print #chwin;'EBOLD 12FONTSIZE WCSETFONT';
        Call SAIButtons(chwin,2,1,"Select~&&Cancel",900,260,25,120,20)
        Print #chwin;PChr$(3,770,260,890,285,"Delete",2);'WCBUTTON';
        Print #chwin;PChr$("Arial Mono for dl4");'FONTFACE 8FONTSIZE WCSETFONT';
        Print #chwin;'30WCSELECT CU 15ST 32ST';
        Print #chwin;"ID:";'HT';GreeterQueue.[n].InYardID$;'CR'
        Print #chwin;"Supplier No:";'HT';GreeterQueue.[n].SupplierNo$;'CR'
        Print #chwin;"Name:";'HT';GreeterQueue.[n].Name$;'CR'
        Print #chwin;"Vehicle Info: ";'HT';GreeterQueue.[n].VehicleDesc$
        Print #chwin;"        Make: ";'HT';GreeterQueue.[n].VehicleMake$
        Print #chwin;"       Model: ";'HT';GreeterQueue.[n].VehicleModel$
        Print #chwin;"       Color: ";'HT';GreeterQueue.[n].VehicleColor$
        Print #chwin;"   Tag State: ";'HT';GreeterQueue.[n].VehicleTagState$;"   Number: ";GreeterQueue.[n].VehicleTagNo$;'CR'
        If GreeterQueue.[n].TrailerTagState$ Or GreeterQueue.[n].TrailerTagNo$
          Print #chwin;"Trailer Info: "
          Print #chwin;"   Tag State: ";'HT';GreeterQueue.[n].TrailerTagState$;"   Number: ";GreeterQueue.[n].TrailerTagNo$;'CR'
        End If 
        Print #chwin;"Material:";'HT';GreeterQueue.[n].MaterialCode$
        Print #chwin;'31WCSELECT CU';
        Try Print #chwin;"Entry Date:  ";DateUsing$(GreeterQueue.[i].CreatedDate#,dateformat$ + " HH:NN") Else Rem
        Print #chwin;'0WCSELECT 2WCFOCUS';
        Do 
          Input #chwin; Len (1);w$
          Select Case w$
            Case 'F1' ! Select
              status = 0
              Exit Do 
            Case 'F2' ! Cancel
              status = 1
              Exit Do 
            Case 'F3' ! Delete this entry
              ans = SAITouchConfirm("Please confirm deletion of " + Trim$(GreeterQueue.[n].Name$) + " entry.")
              If ans
                Try 
                  Search #ch_db;"DELETE FROM Greeter_Queue WHERE rowid=" + SQLV$(GreeterQueue.[n].rowid)
                Else 
                  Call SAITouchError("Error deleting entry from Greeter_Queue.\15\" + Msc$(2) + "\15\Program Line: " + Str$(Spc(10)))
                End Try 
                page = 0
                Call GreeterListDisplay(page)
                status = 1
                Exit Do 
              End If 
          End Select 
        Loop 
        Close #chwin
        If status = 0
          w$ = Chr$(Asc('F30') + i)
          Goto greeterlist_select
        End If 
    End Select 
  Loop 
  Close #chgr
End Sub 
Sub EditFrequents()
  chwin = SAIOpenWindow("Edit Frequent Lists",400,220,1)
  Print #chwin;SAIArialFont$();
  Print #chwin;'12FONTSIZE EBOLD WCSETFONT';
  x = 90 \ dx = 220
  y = 10 \ dy = 30
  Print #chwin;PChr$(1,x,y,x + dx,y + 25,"Frequent Suppliers",2);'WCBUTTON';
  y = y + dy
  Print #chwin;PChr$(2,x,y,x + dx,y + 25,"Frequent Customers",2);'WCBUTTON';
  y = y + dy
  Print #chwin;PChr$(3,x,y,x + dx,y + 25,"Frequent InterCo Customers",2);'WCBUTTON';
  y = y + dy
  Print #chwin;PChr$(4,x,y,x + dx,y + 25,"Frequent Carriers",2);'WCBUTTON';
  y = y + dy
  Print #chwin;PChr$(5,x,y,x + dx,y + 25,"Frequent Materials",2);'WCBUTTON';
  y = y + dy + 20
  Print #chwin;PChr$(6,x,y,x + dx,y + 25,"Exit",2);'WCBUTTON';
  Print #chwin;'6WCFOCUS';
  Do 
    Input #chwin; Len (1);w$
    Select Case w$
      Case 'F1'
        Call EditFrequentEntities("Supplier",FreqSupplier.[],status)
      Case 'F2'
        Call EditFrequentEntities("Customer",FreqCustomer.[],status)
      Case 'F3'
        Call EditFrequentEntities("InterCoCustomer",FreqIntCustomer.[],status)
      Case 'F4'
        Call EditFrequentEntities("Carrier",FreqCarrier.[],status)
      Case 'F5'
        Call EditFreqMaterial(status)
      Case 'F6'
        Exit Do 
    End Select 
  Loop 
  Close #chwin
End Sub 
Sub ProgramFunction(FunctionName$,repaint)
  Select Case FunctionName$
    Case "BOL"
      Call ReprintBOL()
      repaint = 0
    Case "DIRT"
      Dirt$ = "Y"
      Call Purchase("A",status)
      If status = 999
        repaint = 999
      Else If status = -1
        repaint = 0
      Else 
        repaint = 1
      End If 
    Case "EDITFREQUENTS"
      If AllowEditFrequents$ = "Y"
        Call EditFrequents()
      Else 
        Call SAITouchWarning("You are not permitted to edit the Frequent lists.")
      End If 
      repaint = 0
    Case "IDENTITY"
      Call SAICreateIdentity(z$,ch_db,ConfigFile$)
      repaint = 0
    Case "MANUAL","MANUALPURCHASE"
      Call Purchase("M",status)
      If status = 999
        repaint = 999
      Else If status = -1
        repaint = 0
      Else 
        repaint = 1
      End If 
    Case "MANUALSALE"
      Call Sale("M",status)
      If status = -1 Let repaint = 0 Else Let repaint = 1
    Case "SPLITLOAD"
      Call SalesSplitLoad(status)
      If status
        repaint = 0
        Exit Sub 
      Else 
        Call Sale("E",status)
        repaint = 1
      End If 
    Case "TICKETCOMMENT"
      Call TicketComment()
    Case "USAGE"
      Call Usage(status)
      If status
        repaint = 0
        Exit Sub 
      Else 
        Call Purchase("E",status)
        If status = 999 Let repaint = 999 Else Let repaint = 1
      End If 
    Case "VINDETAIL"
      Call EditVINDetail()
      repaint = 0
    Case "VOID"
      Call VoidTicket()
      repaint = 0
    Case Else 
      repaint = 0
  End Select 
End Sub 
